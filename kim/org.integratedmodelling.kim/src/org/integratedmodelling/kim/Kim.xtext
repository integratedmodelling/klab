grammar org.integratedmodelling.kim.Kim with org.eclipse.xtext.common.Terminals

generate kim "http://www.integratedmodelling.org/kim/Kim"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/*
 * Namespace is mandatory at the beginning, but we check at validation of the
 * first statement, so that special situations such as empty files or default 
 * namespaces are possible without errors.
 */
Model:
	observable=ObservableSemantics |
	namespace=Namespace? statements+=Statement*
;

Statement:
	conceptStatement=ConceptStatement ';' |
	modelStatement=ModelStatement ';' |
	upperOntologyStatement=UpperOntologyDefinition ';' |
	defineStatement=DefineStatement ';' |
	observeStatement=ObserveStatement ';' 
;

ModelStatement:
	 (annotations+=Annotation (annotations+=Annotation)*)? 
	 ((inactive?='void')? & ((projectPrivate?='project')? private?='private')?)? model=MODEL_TYPE body=ModelBodyStatement
;

DefineStatement:
	// ridiculous to split like this, but makes the highlighting logics work
	(annotations+=Annotation (annotations+=Annotation)*)? 'define' defineBody=DefinitionBody
;

DefinitionBody:
	(defineClass=LOWERCASE_ID)? name=(UPPERCASE_ID|LOWERCASE_ID) 'as' value=Value
;

ModelBodyStatement:
	(instantiator?='each')? 
		(
			(
				(urns+=Urn (',' urns+=Urn)*) | 
				number=Number | 
				concept=ConceptDeclaration |
				boolean=('true' | 'false') //| 
			)
			 => 'as'
		)? 
		/*
		 * If the observable is a single role, then concept must be the actual observable and we're reinterpreting it. Observables 
		 * besides the first may have annotations for the contextualizers to react to.
		 */
		 ( (name=LOWERCASE_ID | (observables+=AnnotatedObservableSemantics (',' observables+=AnnotatedObservableSemantics)*)))
		 (docstring=STRING)?
		 ('observing' dependencies+=Dependency (',' dependencies+=Dependency)* )?
		 ('observed' 'as' observer=ConceptDeclaration)?
		 ('using' /*  | merging?='merging')*/ contextualizers+=ValueExecution (',' contextualizers+=ValueExecution)*)?
		 (('classified' | discretization?='discretized') (('into' classification=Classification) | ('according' 'to' classificationProperty=PropertyId)))?
	     // arg ? means result field, arg * means ignore column. If not given, will match self in the first column and result in last, ignoring anything in between
		 (('lookup' 
		 	('(' lookupTableArgs+=LookupTableArgument (',' lookupTableArgs+=LookupTableArgument)* ')')?  
		 	'into' 
		 		(lookupTable=Table | lookupTableId=UPPERCASE_ID)
		 ) | 
		  (twoway?='match' 
		 	('(' lookupTableArgs+=LookupTableArgumentQualified ',' lookupTableArgs+=LookupTableArgumentQualified ')')?  
		 	'to' 
		 		(lookupTable=TwoWayTable | lookupTableId=UPPERCASE_ID)
		  )
		 )?
		 actions+=ActionSpecification*
		 ('metadata' metadata=Map)? 
;

LookupTableArgument:
	id=(LOWERCASE_ID | '?' | '*') |
	concept=ConceptDeclaration
;

LookupTableArgumentQualified returns LookupTableArgument:
	(key=('column'|'row') '=')? id=LOWERCASE_ID |
	(key=('column'|'row') '=')? concept=ConceptDeclaration
;

Classification:
	classifiers+=Classifier (=> ',' classifiers+=Classifier)*;

Classifier:
	declaration=ConceptDeclaration (otherwise?='otherwise' | ('if' | negated?='unless') classifier=ClassifierRHS)?;

ClassifierRHS:
	(boolean='true' | boolean='false') | 
	int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	num=Number | 
	'in' set=List | 
	string=STRING | 
	concept=ConceptDeclaration | 
	'(' toResolve+=ConceptDeclaration (=> ',' toResolve+=ConceptDeclaration)* ')' | 
	op=REL_OPERATOR expression=Number | 
	nodata='unknown' |
	star?='*';
	
ClassifierRHSWithId returns ClassifierRHS:
	(boolean='true' | boolean='false') | 
	int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	num=Number | 
	'in' set=List | 
	string=STRING | 
	concept=ConceptDeclaration | 
	id = (LOWERCASE_ID | PropertyId) |
	op=REL_OPERATOR expression=Number | 
	nodata='unknown' |
	star?='*';	
	
ClassifierRHSWithIdNoSet returns ClassifierRHS:
	(boolean='true' | boolean='false') | 
	int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	num=Number | 
//	'in' set=List | 
	string=STRING | 
	concept=ConceptDeclaration | 
	id = (LOWERCASE_ID | PropertyId) |
	op=REL_OPERATOR expression=Number | 
	nodata='unknown' |	
	star?='*';		
	
Urn:
	// String used when there are strange chars or keywords in the URN. Consecutive strings will be merged.
	name=(PathName|UrnId|LocalFilePath) | strings+=STRING+
;

// Lookup table literal
LookupTable: {LookupTable}
	'{{' table=(Table|TwoWayTable)? '}}'
;

Table:
	(headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*;

TwoWayTable returns Table:
	columnClassifiers=TwoWayHeaderRow SEPARATOR rows+=TableRow (',' rows+=TableRow)*;

HeaderRow:
	elements+=(LOWERCASE_ID|STRING) ('|' elements+=(LOWERCASE_ID|STRING))*
;

TableRow:
	elements+=TableClassifier ('|' elements+=TableClassifier)*
;

TwoWayHeaderRow returns TableRow:
	// ignore the first element
	(LOWERCASE_ID|TableClassifier) ('|' elements+=TableClassifier)+
;

TableClassifier returns ClassifierRHS:
	(boolean='true' | boolean='false') | 
	int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	num=Number | 
	quantity=Quantity |
	date=Date |
	'in' set=List | 
	string=STRING | 
	concept=ConceptDeclaration | 
	op=REL_OPERATOR expression=Number | 
	expr=EXPR |
	nodata='unknown' |
	star?='*' |
	anything?='#';

ActionSpecification:

	(integrated?='aggregated')? over?='over' 
		domain+=FunctionOrID (=> ',' (domain+=FunctionOrID))* 
		(actions+=Action (=> ',' actions+=Action)*)?
			
	  | 
		(trigger?='on' (
				initialization?='definition' | 
//				resolution?='resolution' | 
				instantiation ?= 'instantiation' | 
				termination ?='termination' | 
//				stateInitialization ?= 'initialization'| 
				event=ConceptDeclaration ('in' (anyContextEvent?='context' | (relatedEventContext?='related')) eventContext=ConceptDeclaration)?
		    ) 
		    (parameters = List)?
		)?
		actions+=Action (=> ',' actions+=Action)*
;

FunctionOrID:
	function=Function | functionId=(LOWERCASE_ID|NamespaceId);

Action:
	(set?='set') 
		assignments+=ValueAssignment (',' assignments+=ValueAssignment)*
		(=> ('if' | conditionNegative?='unless') condition=Value)? |
	integrate?='integrate'  
		assignments+=ValueAssignment (',' assignments+=ValueAssignment)*
		(=> ('if' | conditionNegative?='unless') condition=Value)? |
	do?=('do'|'then'|'finally')
		executed+=ValueExecution (',' executed+=ValueExecution)*
		(=> ('if' | conditionNegative?='unless') condition=Value)? |
	/*
	 * 'move away' sounds a lot nicer than 'die'
	 */
	move?='move' (where=Value | away?='away') (=> condition=Value)?;

ValueAssignment:
	((target = LOWERCASE_ID)? 'to')? assignedValue=ComputableValue
;

/*
 * this is made necessary by Xtext's inability of properly generating code when
 * superclasses come from imported grammars.
 */
ComputableValue:
	literal=LiteralOrIdOrComma |
	function=Function |
	expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))? |
	id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
	list=List |
	null?='unknown';
	
ValueExecution returns ValueAssignment:
	execValue=ExecutableValue ('for' target=LOWERCASE_ID)?
;
	
ExecutableValue returns ComputableValue:
	(
		function=Function |
		expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))? |
		urn=(UrnId|STRING) // |
//		model=Path
	) (('if'|conditionNegated?='unless') condition=Value)?
;

MODEL_TYPE:
	'model' |
	'learn' |
	'number' |
	'object' |
	'text' |
	'boolean' 
;

VALUE_OPERATOR:
	'>'  |
	'>=' |
	'<='|
	'<'|
	'where'|
	'=='|
	'='| 'only'|
	'without'|
	'!='|
	'plus'|
	'minus'|
	'times'|
	'over' |
	'by' 
;

/*
 * Namespace - entry point of all files. Only interactive sessions may start without this statement.
 * A namespace may be a scenario - if so, nothing changes except its models will never be used from
 * the DB unless the scenario is being computed (should be 'observe ... in scenario ....).
 */
Namespace:
	(annotations+=Annotation (annotations+=Annotation)*)?
	(
		((projectPrivate?='project')? private?='private')? & 
		(inactive?='void')?
	) 
	('namespace' | scenario?='scenario' | worldviewBound?='worldview') name=PathName (docstring=STRING)? 
	(
		('using' 'language' language=UPPERCASE_ID)? & 
		('using' imported+=Import (=> ',' imported+=Import)*)? & 
		('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)? & 
		('covering' coverage+=Function (=> ',' coverage+=Function)*)? &
		('in' 'domain' (rootDomain?='root' | domainConcept=Concept))? & 
		('disjoint' 'with' disjointNamespaces+=PathName (',' disjointNamespaces+=PathName)* )? & 
		('version' version=VersionNumber)? & 
		('resolve' ('from' lookupNamespace+=PathName*)? & ('outside' blacklistNamespace+=PathName*)? & ('using' weights=Map)?)?
	)
	('observed' 'as' observer=ConceptDeclaration)?
	('parameters' parameters=Map)? 
	('metadata' metadata=Map)? 
	';';

OwlImport:
	name=STRING ('as' prefix=LOWERCASE_ID) |
	(single=PathName | imports=List) 'from' urn=UrnId;	

Import:
	((imports=List | star?='*') 'from')? name=PathName/*[Namespace|PathName]*/;	

/**
 * URN is 4 sections: node (or 'klab' for internal resources), catalog (or adapter for internal resources), namespace and
 * resource ID. Admits a version number and a fragment (with only lowercase_id chars in it). It is
 * legal, but not required, to start with the default prefix urn:klab:. The 4th path element (the ID) may be
 * integer.
 */
UrnId:
	('urn:klab:')? PathName ':'  PathName ':' PathName ':' (Path|INT) (':' VersionNumber)? ('#' (Path|UrnKvp) ('&' (Path|UrnKvp))*)?;
	
WellFormedUrnId:
	PathName ':'  PathName ':' PathName ':' (PathName) (':' VersionNumber)? ('#' (Path|UrnKvp))?;	

WellFormedUrnIdWithFragment:
	PathName ':'  PathName ':' PathName ':' (PathName) (':' VersionNumber)? '#' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING);	
	
UrnKvp:
	PathName '=' (Path|INT)
;	
	
/**
 * Local file paths become locally based URNs and can be used wherever URNs are accepted. Their interpretation depends
 * on whether there is an encoder for their file extension.
 */	
LocalFilePath:
	(CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID) ('/' (CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID))* ('.' LOWERCASE_ID)? ('#' LOWERCASE_ID)?
;	
	
ObserveStatement:
	(annotations+=Annotation (annotations+=Annotation)*)? 'observe' body=ObserveStatementBody
;
		
/**
 * FIXME the child observation in parenthesis conflicts with a standard declaration and cannot be
 * specified.
 */
ObserveStatementBody:
	(urn=Urn 'as')?
	concept=NamedObservableSemantics
		(docstring = STRING)?
		('extends' parents+=PathName (',' parents+=PathName)*)?
		((
			'observing' 
				// validator will ensure that the semantics has an associated value
				( states+=ObservableSemantics) (',' states+=ObservableSemantics)*
		)? &
		(
			'children' 
				// validator will ensure that the semantics has an associated value
				( '(' observations+=ObserveStatementBody ')') (',' '(' observations+=ObserveStatementBody ')')*
		)?) 
		(actions+=ActionSpecification*) &
		('using' (accessor=Function)?)? &
		('metadata' metadata=Map)? 
;


/**
 * Observable semantics is a concept declaration with optional observation semantics and formal name.
 */
ObservableSemantics:
	// value may be an ID and in that case it can be used in models as an attribute for the URN as long
	// as the ID is not defined in the namespace.
	(value=LiteralValueWithConcept 'as')?
	(generic?='any')?
	declaration=ConceptDeclaration
	(
		('according' 'to' accordingTo=PropertyId)? &
		(
			(=> 'in' (unit=Unit | currency=Currency)) |
			(=> 'per' unit=Unit)
		)? &
		(=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		(optional?='optional'| 'required')? &
//		(default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		(from=Number 'to' to=Number)? &
		('named' name=(LOWERCASE_ID|STRING))?
	);

/*
 * Used for constraints and values: has no value and admits the additional qualifiers to specify 
 * the level of generality w.r.t. subclasses. Removes 'according to' but leaves value operators
 */
SimpleObservableSemantics returns ObservableSemantics:
	(generic?='any' | global?='all' | exclusive?='only')?
	declaration=ConceptDeclaration
	( =>
		( =>
			(=> 'in' (unit=Unit | currency=Currency)) |
			(=> 'per' unit=Unit)
		)? &
		(=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		(from=Number 'to' to=Number)? 
	);

ValueOperator:
	(modifier=VALUE_OPERATOR | downTo='down' 'to') 
		(comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration | ('(' comparisonObservable=ObservableSemantics ')')) |
	total='total' | 
	averaged='averaged' | 
	summed='summed'
;

/** 
 * Same as full observable semantics above but with annotations and without 'as' (using 
 * contextualizer-specific annotations for role in models).
 */
AnnotatedObservableSemantics returns ObservableSemantics:
	annotations += Annotation*
	(value=Value 'as')?
	(generic?='any')?
	declaration=ConceptDeclaration
	(
		('according' 'to' accordingTo=PropertyId)? &
		(
			('in' (unit=Unit | currency=Currency)) |
			('per' unit=Unit)
		)? &
		(valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		(optional?='optional'| 'required')? &
//		(default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		(from=Number 'to' to=Number)? &
		('named' name=(LOWERCASE_ID|STRING))?
	);

Dependency:
	annotations += Annotation*
	((
		modelReference=(LOWERCASE_ID|PathName|UrnId|STRING) |
		observable=DependencyObservableSemantics (options+=Option (options+=Option)*)?
		
	) |
	(
		'(' 
			alternativeObservables+=AlternativeDependencyObservableSemantics (',' alternativeObservables+=AlternativeDependencyObservableSemantics)*
		')' 
		(optional?='optional'| 'required')? &
//		(default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		'named' name=(LOWERCASE_ID|STRING)
	))
;

ConceptDeclaration:
	
	main+=Concept+ 
		// binary semantic operators; also 'as', 'by' and 'follows' handled in other rules
		(=>
			// primary physical inherency (observational inherency is given using 'within'). Any observable can be inherent to any countable.
			('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))? &
			// purpose (achievement event created from target). Partitions qualities and applies to anything that can be created.
			('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))? &
			// compresence (subject, process, event, presence or partitioned quality)
			('with' compresent=SimpleConceptDeclaration)? &
			// cause towards self - causant can be anything (?)
			('caused' 'by' causant=SimpleConceptDeclaration)? &
			// spatial adjacency (see 'follows' operator for temporal adjacency in events) - Only for countables
			('adjacent' 'to' adjacent=SimpleConceptDeclaration)? &
			// being contained - Countables only
			('contained' 'in' container=SimpleConceptDeclaration)? &
			// containing - Countables only
			('containing' contained=SimpleConceptDeclaration)? &
			// cause towards events, processes, quality partitions
			('causing'   caused=SimpleConceptDeclaration)? &
			// concomitant with any occurrent
			('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))? &
			// observational inherency: specifies context for observations, either as part of semantics or to 
			// subclass the use of a model to a specified context. Applies to any observable, only countables as argument
			('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))? &
			// for relationships: specialize source and target types, both subjects
			('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
		)?
;

ConceptReference:
	name=AuthorityId |
	name=CAMELCASE_ID | 
	name=NamespaceId  |
	templateType=('${' | '#{') (
			// identifiers for target of semantic ops; also used to connect to UO with 'model' statements
			extends=Concept ':' name='context'     |
			extends=Concept ':' name='inherent'    |
			extends=Concept ':' name='compresent'  |
			extends=Concept ':' name='adjacent'    |
			extends=Concept ':' name='container'   |
			extends=Concept ':' name='contained'   |
			extends=Concept ':' name='purpose'     |
			extends=Concept ':' name='causant'     |
			extends=Concept ':' name='caused'      |
			extends=Concept ':' name='cooccurrent' 
		) template?='}'
;

OPERATOR_TARGET:
	'context'|
	'inherent'   |
	'compresent' |
	'adjacent'   |
	'container'  |
	'contained'  |
	'purpose'    |
	'causant'    |
	'caused'     |
	'cooccurrent'
;

Concept:
	(negated?=('not'|'no'))? name=ConceptReference 
		// if the following is there, the name becomes an alias for the authority concept
		// DEPRECATED - use AUTHORITY:conceptexpr 
		(authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))? |
	// unary operators
	presence?='presence' 'of' concept=SimpleConceptDeclaration |
	count?='count' 'of' concept=SimpleConceptDeclaration |
	distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration |
	probability?='probability' 'of' concept=SimpleConceptDeclaration |
//	assessment?='assessment' 'of' concept=SimpleConceptDeclaration |
	'change' (change?='in' | (rate?='rate' 'of')) concept=SimpleConceptDeclaration |
	changed?='changed' concept=SimpleConceptDeclaration 
		(=> 'from' changedFrom=SimpleConceptDeclaration 'to' changedTo=SimpleConceptDeclaration)? |
	uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration |
	magnitude?='magnitude' 'of' concept=SimpleConceptDeclaration |
	level?='level' 'of' concept=SimpleConceptDeclaration |
	type?='type' 'of' concept=SimpleConceptDeclaration |
	observability?='observability' 'of' concept=SimpleConceptDeclaration |
	proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
	percentage?='percentage' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
	ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration |
	(monetary?='monetary')? value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? |
	occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration |
	'(' declaration=Expression ')';

Expression returns ConceptDeclaration:
	Term
;

Term returns ConceptDeclaration:
	Factor (operators+='or' operands+=Factor)*
;
Factor returns ConceptDeclaration:
	// semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
	ConceptDeclaration (operators+=('and'|'follows') operands+=Term)*
;

/*
 * Declaration without inherency and context, used in Concept to ensure that
 * the 'within' and 'of' remain outer-level unless parenthesesized.
 */
SimpleConceptDeclaration returns ConceptDeclaration:
	(name=STRING)? main+=Concept+
;

/*
 * statement to connect specialized type or target of relationship to upper ontology
 */
UpperOntologyDefinition:
	'model'
	(
		(
			((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent') |
			(propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)* concept = 'relationship')?)
			'using' coreconcept=(NamespaceId|PropertyId)		
		) | 
		(
			operand=OPERATOR_TARGET 'using' property=(PropertyId|NamespaceId)
		)
	)
;

ConceptStatement:
	annotations += Annotation*
	((abstract?='abstract')? &
	 (deniable?='deniable')? &
	 (subjective?='subjective')? &
	 (agentSpecifier=('deliberative' | 'interactive' | 'reactive') |
		(propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)*) |
		attributeSpecifier='rescaling')?)
	concept=CONCEPT_TYPE body=ConceptStatementBody

	// this is tautological and not meant to be used, just putting the
	// name field in the model so that it can be filled for cross-referencing
	// TODO is there a better way?
	('named' name=NamespaceId)?;

/*
 * ------------------------------------------------------------------------------------------
 * Ontology language - basically a more intuitive and imperative OW2L/Manchester syntax. Does not
 * cover all of OWL2 yet, but should be plenty for modeling. 
 * 
 * deniable is for traits only. If a trait is deniable, 'not Trait' is a trait (of not being Trait).
 * if not deniable, 'not Trait' means being any of the other concrete traits; if there is only one 
 * concrete trait it's an error. If there are two, it means being the other.
 * 
 * Many of the verbs like "confers" or "creates" can also qualify actions in k.Actors, so that
 * attributes and objects can be assigned/created/destroyed (and resolved) as the result of
 * behavior actions.
 *
 * ------------------------------------------------------------------------------------------
 */
ConceptStatementBody:
	// FIXME shouldn't have to repeat these two. Mostly to keep the underlying ECore neat at the children.
	annotations += Annotation*
	(abstract?='abstract')?
	(root?='root' | name=CAMELCASE_ID ('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?)
	(
		(docstring=STRING)? &

	/*
			   * child of. Allows "nothing" as the only root-level parent for very special purposes.
			   * Using 'extends' allows to reuse the subclasses of the extended concept and prevents 
			   * adding children of its own (a 'foster parent' of sorts). It should only be permitted for 
			   * subjective orderings.
			   */
		((('is' | alias?='equals') (coreConcept?='core')?) (nothing?='nothing' | parents+=ConceptDeclaration (connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))? &

//	/*
//     * traits contextualized. Only applicable to
//     * classes. Abstract class must declare exposed traits; concrete class must
//     * provide matching values using 'exposing'
//     */
//		(
//			('exposes' contextualizedTraits+=ObservableSemantics (','  contextualizedTraits+=ObservableSemantics)*) |
//			(specific?='exposing' contextualizesTraits+=ConceptDeclaration (','  contextualizesTraits+=ConceptDeclaration)*)
//		)? &

	/*
     * identifies main concepts for authority
     * 
     * First-class concepts in the root domain can also rebase the 
     * foundational concepts in the observation ontology.
     */
		('defines' (('authority' definedAuthority=(UPPERCASE_ID|UPPERCASE_PATH)) | upperConcept=Concept))? &

	/*
               * requires identity, context or realm.
               */
		('requires' requirements+=IdentityRequirement (',' requirements+=IdentityRequirement)*)? &

		/*
		 * Various forms of link between an attribute (or quality) and a quality. Describes is the least
		 * specific: others, such as direct and inverse proportionality, flagging and classifications
		 * provide more detail and allow more inferences and validation in models.
		 */
		// just establish a link
		('describes' describedQuality=ConceptDeclaration  ('as' descriptionConstraints=DescriptionConstraints)? )? &
		// for quantity, direct and inverse proportionalities, use with orderings or qualities
		('increases' 'with' describedProportionality=ConceptDeclaration)? &
		('decreases' 'with' describedInverseProportionalityQuality=ConceptDeclaration)? &
		// must be deniable and relate to a quantity
		('marks' describedNonzeroQuality=ConceptDeclaration)? &
		// any quality
		('classifies' classifiesQuality=ConceptDeclaration)? &
		// only for quantities
		('discretizes' discretizesQuality=ConceptDeclaration)? &

	/*
               * Traits that ARE inherited by this concept. Long version of <trait> <concept> for
               * reading clarity if no 'within' part is given.
               * 
               * If the 'within' part is given, the concept is not given any traits but the specified
               * traits are inherited by the observables of any observation of this concept made within
               * those contexts. This will add a restriction to the restrictedObservable rather than 
               * modify this concept.
               * 
               * Not allowed for class (types) which should use 'contextualizes'.
               */
		('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)? &

	/*
               * Roles within a context. The concept is not given any traits but the specified
               * traits are inherited by the observables of any observation of this concept made within
               * those contexts. This will add a restriction to the restrictedObservable rather than 
               * modify this concept, and Thinklab will use the restrictions to attribute traits
               * after resolution.
               * 
               * 'in' specifies a context (often a process if role is dynamic but can be a subject or event)
               * 'for' (optional) specifies a target subject/event type within the context; the context itself
               *       is used if not specified.
               */
		('has' 'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)*
			/* FIXME 'for' here causes unexplained issues when 'for' in concept declarations is used, although there should be
			 * complete independence between the declarations. */
			('targeting' targetObservables+=ConceptDeclaration (',' targetObservables+=ConceptDeclaration)*)?
			('in' restrictedObservables+=ConceptDeclaration (',' restrictedObservables+=ConceptDeclaration)*))? &

	/*
               * for processes: confer given trait(s) [or role(s)] to (participant subjects).
               */
		('confers' conferredTraits+=ConceptDeclaration (',' conferredTraits+=ConceptDeclaration)*
			('to' conferredTargets+=ConceptDeclaration (',' conferredTargets+=ConceptDeclaration)*)?
		)? &
		
		/*
		 * explicit declaration of triggers for emergent observables (subjects, processes and configuration)
		 */
		('emerges' 'from' emergenceTriggers+=ConceptDeclaration (',' emergenceTriggers+=ConceptDeclaration)*)? &

	/**
	 * Shorthand for common 'part of' restriction. TODO deprecate? Part-of should be left to the worldview.
	 */
//	(('part' | constituent?='constituent' | constitutes?='consists') partOf?='of' whole=ConceptDeclaration)? &

	/*
     * for processes: creates quality. Also for structural relationships (creates subject) and functional relationships\
     * (creates process). Paired with "affects" for process -> quality.
     */
	('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)? &

	/*
     * traits can specify the set of allowed targets here. Also allows qualities and
     * processes to specify their inherent target.
     * 
     * If applying concept is a role and it applies to a relationship, this can also restrict the source and destination.
     */
	('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)? &

	/*
	 * only for relationships: set domain and range of the associated property.
	 */
	('links' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration 
			(',' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration)*)? &

	/*
	 * only for relationships - set the inverse of the associated property (through the
	 * relationship concept).
	 */
//	('inverse' 'of' inverse=ConceptDeclaration)? &

	/*
     * for processes; lists qualities affected;
     * for deliberative agents: lists the subject types whose states this can
     * modify.
     */
	('affects' qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)? &

	('has' (disjoint?='disjoint')? 'children' children+=ChildConcept (',' children+=ChildConcept)*)? &
	
	('implies' implications+=Implication (',' implications+=Implication)*)? &
	
	('uses' 'authority' authorities+=(UPPERCASE_ID|UPPERCASE_PATH))? &

	('metadata' metadata=Map)? &

	// properties are only object properties and are declared on appearance. This makes typos
	// problematic, of course, but the alternative is a load of ugly syntax.
	(properties+=PropertyStatement*) 
	
	)
;

DescriptionConstraints:
	lower=Number ('to' higher=Number)? ('in' (currency=Currency | unit=Unit))? |
	concept=SimpleConceptDeclaration
;

Implication:
	(quantifier=Quantification)? concept=ConceptDeclaration 
	     /*(*/('as' target=ConceptDeclaration)? /* & ('within' context=ConceptDeclaration)?)?  */
;

Quantification: {Quantification}
	(only?='only' | (exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')? )? 
;

PropertyStatement:
	(property=(PropertyId|BACKCASE_ID) | has?='has' | contains?='contains' | uses?='uses')
		(only?='only' | (exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')? )? 
		propertyTarget=SimpleConceptDeclaration
;

ApplicableTarget:
	target=ConceptDeclaration ('between' linkFrom=ConceptDeclaration 'and' linkTo=ConceptDeclaration)?
;

ChildConcept returns ConceptStatementBody:
	(abstract?='abstract')? name=CAMELCASE_ID |
	'(' ConceptStatementBody ')';
	
IdentityRequirement:
	type=('identity' | 'attribute' | 'realm' | 'extent') identities+=ConceptDeclaration (',' identities+=ConceptDeclaration)* |
	 'authority' authority=(UPPERCASE_ID|UPPERCASE_PATH)
	;

/*
 * Ultra-simple restriction statements:
 *
 * uses [only] CCC [for PPP]; // PPP can be a property or a concept
 * uses at [least|most] 1 CCC [for PPP]
 * uses exactly 1 CCC [for PPP]
 * uses 120 for PPP // data property
 *
 * uses = has; requires = functional has; contains = part-of (contextually resolved). implies is only for roles.
 * 
 * if PPP is a concept (much more intuitive), must be restricting a known one and hasPPP is created (or used).
 * 
 * Also hosts the 'uses authority' restriction which is only accepted by domains.
 * 
 */
//RestrictionStatement:
//	relType=('uses' | 'has' | 'contains' | 'implies') definitions+=RestrictionDefinition (',' definitions+=RestrictionDefinition)* |
//	'uses' 'authority' authorities+=(UPPERCASE_ID|UPPERCASE_PATH) (=> ',' authorities+=(UPPERCASE_ID|UPPERCASE_PATH))* |
//	'uses' value=Literal literal?='for' subject=(CAMELCASE_ID | NamespaceId);
//	
//RestrictionDefinition:
//	// concept restriction: the 'for' should introduce a concept, for a property defined by k.LAB
//	(only?='only' | none?='no' | ((exactly?='exactly' | ('at' atLeast?='least') | ('at' atMost?='most')) howmany=INT))?
//	(source=ConceptDeclaration | dataType=DataType) ('inheriting' traitType=ConceptDeclaration)?
//	('as' (subject=ConceptDeclaration))? /*|
//	// data restriction, only for special cases in worldview namespaces; 'for' introduces a data property from core ontologies
//	value=Literal ('to' maxValue=Number)? 'for' property=PropertyId */
//;

Annotation:
	name=ANNOTATION_ID (=> '(' parameters=ParameterList? ')')?;

List:
	{List} '(' contents+=ValueWithIdAndConcept? ((',')? contents+=ValueWithIdAndConcept)* ')';

Literal:
	 from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false');

LiteralOrID returns Literal:
	number=Number | string=STRING | boolean=('true' | 'false') | id=ID;

LiteralOrIdOrComma returns Literal:
	 from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=',';

Map:
	{Map} '{' (entries+=MapEntry (=> (',')? entries+=MapEntry)*)? '}'
;

MapEntry:
	// must remove 'in (...)' from classifiers to avoid conflict with observable units, which are more necessary.
	classifier=ClassifierRHSWithIdNoSet ':' value=ValueWithIdAndConcept
;

DocSelector:
	id=PropertyId |
	'on' (
		definition?='definition' |
		initialization?='initialization' |
		termination?='termination' |
		transition?='transition'
	)
;

KeyValuePair:
	name=(PathName | LOWERCASE_ID | 'value') (interactive?='?=' | '=') value=ValueWithIdAndConcept;

ParameterList:
	pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)* |
	singleValue+=ValueWithIdAndConcept (=> ',' (singleValue+=ValueWithIdAndConcept | pairs+=KeyValuePair))*
;

ValueWithIdAndConcept returns Value:
	map=Map |
	concept=SimpleObservableSemantics |
	function=Function |
	date=Date |
	literal=Literal |
	expr=EXPR |
	templatevar=TEMPLATE_VAR |
	id=(PathName|LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
	table=LookupTable |
	list=List |
	quantity=Quantity |
	op=REL_OPERATOR expression=Number | 
	null?='unknown';

Value:
	literal=LiteralOrIdOrComma |
	function=Function |
	expr=EXPR ('in' language=UPPERCASE_ID)? |
	id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
	list=List |
	table=LookupTable |
	quantity=Quantity |
	date=Date |
	map=Map |
	null?='unknown';

// value for 'value as observable' idioms
LiteralValueWithConcept returns Value:
	literal=Literal |
	concept=ConceptDeclaration |
	function=Function |
	expr=EXPR |
	quantity=Quantity |
	date=Date |
	id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) /* |
	list=List |
	table=LookupTable |
	map=Map */;	
	
Function:
	name=PathName '(' parameters=ParameterList? ')';
	
// expression starting with # forces scalar evaluation
terminal EXPR:
	('['|'#[') ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | ']' | '\\') | !('\\' | ']'))* ']';
	
//enum DataType:
//	TEXT='text' |
//	INTEGER='integer' |
//	FLOAT='float' |
//	BOOLEAN='boolean' |
//	DATE='date';

Option:
	key=OPTION_KEY value=ValueWithIdAndConcept
;

terminal OPTION_KEY:
	'?'('a'..'z') ('a'..'z' | '0'..'9')*;

//RESOLUTION_EXCEPTION:
//	'error' |
//	'nodata' |
//	'missing'
//;

/**
 * Carefully selected keywords to define a concept, which enable automatic definition of
 * fairly complex semantics and validation against upper ontologies. For now implement
 * physical properties, value concepts and basic agent types re: DOLCE types.
 * 
 * A similar thing could be done for properties
 * 
 * This is a lot of keywords, although it's probably good to protect these names from
 * being used as identifiers in anything.
 */
CONCEPT_TYPE:
	'quality' |
	DECLARABLE_TYPE
;

DECLARABLE_TYPE:
	'class' |
	'quantity' |
	'configuration' |
	'relationship' |
	'bond' |
	'extent' |
	EXTENSIVE_PROPERTY |
	INTENSIVE_PROPERTY |
	AGENT_TYPE |
	TRAIT
;	
TRAIT:
	'ordering' |
	'attribute' |
	'identity' |
	'role' |
	'realm' |
	'domain';
EXTENSIVE_PROPERTY:
	'amount' |
	'length' |
	'mass' |
	'volume' |
	'weight' |
	'money' |
	'duration' |
	'area';
INTENSIVE_PROPERTY:
	'acceleration' |
	'energy' |
	'entropy' |
	'priority' |
	'electric-potential' |
	'charge' |
	'resistance' |
	'resistivity' |
	'pressure' |
	'angle' |
	'velocity' |
	'temperature' |
	'viscosity';
AGENT_TYPE:
	'thing' |
	'process' |
	'agent' |
	'event';
PROPERTY_TYPE:
	'functional' |
	'structural';
	
terminal ANNOTATION_ID:
	'@' LOWERCASE_ID;



/*
 * Full observable without the 'as <role>' but with 'optional'
 */
DependencyObservableSemantics returns ObservableSemantics:
	
	(value=LiteralValueWithConcept 'as')?
	(generic?='any')?
	declaration=ConceptDeclaration
	(
		('according' 'to' accordingTo=PropertyId)? &
		(
			('in' (unit=Unit | currency=Currency)) |
			('per' unit=Unit)
		)? &
		(from=Number 'to' to=Number)? &
		(valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		(optional?='optional'| 'required')? &
//		(default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		('named' name=(LOWERCASE_ID|STRING))?
	);

/*
 * As above but meant for groups, so without name (supplied outside the group) and optional, but with
 * an optional condition for switching
 */
AlternativeDependencyObservableSemantics returns ObservableSemantics:
	
	(value=LiteralValueWithConcept 'as')?
	(generic?='any')?
	declaration=ConceptDeclaration
	(
		('according' 'to' accordingTo=PropertyId)? &
		(
			('in' (unit=Unit | currency=Currency)) |
			('per' unit=Unit)
		)? &
		(from=Number 'to' to=Number)? &
		(valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
	)
	('if' condition=EXPR)?;
	
/*
 * Observable with no quality semantics and mandatory name, for observations. Allows
 * dashes in name.
 */
NamedObservableSemantics returns ObservableSemantics:
	declaration=ConceptDeclaration 'named' name=(LOWERCASE_ID|LOWERCASE_DASHID|STRING);

/**
 * ---------------------------------------
 * Unit of measurement re: jsr-108, parseable by Java
 * ---------------------------------------
 */
REL_OPERATOR:
	(gt?='>' |
	lt?='<' |
	eq?='=' |
	ne?='!=' |
	le?='<=' |
	ge?='>=');

enum UnitOp:
	OVER='/' | CARET='^' | STAR='*';

UnitElement:
	id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID) |
	'(' unit=Unit ')';

Unit:
	{Unit} (root=UnitElement)? (=> (connectors+=UnitOp) (units+=UnitElement))*;

Currency:
	id=UPPERCASE_ID ('@' year=INT) (=> '/' (units+=UnitElement))*;

Number:
	('+' | negative?='-')? => real=INT (=> long?='l')? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?;

Quantity:
	value=Number (over?='/' | '.') (unit=Unit | currency=Currency)
;

Date:
	year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
;

//terminal UNIT_ID:
//	'℃' | '°' | 'Ω' | 'm²' | '㎥' | '°F' | '°C'
//;
//
//terminal UNIT_NAME:
//	(\u03bc)? (CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID|UNIT_ID)
//;

terminal TEMPLATE_VAR:
	'%' ('a'..'z') ('a'..'z' | '0'..'9'| '_')* '%'
;

terminal LOWERCASE_ID:
	('a'..'z') ('a'..'z' | '0'..'9'| '_')*;

terminal LOWERCASE_DASHID:
	('a'..'z') ('a'..'z' | '0'..'9'| '-')*;

PathName:
	(LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID) ('.' (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID))*
;

Path:
	(LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID) (('.' | '/') (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID))*
;

terminal SEPARATOR:
	'---' ('-')*
;

terminal UPPERCASE_ID:
	('A'..'Z') ('A'..'Z' | '0'..'9' | '_')+;

//// number with a prefix, for versions and the like
//terminal UPPERCASE_ID_NUM:
//	('A'..'Z')+ ('0'..'9')('A'..'Z'|'0'..'9')+;

terminal UPPERCASE_PATH:
	UPPERCASE_ID ('.' (UPPERCASE_ID|INT))*;

terminal CAMELCASE_ID:
	('A'..'Z') ('A'..'z'|'0'..'9')*;

terminal BACKCASE_ID:
	('a'..'z') ('A'..'z'|'0'..'9')*;
	
NamespaceId:
	PathName ':' CAMELCASE_ID;
	
AuthorityId:
	(UPPERCASE_PATH|UPPERCASE_ID) ':' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING) ('.' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING))* |
	WellFormedUrnIdWithFragment
;

PropertyId:
	(PathName | LOWERCASE_ID) ':' (LOWERCASE_ID|BACKCASE_ID|LOWERCASE_DASHID);

VersionNumber:
	INT ('.' INT ('.' INT)?)? ('-')? ((LOWERCASE_ID|UPPERCASE_ID))?
;

