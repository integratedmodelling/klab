/*
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.26.0
 */
package org.integratedmodelling.kim.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KimGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cObservableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cObservableObservableSemanticsParserRuleCall_0_0 = (RuleCall)cObservableAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNamespaceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNamespaceNamespaceParserRuleCall_1_0_0 = (RuleCall)cNamespaceAssignment_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		
		///*
		// * Namespace is mandatory at the beginning, but we check at validation of the
		// * first statement, so that special situations such as empty files or default
		// * namespaces are possible without errors.
		// */
		//Model:
		//    observable=ObservableSemantics |
		//    namespace=Namespace? statements+=Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//observable=ObservableSemantics |
		//namespace=Namespace? statements+=Statement*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//observable=ObservableSemantics
		public Assignment getObservableAssignment_0() { return cObservableAssignment_0; }
		
		//ObservableSemantics
		public RuleCall getObservableObservableSemanticsParserRuleCall_0_0() { return cObservableObservableSemanticsParserRuleCall_0_0; }
		
		//namespace=Namespace? statements+=Statement*
		public Group getGroup_1() { return cGroup_1; }
		
		//namespace=Namespace?
		public Assignment getNamespaceAssignment_1_0() { return cNamespaceAssignment_1_0; }
		
		//Namespace
		public RuleCall getNamespaceNamespaceParserRuleCall_1_0_0() { return cNamespaceNamespaceParserRuleCall_1_0_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_1_0() { return cStatementsStatementParserRuleCall_1_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cConceptStatementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cConceptStatementConceptStatementParserRuleCall_0_0_0 = (RuleCall)cConceptStatementAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cModelStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cModelStatementModelStatementParserRuleCall_1_0_0 = (RuleCall)cModelStatementAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cUpperOntologyStatementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cUpperOntologyStatementUpperOntologyDefinitionParserRuleCall_2_0_0 = (RuleCall)cUpperOntologyStatementAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cDefineStatementAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDefineStatementDefineStatementParserRuleCall_3_0_0 = (RuleCall)cDefineStatementAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cObserveStatementAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cObserveStatementObserveStatementParserRuleCall_4_0_0 = (RuleCall)cObserveStatementAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Statement:
		//    conceptStatement=ConceptStatement ';' |
		//    modelStatement=ModelStatement ';' |
		//    upperOntologyStatement=UpperOntologyDefinition ';' |
		//    defineStatement=DefineStatement ';' |
		//    observeStatement=ObserveStatement ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//conceptStatement=ConceptStatement ';' |
		//modelStatement=ModelStatement ';' |
		//upperOntologyStatement=UpperOntologyDefinition ';' |
		//defineStatement=DefineStatement ';' |
		//observeStatement=ObserveStatement ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//conceptStatement=ConceptStatement ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//conceptStatement=ConceptStatement
		public Assignment getConceptStatementAssignment_0_0() { return cConceptStatementAssignment_0_0; }
		
		//ConceptStatement
		public RuleCall getConceptStatementConceptStatementParserRuleCall_0_0_0() { return cConceptStatementConceptStatementParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//modelStatement=ModelStatement ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//modelStatement=ModelStatement
		public Assignment getModelStatementAssignment_1_0() { return cModelStatementAssignment_1_0; }
		
		//ModelStatement
		public RuleCall getModelStatementModelStatementParserRuleCall_1_0_0() { return cModelStatementModelStatementParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//upperOntologyStatement=UpperOntologyDefinition ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//upperOntologyStatement=UpperOntologyDefinition
		public Assignment getUpperOntologyStatementAssignment_2_0() { return cUpperOntologyStatementAssignment_2_0; }
		
		//UpperOntologyDefinition
		public RuleCall getUpperOntologyStatementUpperOntologyDefinitionParserRuleCall_2_0_0() { return cUpperOntologyStatementUpperOntologyDefinitionParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//defineStatement=DefineStatement ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//defineStatement=DefineStatement
		public Assignment getDefineStatementAssignment_3_0() { return cDefineStatementAssignment_3_0; }
		
		//DefineStatement
		public RuleCall getDefineStatementDefineStatementParserRuleCall_3_0_0() { return cDefineStatementDefineStatementParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//observeStatement=ObserveStatement ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//observeStatement=ObserveStatement
		public Assignment getObserveStatementAssignment_4_0() { return cObserveStatementAssignment_4_0; }
		
		//ObserveStatement
		public RuleCall getObserveStatementObserveStatementParserRuleCall_4_0_0() { return cObserveStatementObserveStatementParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class ModelStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ModelStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0_0 = (RuleCall)cAnnotationsAssignment_0_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_1_0 = (RuleCall)cAnnotationsAssignment_0_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cInactiveAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cInactiveVoidKeyword_1_0_0 = (Keyword)cInactiveAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Assignment cProjectPrivateAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cProjectPrivateProjectKeyword_1_1_0_0 = (Keyword)cProjectPrivateAssignment_1_1_0.eContents().get(0);
		private final Assignment cPrivateAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_1_1_0 = (Keyword)cPrivateAssignment_1_1_1.eContents().get(0);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelMODEL_TYPEParserRuleCall_2_0 = (RuleCall)cModelAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyModelBodyStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//ModelStatement:
		//     (annotations+=Annotation (annotations+=Annotation)*)?
		//     ((inactive?='void')? & ((projectPrivate?='project')? private?='private')?)? model=MODEL_TYPE body=ModelBodyStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations+=Annotation (annotations+=Annotation)*)?
		//((inactive?='void')? & ((projectPrivate?='project')? private?='private')?)? model=MODEL_TYPE body=ModelBodyStatement
		public Group getGroup() { return cGroup; }
		
		//(annotations+=Annotation (annotations+=Annotation)*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0_0() { return cAnnotationsAssignment_0_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0_0; }
		
		//(annotations+=Annotation)*
		public Assignment getAnnotationsAssignment_0_1() { return cAnnotationsAssignment_0_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_1_0() { return cAnnotationsAnnotationParserRuleCall_0_1_0; }
		
		//((inactive?='void')? & ((projectPrivate?='project')? private?='private')?)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//(inactive?='void')?
		public Assignment getInactiveAssignment_1_0() { return cInactiveAssignment_1_0; }
		
		//'void'
		public Keyword getInactiveVoidKeyword_1_0_0() { return cInactiveVoidKeyword_1_0_0; }
		
		//((projectPrivate?='project')? private?='private')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(projectPrivate?='project')?
		public Assignment getProjectPrivateAssignment_1_1_0() { return cProjectPrivateAssignment_1_1_0; }
		
		//'project'
		public Keyword getProjectPrivateProjectKeyword_1_1_0_0() { return cProjectPrivateProjectKeyword_1_1_0_0; }
		
		//private?='private'
		public Assignment getPrivateAssignment_1_1_1() { return cPrivateAssignment_1_1_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_1_1_0() { return cPrivatePrivateKeyword_1_1_1_0; }
		
		//model=MODEL_TYPE
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//MODEL_TYPE
		public RuleCall getModelMODEL_TYPEParserRuleCall_2_0() { return cModelMODEL_TYPEParserRuleCall_2_0; }
		
		//body=ModelBodyStatement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ModelBodyStatement
		public RuleCall getBodyModelBodyStatementParserRuleCall_3_0() { return cBodyModelBodyStatementParserRuleCall_3_0; }
	}
	public class DefineStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.DefineStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0_0 = (RuleCall)cAnnotationsAssignment_0_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_1_0 = (RuleCall)cAnnotationsAssignment_0_1.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefineBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefineBodyDefinitionBodyParserRuleCall_2_0 = (RuleCall)cDefineBodyAssignment_2.eContents().get(0);
		
		//DefineStatement:
		//    // ridiculous to split like this, but makes the highlighting logics work
		//    (annotations+=Annotation (annotations+=Annotation)*)? 'define' defineBody=DefinitionBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// ridiculous to split like this, but makes the highlighting logics work
		//(annotations+=Annotation (annotations+=Annotation)*)? 'define' defineBody=DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//// ridiculous to split like this, but makes the highlighting logics work
		//(annotations+=Annotation (annotations+=Annotation)*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0_0() { return cAnnotationsAssignment_0_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0_0; }
		
		//(annotations+=Annotation)*
		public Assignment getAnnotationsAssignment_0_1() { return cAnnotationsAssignment_0_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_1_0() { return cAnnotationsAnnotationParserRuleCall_0_1_0; }
		
		//'define'
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }
		
		//defineBody=DefinitionBody
		public Assignment getDefineBodyAssignment_2() { return cDefineBodyAssignment_2; }
		
		//DefinitionBody
		public RuleCall getDefineBodyDefinitionBodyParserRuleCall_2_0() { return cDefineBodyDefinitionBodyParserRuleCall_2_0; }
	}
	public class DefinitionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.DefinitionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefineClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefineClassLOWERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cDefineClassAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameUPPERCASE_IDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//DefinitionBody:
		//    (defineClass=LOWERCASE_ID)? name=(UPPERCASE_ID|LOWERCASE_ID) 'as' value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(defineClass=LOWERCASE_ID)? name=(UPPERCASE_ID|LOWERCASE_ID) 'as' value=Value
		public Group getGroup() { return cGroup; }
		
		//(defineClass=LOWERCASE_ID)?
		public Assignment getDefineClassAssignment_0() { return cDefineClassAssignment_0; }
		
		//LOWERCASE_ID
		public RuleCall getDefineClassLOWERCASE_IDTerminalRuleCall_0_0() { return cDefineClassLOWERCASE_IDTerminalRuleCall_0_0; }
		
		//name=(UPPERCASE_ID|LOWERCASE_ID)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(UPPERCASE_ID|LOWERCASE_ID)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//UPPERCASE_ID
		public RuleCall getNameUPPERCASE_IDTerminalRuleCall_1_0_0() { return cNameUPPERCASE_IDTerminalRuleCall_1_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_1_0_1() { return cNameLOWERCASE_IDTerminalRuleCall_1_0_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }
	}
	public class ModelBodyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ModelBodyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstantiatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInstantiatorEachKeyword_0_0 = (Keyword)cInstantiatorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Assignment cUrnsAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cUrnsUrnParserRuleCall_1_0_0_0_0 = (RuleCall)cUrnsAssignment_1_0_0_0.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cGroup_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_0_1_0 = (Keyword)cGroup_1_0_0_1.eContents().get(0);
		private final Assignment cUrnsAssignment_1_0_0_1_1 = (Assignment)cGroup_1_0_0_1.eContents().get(1);
		private final RuleCall cUrnsUrnParserRuleCall_1_0_0_1_1_0 = (RuleCall)cUrnsAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cNumberAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_1_0_1_0 = (RuleCall)cNumberAssignment_1_0_1.eContents().get(0);
		private final Assignment cConceptAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_1_0_2_0 = (RuleCall)cConceptAssignment_1_0_2.eContents().get(0);
		private final Assignment cBooleanAssignment_1_0_3 = (Assignment)cAlternatives_1_0.eContents().get(3);
		private final Alternatives cBooleanAlternatives_1_0_3_0 = (Alternatives)cBooleanAssignment_1_0_3.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_1_0_3_0_0 = (Keyword)cBooleanAlternatives_1_0_3_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_1_0_3_0_1 = (Keyword)cBooleanAlternatives_1_0_3_0.eContents().get(1);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cObservablesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cObservablesAnnotatedObservableSemanticsParserRuleCall_2_1_0_0 = (RuleCall)cObservablesAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cObservablesAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cObservablesAnnotatedObservableSemanticsParserRuleCall_2_1_1_1_0 = (RuleCall)cObservablesAssignment_2_1_1_1.eContents().get(0);
		private final Assignment cDocstringAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDocstringSTRINGTerminalRuleCall_3_0 = (RuleCall)cDocstringAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cObservingKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDependenciesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDependenciesDependencyParserRuleCall_4_1_0 = (RuleCall)cDependenciesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cDependenciesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cDependenciesDependencyParserRuleCall_4_2_1_0 = (RuleCall)cDependenciesAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cObservedKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cAsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cObserverAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cObserverConceptDeclarationParserRuleCall_5_2_0 = (RuleCall)cObserverAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cUsingKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cContextualizersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cContextualizersValueExecutionParserRuleCall_6_1_0 = (RuleCall)cContextualizersAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cContextualizersAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cContextualizersValueExecutionParserRuleCall_6_2_1_0 = (RuleCall)cContextualizersAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_7_0 = (Alternatives)cGroup_7.eContents().get(0);
		private final Keyword cClassifiedKeyword_7_0_0 = (Keyword)cAlternatives_7_0.eContents().get(0);
		private final Assignment cDiscretizationAssignment_7_0_1 = (Assignment)cAlternatives_7_0.eContents().get(1);
		private final Keyword cDiscretizationDiscretizedKeyword_7_0_1_0 = (Keyword)cDiscretizationAssignment_7_0_1.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Group cGroup_7_1_0 = (Group)cAlternatives_7_1.eContents().get(0);
		private final Keyword cIntoKeyword_7_1_0_0 = (Keyword)cGroup_7_1_0.eContents().get(0);
		private final Assignment cClassificationAssignment_7_1_0_1 = (Assignment)cGroup_7_1_0.eContents().get(1);
		private final RuleCall cClassificationClassificationParserRuleCall_7_1_0_1_0 = (RuleCall)cClassificationAssignment_7_1_0_1.eContents().get(0);
		private final Group cGroup_7_1_1 = (Group)cAlternatives_7_1.eContents().get(1);
		private final Keyword cAccordingKeyword_7_1_1_0 = (Keyword)cGroup_7_1_1.eContents().get(0);
		private final Keyword cToKeyword_7_1_1_1 = (Keyword)cGroup_7_1_1.eContents().get(1);
		private final Assignment cClassificationPropertyAssignment_7_1_1_2 = (Assignment)cGroup_7_1_1.eContents().get(2);
		private final RuleCall cClassificationPropertyPropertyIdParserRuleCall_7_1_1_2_0 = (RuleCall)cClassificationPropertyAssignment_7_1_1_2.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cLookupKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Group cGroup_8_0_1 = (Group)cGroup_8_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_0_1_0 = (Keyword)cGroup_8_0_1.eContents().get(0);
		private final Assignment cLookupTableArgsAssignment_8_0_1_1 = (Assignment)cGroup_8_0_1.eContents().get(1);
		private final RuleCall cLookupTableArgsLookupTableArgumentParserRuleCall_8_0_1_1_0 = (RuleCall)cLookupTableArgsAssignment_8_0_1_1.eContents().get(0);
		private final Group cGroup_8_0_1_2 = (Group)cGroup_8_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_8_0_1_2_0 = (Keyword)cGroup_8_0_1_2.eContents().get(0);
		private final Assignment cLookupTableArgsAssignment_8_0_1_2_1 = (Assignment)cGroup_8_0_1_2.eContents().get(1);
		private final RuleCall cLookupTableArgsLookupTableArgumentParserRuleCall_8_0_1_2_1_0 = (RuleCall)cLookupTableArgsAssignment_8_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_0_1_3 = (Keyword)cGroup_8_0_1.eContents().get(3);
		private final Keyword cIntoKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Alternatives cAlternatives_8_0_3 = (Alternatives)cGroup_8_0.eContents().get(3);
		private final Assignment cLookupTableAssignment_8_0_3_0 = (Assignment)cAlternatives_8_0_3.eContents().get(0);
		private final RuleCall cLookupTableTableParserRuleCall_8_0_3_0_0 = (RuleCall)cLookupTableAssignment_8_0_3_0.eContents().get(0);
		private final Assignment cLookupTableIdAssignment_8_0_3_1 = (Assignment)cAlternatives_8_0_3.eContents().get(1);
		private final RuleCall cLookupTableIdUPPERCASE_IDTerminalRuleCall_8_0_3_1_0 = (RuleCall)cLookupTableIdAssignment_8_0_3_1.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Assignment cTwowayAssignment_8_1_0 = (Assignment)cGroup_8_1.eContents().get(0);
		private final Keyword cTwowayMatchKeyword_8_1_0_0 = (Keyword)cTwowayAssignment_8_1_0.eContents().get(0);
		private final Group cGroup_8_1_1 = (Group)cGroup_8_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_1_1_0 = (Keyword)cGroup_8_1_1.eContents().get(0);
		private final Assignment cLookupTableArgsAssignment_8_1_1_1 = (Assignment)cGroup_8_1_1.eContents().get(1);
		private final RuleCall cLookupTableArgsLookupTableArgumentQualifiedParserRuleCall_8_1_1_1_0 = (RuleCall)cLookupTableArgsAssignment_8_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_8_1_1_2 = (Keyword)cGroup_8_1_1.eContents().get(2);
		private final Assignment cLookupTableArgsAssignment_8_1_1_3 = (Assignment)cGroup_8_1_1.eContents().get(3);
		private final RuleCall cLookupTableArgsLookupTableArgumentQualifiedParserRuleCall_8_1_1_3_0 = (RuleCall)cLookupTableArgsAssignment_8_1_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_1_1_4 = (Keyword)cGroup_8_1_1.eContents().get(4);
		private final Keyword cToKeyword_8_1_2 = (Keyword)cGroup_8_1.eContents().get(2);
		private final Alternatives cAlternatives_8_1_3 = (Alternatives)cGroup_8_1.eContents().get(3);
		private final Assignment cLookupTableAssignment_8_1_3_0 = (Assignment)cAlternatives_8_1_3.eContents().get(0);
		private final RuleCall cLookupTableTwoWayTableParserRuleCall_8_1_3_0_0 = (RuleCall)cLookupTableAssignment_8_1_3_0.eContents().get(0);
		private final Assignment cLookupTableIdAssignment_8_1_3_1 = (Assignment)cAlternatives_8_1_3.eContents().get(1);
		private final RuleCall cLookupTableIdUPPERCASE_IDTerminalRuleCall_8_1_3_1_0 = (RuleCall)cLookupTableIdAssignment_8_1_3_1.eContents().get(0);
		private final Assignment cActionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cActionsActionSpecificationParserRuleCall_9_0 = (RuleCall)cActionsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cMetadataKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cMetadataAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cMetadataMapParserRuleCall_10_1_0 = (RuleCall)cMetadataAssignment_10_1.eContents().get(0);
		
		//ModelBodyStatement:
		//    (instantiator?='each')?
		//        (
		//            (
		//                (urns+=Urn (',' urns+=Urn)*) |
		//                number=Number |
		//                concept=ConceptDeclaration |
		//                boolean=('true' | 'false') //|
		//            )
		//             => 'as'
		//        )?
		//        /*
		//         * If the observable is a single role, then concept must be the actual observable and we're reinterpreting it. Observables
		//         * besides the first may have annotations for the contextualizers to react to.
		//         */
		//         ( (name=LOWERCASE_ID | (observables+=AnnotatedObservableSemantics (',' observables+=AnnotatedObservableSemantics)*)))
		//         (docstring=STRING)?
		//         ('observing' dependencies+=Dependency (',' dependencies+=Dependency)* )?
		//         ('observed' 'as' observer=ConceptDeclaration)?
		//         ('using' /*  | merging?='merging')*/ contextualizers+=ValueExecution (',' contextualizers+=ValueExecution)*)?
		//         (('classified' | discretization?='discretized') (('into' classification=Classification) | ('according' 'to' classificationProperty=PropertyId)))?
		//         // arg ? means result field, arg * means ignore column. If not given, will match self in the first column and result in last, ignoring anything in between
		//         (('lookup'
		//             ('(' lookupTableArgs+=LookupTableArgument (',' lookupTableArgs+=LookupTableArgument)* ')')?
		//             'into'
		//                 (lookupTable=Table | lookupTableId=UPPERCASE_ID)
		//         ) |
		//          (twoway?='match'
		//             ('(' lookupTableArgs+=LookupTableArgumentQualified ',' lookupTableArgs+=LookupTableArgumentQualified ')')?
		//             'to'
		//                 (lookupTable=TwoWayTable | lookupTableId=UPPERCASE_ID)
		//          )
		//         )?
		//         actions+=ActionSpecification*
		//         ('metadata' metadata=Map)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(instantiator?='each')?
		//    (
		//        (
		//            (urns+=Urn (',' urns+=Urn)*) |
		//            number=Number |
		//            concept=ConceptDeclaration |
		//            boolean=('true' | 'false') //|
		//        )
		//         => 'as'
		//    )?
		//    /*
		//     * If the observable is a single role, then concept must be the actual observable and we're reinterpreting it. Observables
		//     * besides the first may have annotations for the contextualizers to react to.
		//     */
		//     ( (name=LOWERCASE_ID | (observables+=AnnotatedObservableSemantics (',' observables+=AnnotatedObservableSemantics)*)))
		//     (docstring=STRING)?
		//     ('observing' dependencies+=Dependency (',' dependencies+=Dependency)* )?
		//     ('observed' 'as' observer=ConceptDeclaration)?
		//     ('using' /*  | merging?='merging')*/ contextualizers+=ValueExecution (',' contextualizers+=ValueExecution)*)?
		//     (('classified' | discretization?='discretized') (('into' classification=Classification) | ('according' 'to' classificationProperty=PropertyId)))?
		//     // arg ? means result field, arg * means ignore column. If not given, will match self in the first column and result in last, ignoring anything in between
		//     (('lookup'
		//         ('(' lookupTableArgs+=LookupTableArgument (',' lookupTableArgs+=LookupTableArgument)* ')')?
		//         'into'
		//             (lookupTable=Table | lookupTableId=UPPERCASE_ID)
		//     ) |
		//      (twoway?='match'
		//         ('(' lookupTableArgs+=LookupTableArgumentQualified ',' lookupTableArgs+=LookupTableArgumentQualified ')')?
		//         'to'
		//             (lookupTable=TwoWayTable | lookupTableId=UPPERCASE_ID)
		//      )
		//     )?
		//     actions+=ActionSpecification*
		//     ('metadata' metadata=Map)?
		public Group getGroup() { return cGroup; }
		
		//(instantiator?='each')?
		public Assignment getInstantiatorAssignment_0() { return cInstantiatorAssignment_0; }
		
		//'each'
		public Keyword getInstantiatorEachKeyword_0_0() { return cInstantiatorEachKeyword_0_0; }
		
		//(
		//    (
		//        (urns+=Urn (',' urns+=Urn)*) |
		//        number=Number |
		//        concept=ConceptDeclaration |
		//        boolean=('true' | 'false') //|
		//    )
		//     => 'as'
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(
		//    (urns+=Urn (',' urns+=Urn)*) |
		//    number=Number |
		//    concept=ConceptDeclaration |
		//    boolean=('true' | 'false') //|
		//)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//(urns+=Urn (',' urns+=Urn)*)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//urns+=Urn
		public Assignment getUrnsAssignment_1_0_0_0() { return cUrnsAssignment_1_0_0_0; }
		
		//Urn
		public RuleCall getUrnsUrnParserRuleCall_1_0_0_0_0() { return cUrnsUrnParserRuleCall_1_0_0_0_0; }
		
		//(',' urns+=Urn)*
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_0_1_0() { return cCommaKeyword_1_0_0_1_0; }
		
		//urns+=Urn
		public Assignment getUrnsAssignment_1_0_0_1_1() { return cUrnsAssignment_1_0_0_1_1; }
		
		//Urn
		public RuleCall getUrnsUrnParserRuleCall_1_0_0_1_1_0() { return cUrnsUrnParserRuleCall_1_0_0_1_1_0; }
		
		//number=Number
		public Assignment getNumberAssignment_1_0_1() { return cNumberAssignment_1_0_1; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0_1_0() { return cNumberNumberParserRuleCall_1_0_1_0; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_1_0_2() { return cConceptAssignment_1_0_2; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_1_0_2_0() { return cConceptConceptDeclarationParserRuleCall_1_0_2_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_1_0_3() { return cBooleanAssignment_1_0_3; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_1_0_3_0() { return cBooleanAlternatives_1_0_3_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_1_0_3_0_0() { return cBooleanTrueKeyword_1_0_3_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_1_0_3_0_1() { return cBooleanFalseKeyword_1_0_3_0_1; }
		
		//=> 'as'
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }
		
		///*
		// * If the observable is a single role, then concept must be the actual observable and we're reinterpreting it. Observables
		// * besides the first may have annotations for the contextualizers to react to.
		// */
		// ( (name=LOWERCASE_ID | (observables+=AnnotatedObservableSemantics (',' observables+=AnnotatedObservableSemantics)*)))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_2_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_2_0_0; }
		
		//(observables+=AnnotatedObservableSemantics (',' observables+=AnnotatedObservableSemantics)*)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//observables+=AnnotatedObservableSemantics
		public Assignment getObservablesAssignment_2_1_0() { return cObservablesAssignment_2_1_0; }
		
		//AnnotatedObservableSemantics
		public RuleCall getObservablesAnnotatedObservableSemanticsParserRuleCall_2_1_0_0() { return cObservablesAnnotatedObservableSemanticsParserRuleCall_2_1_0_0; }
		
		//(',' observables+=AnnotatedObservableSemantics)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//observables+=AnnotatedObservableSemantics
		public Assignment getObservablesAssignment_2_1_1_1() { return cObservablesAssignment_2_1_1_1; }
		
		//AnnotatedObservableSemantics
		public RuleCall getObservablesAnnotatedObservableSemanticsParserRuleCall_2_1_1_1_0() { return cObservablesAnnotatedObservableSemanticsParserRuleCall_2_1_1_1_0; }
		
		//(docstring=STRING)?
		public Assignment getDocstringAssignment_3() { return cDocstringAssignment_3; }
		
		//STRING
		public RuleCall getDocstringSTRINGTerminalRuleCall_3_0() { return cDocstringSTRINGTerminalRuleCall_3_0; }
		
		//('observing' dependencies+=Dependency (',' dependencies+=Dependency)* )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'observing'
		public Keyword getObservingKeyword_4_0() { return cObservingKeyword_4_0; }
		
		//dependencies+=Dependency
		public Assignment getDependenciesAssignment_4_1() { return cDependenciesAssignment_4_1; }
		
		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_4_1_0() { return cDependenciesDependencyParserRuleCall_4_1_0; }
		
		//(',' dependencies+=Dependency)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//dependencies+=Dependency
		public Assignment getDependenciesAssignment_4_2_1() { return cDependenciesAssignment_4_2_1; }
		
		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_4_2_1_0() { return cDependenciesDependencyParserRuleCall_4_2_1_0; }
		
		//('observed' 'as' observer=ConceptDeclaration)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'observed'
		public Keyword getObservedKeyword_5_0() { return cObservedKeyword_5_0; }
		
		//'as'
		public Keyword getAsKeyword_5_1() { return cAsKeyword_5_1; }
		
		//observer=ConceptDeclaration
		public Assignment getObserverAssignment_5_2() { return cObserverAssignment_5_2; }
		
		//ConceptDeclaration
		public RuleCall getObserverConceptDeclarationParserRuleCall_5_2_0() { return cObserverConceptDeclarationParserRuleCall_5_2_0; }
		
		//('using' /*  | merging?='merging')*/ contextualizers+=ValueExecution (',' contextualizers+=ValueExecution)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'using'
		public Keyword getUsingKeyword_6_0() { return cUsingKeyword_6_0; }
		
		///*  | merging?='merging')*/ contextualizers+=ValueExecution
		public Assignment getContextualizersAssignment_6_1() { return cContextualizersAssignment_6_1; }
		
		//ValueExecution
		public RuleCall getContextualizersValueExecutionParserRuleCall_6_1_0() { return cContextualizersValueExecutionParserRuleCall_6_1_0; }
		
		//(',' contextualizers+=ValueExecution)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//contextualizers+=ValueExecution
		public Assignment getContextualizersAssignment_6_2_1() { return cContextualizersAssignment_6_2_1; }
		
		//ValueExecution
		public RuleCall getContextualizersValueExecutionParserRuleCall_6_2_1_0() { return cContextualizersValueExecutionParserRuleCall_6_2_1_0; }
		
		//(('classified' | discretization?='discretized') (('into' classification=Classification) | ('according' 'to' classificationProperty=PropertyId)))?
		public Group getGroup_7() { return cGroup_7; }
		
		//('classified' | discretization?='discretized')
		public Alternatives getAlternatives_7_0() { return cAlternatives_7_0; }
		
		//'classified'
		public Keyword getClassifiedKeyword_7_0_0() { return cClassifiedKeyword_7_0_0; }
		
		//discretization?='discretized'
		public Assignment getDiscretizationAssignment_7_0_1() { return cDiscretizationAssignment_7_0_1; }
		
		//'discretized'
		public Keyword getDiscretizationDiscretizedKeyword_7_0_1_0() { return cDiscretizationDiscretizedKeyword_7_0_1_0; }
		
		//(('into' classification=Classification) | ('according' 'to' classificationProperty=PropertyId))
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }
		
		//('into' classification=Classification)
		public Group getGroup_7_1_0() { return cGroup_7_1_0; }
		
		//'into'
		public Keyword getIntoKeyword_7_1_0_0() { return cIntoKeyword_7_1_0_0; }
		
		//classification=Classification
		public Assignment getClassificationAssignment_7_1_0_1() { return cClassificationAssignment_7_1_0_1; }
		
		//Classification
		public RuleCall getClassificationClassificationParserRuleCall_7_1_0_1_0() { return cClassificationClassificationParserRuleCall_7_1_0_1_0; }
		
		//('according' 'to' classificationProperty=PropertyId)
		public Group getGroup_7_1_1() { return cGroup_7_1_1; }
		
		//'according'
		public Keyword getAccordingKeyword_7_1_1_0() { return cAccordingKeyword_7_1_1_0; }
		
		//'to'
		public Keyword getToKeyword_7_1_1_1() { return cToKeyword_7_1_1_1; }
		
		//classificationProperty=PropertyId
		public Assignment getClassificationPropertyAssignment_7_1_1_2() { return cClassificationPropertyAssignment_7_1_1_2; }
		
		//PropertyId
		public RuleCall getClassificationPropertyPropertyIdParserRuleCall_7_1_1_2_0() { return cClassificationPropertyPropertyIdParserRuleCall_7_1_1_2_0; }
		
		//// arg ? means result field, arg * means ignore column. If not given, will match self in the first column and result in last, ignoring anything in between
		//(('lookup'
		//    ('(' lookupTableArgs+=LookupTableArgument (',' lookupTableArgs+=LookupTableArgument)* ')')?
		//    'into'
		//        (lookupTable=Table | lookupTableId=UPPERCASE_ID)
		//) |
		// (twoway?='match'
		//    ('(' lookupTableArgs+=LookupTableArgumentQualified ',' lookupTableArgs+=LookupTableArgumentQualified ')')?
		//    'to'
		//        (lookupTable=TwoWayTable | lookupTableId=UPPERCASE_ID)
		// )
		//)?
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//('lookup'
		//             ('(' lookupTableArgs+=LookupTableArgument (',' lookupTableArgs+=LookupTableArgument)* ')')?
		//             'into'
		//                 (lookupTable=Table | lookupTableId=UPPERCASE_ID)
		//         )
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'lookup'
		public Keyword getLookupKeyword_8_0_0() { return cLookupKeyword_8_0_0; }
		
		//('(' lookupTableArgs+=LookupTableArgument (',' lookupTableArgs+=LookupTableArgument)* ')')?
		public Group getGroup_8_0_1() { return cGroup_8_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_0_1_0() { return cLeftParenthesisKeyword_8_0_1_0; }
		
		//lookupTableArgs+=LookupTableArgument
		public Assignment getLookupTableArgsAssignment_8_0_1_1() { return cLookupTableArgsAssignment_8_0_1_1; }
		
		//LookupTableArgument
		public RuleCall getLookupTableArgsLookupTableArgumentParserRuleCall_8_0_1_1_0() { return cLookupTableArgsLookupTableArgumentParserRuleCall_8_0_1_1_0; }
		
		//(',' lookupTableArgs+=LookupTableArgument)*
		public Group getGroup_8_0_1_2() { return cGroup_8_0_1_2; }
		
		//','
		public Keyword getCommaKeyword_8_0_1_2_0() { return cCommaKeyword_8_0_1_2_0; }
		
		//lookupTableArgs+=LookupTableArgument
		public Assignment getLookupTableArgsAssignment_8_0_1_2_1() { return cLookupTableArgsAssignment_8_0_1_2_1; }
		
		//LookupTableArgument
		public RuleCall getLookupTableArgsLookupTableArgumentParserRuleCall_8_0_1_2_1_0() { return cLookupTableArgsLookupTableArgumentParserRuleCall_8_0_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_0_1_3() { return cRightParenthesisKeyword_8_0_1_3; }
		
		//'into'
		public Keyword getIntoKeyword_8_0_2() { return cIntoKeyword_8_0_2; }
		
		//(lookupTable=Table | lookupTableId=UPPERCASE_ID)
		public Alternatives getAlternatives_8_0_3() { return cAlternatives_8_0_3; }
		
		//lookupTable=Table
		public Assignment getLookupTableAssignment_8_0_3_0() { return cLookupTableAssignment_8_0_3_0; }
		
		//Table
		public RuleCall getLookupTableTableParserRuleCall_8_0_3_0_0() { return cLookupTableTableParserRuleCall_8_0_3_0_0; }
		
		//lookupTableId=UPPERCASE_ID
		public Assignment getLookupTableIdAssignment_8_0_3_1() { return cLookupTableIdAssignment_8_0_3_1; }
		
		//UPPERCASE_ID
		public RuleCall getLookupTableIdUPPERCASE_IDTerminalRuleCall_8_0_3_1_0() { return cLookupTableIdUPPERCASE_IDTerminalRuleCall_8_0_3_1_0; }
		
		//(twoway?='match'
		//   ('(' lookupTableArgs+=LookupTableArgumentQualified ',' lookupTableArgs+=LookupTableArgumentQualified ')')?
		//   'to'
		//       (lookupTable=TwoWayTable | lookupTableId=UPPERCASE_ID)
		//)
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//twoway?='match'
		public Assignment getTwowayAssignment_8_1_0() { return cTwowayAssignment_8_1_0; }
		
		//'match'
		public Keyword getTwowayMatchKeyword_8_1_0_0() { return cTwowayMatchKeyword_8_1_0_0; }
		
		//('(' lookupTableArgs+=LookupTableArgumentQualified ',' lookupTableArgs+=LookupTableArgumentQualified ')')?
		public Group getGroup_8_1_1() { return cGroup_8_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_1_1_0() { return cLeftParenthesisKeyword_8_1_1_0; }
		
		//lookupTableArgs+=LookupTableArgumentQualified
		public Assignment getLookupTableArgsAssignment_8_1_1_1() { return cLookupTableArgsAssignment_8_1_1_1; }
		
		//LookupTableArgumentQualified
		public RuleCall getLookupTableArgsLookupTableArgumentQualifiedParserRuleCall_8_1_1_1_0() { return cLookupTableArgsLookupTableArgumentQualifiedParserRuleCall_8_1_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_8_1_1_2() { return cCommaKeyword_8_1_1_2; }
		
		//lookupTableArgs+=LookupTableArgumentQualified
		public Assignment getLookupTableArgsAssignment_8_1_1_3() { return cLookupTableArgsAssignment_8_1_1_3; }
		
		//LookupTableArgumentQualified
		public RuleCall getLookupTableArgsLookupTableArgumentQualifiedParserRuleCall_8_1_1_3_0() { return cLookupTableArgsLookupTableArgumentQualifiedParserRuleCall_8_1_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_1_1_4() { return cRightParenthesisKeyword_8_1_1_4; }
		
		//'to'
		public Keyword getToKeyword_8_1_2() { return cToKeyword_8_1_2; }
		
		//(lookupTable=TwoWayTable | lookupTableId=UPPERCASE_ID)
		public Alternatives getAlternatives_8_1_3() { return cAlternatives_8_1_3; }
		
		//lookupTable=TwoWayTable
		public Assignment getLookupTableAssignment_8_1_3_0() { return cLookupTableAssignment_8_1_3_0; }
		
		//TwoWayTable
		public RuleCall getLookupTableTwoWayTableParserRuleCall_8_1_3_0_0() { return cLookupTableTwoWayTableParserRuleCall_8_1_3_0_0; }
		
		//lookupTableId=UPPERCASE_ID
		public Assignment getLookupTableIdAssignment_8_1_3_1() { return cLookupTableIdAssignment_8_1_3_1; }
		
		//UPPERCASE_ID
		public RuleCall getLookupTableIdUPPERCASE_IDTerminalRuleCall_8_1_3_1_0() { return cLookupTableIdUPPERCASE_IDTerminalRuleCall_8_1_3_1_0; }
		
		//actions+=ActionSpecification*
		public Assignment getActionsAssignment_9() { return cActionsAssignment_9; }
		
		//ActionSpecification
		public RuleCall getActionsActionSpecificationParserRuleCall_9_0() { return cActionsActionSpecificationParserRuleCall_9_0; }
		
		//('metadata' metadata=Map)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'metadata'
		public Keyword getMetadataKeyword_10_0() { return cMetadataKeyword_10_0; }
		
		//metadata=Map
		public Assignment getMetadataAssignment_10_1() { return cMetadataAssignment_10_1; }
		
		//Map
		public RuleCall getMetadataMapParserRuleCall_10_1_0() { return cMetadataMapParserRuleCall_10_1_0; }
	}
	public class LookupTableArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LookupTableArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cIdAlternatives_0_0 = (Alternatives)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cIdAlternatives_0_0.eContents().get(0);
		private final Keyword cIdQuestionMarkKeyword_0_0_1 = (Keyword)cIdAlternatives_0_0.eContents().get(1);
		private final Keyword cIdAsteriskKeyword_0_0_2 = (Keyword)cIdAlternatives_0_0.eContents().get(2);
		private final Assignment cConceptAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_1_0 = (RuleCall)cConceptAssignment_1.eContents().get(0);
		
		//LookupTableArgument:
		//    id=(LOWERCASE_ID | '?' | '*') |
		//    concept=ConceptDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=(LOWERCASE_ID | '?' | '*') |
		//concept=ConceptDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=(LOWERCASE_ID | '?' | '*')
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//(LOWERCASE_ID | '?' | '*')
		public Alternatives getIdAlternatives_0_0() { return cIdAlternatives_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_0_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//'?'
		public Keyword getIdQuestionMarkKeyword_0_0_1() { return cIdQuestionMarkKeyword_0_0_1; }
		
		//'*'
		public Keyword getIdAsteriskKeyword_0_0_2() { return cIdAsteriskKeyword_0_0_2; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_1() { return cConceptAssignment_1; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_1_0() { return cConceptConceptDeclarationParserRuleCall_1_0; }
	}
	public class LookupTableArgumentQualifiedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LookupTableArgumentQualified");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cKeyAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Alternatives cKeyAlternatives_0_0_0_0 = (Alternatives)cKeyAssignment_0_0_0.eContents().get(0);
		private final Keyword cKeyColumnKeyword_0_0_0_0_0 = (Keyword)cKeyAlternatives_0_0_0_0.eContents().get(0);
		private final Keyword cKeyRowKeyword_0_0_0_0_1 = (Keyword)cKeyAlternatives_0_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_0_1_0 = (RuleCall)cIdAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cKeyAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Alternatives cKeyAlternatives_1_0_0_0 = (Alternatives)cKeyAssignment_1_0_0.eContents().get(0);
		private final Keyword cKeyColumnKeyword_1_0_0_0_0 = (Keyword)cKeyAlternatives_1_0_0_0.eContents().get(0);
		private final Keyword cKeyRowKeyword_1_0_0_0_1 = (Keyword)cKeyAlternatives_1_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cConceptAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_1_1_0 = (RuleCall)cConceptAssignment_1_1.eContents().get(0);
		
		//LookupTableArgumentQualified returns LookupTableArgument:
		//    (key=('column'|'row') '=')? id=LOWERCASE_ID |
		//    (key=('column'|'row') '=')? concept=ConceptDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(key=('column'|'row') '=')? id=LOWERCASE_ID |
		//(key=('column'|'row') '=')? concept=ConceptDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(key=('column'|'row') '=')? id=LOWERCASE_ID
		public Group getGroup_0() { return cGroup_0; }
		
		//(key=('column'|'row') '=')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//key=('column'|'row')
		public Assignment getKeyAssignment_0_0_0() { return cKeyAssignment_0_0_0; }
		
		//('column'|'row')
		public Alternatives getKeyAlternatives_0_0_0_0() { return cKeyAlternatives_0_0_0_0; }
		
		//'column'
		public Keyword getKeyColumnKeyword_0_0_0_0_0() { return cKeyColumnKeyword_0_0_0_0_0; }
		
		//'row'
		public Keyword getKeyRowKeyword_0_0_0_0_1() { return cKeyRowKeyword_0_0_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//id=LOWERCASE_ID
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_0_1_0() { return cIdLOWERCASE_IDTerminalRuleCall_0_1_0; }
		
		//(key=('column'|'row') '=')? concept=ConceptDeclaration
		public Group getGroup_1() { return cGroup_1; }
		
		//(key=('column'|'row') '=')?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//key=('column'|'row')
		public Assignment getKeyAssignment_1_0_0() { return cKeyAssignment_1_0_0; }
		
		//('column'|'row')
		public Alternatives getKeyAlternatives_1_0_0_0() { return cKeyAlternatives_1_0_0_0; }
		
		//'column'
		public Keyword getKeyColumnKeyword_1_0_0_0_0() { return cKeyColumnKeyword_1_0_0_0_0; }
		
		//'row'
		public Keyword getKeyRowKeyword_1_0_0_0_1() { return cKeyRowKeyword_1_0_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_1_1() { return cConceptAssignment_1_1; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_1_1_0() { return cConceptConceptDeclarationParserRuleCall_1_1_0; }
	}
	public class ClassificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Classification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassifiersClassifierParserRuleCall_0_0 = (RuleCall)cClassifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cClassifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClassifiersClassifierParserRuleCall_1_1_0 = (RuleCall)cClassifiersAssignment_1_1.eContents().get(0);
		
		//Classification:
		//    classifiers+=Classifier (=> ',' classifiers+=Classifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//classifiers+=Classifier (=> ',' classifiers+=Classifier)*
		public Group getGroup() { return cGroup; }
		
		//classifiers+=Classifier
		public Assignment getClassifiersAssignment_0() { return cClassifiersAssignment_0; }
		
		//Classifier
		public RuleCall getClassifiersClassifierParserRuleCall_0_0() { return cClassifiersClassifierParserRuleCall_0_0; }
		
		//(=> ',' classifiers+=Classifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//classifiers+=Classifier
		public Assignment getClassifiersAssignment_1_1() { return cClassifiersAssignment_1_1; }
		
		//Classifier
		public RuleCall getClassifiersClassifierParserRuleCall_1_1_0() { return cClassifiersClassifierParserRuleCall_1_1_0; }
	}
	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Classifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOtherwiseAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cOtherwiseOtherwiseKeyword_1_0_0 = (Keyword)cOtherwiseAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cIfKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Assignment cNegatedAssignment_1_1_0_1 = (Assignment)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cNegatedUnlessKeyword_1_1_0_1_0 = (Keyword)cNegatedAssignment_1_1_0_1.eContents().get(0);
		private final Assignment cClassifierAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cClassifierClassifierRHSParserRuleCall_1_1_1_0 = (RuleCall)cClassifierAssignment_1_1_1.eContents().get(0);
		
		//Classifier:
		//    declaration=ConceptDeclaration (otherwise?='otherwise' | ('if' | negated?='unless') classifier=ClassifierRHS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=ConceptDeclaration (otherwise?='otherwise' | ('if' | negated?='unless') classifier=ClassifierRHS)?
		public Group getGroup() { return cGroup; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_0_0() { return cDeclarationConceptDeclarationParserRuleCall_0_0; }
		
		//(otherwise?='otherwise' | ('if' | negated?='unless') classifier=ClassifierRHS)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//otherwise?='otherwise'
		public Assignment getOtherwiseAssignment_1_0() { return cOtherwiseAssignment_1_0; }
		
		//'otherwise'
		public Keyword getOtherwiseOtherwiseKeyword_1_0_0() { return cOtherwiseOtherwiseKeyword_1_0_0; }
		
		//('if' | negated?='unless') classifier=ClassifierRHS
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//('if' | negated?='unless')
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//'if'
		public Keyword getIfKeyword_1_1_0_0() { return cIfKeyword_1_1_0_0; }
		
		//negated?='unless'
		public Assignment getNegatedAssignment_1_1_0_1() { return cNegatedAssignment_1_1_0_1; }
		
		//'unless'
		public Keyword getNegatedUnlessKeyword_1_1_0_1_0() { return cNegatedUnlessKeyword_1_1_0_1_0; }
		
		//classifier=ClassifierRHS
		public Assignment getClassifierAssignment_1_1_1() { return cClassifierAssignment_1_1_1; }
		
		//ClassifierRHS
		public RuleCall getClassifierClassifierRHSParserRuleCall_1_1_1_0() { return cClassifierClassifierRHSParserRuleCall_1_1_1_0; }
	}
	public class ClassifierRHSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ClassifierRHS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInt0Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_1_0_0 = (RuleCall)cInt0Assignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftLimitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_1_1_0_0 = (Keyword)cLeftLimitAssignment_1_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInt1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_1_3_0 = (RuleCall)cInt1Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cRightLimitAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_1_4_0_0 = (Keyword)cRightLimitAssignment_1_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumNumberParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_3_1_0 = (RuleCall)cSetAssignment_3_1.eContents().get(0);
		private final Assignment cStringAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Assignment cConceptAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_5_0 = (RuleCall)cConceptAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cToResolveAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cToResolveConceptDeclarationParserRuleCall_6_1_0 = (RuleCall)cToResolveAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cToResolveAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cToResolveConceptDeclarationParserRuleCall_6_2_1_0 = (RuleCall)cToResolveAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cOpAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_7_0_0 = (RuleCall)cOpAssignment_7_0.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		private final Assignment cNodataAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cNodataUnknownKeyword_8_0 = (Keyword)cNodataAssignment_8.eContents().get(0);
		private final Assignment cStarAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cStarAsteriskKeyword_9_0 = (Keyword)cStarAssignment_9.eContents().get(0);
		
		//ClassifierRHS:
		//    (boolean='true' | boolean='false') |
		//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//    num=Number |
		//    'in' set=List |
		//    string=STRING |
		//    concept=ConceptDeclaration |
		//    '(' toResolve+=ConceptDeclaration (=> ',' toResolve+=ConceptDeclaration)* ')' |
		//    op=REL_OPERATOR expression=Number |
		//    nodata='unknown' |
		//    star?='*';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') |
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//num=Number |
		//'in' set=List |
		//string=STRING |
		//concept=ConceptDeclaration |
		//'(' toResolve+=ConceptDeclaration (=> ',' toResolve+=ConceptDeclaration)* ')' |
		//op=REL_OPERATOR expression=Number |
		//nodata='unknown' |
		//star?='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_1() { return cGroup_1; }
		
		//int0=Number
		public Assignment getInt0Assignment_1_0() { return cInt0Assignment_1_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_1_0_0() { return cInt0NumberParserRuleCall_1_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_1_1_0() { return cLeftLimitAssignment_1_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_1_1_0_0() { return cLeftLimitInclusiveKeyword_1_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_1_1() { return cExclusiveKeyword_1_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_1_3() { return cInt1Assignment_1_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_1_3_0() { return cInt1NumberParserRuleCall_1_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_1_4_0() { return cRightLimitAssignment_1_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_1_4_0_0() { return cRightLimitInclusiveKeyword_1_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_4_1() { return cExclusiveKeyword_1_4_1; }
		
		//num=Number
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_2_0() { return cNumNumberParserRuleCall_2_0; }
		
		//'in' set=List
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//set=List
		public Assignment getSetAssignment_3_1() { return cSetAssignment_3_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_3_1_0() { return cSetListParserRuleCall_3_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0() { return cStringSTRINGTerminalRuleCall_4_0; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_5() { return cConceptAssignment_5; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_5_0() { return cConceptConceptDeclarationParserRuleCall_5_0; }
		
		//'(' toResolve+=ConceptDeclaration (=> ',' toResolve+=ConceptDeclaration)* ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//toResolve+=ConceptDeclaration
		public Assignment getToResolveAssignment_6_1() { return cToResolveAssignment_6_1; }
		
		//ConceptDeclaration
		public RuleCall getToResolveConceptDeclarationParserRuleCall_6_1_0() { return cToResolveConceptDeclarationParserRuleCall_6_1_0; }
		
		//(=> ',' toResolve+=ConceptDeclaration)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//=> ','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//toResolve+=ConceptDeclaration
		public Assignment getToResolveAssignment_6_2_1() { return cToResolveAssignment_6_2_1; }
		
		//ConceptDeclaration
		public RuleCall getToResolveConceptDeclarationParserRuleCall_6_2_1_0() { return cToResolveConceptDeclarationParserRuleCall_6_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_7() { return cGroup_7; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_7_0() { return cOpAssignment_7_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_7_0_0() { return cOpREL_OPERATORParserRuleCall_7_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_7_1_0() { return cExpressionNumberParserRuleCall_7_1_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_8() { return cNodataAssignment_8; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_8_0() { return cNodataUnknownKeyword_8_0; }
		
		//star?='*'
		public Assignment getStarAssignment_9() { return cStarAssignment_9; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_9_0() { return cStarAsteriskKeyword_9_0; }
	}
	public class ClassifierRHSWithIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ClassifierRHSWithId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInt0Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_1_0_0 = (RuleCall)cInt0Assignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftLimitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_1_1_0_0 = (Keyword)cLeftLimitAssignment_1_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInt1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_1_3_0 = (RuleCall)cInt1Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cRightLimitAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_1_4_0_0 = (Keyword)cRightLimitAssignment_1_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumNumberParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_3_1_0 = (RuleCall)cSetAssignment_3_1.eContents().get(0);
		private final Assignment cStringAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Assignment cConceptAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_5_0 = (RuleCall)cConceptAssignment_5.eContents().get(0);
		private final Assignment cIdAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Alternatives cIdAlternatives_6_0 = (Alternatives)cIdAssignment_6.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_6_0_0 = (RuleCall)cIdAlternatives_6_0.eContents().get(0);
		private final RuleCall cIdPropertyIdParserRuleCall_6_0_1 = (RuleCall)cIdAlternatives_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cOpAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_7_0_0 = (RuleCall)cOpAssignment_7_0.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		private final Assignment cNodataAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cNodataUnknownKeyword_8_0 = (Keyword)cNodataAssignment_8.eContents().get(0);
		private final Assignment cStarAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cStarAsteriskKeyword_9_0 = (Keyword)cStarAssignment_9.eContents().get(0);
		
		//ClassifierRHSWithId returns ClassifierRHS:
		//    (boolean='true' | boolean='false') |
		//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//    num=Number |
		//    'in' set=List |
		//    string=STRING |
		//    concept=ConceptDeclaration |
		//    id = (LOWERCASE_ID | PropertyId) |
		//    op=REL_OPERATOR expression=Number |
		//    nodata='unknown' |
		//    star?='*';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') |
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//num=Number |
		//'in' set=List |
		//string=STRING |
		//concept=ConceptDeclaration |
		//id = (LOWERCASE_ID | PropertyId) |
		//op=REL_OPERATOR expression=Number |
		//nodata='unknown' |
		//star?='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_1() { return cGroup_1; }
		
		//int0=Number
		public Assignment getInt0Assignment_1_0() { return cInt0Assignment_1_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_1_0_0() { return cInt0NumberParserRuleCall_1_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_1_1_0() { return cLeftLimitAssignment_1_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_1_1_0_0() { return cLeftLimitInclusiveKeyword_1_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_1_1() { return cExclusiveKeyword_1_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_1_3() { return cInt1Assignment_1_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_1_3_0() { return cInt1NumberParserRuleCall_1_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_1_4_0() { return cRightLimitAssignment_1_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_1_4_0_0() { return cRightLimitInclusiveKeyword_1_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_4_1() { return cExclusiveKeyword_1_4_1; }
		
		//num=Number
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_2_0() { return cNumNumberParserRuleCall_2_0; }
		
		//'in' set=List
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//set=List
		public Assignment getSetAssignment_3_1() { return cSetAssignment_3_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_3_1_0() { return cSetListParserRuleCall_3_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0() { return cStringSTRINGTerminalRuleCall_4_0; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_5() { return cConceptAssignment_5; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_5_0() { return cConceptConceptDeclarationParserRuleCall_5_0; }
		
		//id = (LOWERCASE_ID | PropertyId)
		public Assignment getIdAssignment_6() { return cIdAssignment_6; }
		
		//(LOWERCASE_ID | PropertyId)
		public Alternatives getIdAlternatives_6_0() { return cIdAlternatives_6_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_6_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_6_0_0; }
		
		//PropertyId
		public RuleCall getIdPropertyIdParserRuleCall_6_0_1() { return cIdPropertyIdParserRuleCall_6_0_1; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_7() { return cGroup_7; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_7_0() { return cOpAssignment_7_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_7_0_0() { return cOpREL_OPERATORParserRuleCall_7_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_7_1_0() { return cExpressionNumberParserRuleCall_7_1_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_8() { return cNodataAssignment_8; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_8_0() { return cNodataUnknownKeyword_8_0; }
		
		//star?='*'
		public Assignment getStarAssignment_9() { return cStarAssignment_9; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_9_0() { return cStarAsteriskKeyword_9_0; }
	}
	public class ClassifierRHSWithIdNoSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ClassifierRHSWithIdNoSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInt0Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_1_0_0 = (RuleCall)cInt0Assignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftLimitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_1_1_0_0 = (Keyword)cLeftLimitAssignment_1_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInt1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_1_3_0 = (RuleCall)cInt1Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cRightLimitAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_1_4_0_0 = (Keyword)cRightLimitAssignment_1_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumNumberParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Assignment cStringAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cStringSTRINGTerminalRuleCall_3_0 = (RuleCall)cStringAssignment_3.eContents().get(0);
		private final Assignment cConceptAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_4_0 = (RuleCall)cConceptAssignment_4.eContents().get(0);
		private final Assignment cIdAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Alternatives cIdAlternatives_5_0 = (Alternatives)cIdAssignment_5.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_5_0_0 = (RuleCall)cIdAlternatives_5_0.eContents().get(0);
		private final RuleCall cIdPropertyIdParserRuleCall_5_0_1 = (RuleCall)cIdAlternatives_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cOpAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_6_0_0 = (RuleCall)cOpAssignment_6_0.eContents().get(0);
		private final Assignment cExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_6_1_0 = (RuleCall)cExpressionAssignment_6_1.eContents().get(0);
		private final Assignment cNodataAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cNodataUnknownKeyword_7_0 = (Keyword)cNodataAssignment_7.eContents().get(0);
		private final Assignment cStarAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cStarAsteriskKeyword_8_0 = (Keyword)cStarAssignment_8.eContents().get(0);
		
		//ClassifierRHSWithIdNoSet returns ClassifierRHS:
		//    (boolean='true' | boolean='false') |
		//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//    num=Number |
		////    'in' set=List |
		//    string=STRING |
		//    concept=ConceptDeclaration |
		//    id = (LOWERCASE_ID | PropertyId) |
		//    op=REL_OPERATOR expression=Number |
		//    nodata='unknown' |
		//    star?='*';
		@Override public ParserRule getRule() { return rule; }
		
		//    (boolean='true' | boolean='false') |
		//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//    num=Number |
		////    'in' set=List |
		//    string=STRING |
		//    concept=ConceptDeclaration |
		//    id = (LOWERCASE_ID | PropertyId) |
		//    op=REL_OPERATOR expression=Number |
		//    nodata='unknown' |
		//    star?='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_1() { return cGroup_1; }
		
		//int0=Number
		public Assignment getInt0Assignment_1_0() { return cInt0Assignment_1_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_1_0_0() { return cInt0NumberParserRuleCall_1_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_1_1_0() { return cLeftLimitAssignment_1_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_1_1_0_0() { return cLeftLimitInclusiveKeyword_1_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_1_1() { return cExclusiveKeyword_1_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_1_3() { return cInt1Assignment_1_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_1_3_0() { return cInt1NumberParserRuleCall_1_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_1_4_0() { return cRightLimitAssignment_1_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_1_4_0_0() { return cRightLimitInclusiveKeyword_1_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_4_1() { return cExclusiveKeyword_1_4_1; }
		
		//num=Number
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_2_0() { return cNumNumberParserRuleCall_2_0; }
		
		////    'in' set=List |
		//    string=STRING
		public Assignment getStringAssignment_3() { return cStringAssignment_3; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_3_0() { return cStringSTRINGTerminalRuleCall_3_0; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_4() { return cConceptAssignment_4; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_4_0() { return cConceptConceptDeclarationParserRuleCall_4_0; }
		
		//id = (LOWERCASE_ID | PropertyId)
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }
		
		//(LOWERCASE_ID | PropertyId)
		public Alternatives getIdAlternatives_5_0() { return cIdAlternatives_5_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_5_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_5_0_0; }
		
		//PropertyId
		public RuleCall getIdPropertyIdParserRuleCall_5_0_1() { return cIdPropertyIdParserRuleCall_5_0_1; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_6() { return cGroup_6; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_6_0() { return cOpAssignment_6_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_6_0_0() { return cOpREL_OPERATORParserRuleCall_6_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_6_1() { return cExpressionAssignment_6_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_6_1_0() { return cExpressionNumberParserRuleCall_6_1_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_7() { return cNodataAssignment_7; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_7_0() { return cNodataUnknownKeyword_7_0; }
		
		//star?='*'
		public Assignment getStarAssignment_8() { return cStarAssignment_8; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_8_0() { return cStarAsteriskKeyword_8_0; }
	}
	public class UrnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Urn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNamePathNameParserRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameUrnIdParserRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final RuleCall cNameLocalFilePathParserRuleCall_0_0_2 = (RuleCall)cNameAlternatives_0_0.eContents().get(2);
		private final Assignment cStringsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringsSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringsAssignment_1.eContents().get(0);
		
		//Urn:
		//    // String used when there are strange chars or keywords in the URN. Consecutive strings will be merged.
		//    name=(PathName|UrnId|LocalFilePath) | strings+=STRING+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// String used when there are strange chars or keywords in the URN. Consecutive strings will be merged.
		//name=(PathName|UrnId|LocalFilePath) | strings+=STRING+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// String used when there are strange chars or keywords in the URN. Consecutive strings will be merged.
		//name=(PathName|UrnId|LocalFilePath)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(PathName|UrnId|LocalFilePath)
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_0_0_0() { return cNamePathNameParserRuleCall_0_0_0; }
		
		//UrnId
		public RuleCall getNameUrnIdParserRuleCall_0_0_1() { return cNameUrnIdParserRuleCall_0_0_1; }
		
		//LocalFilePath
		public RuleCall getNameLocalFilePathParserRuleCall_0_0_2() { return cNameLocalFilePathParserRuleCall_0_0_2; }
		
		//strings+=STRING+
		public Assignment getStringsAssignment_1() { return cStringsAssignment_1; }
		
		//STRING
		public RuleCall getStringsSTRINGTerminalRuleCall_1_0() { return cStringsSTRINGTerminalRuleCall_1_0; }
	}
	public class LookupTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LookupTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLookupTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTableAlternatives_2_0 = (Alternatives)cTableAssignment_2.eContents().get(0);
		private final RuleCall cTableTableParserRuleCall_2_0_0 = (RuleCall)cTableAlternatives_2_0.eContents().get(0);
		private final RuleCall cTableTwoWayTableParserRuleCall_2_0_1 = (RuleCall)cTableAlternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Lookup table literal
		//LookupTable: {LookupTable}
		//    '{{' table=(Table|TwoWayTable)? '}}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LookupTable}
		//   '{{' table=(Table|TwoWayTable)? '}}'
		public Group getGroup() { return cGroup; }
		
		//{LookupTable}
		public Action getLookupTableAction_0() { return cLookupTableAction_0; }
		
		//'{{'
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketLeftCurlyBracketKeyword_1; }
		
		//table=(Table|TwoWayTable)?
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }
		
		//(Table|TwoWayTable)
		public Alternatives getTableAlternatives_2_0() { return cTableAlternatives_2_0; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_2_0_0() { return cTableTableParserRuleCall_2_0_0; }
		
		//TwoWayTable
		public RuleCall getTableTwoWayTableParserRuleCall_2_0_1() { return cTableTwoWayTableParserRuleCall_2_0_1; }
		
		//'}}'
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_3() { return cRightCurlyBracketRightCurlyBracketKeyword_3; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cHeadersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cHeadersHeaderRowParserRuleCall_0_0_0 = (RuleCall)cHeadersAssignment_0_0.eContents().get(0);
		private final RuleCall cSEPARATORTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cRowsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_1_0 = (RuleCall)cRowsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRowsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_2_1_0 = (RuleCall)cRowsAssignment_2_1.eContents().get(0);
		
		//Table:
		//    (headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*
		public Group getGroup() { return cGroup; }
		
		//(headers=HeaderRow SEPARATOR)?
		public Group getGroup_0() { return cGroup_0; }
		
		//headers=HeaderRow
		public Assignment getHeadersAssignment_0_0() { return cHeadersAssignment_0_0; }
		
		//HeaderRow
		public RuleCall getHeadersHeaderRowParserRuleCall_0_0_0() { return cHeadersHeaderRowParserRuleCall_0_0_0; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_0_1() { return cSEPARATORTerminalRuleCall_0_1; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_1() { return cRowsAssignment_1; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_1_0() { return cRowsTableRowParserRuleCall_1_0; }
		
		//(',' rows+=TableRow)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_2_1() { return cRowsAssignment_2_1; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_2_1_0() { return cRowsTableRowParserRuleCall_2_1_0; }
	}
	public class TwoWayTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.TwoWayTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnClassifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnClassifiersTwoWayHeaderRowParserRuleCall_0_0 = (RuleCall)cColumnClassifiersAssignment_0.eContents().get(0);
		private final RuleCall cSEPARATORTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRowsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRowsTableRowParserRuleCall_2_0 = (RuleCall)cRowsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRowsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_3_1_0 = (RuleCall)cRowsAssignment_3_1.eContents().get(0);
		
		//TwoWayTable returns Table:
		//    columnClassifiers=TwoWayHeaderRow SEPARATOR rows+=TableRow (',' rows+=TableRow)*;
		@Override public ParserRule getRule() { return rule; }
		
		//columnClassifiers=TwoWayHeaderRow SEPARATOR rows+=TableRow (',' rows+=TableRow)*
		public Group getGroup() { return cGroup; }
		
		//columnClassifiers=TwoWayHeaderRow
		public Assignment getColumnClassifiersAssignment_0() { return cColumnClassifiersAssignment_0; }
		
		//TwoWayHeaderRow
		public RuleCall getColumnClassifiersTwoWayHeaderRowParserRuleCall_0_0() { return cColumnClassifiersTwoWayHeaderRowParserRuleCall_0_0; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_1() { return cSEPARATORTerminalRuleCall_1; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_2() { return cRowsAssignment_2; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_2_0() { return cRowsTableRowParserRuleCall_2_0; }
		
		//(',' rows+=TableRow)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_3_1() { return cRowsAssignment_3_1; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_3_1_0() { return cRowsTableRowParserRuleCall_3_1_0; }
	}
	public class HeaderRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.HeaderRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cElementsAlternatives_0_0 = (Alternatives)cElementsAssignment_0.eContents().get(0);
		private final RuleCall cElementsLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cElementsAlternatives_0_0.eContents().get(0);
		private final RuleCall cElementsSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cElementsAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cElementsAlternatives_1_1_0 = (Alternatives)cElementsAssignment_1_1.eContents().get(0);
		private final RuleCall cElementsLOWERCASE_IDTerminalRuleCall_1_1_0_0 = (RuleCall)cElementsAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cElementsSTRINGTerminalRuleCall_1_1_0_1 = (RuleCall)cElementsAlternatives_1_1_0.eContents().get(1);
		
		//HeaderRow:
		//    elements+=(LOWERCASE_ID|STRING) ('|' elements+=(LOWERCASE_ID|STRING))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=(LOWERCASE_ID|STRING) ('|' elements+=(LOWERCASE_ID|STRING))*
		public Group getGroup() { return cGroup; }
		
		//elements+=(LOWERCASE_ID|STRING)
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//(LOWERCASE_ID|STRING)
		public Alternatives getElementsAlternatives_0_0() { return cElementsAlternatives_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getElementsLOWERCASE_IDTerminalRuleCall_0_0_0() { return cElementsLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//STRING
		public RuleCall getElementsSTRINGTerminalRuleCall_0_0_1() { return cElementsSTRINGTerminalRuleCall_0_0_1; }
		
		//('|' elements+=(LOWERCASE_ID|STRING))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//elements+=(LOWERCASE_ID|STRING)
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//(LOWERCASE_ID|STRING)
		public Alternatives getElementsAlternatives_1_1_0() { return cElementsAlternatives_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getElementsLOWERCASE_IDTerminalRuleCall_1_1_0_0() { return cElementsLOWERCASE_IDTerminalRuleCall_1_1_0_0; }
		
		//STRING
		public RuleCall getElementsSTRINGTerminalRuleCall_1_1_0_1() { return cElementsSTRINGTerminalRuleCall_1_1_0_1; }
	}
	public class TableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.TableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsTableClassifierParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsTableClassifierParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//TableRow:
		//    elements+=TableClassifier ('|' elements+=TableClassifier)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=TableClassifier ('|' elements+=TableClassifier)*
		public Group getGroup() { return cGroup; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_0_0() { return cElementsTableClassifierParserRuleCall_0_0; }
		
		//('|' elements+=TableClassifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_1_1_0() { return cElementsTableClassifierParserRuleCall_1_1_0; }
	}
	public class TwoWayHeaderRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.TwoWayHeaderRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cTableClassifierParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsTableClassifierParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//TwoWayHeaderRow returns TableRow:
		//    // ignore the first element
		//    (LOWERCASE_ID|TableClassifier) ('|' elements+=TableClassifier)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// ignore the first element
		//(LOWERCASE_ID|TableClassifier) ('|' elements+=TableClassifier)+
		public Group getGroup() { return cGroup; }
		
		//// ignore the first element
		//(LOWERCASE_ID|TableClassifier)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_0() { return cLOWERCASE_IDTerminalRuleCall_0_0; }
		
		//TableClassifier
		public RuleCall getTableClassifierParserRuleCall_0_1() { return cTableClassifierParserRuleCall_0_1; }
		
		//('|' elements+=TableClassifier)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_1_1_0() { return cElementsTableClassifierParserRuleCall_1_1_0; }
	}
	public class TableClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.TableClassifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInt0Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_1_0_0 = (RuleCall)cInt0Assignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftLimitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_1_1_0_0 = (Keyword)cLeftLimitAssignment_1_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInt1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_1_3_0 = (RuleCall)cInt1Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cRightLimitAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_1_4_0_0 = (Keyword)cRightLimitAssignment_1_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumNumberParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Assignment cQuantityAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cQuantityQuantityParserRuleCall_3_0 = (RuleCall)cQuantityAssignment_3.eContents().get(0);
		private final Assignment cDateAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cDateDateParserRuleCall_4_0 = (RuleCall)cDateAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cInKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSetAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_5_1_0 = (RuleCall)cSetAssignment_5_1.eContents().get(0);
		private final Assignment cStringAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cStringSTRINGTerminalRuleCall_6_0 = (RuleCall)cStringAssignment_6.eContents().get(0);
		private final Assignment cConceptAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_7_0 = (RuleCall)cConceptAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cOpAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_8_0_0 = (RuleCall)cOpAssignment_8_0.eContents().get(0);
		private final Assignment cExpressionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_8_1_0 = (RuleCall)cExpressionAssignment_8_1.eContents().get(0);
		private final Assignment cExprAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cExprEXPRTerminalRuleCall_9_0 = (RuleCall)cExprAssignment_9.eContents().get(0);
		private final Assignment cNodataAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cNodataUnknownKeyword_10_0 = (Keyword)cNodataAssignment_10.eContents().get(0);
		private final Assignment cStarAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cStarAsteriskKeyword_11_0 = (Keyword)cStarAssignment_11.eContents().get(0);
		private final Assignment cAnythingAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cAnythingNumberSignKeyword_12_0 = (Keyword)cAnythingAssignment_12.eContents().get(0);
		
		//TableClassifier returns ClassifierRHS:
		//    (boolean='true' | boolean='false') |
		//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//    num=Number |
		//    quantity=Quantity |
		//    date=Date |
		//    'in' set=List |
		//    string=STRING |
		//    concept=ConceptDeclaration |
		//    op=REL_OPERATOR expression=Number |
		//    expr=EXPR |
		//    nodata='unknown' |
		//    star?='*' |
		//    anything?='#';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') |
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//num=Number |
		//quantity=Quantity |
		//date=Date |
		//'in' set=List |
		//string=STRING |
		//concept=ConceptDeclaration |
		//op=REL_OPERATOR expression=Number |
		//expr=EXPR |
		//nodata='unknown' |
		//star?='*' |
		//anything?='#'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_1() { return cGroup_1; }
		
		//int0=Number
		public Assignment getInt0Assignment_1_0() { return cInt0Assignment_1_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_1_0_0() { return cInt0NumberParserRuleCall_1_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_1_1_0() { return cLeftLimitAssignment_1_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_1_1_0_0() { return cLeftLimitInclusiveKeyword_1_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_1_1() { return cExclusiveKeyword_1_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_1_3() { return cInt1Assignment_1_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_1_3_0() { return cInt1NumberParserRuleCall_1_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_1_4_0() { return cRightLimitAssignment_1_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_1_4_0_0() { return cRightLimitInclusiveKeyword_1_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_4_1() { return cExclusiveKeyword_1_4_1; }
		
		//num=Number
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_2_0() { return cNumNumberParserRuleCall_2_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_3() { return cQuantityAssignment_3; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_3_0() { return cQuantityQuantityParserRuleCall_3_0; }
		
		//date=Date
		public Assignment getDateAssignment_4() { return cDateAssignment_4; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_4_0() { return cDateDateParserRuleCall_4_0; }
		
		//'in' set=List
		public Group getGroup_5() { return cGroup_5; }
		
		//'in'
		public Keyword getInKeyword_5_0() { return cInKeyword_5_0; }
		
		//set=List
		public Assignment getSetAssignment_5_1() { return cSetAssignment_5_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_5_1_0() { return cSetListParserRuleCall_5_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_6() { return cStringAssignment_6; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_6_0() { return cStringSTRINGTerminalRuleCall_6_0; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_7() { return cConceptAssignment_7; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_7_0() { return cConceptConceptDeclarationParserRuleCall_7_0; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_8() { return cGroup_8; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_8_0() { return cOpAssignment_8_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_8_0_0() { return cOpREL_OPERATORParserRuleCall_8_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_8_1() { return cExpressionAssignment_8_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_8_1_0() { return cExpressionNumberParserRuleCall_8_1_0; }
		
		//expr=EXPR
		public Assignment getExprAssignment_9() { return cExprAssignment_9; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_9_0() { return cExprEXPRTerminalRuleCall_9_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_10() { return cNodataAssignment_10; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_10_0() { return cNodataUnknownKeyword_10_0; }
		
		//star?='*'
		public Assignment getStarAssignment_11() { return cStarAssignment_11; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_11_0() { return cStarAsteriskKeyword_11_0; }
		
		//anything?='#'
		public Assignment getAnythingAssignment_12() { return cAnythingAssignment_12; }
		
		//'#'
		public Keyword getAnythingNumberSignKeyword_12_0() { return cAnythingNumberSignKeyword_12_0; }
	}
	public class ActionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ActionSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIntegratedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cIntegratedAggregatedKeyword_0_0_0 = (Keyword)cIntegratedAssignment_0_0.eContents().get(0);
		private final Assignment cOverAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOverOverKeyword_0_1_0 = (Keyword)cOverAssignment_0_1.eContents().get(0);
		private final Assignment cDomainAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDomainFunctionOrIDParserRuleCall_0_2_0 = (RuleCall)cDomainAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cDomainAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cDomainFunctionOrIDParserRuleCall_0_3_1_0 = (RuleCall)cDomainAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Assignment cActionsAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final RuleCall cActionsActionParserRuleCall_0_4_0_0 = (RuleCall)cActionsAssignment_0_4_0.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cGroup_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final Assignment cActionsAssignment_0_4_1_1 = (Assignment)cGroup_0_4_1.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_0_4_1_1_0 = (RuleCall)cActionsAssignment_0_4_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cTriggerAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cTriggerOnKeyword_1_0_0_0 = (Keyword)cTriggerAssignment_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cInitializationAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cInitializationDefinitionKeyword_1_0_1_0_0 = (Keyword)cInitializationAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cInstantiationAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cInstantiationInstantiationKeyword_1_0_1_1_0 = (Keyword)cInstantiationAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cTerminationAssignment_1_0_1_2 = (Assignment)cAlternatives_1_0_1.eContents().get(2);
		private final Keyword cTerminationTerminationKeyword_1_0_1_2_0 = (Keyword)cTerminationAssignment_1_0_1_2.eContents().get(0);
		private final Group cGroup_1_0_1_3 = (Group)cAlternatives_1_0_1.eContents().get(3);
		private final Assignment cEventAssignment_1_0_1_3_0 = (Assignment)cGroup_1_0_1_3.eContents().get(0);
		private final RuleCall cEventConceptDeclarationParserRuleCall_1_0_1_3_0_0 = (RuleCall)cEventAssignment_1_0_1_3_0.eContents().get(0);
		private final Group cGroup_1_0_1_3_1 = (Group)cGroup_1_0_1_3.eContents().get(1);
		private final Keyword cInKeyword_1_0_1_3_1_0 = (Keyword)cGroup_1_0_1_3_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1_3_1_1 = (Alternatives)cGroup_1_0_1_3_1.eContents().get(1);
		private final Assignment cAnyContextEventAssignment_1_0_1_3_1_1_0 = (Assignment)cAlternatives_1_0_1_3_1_1.eContents().get(0);
		private final Keyword cAnyContextEventContextKeyword_1_0_1_3_1_1_0_0 = (Keyword)cAnyContextEventAssignment_1_0_1_3_1_1_0.eContents().get(0);
		private final Assignment cRelatedEventContextAssignment_1_0_1_3_1_1_1 = (Assignment)cAlternatives_1_0_1_3_1_1.eContents().get(1);
		private final Keyword cRelatedEventContextRelatedKeyword_1_0_1_3_1_1_1_0 = (Keyword)cRelatedEventContextAssignment_1_0_1_3_1_1_1.eContents().get(0);
		private final Assignment cEventContextAssignment_1_0_1_3_1_2 = (Assignment)cGroup_1_0_1_3_1.eContents().get(2);
		private final RuleCall cEventContextConceptDeclarationParserRuleCall_1_0_1_3_1_2_0 = (RuleCall)cEventContextAssignment_1_0_1_3_1_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cParametersListParserRuleCall_1_0_2_0 = (RuleCall)cParametersAssignment_1_0_2.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_1_1_0 = (RuleCall)cActionsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cActionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_1_2_1_0 = (RuleCall)cActionsAssignment_1_2_1.eContents().get(0);
		
		//ActionSpecification:
		//    (integrated?='aggregated')? over?='over'
		//        domain+=FunctionOrID (=> ',' (domain+=FunctionOrID))*
		//        (actions+=Action (=> ',' actions+=Action)*)?
		//      |
		//        (trigger?='on' (
		//                initialization?='definition' |
		////                resolution?='resolution' |
		//                instantiation ?= 'instantiation' |
		//                termination ?='termination' |
		////                stateInitialization ?= 'initialization'|
		//                event=ConceptDeclaration ('in' (anyContextEvent?='context' | (relatedEventContext?='related')) eventContext=ConceptDeclaration)?
		//            )
		//            (parameters = List)?
		//        )?
		//        actions+=Action (=> ',' actions+=Action)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    (integrated?='aggregated')? over?='over'
		//        domain+=FunctionOrID (=> ',' (domain+=FunctionOrID))*
		//        (actions+=Action (=> ',' actions+=Action)*)?
		//      |
		//        (trigger?='on' (
		//                initialization?='definition' |
		////                resolution?='resolution' |
		//                instantiation ?= 'instantiation' |
		//                termination ?='termination' |
		////                stateInitialization ?= 'initialization'|
		//                event=ConceptDeclaration ('in' (anyContextEvent?='context' | (relatedEventContext?='related')) eventContext=ConceptDeclaration)?
		//            )
		//            (parameters = List)?
		//        )?
		//        actions+=Action (=> ',' actions+=Action)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(integrated?='aggregated')? over?='over'
		//    domain+=FunctionOrID (=> ',' (domain+=FunctionOrID))*
		//    (actions+=Action (=> ',' actions+=Action)*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//(integrated?='aggregated')?
		public Assignment getIntegratedAssignment_0_0() { return cIntegratedAssignment_0_0; }
		
		//'aggregated'
		public Keyword getIntegratedAggregatedKeyword_0_0_0() { return cIntegratedAggregatedKeyword_0_0_0; }
		
		//over?='over'
		public Assignment getOverAssignment_0_1() { return cOverAssignment_0_1; }
		
		//'over'
		public Keyword getOverOverKeyword_0_1_0() { return cOverOverKeyword_0_1_0; }
		
		//domain+=FunctionOrID
		public Assignment getDomainAssignment_0_2() { return cDomainAssignment_0_2; }
		
		//FunctionOrID
		public RuleCall getDomainFunctionOrIDParserRuleCall_0_2_0() { return cDomainFunctionOrIDParserRuleCall_0_2_0; }
		
		//(=> ',' (domain+=FunctionOrID))*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//=> ','
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }
		
		//(domain+=FunctionOrID)
		public Assignment getDomainAssignment_0_3_1() { return cDomainAssignment_0_3_1; }
		
		//FunctionOrID
		public RuleCall getDomainFunctionOrIDParserRuleCall_0_3_1_0() { return cDomainFunctionOrIDParserRuleCall_0_3_1_0; }
		
		//(actions+=Action (=> ',' actions+=Action)*)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//actions+=Action
		public Assignment getActionsAssignment_0_4_0() { return cActionsAssignment_0_4_0; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_0_4_0_0() { return cActionsActionParserRuleCall_0_4_0_0; }
		
		//(=> ',' actions+=Action)*
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }
		
		//=> ','
		public Keyword getCommaKeyword_0_4_1_0() { return cCommaKeyword_0_4_1_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_0_4_1_1() { return cActionsAssignment_0_4_1_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_0_4_1_1_0() { return cActionsActionParserRuleCall_0_4_1_1_0; }
		
		//        (trigger?='on' (
		//                initialization?='definition' |
		////                resolution?='resolution' |
		//                instantiation ?= 'instantiation' |
		//                termination ?='termination' |
		////                stateInitialization ?= 'initialization'|
		//                event=ConceptDeclaration ('in' (anyContextEvent?='context' | (relatedEventContext?='related')) eventContext=ConceptDeclaration)?
		//            )
		//            (parameters = List)?
		//        )?
		//        actions+=Action (=> ',' actions+=Action)*
		public Group getGroup_1() { return cGroup_1; }
		
		//        (trigger?='on' (
		//                initialization?='definition' |
		////                resolution?='resolution' |
		//                instantiation ?= 'instantiation' |
		//                termination ?='termination' |
		////                stateInitialization ?= 'initialization'|
		//                event=ConceptDeclaration ('in' (anyContextEvent?='context' | (relatedEventContext?='related')) eventContext=ConceptDeclaration)?
		//            )
		//            (parameters = List)?
		//        )?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//trigger?='on'
		public Assignment getTriggerAssignment_1_0_0() { return cTriggerAssignment_1_0_0; }
		
		//'on'
		public Keyword getTriggerOnKeyword_1_0_0_0() { return cTriggerOnKeyword_1_0_0_0; }
		
		// (
		//                initialization?='definition' |
		////                resolution?='resolution' |
		//                instantiation ?= 'instantiation' |
		//                termination ?='termination' |
		////                stateInitialization ?= 'initialization'|
		//                event=ConceptDeclaration ('in' (anyContextEvent?='context' | (relatedEventContext?='related')) eventContext=ConceptDeclaration)?
		//            )
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//initialization?='definition'
		public Assignment getInitializationAssignment_1_0_1_0() { return cInitializationAssignment_1_0_1_0; }
		
		//'definition'
		public Keyword getInitializationDefinitionKeyword_1_0_1_0_0() { return cInitializationDefinitionKeyword_1_0_1_0_0; }
		
		////                resolution?='resolution' |
		//                instantiation ?= 'instantiation'
		public Assignment getInstantiationAssignment_1_0_1_1() { return cInstantiationAssignment_1_0_1_1; }
		
		//'instantiation'
		public Keyword getInstantiationInstantiationKeyword_1_0_1_1_0() { return cInstantiationInstantiationKeyword_1_0_1_1_0; }
		
		//termination ?='termination'
		public Assignment getTerminationAssignment_1_0_1_2() { return cTerminationAssignment_1_0_1_2; }
		
		//'termination'
		public Keyword getTerminationTerminationKeyword_1_0_1_2_0() { return cTerminationTerminationKeyword_1_0_1_2_0; }
		
		////                stateInitialization ?= 'initialization'|
		//                event=ConceptDeclaration ('in' (anyContextEvent?='context' | (relatedEventContext?='related')) eventContext=ConceptDeclaration)?
		public Group getGroup_1_0_1_3() { return cGroup_1_0_1_3; }
		
		////                stateInitialization ?= 'initialization'|
		//                event=ConceptDeclaration
		public Assignment getEventAssignment_1_0_1_3_0() { return cEventAssignment_1_0_1_3_0; }
		
		//ConceptDeclaration
		public RuleCall getEventConceptDeclarationParserRuleCall_1_0_1_3_0_0() { return cEventConceptDeclarationParserRuleCall_1_0_1_3_0_0; }
		
		//('in' (anyContextEvent?='context' | (relatedEventContext?='related')) eventContext=ConceptDeclaration)?
		public Group getGroup_1_0_1_3_1() { return cGroup_1_0_1_3_1; }
		
		//'in'
		public Keyword getInKeyword_1_0_1_3_1_0() { return cInKeyword_1_0_1_3_1_0; }
		
		//(anyContextEvent?='context' | (relatedEventContext?='related'))
		public Alternatives getAlternatives_1_0_1_3_1_1() { return cAlternatives_1_0_1_3_1_1; }
		
		//anyContextEvent?='context'
		public Assignment getAnyContextEventAssignment_1_0_1_3_1_1_0() { return cAnyContextEventAssignment_1_0_1_3_1_1_0; }
		
		//'context'
		public Keyword getAnyContextEventContextKeyword_1_0_1_3_1_1_0_0() { return cAnyContextEventContextKeyword_1_0_1_3_1_1_0_0; }
		
		//(relatedEventContext?='related')
		public Assignment getRelatedEventContextAssignment_1_0_1_3_1_1_1() { return cRelatedEventContextAssignment_1_0_1_3_1_1_1; }
		
		//'related'
		public Keyword getRelatedEventContextRelatedKeyword_1_0_1_3_1_1_1_0() { return cRelatedEventContextRelatedKeyword_1_0_1_3_1_1_1_0; }
		
		//eventContext=ConceptDeclaration
		public Assignment getEventContextAssignment_1_0_1_3_1_2() { return cEventContextAssignment_1_0_1_3_1_2; }
		
		//ConceptDeclaration
		public RuleCall getEventContextConceptDeclarationParserRuleCall_1_0_1_3_1_2_0() { return cEventContextConceptDeclarationParserRuleCall_1_0_1_3_1_2_0; }
		
		//(parameters = List)?
		public Assignment getParametersAssignment_1_0_2() { return cParametersAssignment_1_0_2; }
		
		//List
		public RuleCall getParametersListParserRuleCall_1_0_2_0() { return cParametersListParserRuleCall_1_0_2_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_1_1_0() { return cActionsActionParserRuleCall_1_1_0; }
		
		//(=> ',' actions+=Action)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//=> ','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_1_2_1() { return cActionsAssignment_1_2_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_1_2_1_0() { return cActionsActionParserRuleCall_1_2_1_0; }
	}
	public class FunctionOrIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.FunctionOrID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Assignment cFunctionIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cFunctionIdAlternatives_1_0 = (Alternatives)cFunctionIdAssignment_1.eContents().get(0);
		private final RuleCall cFunctionIdLOWERCASE_IDTerminalRuleCall_1_0_0 = (RuleCall)cFunctionIdAlternatives_1_0.eContents().get(0);
		private final RuleCall cFunctionIdNamespaceIdParserRuleCall_1_0_1 = (RuleCall)cFunctionIdAlternatives_1_0.eContents().get(1);
		
		//FunctionOrID:
		//    function=Function | functionId=(LOWERCASE_ID|NamespaceId);
		@Override public ParserRule getRule() { return rule; }
		
		//function=Function | functionId=(LOWERCASE_ID|NamespaceId)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//function=Function
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0_0() { return cFunctionFunctionParserRuleCall_0_0; }
		
		//functionId=(LOWERCASE_ID|NamespaceId)
		public Assignment getFunctionIdAssignment_1() { return cFunctionIdAssignment_1; }
		
		//(LOWERCASE_ID|NamespaceId)
		public Alternatives getFunctionIdAlternatives_1_0() { return cFunctionIdAlternatives_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getFunctionIdLOWERCASE_IDTerminalRuleCall_1_0_0() { return cFunctionIdLOWERCASE_IDTerminalRuleCall_1_0_0; }
		
		//NamespaceId
		public RuleCall getFunctionIdNamespaceIdParserRuleCall_1_0_1() { return cFunctionIdNamespaceIdParserRuleCall_1_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSetAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cSetSetKeyword_0_0_0 = (Keyword)cSetAssignment_0_0.eContents().get(0);
		private final Assignment cAssignmentsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAssignmentsValueAssignmentParserRuleCall_0_1_0 = (RuleCall)cAssignmentsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cAssignmentsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cAssignmentsValueAssignmentParserRuleCall_0_2_1_0 = (RuleCall)cAssignmentsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Group cGroup_0_3_0 = (Group)cGroup_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_3_0_0 = (Alternatives)cGroup_0_3_0.eContents().get(0);
		private final Keyword cIfKeyword_0_3_0_0_0 = (Keyword)cAlternatives_0_3_0_0.eContents().get(0);
		private final Assignment cConditionNegativeAssignment_0_3_0_0_1 = (Assignment)cAlternatives_0_3_0_0.eContents().get(1);
		private final Keyword cConditionNegativeUnlessKeyword_0_3_0_0_1_0 = (Keyword)cConditionNegativeAssignment_0_3_0_0_1.eContents().get(0);
		private final Assignment cConditionAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cConditionValueParserRuleCall_0_3_1_0 = (RuleCall)cConditionAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIntegrateAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIntegrateIntegrateKeyword_1_0_0 = (Keyword)cIntegrateAssignment_1_0.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignmentsValueAssignmentParserRuleCall_1_1_0 = (RuleCall)cAssignmentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAssignmentsValueAssignmentParserRuleCall_1_2_1_0 = (RuleCall)cAssignmentsAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cGroup_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_3_0_0 = (Alternatives)cGroup_1_3_0.eContents().get(0);
		private final Keyword cIfKeyword_1_3_0_0_0 = (Keyword)cAlternatives_1_3_0_0.eContents().get(0);
		private final Assignment cConditionNegativeAssignment_1_3_0_0_1 = (Assignment)cAlternatives_1_3_0_0.eContents().get(1);
		private final Keyword cConditionNegativeUnlessKeyword_1_3_0_0_1_0 = (Keyword)cConditionNegativeAssignment_1_3_0_0_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cConditionValueParserRuleCall_1_3_1_0 = (RuleCall)cConditionAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cDoAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cDoAlternatives_2_0_0 = (Alternatives)cDoAssignment_2_0.eContents().get(0);
		private final Keyword cDoDoKeyword_2_0_0_0 = (Keyword)cDoAlternatives_2_0_0.eContents().get(0);
		private final Keyword cDoThenKeyword_2_0_0_1 = (Keyword)cDoAlternatives_2_0_0.eContents().get(1);
		private final Keyword cDoFinallyKeyword_2_0_0_2 = (Keyword)cDoAlternatives_2_0_0.eContents().get(2);
		private final Assignment cExecutedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExecutedValueExecutionParserRuleCall_2_1_0 = (RuleCall)cExecutedAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cExecutedAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cExecutedValueExecutionParserRuleCall_2_2_1_0 = (RuleCall)cExecutedAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Group cGroup_2_3_0 = (Group)cGroup_2_3.eContents().get(0);
		private final Alternatives cAlternatives_2_3_0_0 = (Alternatives)cGroup_2_3_0.eContents().get(0);
		private final Keyword cIfKeyword_2_3_0_0_0 = (Keyword)cAlternatives_2_3_0_0.eContents().get(0);
		private final Assignment cConditionNegativeAssignment_2_3_0_0_1 = (Assignment)cAlternatives_2_3_0_0.eContents().get(1);
		private final Keyword cConditionNegativeUnlessKeyword_2_3_0_0_1_0 = (Keyword)cConditionNegativeAssignment_2_3_0_0_1.eContents().get(0);
		private final Assignment cConditionAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cConditionValueParserRuleCall_2_3_1_0 = (RuleCall)cConditionAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cMoveAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cMoveMoveKeyword_3_0_0 = (Keyword)cMoveAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cWhereAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cWhereValueParserRuleCall_3_1_0_0 = (RuleCall)cWhereAssignment_3_1_0.eContents().get(0);
		private final Assignment cAwayAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final Keyword cAwayAwayKeyword_3_1_1_0 = (Keyword)cAwayAssignment_3_1_1.eContents().get(0);
		private final Assignment cConditionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConditionValueParserRuleCall_3_2_0 = (RuleCall)cConditionAssignment_3_2.eContents().get(0);
		
		//Action:
		//    (set?='set')
		//        assignments+=ValueAssignment (',' assignments+=ValueAssignment)*
		//        (=> ('if' | conditionNegative?='unless') condition=Value)? |
		//    integrate?='integrate'
		//        assignments+=ValueAssignment (',' assignments+=ValueAssignment)*
		//        (=> ('if' | conditionNegative?='unless') condition=Value)? |
		//    do?=('do'|'then'|'finally')
		//        executed+=ValueExecution (',' executed+=ValueExecution)*
		//        (=> ('if' | conditionNegative?='unless') condition=Value)? |
		//    /*
		//     * 'move away' sounds a lot nicer than 'die'
		//     */
		//    move?='move' (where=Value | away?='away') (=> condition=Value)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(set?='set')
		//    assignments+=ValueAssignment (',' assignments+=ValueAssignment)*
		//    (=> ('if' | conditionNegative?='unless') condition=Value)? |
		//integrate?='integrate'
		//    assignments+=ValueAssignment (',' assignments+=ValueAssignment)*
		//    (=> ('if' | conditionNegative?='unless') condition=Value)? |
		//do?=('do'|'then'|'finally')
		//    executed+=ValueExecution (',' executed+=ValueExecution)*
		//    (=> ('if' | conditionNegative?='unless') condition=Value)? |
		///*
		// * 'move away' sounds a lot nicer than 'die'
		// */
		//move?='move' (where=Value | away?='away') (=> condition=Value)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(set?='set')
		//    assignments+=ValueAssignment (',' assignments+=ValueAssignment)*
		//    (=> ('if' | conditionNegative?='unless') condition=Value)?
		public Group getGroup_0() { return cGroup_0; }
		
		//(set?='set')
		public Assignment getSetAssignment_0_0() { return cSetAssignment_0_0; }
		
		//'set'
		public Keyword getSetSetKeyword_0_0_0() { return cSetSetKeyword_0_0_0; }
		
		//assignments+=ValueAssignment
		public Assignment getAssignmentsAssignment_0_1() { return cAssignmentsAssignment_0_1; }
		
		//ValueAssignment
		public RuleCall getAssignmentsValueAssignmentParserRuleCall_0_1_0() { return cAssignmentsValueAssignmentParserRuleCall_0_1_0; }
		
		//(',' assignments+=ValueAssignment)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//assignments+=ValueAssignment
		public Assignment getAssignmentsAssignment_0_2_1() { return cAssignmentsAssignment_0_2_1; }
		
		//ValueAssignment
		public RuleCall getAssignmentsValueAssignmentParserRuleCall_0_2_1_0() { return cAssignmentsValueAssignmentParserRuleCall_0_2_1_0; }
		
		//(=> ('if' | conditionNegative?='unless') condition=Value)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//=> ('if' | conditionNegative?='unless')
		public Group getGroup_0_3_0() { return cGroup_0_3_0; }
		
		//'if' | conditionNegative?='unless'
		public Alternatives getAlternatives_0_3_0_0() { return cAlternatives_0_3_0_0; }
		
		//'if'
		public Keyword getIfKeyword_0_3_0_0_0() { return cIfKeyword_0_3_0_0_0; }
		
		//conditionNegative?='unless'
		public Assignment getConditionNegativeAssignment_0_3_0_0_1() { return cConditionNegativeAssignment_0_3_0_0_1; }
		
		//'unless'
		public Keyword getConditionNegativeUnlessKeyword_0_3_0_0_1_0() { return cConditionNegativeUnlessKeyword_0_3_0_0_1_0; }
		
		//condition=Value
		public Assignment getConditionAssignment_0_3_1() { return cConditionAssignment_0_3_1; }
		
		//Value
		public RuleCall getConditionValueParserRuleCall_0_3_1_0() { return cConditionValueParserRuleCall_0_3_1_0; }
		
		//integrate?='integrate'
		//    assignments+=ValueAssignment (',' assignments+=ValueAssignment)*
		//    (=> ('if' | conditionNegative?='unless') condition=Value)?
		public Group getGroup_1() { return cGroup_1; }
		
		//integrate?='integrate'
		public Assignment getIntegrateAssignment_1_0() { return cIntegrateAssignment_1_0; }
		
		//'integrate'
		public Keyword getIntegrateIntegrateKeyword_1_0_0() { return cIntegrateIntegrateKeyword_1_0_0; }
		
		//assignments+=ValueAssignment
		public Assignment getAssignmentsAssignment_1_1() { return cAssignmentsAssignment_1_1; }
		
		//ValueAssignment
		public RuleCall getAssignmentsValueAssignmentParserRuleCall_1_1_0() { return cAssignmentsValueAssignmentParserRuleCall_1_1_0; }
		
		//(',' assignments+=ValueAssignment)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//assignments+=ValueAssignment
		public Assignment getAssignmentsAssignment_1_2_1() { return cAssignmentsAssignment_1_2_1; }
		
		//ValueAssignment
		public RuleCall getAssignmentsValueAssignmentParserRuleCall_1_2_1_0() { return cAssignmentsValueAssignmentParserRuleCall_1_2_1_0; }
		
		//(=> ('if' | conditionNegative?='unless') condition=Value)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//=> ('if' | conditionNegative?='unless')
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }
		
		//'if' | conditionNegative?='unless'
		public Alternatives getAlternatives_1_3_0_0() { return cAlternatives_1_3_0_0; }
		
		//'if'
		public Keyword getIfKeyword_1_3_0_0_0() { return cIfKeyword_1_3_0_0_0; }
		
		//conditionNegative?='unless'
		public Assignment getConditionNegativeAssignment_1_3_0_0_1() { return cConditionNegativeAssignment_1_3_0_0_1; }
		
		//'unless'
		public Keyword getConditionNegativeUnlessKeyword_1_3_0_0_1_0() { return cConditionNegativeUnlessKeyword_1_3_0_0_1_0; }
		
		//condition=Value
		public Assignment getConditionAssignment_1_3_1() { return cConditionAssignment_1_3_1; }
		
		//Value
		public RuleCall getConditionValueParserRuleCall_1_3_1_0() { return cConditionValueParserRuleCall_1_3_1_0; }
		
		//do?=('do'|'then'|'finally')
		//    executed+=ValueExecution (',' executed+=ValueExecution)*
		//    (=> ('if' | conditionNegative?='unless') condition=Value)?
		public Group getGroup_2() { return cGroup_2; }
		
		//do?=('do'|'then'|'finally')
		public Assignment getDoAssignment_2_0() { return cDoAssignment_2_0; }
		
		//('do'|'then'|'finally')
		public Alternatives getDoAlternatives_2_0_0() { return cDoAlternatives_2_0_0; }
		
		//'do'
		public Keyword getDoDoKeyword_2_0_0_0() { return cDoDoKeyword_2_0_0_0; }
		
		//'then'
		public Keyword getDoThenKeyword_2_0_0_1() { return cDoThenKeyword_2_0_0_1; }
		
		//'finally'
		public Keyword getDoFinallyKeyword_2_0_0_2() { return cDoFinallyKeyword_2_0_0_2; }
		
		//executed+=ValueExecution
		public Assignment getExecutedAssignment_2_1() { return cExecutedAssignment_2_1; }
		
		//ValueExecution
		public RuleCall getExecutedValueExecutionParserRuleCall_2_1_0() { return cExecutedValueExecutionParserRuleCall_2_1_0; }
		
		//(',' executed+=ValueExecution)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//executed+=ValueExecution
		public Assignment getExecutedAssignment_2_2_1() { return cExecutedAssignment_2_2_1; }
		
		//ValueExecution
		public RuleCall getExecutedValueExecutionParserRuleCall_2_2_1_0() { return cExecutedValueExecutionParserRuleCall_2_2_1_0; }
		
		//(=> ('if' | conditionNegative?='unless') condition=Value)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//=> ('if' | conditionNegative?='unless')
		public Group getGroup_2_3_0() { return cGroup_2_3_0; }
		
		//'if' | conditionNegative?='unless'
		public Alternatives getAlternatives_2_3_0_0() { return cAlternatives_2_3_0_0; }
		
		//'if'
		public Keyword getIfKeyword_2_3_0_0_0() { return cIfKeyword_2_3_0_0_0; }
		
		//conditionNegative?='unless'
		public Assignment getConditionNegativeAssignment_2_3_0_0_1() { return cConditionNegativeAssignment_2_3_0_0_1; }
		
		//'unless'
		public Keyword getConditionNegativeUnlessKeyword_2_3_0_0_1_0() { return cConditionNegativeUnlessKeyword_2_3_0_0_1_0; }
		
		//condition=Value
		public Assignment getConditionAssignment_2_3_1() { return cConditionAssignment_2_3_1; }
		
		//Value
		public RuleCall getConditionValueParserRuleCall_2_3_1_0() { return cConditionValueParserRuleCall_2_3_1_0; }
		
		///*
		// * 'move away' sounds a lot nicer than 'die'
		// */
		//move?='move' (where=Value | away?='away') (=> condition=Value)?
		public Group getGroup_3() { return cGroup_3; }
		
		///*
		// * 'move away' sounds a lot nicer than 'die'
		// */
		//move?='move'
		public Assignment getMoveAssignment_3_0() { return cMoveAssignment_3_0; }
		
		//'move'
		public Keyword getMoveMoveKeyword_3_0_0() { return cMoveMoveKeyword_3_0_0; }
		
		//(where=Value | away?='away')
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//where=Value
		public Assignment getWhereAssignment_3_1_0() { return cWhereAssignment_3_1_0; }
		
		//Value
		public RuleCall getWhereValueParserRuleCall_3_1_0_0() { return cWhereValueParserRuleCall_3_1_0_0; }
		
		//away?='away'
		public Assignment getAwayAssignment_3_1_1() { return cAwayAssignment_3_1_1; }
		
		//'away'
		public Keyword getAwayAwayKeyword_3_1_1_0() { return cAwayAwayKeyword_3_1_1_0; }
		
		//(=> condition=Value)?
		public Assignment getConditionAssignment_3_2() { return cConditionAssignment_3_2; }
		
		//Value
		public RuleCall getConditionValueParserRuleCall_3_2_0() { return cConditionValueParserRuleCall_3_2_0; }
	}
	public class ValueAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ValueAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTargetLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cTargetAssignment_0_0.eContents().get(0);
		private final Keyword cToKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAssignedValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignedValueComputableValueParserRuleCall_1_0 = (RuleCall)cAssignedValueAssignment_1.eContents().get(0);
		
		//ValueAssignment:
		//    ((target = LOWERCASE_ID)? 'to')? assignedValue=ComputableValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//((target = LOWERCASE_ID)? 'to')? assignedValue=ComputableValue
		public Group getGroup() { return cGroup; }
		
		//((target = LOWERCASE_ID)? 'to')?
		public Group getGroup_0() { return cGroup_0; }
		
		//(target = LOWERCASE_ID)?
		public Assignment getTargetAssignment_0_0() { return cTargetAssignment_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getTargetLOWERCASE_IDTerminalRuleCall_0_0_0() { return cTargetLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//'to'
		public Keyword getToKeyword_0_1() { return cToKeyword_0_1; }
		
		//assignedValue=ComputableValue
		public Assignment getAssignedValueAssignment_1() { return cAssignedValueAssignment_1; }
		
		//ComputableValue
		public RuleCall getAssignedValueComputableValueParserRuleCall_1_0() { return cAssignedValueComputableValueParserRuleCall_1_0; }
	}
	public class ComputableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ComputableValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralOrIdOrCommaParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprEXPRTerminalRuleCall_2_0_0 = (RuleCall)cExprAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cInKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLanguageAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cLanguageAlternatives_2_1_1_0 = (Alternatives)cLanguageAssignment_2_1_1.eContents().get(0);
		private final RuleCall cLanguageLOWERCASE_IDTerminalRuleCall_2_1_1_0_0 = (RuleCall)cLanguageAlternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cLanguageUPPERCASE_IDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cLanguageAlternatives_2_1_1_0.eContents().get(1);
		private final RuleCall cLanguageCAMELCASE_IDTerminalRuleCall_2_1_1_0_2 = (RuleCall)cLanguageAlternatives_2_1_1_0.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cIdAlternatives_3_0 = (Alternatives)cIdAssignment_3.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_3_0_0 = (RuleCall)cIdAlternatives_3_0.eContents().get(0);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_3_0_1 = (RuleCall)cIdAlternatives_3_0.eContents().get(1);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_3_0_2 = (RuleCall)cIdAlternatives_3_0.eContents().get(2);
		private final Assignment cListAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cListListParserRuleCall_4_0 = (RuleCall)cListAssignment_4.eContents().get(0);
		private final Assignment cNullAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNullUnknownKeyword_5_0 = (Keyword)cNullAssignment_5.eContents().get(0);
		
		///*
		// * this is made necessary by Xtext's inability of properly generating code when
		// * superclasses come from imported grammars.
		// */
		//ComputableValue:
		//    literal=LiteralOrIdOrComma |
		//    function=Function |
		//    expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))? |
		//    id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
		//    list=List |
		//    null?='unknown';
		@Override public ParserRule getRule() { return rule; }
		
		//literal=LiteralOrIdOrComma |
		//function=Function |
		//expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))? |
		//id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
		//list=List |
		//null?='unknown'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal=LiteralOrIdOrComma
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }
		
		//LiteralOrIdOrComma
		public RuleCall getLiteralLiteralOrIdOrCommaParserRuleCall_0_0() { return cLiteralLiteralOrIdOrCommaParserRuleCall_0_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }
		
		//expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))?
		public Group getGroup_2() { return cGroup_2; }
		
		//expr=EXPR
		public Assignment getExprAssignment_2_0() { return cExprAssignment_2_0; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_2_0_0() { return cExprEXPRTerminalRuleCall_2_0_0; }
		
		//('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'in'
		public Keyword getInKeyword_2_1_0() { return cInKeyword_2_1_0; }
		
		//language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Assignment getLanguageAssignment_2_1_1() { return cLanguageAssignment_2_1_1; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Alternatives getLanguageAlternatives_2_1_1_0() { return cLanguageAlternatives_2_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLanguageLOWERCASE_IDTerminalRuleCall_2_1_1_0_0() { return cLanguageLOWERCASE_IDTerminalRuleCall_2_1_1_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getLanguageUPPERCASE_IDTerminalRuleCall_2_1_1_0_1() { return cLanguageUPPERCASE_IDTerminalRuleCall_2_1_1_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getLanguageCAMELCASE_IDTerminalRuleCall_2_1_1_0_2() { return cLanguageCAMELCASE_IDTerminalRuleCall_2_1_1_0_2; }
		
		//id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Alternatives getIdAlternatives_3_0() { return cIdAlternatives_3_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_3_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_3_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_3_0_1() { return cIdUPPERCASE_IDTerminalRuleCall_3_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_3_0_2() { return cIdCAMELCASE_IDTerminalRuleCall_3_0_2; }
		
		//list=List
		public Assignment getListAssignment_4() { return cListAssignment_4; }
		
		//List
		public RuleCall getListListParserRuleCall_4_0() { return cListListParserRuleCall_4_0; }
		
		//null?='unknown'
		public Assignment getNullAssignment_5() { return cNullAssignment_5; }
		
		//'unknown'
		public Keyword getNullUnknownKeyword_5_0() { return cNullUnknownKeyword_5_0; }
	}
	public class ValueExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ValueExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExecValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExecValueExecutableValueParserRuleCall_0_0 = (RuleCall)cExecValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cForKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTargetLOWERCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cTargetAssignment_1_1.eContents().get(0);
		
		//ValueExecution returns ValueAssignment:
		//    execValue=ExecutableValue ('for' target=LOWERCASE_ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//execValue=ExecutableValue ('for' target=LOWERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//execValue=ExecutableValue
		public Assignment getExecValueAssignment_0() { return cExecValueAssignment_0; }
		
		//ExecutableValue
		public RuleCall getExecValueExecutableValueParserRuleCall_0_0() { return cExecValueExecutableValueParserRuleCall_0_0; }
		
		//('for' target=LOWERCASE_ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'for'
		public Keyword getForKeyword_1_0() { return cForKeyword_1_0; }
		
		//target=LOWERCASE_ID
		public Assignment getTargetAssignment_1_1() { return cTargetAssignment_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getTargetLOWERCASE_IDTerminalRuleCall_1_1_0() { return cTargetLOWERCASE_IDTerminalRuleCall_1_1_0; }
	}
	public class ExecutableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ExecutableValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cFunctionFunctionParserRuleCall_0_0_0 = (RuleCall)cFunctionAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cExprAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cExprEXPRTerminalRuleCall_0_1_0_0 = (RuleCall)cExprAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cInKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cLanguageAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final Alternatives cLanguageAlternatives_0_1_1_1_0 = (Alternatives)cLanguageAssignment_0_1_1_1.eContents().get(0);
		private final RuleCall cLanguageLOWERCASE_IDTerminalRuleCall_0_1_1_1_0_0 = (RuleCall)cLanguageAlternatives_0_1_1_1_0.eContents().get(0);
		private final RuleCall cLanguageUPPERCASE_IDTerminalRuleCall_0_1_1_1_0_1 = (RuleCall)cLanguageAlternatives_0_1_1_1_0.eContents().get(1);
		private final RuleCall cLanguageCAMELCASE_IDTerminalRuleCall_0_1_1_1_0_2 = (RuleCall)cLanguageAlternatives_0_1_1_1_0.eContents().get(2);
		private final Assignment cUrnAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Alternatives cUrnAlternatives_0_2_0 = (Alternatives)cUrnAssignment_0_2.eContents().get(0);
		private final RuleCall cUrnUrnIdParserRuleCall_0_2_0_0 = (RuleCall)cUrnAlternatives_0_2_0.eContents().get(0);
		private final RuleCall cUrnSTRINGTerminalRuleCall_0_2_0_1 = (RuleCall)cUrnAlternatives_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cIfKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Assignment cConditionNegatedAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cConditionNegatedUnlessKeyword_1_0_1_0 = (Keyword)cConditionNegatedAssignment_1_0_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionValueParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		
		//ExecutableValue returns ComputableValue:
		//    (
		//        function=Function |
		//        expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))? |
		//        urn=(UrnId|STRING) // |
		////        model=Path
		//    ) (('if'|conditionNegated?='unless') condition=Value)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    (
		//        function=Function |
		//        expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))? |
		//        urn=(UrnId|STRING) // |
		////        model=Path
		//    ) (('if'|conditionNegated?='unless') condition=Value)?
		public Group getGroup() { return cGroup; }
		
		//    (
		//        function=Function |
		//        expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))? |
		//        urn=(UrnId|STRING) // |
		////        model=Path
		//    )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_0_0() { return cFunctionAssignment_0_0; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0_0_0() { return cFunctionFunctionParserRuleCall_0_0_0; }
		
		//expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//expr=EXPR
		public Assignment getExprAssignment_0_1_0() { return cExprAssignment_0_1_0; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_0_1_0_0() { return cExprEXPRTerminalRuleCall_0_1_0_0; }
		
		//('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))?
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//'in'
		public Keyword getInKeyword_0_1_1_0() { return cInKeyword_0_1_1_0; }
		
		//language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Assignment getLanguageAssignment_0_1_1_1() { return cLanguageAssignment_0_1_1_1; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Alternatives getLanguageAlternatives_0_1_1_1_0() { return cLanguageAlternatives_0_1_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLanguageLOWERCASE_IDTerminalRuleCall_0_1_1_1_0_0() { return cLanguageLOWERCASE_IDTerminalRuleCall_0_1_1_1_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getLanguageUPPERCASE_IDTerminalRuleCall_0_1_1_1_0_1() { return cLanguageUPPERCASE_IDTerminalRuleCall_0_1_1_1_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getLanguageCAMELCASE_IDTerminalRuleCall_0_1_1_1_0_2() { return cLanguageCAMELCASE_IDTerminalRuleCall_0_1_1_1_0_2; }
		
		//urn=(UrnId|STRING)
		public Assignment getUrnAssignment_0_2() { return cUrnAssignment_0_2; }
		
		//(UrnId|STRING)
		public Alternatives getUrnAlternatives_0_2_0() { return cUrnAlternatives_0_2_0; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_0_2_0_0() { return cUrnUrnIdParserRuleCall_0_2_0_0; }
		
		//STRING
		public RuleCall getUrnSTRINGTerminalRuleCall_0_2_0_1() { return cUrnSTRINGTerminalRuleCall_0_2_0_1; }
		
		//(('if'|conditionNegated?='unless') condition=Value)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('if'|conditionNegated?='unless')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'if'
		public Keyword getIfKeyword_1_0_0() { return cIfKeyword_1_0_0; }
		
		//conditionNegated?='unless'
		public Assignment getConditionNegatedAssignment_1_0_1() { return cConditionNegatedAssignment_1_0_1; }
		
		//'unless'
		public Keyword getConditionNegatedUnlessKeyword_1_0_1_0() { return cConditionNegatedUnlessKeyword_1_0_1_0; }
		
		//condition=Value
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//Value
		public RuleCall getConditionValueParserRuleCall_1_1_0() { return cConditionValueParserRuleCall_1_1_0; }
	}
	public class MODEL_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.MODEL_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLearnKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNumberKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cObjectKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTextKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBooleanKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//MODEL_TYPE:
		//    'model' |
		//    'learn' |
		//    'number' |
		//    'object' |
		//    'text' |
		//    'boolean'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' |
		//'learn' |
		//'number' |
		//'object' |
		//'text' |
		//'boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//'learn'
		public Keyword getLearnKeyword_1() { return cLearnKeyword_1; }
		
		//'number'
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }
		
		//'object'
		public Keyword getObjectKeyword_3() { return cObjectKeyword_3; }
		
		//'text'
		public Keyword getTextKeyword_4() { return cTextKeyword_4; }
		
		//'boolean'
		public Keyword getBooleanKeyword_5() { return cBooleanKeyword_5; }
	}
	public class VALUE_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.VALUE_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cWhereKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOnlyKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cWithoutKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cExclamationMarkEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cPlusKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cMinusKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cTimesKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cOverKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cByKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		
		//VALUE_OPERATOR:
		//    '>'  |
		//    '>=' |
		//    '<='|
		//    '<'|
		//    'where'|
		//    '=='|
		//    '='| 'only'|
		//    'without'|
		//    '!='|
		//    'plus'|
		//    'minus'|
		//    'times'|
		//    'over' |
		//    'by'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'>'  |
		//'>=' |
		//'<='|
		//'<'|
		//'where'|
		//'=='|
		//'='| 'only'|
		//'without'|
		//'!='|
		//'plus'|
		//'minus'|
		//'times'|
		//'over' |
		//'by'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
		
		//'where'
		public Keyword getWhereKeyword_4() { return cWhereKeyword_4; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_5() { return cEqualsSignEqualsSignKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//'only'
		public Keyword getOnlyKeyword_7() { return cOnlyKeyword_7; }
		
		//'without'
		public Keyword getWithoutKeyword_8() { return cWithoutKeyword_8; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_9() { return cExclamationMarkEqualsSignKeyword_9; }
		
		//'plus'
		public Keyword getPlusKeyword_10() { return cPlusKeyword_10; }
		
		//'minus'
		public Keyword getMinusKeyword_11() { return cMinusKeyword_11; }
		
		//'times'
		public Keyword getTimesKeyword_12() { return cTimesKeyword_12; }
		
		//'over'
		public Keyword getOverKeyword_13() { return cOverKeyword_13; }
		
		//'by'
		public Keyword getByKeyword_14() { return cByKeyword_14; }
	}
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0_0 = (RuleCall)cAnnotationsAssignment_0_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_1_0 = (RuleCall)cAnnotationsAssignment_0_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Assignment cProjectPrivateAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cProjectPrivateProjectKeyword_1_0_0_0 = (Keyword)cProjectPrivateAssignment_1_0_0.eContents().get(0);
		private final Assignment cPrivateAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0_1_0 = (Keyword)cPrivateAssignment_1_0_1.eContents().get(0);
		private final Assignment cInactiveAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cInactiveVoidKeyword_1_1_0 = (Keyword)cInactiveAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cNamespaceKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cScenarioAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cScenarioScenarioKeyword_2_1_0 = (Keyword)cScenarioAssignment_2_1.eContents().get(0);
		private final Assignment cWorldviewBoundAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cWorldviewBoundWorldviewKeyword_2_2_0 = (Keyword)cWorldviewBoundAssignment_2_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamePathNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDocstringAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDocstringSTRINGTerminalRuleCall_4_0 = (RuleCall)cDocstringAssignment_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cUsingKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cLanguageKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cLanguageAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cLanguageUPPERCASE_IDTerminalRuleCall_5_0_2_0 = (RuleCall)cLanguageAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cUsingKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cImportedAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cImportedImportParserRuleCall_5_1_1_0 = (RuleCall)cImportedAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_1_2 = (Group)cGroup_5_1.eContents().get(2);
		private final Keyword cCommaKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Assignment cImportedAssignment_5_1_2_1 = (Assignment)cGroup_5_1_2.eContents().get(1);
		private final RuleCall cImportedImportParserRuleCall_5_1_2_1_0 = (RuleCall)cImportedAssignment_5_1_2_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cImportsKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cOwlImportsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cOwlImportsOwlImportParserRuleCall_5_2_1_0 = (RuleCall)cOwlImportsAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_2_2 = (Group)cGroup_5_2.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_2_0 = (Keyword)cGroup_5_2_2.eContents().get(0);
		private final Assignment cOwlImportsAssignment_5_2_2_1 = (Assignment)cGroup_5_2_2.eContents().get(1);
		private final RuleCall cOwlImportsOwlImportParserRuleCall_5_2_2_1_0 = (RuleCall)cOwlImportsAssignment_5_2_2_1.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cUnorderedGroup_5.eContents().get(3);
		private final Keyword cCoveringKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cCoverageAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cCoverageFunctionParserRuleCall_5_3_1_0 = (RuleCall)cCoverageAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_5_3_2 = (Group)cGroup_5_3.eContents().get(2);
		private final Keyword cCommaKeyword_5_3_2_0 = (Keyword)cGroup_5_3_2.eContents().get(0);
		private final Assignment cCoverageAssignment_5_3_2_1 = (Assignment)cGroup_5_3_2.eContents().get(1);
		private final RuleCall cCoverageFunctionParserRuleCall_5_3_2_1_0 = (RuleCall)cCoverageAssignment_5_3_2_1.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cUnorderedGroup_5.eContents().get(4);
		private final Keyword cInKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Keyword cDomainKeyword_5_4_1 = (Keyword)cGroup_5_4.eContents().get(1);
		private final Alternatives cAlternatives_5_4_2 = (Alternatives)cGroup_5_4.eContents().get(2);
		private final Assignment cRootDomainAssignment_5_4_2_0 = (Assignment)cAlternatives_5_4_2.eContents().get(0);
		private final Keyword cRootDomainRootKeyword_5_4_2_0_0 = (Keyword)cRootDomainAssignment_5_4_2_0.eContents().get(0);
		private final Assignment cDomainConceptAssignment_5_4_2_1 = (Assignment)cAlternatives_5_4_2.eContents().get(1);
		private final RuleCall cDomainConceptConceptParserRuleCall_5_4_2_1_0 = (RuleCall)cDomainConceptAssignment_5_4_2_1.eContents().get(0);
		private final Group cGroup_5_5 = (Group)cUnorderedGroup_5.eContents().get(5);
		private final Keyword cDisjointKeyword_5_5_0 = (Keyword)cGroup_5_5.eContents().get(0);
		private final Keyword cWithKeyword_5_5_1 = (Keyword)cGroup_5_5.eContents().get(1);
		private final Assignment cDisjointNamespacesAssignment_5_5_2 = (Assignment)cGroup_5_5.eContents().get(2);
		private final RuleCall cDisjointNamespacesPathNameParserRuleCall_5_5_2_0 = (RuleCall)cDisjointNamespacesAssignment_5_5_2.eContents().get(0);
		private final Group cGroup_5_5_3 = (Group)cGroup_5_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_5_3_0 = (Keyword)cGroup_5_5_3.eContents().get(0);
		private final Assignment cDisjointNamespacesAssignment_5_5_3_1 = (Assignment)cGroup_5_5_3.eContents().get(1);
		private final RuleCall cDisjointNamespacesPathNameParserRuleCall_5_5_3_1_0 = (RuleCall)cDisjointNamespacesAssignment_5_5_3_1.eContents().get(0);
		private final Group cGroup_5_6 = (Group)cUnorderedGroup_5.eContents().get(6);
		private final Keyword cVersionKeyword_5_6_0 = (Keyword)cGroup_5_6.eContents().get(0);
		private final Assignment cVersionAssignment_5_6_1 = (Assignment)cGroup_5_6.eContents().get(1);
		private final RuleCall cVersionVersionNumberParserRuleCall_5_6_1_0 = (RuleCall)cVersionAssignment_5_6_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_7 = (UnorderedGroup)cUnorderedGroup_5.eContents().get(7);
		private final Group cGroup_5_7_0 = (Group)cUnorderedGroup_5_7.eContents().get(0);
		private final Keyword cResolveKeyword_5_7_0_0 = (Keyword)cGroup_5_7_0.eContents().get(0);
		private final Group cGroup_5_7_0_1 = (Group)cGroup_5_7_0.eContents().get(1);
		private final Keyword cFromKeyword_5_7_0_1_0 = (Keyword)cGroup_5_7_0_1.eContents().get(0);
		private final Assignment cLookupNamespaceAssignment_5_7_0_1_1 = (Assignment)cGroup_5_7_0_1.eContents().get(1);
		private final RuleCall cLookupNamespacePathNameParserRuleCall_5_7_0_1_1_0 = (RuleCall)cLookupNamespaceAssignment_5_7_0_1_1.eContents().get(0);
		private final Group cGroup_5_7_1 = (Group)cUnorderedGroup_5_7.eContents().get(1);
		private final Keyword cOutsideKeyword_5_7_1_0 = (Keyword)cGroup_5_7_1.eContents().get(0);
		private final Assignment cBlacklistNamespaceAssignment_5_7_1_1 = (Assignment)cGroup_5_7_1.eContents().get(1);
		private final RuleCall cBlacklistNamespacePathNameParserRuleCall_5_7_1_1_0 = (RuleCall)cBlacklistNamespaceAssignment_5_7_1_1.eContents().get(0);
		private final Group cGroup_5_7_2 = (Group)cUnorderedGroup_5_7.eContents().get(2);
		private final Keyword cUsingKeyword_5_7_2_0 = (Keyword)cGroup_5_7_2.eContents().get(0);
		private final Assignment cWeightsAssignment_5_7_2_1 = (Assignment)cGroup_5_7_2.eContents().get(1);
		private final RuleCall cWeightsMapParserRuleCall_5_7_2_1_0 = (RuleCall)cWeightsAssignment_5_7_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cObservedKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cAsKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cObserverAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cObserverConceptDeclarationParserRuleCall_6_2_0 = (RuleCall)cObserverAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cParametersKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cParametersAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cParametersMapParserRuleCall_7_1_0 = (RuleCall)cParametersAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cMetadataKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cMetadataAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cMetadataMapParserRuleCall_8_1_0 = (RuleCall)cMetadataAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///*
		// * Namespace - entry point of all files. Only interactive sessions may start without this statement.
		// * A namespace may be a scenario - if so, nothing changes except its models will never be used from
		// * the DB unless the scenario is being computed (should be 'observe ... in scenario ....).
		// */
		//Namespace:
		//    (annotations+=Annotation (annotations+=Annotation)*)?
		//    (
		//        ((projectPrivate?='project')? private?='private')? &
		//        (inactive?='void')?
		//    )
		//    ('namespace' | scenario?='scenario' | worldviewBound?='worldview') name=PathName (docstring=STRING)?
		//    (
		//        ('using' 'language' language=UPPERCASE_ID)? &
		//        ('using' imported+=Import (=> ',' imported+=Import)*)? &
		//        ('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)? &
		//        ('covering' coverage+=Function (=> ',' coverage+=Function)*)? &
		//        ('in' 'domain' (rootDomain?='root' | domainConcept=Concept))? &
		//        ('disjoint' 'with' disjointNamespaces+=PathName (',' disjointNamespaces+=PathName)* )? &
		//        ('version' version=VersionNumber)? &
		//        ('resolve' ('from' lookupNamespace+=PathName*)? & ('outside' blacklistNamespace+=PathName*)? & ('using' weights=Map)?)?
		//    )
		//    ('observed' 'as' observer=ConceptDeclaration)?
		//    ('parameters' parameters=Map)?
		//    ('metadata' metadata=Map)?
		//    ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations+=Annotation (annotations+=Annotation)*)?
		//(
		//    ((projectPrivate?='project')? private?='private')? &
		//    (inactive?='void')?
		//)
		//('namespace' | scenario?='scenario' | worldviewBound?='worldview') name=PathName (docstring=STRING)?
		//(
		//    ('using' 'language' language=UPPERCASE_ID)? &
		//    ('using' imported+=Import (=> ',' imported+=Import)*)? &
		//    ('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)? &
		//    ('covering' coverage+=Function (=> ',' coverage+=Function)*)? &
		//    ('in' 'domain' (rootDomain?='root' | domainConcept=Concept))? &
		//    ('disjoint' 'with' disjointNamespaces+=PathName (',' disjointNamespaces+=PathName)* )? &
		//    ('version' version=VersionNumber)? &
		//    ('resolve' ('from' lookupNamespace+=PathName*)? & ('outside' blacklistNamespace+=PathName*)? & ('using' weights=Map)?)?
		//)
		//('observed' 'as' observer=ConceptDeclaration)?
		//('parameters' parameters=Map)?
		//('metadata' metadata=Map)?
		//';'
		public Group getGroup() { return cGroup; }
		
		//(annotations+=Annotation (annotations+=Annotation)*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0_0() { return cAnnotationsAssignment_0_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0_0; }
		
		//(annotations+=Annotation)*
		public Assignment getAnnotationsAssignment_0_1() { return cAnnotationsAssignment_0_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_1_0() { return cAnnotationsAnnotationParserRuleCall_0_1_0; }
		
		//(
		//    ((projectPrivate?='project')? private?='private')? &
		//    (inactive?='void')?
		//)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//((projectPrivate?='project')? private?='private')?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//(projectPrivate?='project')?
		public Assignment getProjectPrivateAssignment_1_0_0() { return cProjectPrivateAssignment_1_0_0; }
		
		//'project'
		public Keyword getProjectPrivateProjectKeyword_1_0_0_0() { return cProjectPrivateProjectKeyword_1_0_0_0; }
		
		//private?='private'
		public Assignment getPrivateAssignment_1_0_1() { return cPrivateAssignment_1_0_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0_1_0() { return cPrivatePrivateKeyword_1_0_1_0; }
		
		//(inactive?='void')?
		public Assignment getInactiveAssignment_1_1() { return cInactiveAssignment_1_1; }
		
		//'void'
		public Keyword getInactiveVoidKeyword_1_1_0() { return cInactiveVoidKeyword_1_1_0; }
		
		//('namespace' | scenario?='scenario' | worldviewBound?='worldview')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_2_0() { return cNamespaceKeyword_2_0; }
		
		//scenario?='scenario'
		public Assignment getScenarioAssignment_2_1() { return cScenarioAssignment_2_1; }
		
		//'scenario'
		public Keyword getScenarioScenarioKeyword_2_1_0() { return cScenarioScenarioKeyword_2_1_0; }
		
		//worldviewBound?='worldview'
		public Assignment getWorldviewBoundAssignment_2_2() { return cWorldviewBoundAssignment_2_2; }
		
		//'worldview'
		public Keyword getWorldviewBoundWorldviewKeyword_2_2_0() { return cWorldviewBoundWorldviewKeyword_2_2_0; }
		
		//name=PathName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_3_0() { return cNamePathNameParserRuleCall_3_0; }
		
		//(docstring=STRING)?
		public Assignment getDocstringAssignment_4() { return cDocstringAssignment_4; }
		
		//STRING
		public RuleCall getDocstringSTRINGTerminalRuleCall_4_0() { return cDocstringSTRINGTerminalRuleCall_4_0; }
		
		//(
		//    ('using' 'language' language=UPPERCASE_ID)? &
		//    ('using' imported+=Import (=> ',' imported+=Import)*)? &
		//    ('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)? &
		//    ('covering' coverage+=Function (=> ',' coverage+=Function)*)? &
		//    ('in' 'domain' (rootDomain?='root' | domainConcept=Concept))? &
		//    ('disjoint' 'with' disjointNamespaces+=PathName (',' disjointNamespaces+=PathName)* )? &
		//    ('version' version=VersionNumber)? &
		//    ('resolve' ('from' lookupNamespace+=PathName*)? & ('outside' blacklistNamespace+=PathName*)? & ('using' weights=Map)?)?
		//)
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }
		
		//('using' 'language' language=UPPERCASE_ID)?
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'using'
		public Keyword getUsingKeyword_5_0_0() { return cUsingKeyword_5_0_0; }
		
		//'language'
		public Keyword getLanguageKeyword_5_0_1() { return cLanguageKeyword_5_0_1; }
		
		//language=UPPERCASE_ID
		public Assignment getLanguageAssignment_5_0_2() { return cLanguageAssignment_5_0_2; }
		
		//UPPERCASE_ID
		public RuleCall getLanguageUPPERCASE_IDTerminalRuleCall_5_0_2_0() { return cLanguageUPPERCASE_IDTerminalRuleCall_5_0_2_0; }
		
		//('using' imported+=Import (=> ',' imported+=Import)*)?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'using'
		public Keyword getUsingKeyword_5_1_0() { return cUsingKeyword_5_1_0; }
		
		//imported+=Import
		public Assignment getImportedAssignment_5_1_1() { return cImportedAssignment_5_1_1; }
		
		//Import
		public RuleCall getImportedImportParserRuleCall_5_1_1_0() { return cImportedImportParserRuleCall_5_1_1_0; }
		
		//(=> ',' imported+=Import)*
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }
		
		//=> ','
		public Keyword getCommaKeyword_5_1_2_0() { return cCommaKeyword_5_1_2_0; }
		
		//imported+=Import
		public Assignment getImportedAssignment_5_1_2_1() { return cImportedAssignment_5_1_2_1; }
		
		//Import
		public RuleCall getImportedImportParserRuleCall_5_1_2_1_0() { return cImportedImportParserRuleCall_5_1_2_1_0; }
		
		//('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)?
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//'imports'
		public Keyword getImportsKeyword_5_2_0() { return cImportsKeyword_5_2_0; }
		
		//owlImports+=OwlImport
		public Assignment getOwlImportsAssignment_5_2_1() { return cOwlImportsAssignment_5_2_1; }
		
		//OwlImport
		public RuleCall getOwlImportsOwlImportParserRuleCall_5_2_1_0() { return cOwlImportsOwlImportParserRuleCall_5_2_1_0; }
		
		//(',' owlImports+=OwlImport)*
		public Group getGroup_5_2_2() { return cGroup_5_2_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_2_0() { return cCommaKeyword_5_2_2_0; }
		
		//owlImports+=OwlImport
		public Assignment getOwlImportsAssignment_5_2_2_1() { return cOwlImportsAssignment_5_2_2_1; }
		
		//OwlImport
		public RuleCall getOwlImportsOwlImportParserRuleCall_5_2_2_1_0() { return cOwlImportsOwlImportParserRuleCall_5_2_2_1_0; }
		
		//('covering' coverage+=Function (=> ',' coverage+=Function)*)?
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//'covering'
		public Keyword getCoveringKeyword_5_3_0() { return cCoveringKeyword_5_3_0; }
		
		//coverage+=Function
		public Assignment getCoverageAssignment_5_3_1() { return cCoverageAssignment_5_3_1; }
		
		//Function
		public RuleCall getCoverageFunctionParserRuleCall_5_3_1_0() { return cCoverageFunctionParserRuleCall_5_3_1_0; }
		
		//(=> ',' coverage+=Function)*
		public Group getGroup_5_3_2() { return cGroup_5_3_2; }
		
		//=> ','
		public Keyword getCommaKeyword_5_3_2_0() { return cCommaKeyword_5_3_2_0; }
		
		//coverage+=Function
		public Assignment getCoverageAssignment_5_3_2_1() { return cCoverageAssignment_5_3_2_1; }
		
		//Function
		public RuleCall getCoverageFunctionParserRuleCall_5_3_2_1_0() { return cCoverageFunctionParserRuleCall_5_3_2_1_0; }
		
		//('in' 'domain' (rootDomain?='root' | domainConcept=Concept))?
		public Group getGroup_5_4() { return cGroup_5_4; }
		
		//'in'
		public Keyword getInKeyword_5_4_0() { return cInKeyword_5_4_0; }
		
		//'domain'
		public Keyword getDomainKeyword_5_4_1() { return cDomainKeyword_5_4_1; }
		
		//(rootDomain?='root' | domainConcept=Concept)
		public Alternatives getAlternatives_5_4_2() { return cAlternatives_5_4_2; }
		
		//rootDomain?='root'
		public Assignment getRootDomainAssignment_5_4_2_0() { return cRootDomainAssignment_5_4_2_0; }
		
		//'root'
		public Keyword getRootDomainRootKeyword_5_4_2_0_0() { return cRootDomainRootKeyword_5_4_2_0_0; }
		
		//domainConcept=Concept
		public Assignment getDomainConceptAssignment_5_4_2_1() { return cDomainConceptAssignment_5_4_2_1; }
		
		//Concept
		public RuleCall getDomainConceptConceptParserRuleCall_5_4_2_1_0() { return cDomainConceptConceptParserRuleCall_5_4_2_1_0; }
		
		//('disjoint' 'with' disjointNamespaces+=PathName (',' disjointNamespaces+=PathName)* )?
		public Group getGroup_5_5() { return cGroup_5_5; }
		
		//'disjoint'
		public Keyword getDisjointKeyword_5_5_0() { return cDisjointKeyword_5_5_0; }
		
		//'with'
		public Keyword getWithKeyword_5_5_1() { return cWithKeyword_5_5_1; }
		
		//disjointNamespaces+=PathName
		public Assignment getDisjointNamespacesAssignment_5_5_2() { return cDisjointNamespacesAssignment_5_5_2; }
		
		//PathName
		public RuleCall getDisjointNamespacesPathNameParserRuleCall_5_5_2_0() { return cDisjointNamespacesPathNameParserRuleCall_5_5_2_0; }
		
		//(',' disjointNamespaces+=PathName)*
		public Group getGroup_5_5_3() { return cGroup_5_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_5_3_0() { return cCommaKeyword_5_5_3_0; }
		
		//disjointNamespaces+=PathName
		public Assignment getDisjointNamespacesAssignment_5_5_3_1() { return cDisjointNamespacesAssignment_5_5_3_1; }
		
		//PathName
		public RuleCall getDisjointNamespacesPathNameParserRuleCall_5_5_3_1_0() { return cDisjointNamespacesPathNameParserRuleCall_5_5_3_1_0; }
		
		//('version' version=VersionNumber)?
		public Group getGroup_5_6() { return cGroup_5_6; }
		
		//'version'
		public Keyword getVersionKeyword_5_6_0() { return cVersionKeyword_5_6_0; }
		
		//version=VersionNumber
		public Assignment getVersionAssignment_5_6_1() { return cVersionAssignment_5_6_1; }
		
		//VersionNumber
		public RuleCall getVersionVersionNumberParserRuleCall_5_6_1_0() { return cVersionVersionNumberParserRuleCall_5_6_1_0; }
		
		//('resolve' ('from' lookupNamespace+=PathName*)? & ('outside' blacklistNamespace+=PathName*)? & ('using' weights=Map)?)?
		public UnorderedGroup getUnorderedGroup_5_7() { return cUnorderedGroup_5_7; }
		
		//'resolve' ('from' lookupNamespace+=PathName*)?
		public Group getGroup_5_7_0() { return cGroup_5_7_0; }
		
		//'resolve'
		public Keyword getResolveKeyword_5_7_0_0() { return cResolveKeyword_5_7_0_0; }
		
		//('from' lookupNamespace+=PathName*)?
		public Group getGroup_5_7_0_1() { return cGroup_5_7_0_1; }
		
		//'from'
		public Keyword getFromKeyword_5_7_0_1_0() { return cFromKeyword_5_7_0_1_0; }
		
		//lookupNamespace+=PathName*
		public Assignment getLookupNamespaceAssignment_5_7_0_1_1() { return cLookupNamespaceAssignment_5_7_0_1_1; }
		
		//PathName
		public RuleCall getLookupNamespacePathNameParserRuleCall_5_7_0_1_1_0() { return cLookupNamespacePathNameParserRuleCall_5_7_0_1_1_0; }
		
		//('outside' blacklistNamespace+=PathName*)?
		public Group getGroup_5_7_1() { return cGroup_5_7_1; }
		
		//'outside'
		public Keyword getOutsideKeyword_5_7_1_0() { return cOutsideKeyword_5_7_1_0; }
		
		//blacklistNamespace+=PathName*
		public Assignment getBlacklistNamespaceAssignment_5_7_1_1() { return cBlacklistNamespaceAssignment_5_7_1_1; }
		
		//PathName
		public RuleCall getBlacklistNamespacePathNameParserRuleCall_5_7_1_1_0() { return cBlacklistNamespacePathNameParserRuleCall_5_7_1_1_0; }
		
		//('using' weights=Map)?
		public Group getGroup_5_7_2() { return cGroup_5_7_2; }
		
		//'using'
		public Keyword getUsingKeyword_5_7_2_0() { return cUsingKeyword_5_7_2_0; }
		
		//weights=Map
		public Assignment getWeightsAssignment_5_7_2_1() { return cWeightsAssignment_5_7_2_1; }
		
		//Map
		public RuleCall getWeightsMapParserRuleCall_5_7_2_1_0() { return cWeightsMapParserRuleCall_5_7_2_1_0; }
		
		//('observed' 'as' observer=ConceptDeclaration)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'observed'
		public Keyword getObservedKeyword_6_0() { return cObservedKeyword_6_0; }
		
		//'as'
		public Keyword getAsKeyword_6_1() { return cAsKeyword_6_1; }
		
		//observer=ConceptDeclaration
		public Assignment getObserverAssignment_6_2() { return cObserverAssignment_6_2; }
		
		//ConceptDeclaration
		public RuleCall getObserverConceptDeclarationParserRuleCall_6_2_0() { return cObserverConceptDeclarationParserRuleCall_6_2_0; }
		
		//('parameters' parameters=Map)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'parameters'
		public Keyword getParametersKeyword_7_0() { return cParametersKeyword_7_0; }
		
		//parameters=Map
		public Assignment getParametersAssignment_7_1() { return cParametersAssignment_7_1; }
		
		//Map
		public RuleCall getParametersMapParserRuleCall_7_1_0() { return cParametersMapParserRuleCall_7_1_0; }
		
		//('metadata' metadata=Map)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'metadata'
		public Keyword getMetadataKeyword_8_0() { return cMetadataKeyword_8_0; }
		
		//metadata=Map
		public Assignment getMetadataAssignment_8_1() { return cMetadataAssignment_8_1; }
		
		//Map
		public RuleCall getMetadataMapParserRuleCall_8_1_0() { return cMetadataMapParserRuleCall_8_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class OwlImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.OwlImport");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cAsKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cPrefixAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cPrefixLOWERCASE_IDTerminalRuleCall_0_1_1_0 = (RuleCall)cPrefixAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cSingleAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cSinglePathNameParserRuleCall_1_0_0_0 = (RuleCall)cSingleAssignment_1_0_0.eContents().get(0);
		private final Assignment cImportsAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cImportsListParserRuleCall_1_0_1_0 = (RuleCall)cImportsAssignment_1_0_1.eContents().get(0);
		private final Keyword cFromKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cUrnAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cUrnUrnIdParserRuleCall_1_2_0 = (RuleCall)cUrnAssignment_1_2.eContents().get(0);
		
		//OwlImport:
		//    name=STRING ('as' prefix=LOWERCASE_ID) |
		//    (single=PathName | imports=List) 'from' urn=UrnId;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING ('as' prefix=LOWERCASE_ID) |
		//(single=PathName | imports=List) 'from' urn=UrnId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=STRING ('as' prefix=LOWERCASE_ID)
		public Group getGroup_0() { return cGroup_0; }
		
		//name=STRING
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0_0() { return cNameSTRINGTerminalRuleCall_0_0_0; }
		
		//('as' prefix=LOWERCASE_ID)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'as'
		public Keyword getAsKeyword_0_1_0() { return cAsKeyword_0_1_0; }
		
		//prefix=LOWERCASE_ID
		public Assignment getPrefixAssignment_0_1_1() { return cPrefixAssignment_0_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getPrefixLOWERCASE_IDTerminalRuleCall_0_1_1_0() { return cPrefixLOWERCASE_IDTerminalRuleCall_0_1_1_0; }
		
		//(single=PathName | imports=List) 'from' urn=UrnId
		public Group getGroup_1() { return cGroup_1; }
		
		//(single=PathName | imports=List)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//single=PathName
		public Assignment getSingleAssignment_1_0_0() { return cSingleAssignment_1_0_0; }
		
		//PathName
		public RuleCall getSinglePathNameParserRuleCall_1_0_0_0() { return cSinglePathNameParserRuleCall_1_0_0_0; }
		
		//imports=List
		public Assignment getImportsAssignment_1_0_1() { return cImportsAssignment_1_0_1; }
		
		//List
		public RuleCall getImportsListParserRuleCall_1_0_1_0() { return cImportsListParserRuleCall_1_0_1_0; }
		
		//'from'
		public Keyword getFromKeyword_1_1() { return cFromKeyword_1_1; }
		
		//urn=UrnId
		public Assignment getUrnAssignment_1_2() { return cUrnAssignment_1_2; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_1_2_0() { return cUrnUrnIdParserRuleCall_1_2_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cImportsAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cImportsListParserRuleCall_0_0_0_0 = (RuleCall)cImportsAssignment_0_0_0.eContents().get(0);
		private final Assignment cStarAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cStarAsteriskKeyword_0_0_1_0 = (Keyword)cStarAssignment_0_0_1.eContents().get(0);
		private final Keyword cFromKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePathNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Import:
		//    ((imports=List | star?='*') 'from')? name=PathName/*[Namespace|PathName]*/;
		@Override public ParserRule getRule() { return rule; }
		
		//((imports=List | star?='*') 'from')? name=PathName
		public Group getGroup() { return cGroup; }
		
		//((imports=List | star?='*') 'from')?
		public Group getGroup_0() { return cGroup_0; }
		
		//(imports=List | star?='*')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//imports=List
		public Assignment getImportsAssignment_0_0_0() { return cImportsAssignment_0_0_0; }
		
		//List
		public RuleCall getImportsListParserRuleCall_0_0_0_0() { return cImportsListParserRuleCall_0_0_0_0; }
		
		//star?='*'
		public Assignment getStarAssignment_0_0_1() { return cStarAssignment_0_0_1; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_0_0_1_0() { return cStarAsteriskKeyword_0_0_1_0; }
		
		//'from'
		public Keyword getFromKeyword_0_1() { return cFromKeyword_0_1; }
		
		//name=PathName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_1_0() { return cNamePathNameParserRuleCall_1_0; }
	}
	public class UrnIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.UrnId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrnKlabKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPathNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPathNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cPathNameParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final RuleCall cPathParserRuleCall_7_0 = (RuleCall)cAlternatives_7.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_7_1 = (RuleCall)cAlternatives_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cVersionNumberParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cNumberSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Alternatives cAlternatives_9_1 = (Alternatives)cGroup_9.eContents().get(1);
		private final RuleCall cPathParserRuleCall_9_1_0 = (RuleCall)cAlternatives_9_1.eContents().get(0);
		private final RuleCall cUrnKvpParserRuleCall_9_1_1 = (RuleCall)cAlternatives_9_1.eContents().get(1);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cAmpersandKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Alternatives cAlternatives_9_2_1 = (Alternatives)cGroup_9_2.eContents().get(1);
		private final RuleCall cPathParserRuleCall_9_2_1_0 = (RuleCall)cAlternatives_9_2_1.eContents().get(0);
		private final RuleCall cUrnKvpParserRuleCall_9_2_1_1 = (RuleCall)cAlternatives_9_2_1.eContents().get(1);
		
		///**
		// * URN is 4 sections: node (or 'klab' for internal resources), catalog (or adapter for internal resources), namespace and
		// * resource ID. Admits a version number and a fragment (with only lowercase_id chars in it). It is
		// * legal, but not required, to start with the default prefix urn:klab:. The 4th path element (the ID) may be
		// * integer.
		// */
		//UrnId:
		//    ('urn:klab:')? PathName ':'  PathName ':' PathName ':' (Path|INT) (':' VersionNumber)? ('#' (Path|UrnKvp) ('&' (Path|UrnKvp))*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('urn:klab:')? PathName ':'  PathName ':' PathName ':' (Path|INT) (':' VersionNumber)? ('#' (Path|UrnKvp) ('&' (Path|UrnKvp))*)?
		public Group getGroup() { return cGroup; }
		
		//('urn:klab:')?
		public Keyword getUrnKlabKeyword_0() { return cUrnKlabKeyword_0; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_1() { return cPathNameParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_3() { return cPathNameParserRuleCall_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_5() { return cPathNameParserRuleCall_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//(Path|INT)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//Path
		public RuleCall getPathParserRuleCall_7_0() { return cPathParserRuleCall_7_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_7_1() { return cINTTerminalRuleCall_7_1; }
		
		//(':' VersionNumber)?
		public Group getGroup_8() { return cGroup_8; }
		
		//':'
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }
		
		//VersionNumber
		public RuleCall getVersionNumberParserRuleCall_8_1() { return cVersionNumberParserRuleCall_8_1; }
		
		//('#' (Path|UrnKvp) ('&' (Path|UrnKvp))*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'#'
		public Keyword getNumberSignKeyword_9_0() { return cNumberSignKeyword_9_0; }
		
		//(Path|UrnKvp)
		public Alternatives getAlternatives_9_1() { return cAlternatives_9_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_9_1_0() { return cPathParserRuleCall_9_1_0; }
		
		//UrnKvp
		public RuleCall getUrnKvpParserRuleCall_9_1_1() { return cUrnKvpParserRuleCall_9_1_1; }
		
		//('&' (Path|UrnKvp))*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_9_2_0() { return cAmpersandKeyword_9_2_0; }
		
		//(Path|UrnKvp)
		public Alternatives getAlternatives_9_2_1() { return cAlternatives_9_2_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_9_2_1_0() { return cPathParserRuleCall_9_2_1_0; }
		
		//UrnKvp
		public RuleCall getUrnKvpParserRuleCall_9_2_1_1() { return cUrnKvpParserRuleCall_9_2_1_1; }
	}
	public class WellFormedUrnIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.WellFormedUrnId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cPathNameParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cPathNameParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cVersionNumberParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cNumberSignKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Alternatives cAlternatives_8_1 = (Alternatives)cGroup_8.eContents().get(1);
		private final RuleCall cPathParserRuleCall_8_1_0 = (RuleCall)cAlternatives_8_1.eContents().get(0);
		private final RuleCall cUrnKvpParserRuleCall_8_1_1 = (RuleCall)cAlternatives_8_1.eContents().get(1);
		
		//WellFormedUrnId:
		//    PathName ':'  PathName ':' PathName ':' (PathName) (':' VersionNumber)? ('#' (Path|UrnKvp))?;
		@Override public ParserRule getRule() { return rule; }
		
		//PathName ':'  PathName ':' PathName ':' (PathName) (':' VersionNumber)? ('#' (Path|UrnKvp))?
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_2() { return cPathNameParserRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_4() { return cPathNameParserRuleCall_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//(PathName)
		public RuleCall getPathNameParserRuleCall_6() { return cPathNameParserRuleCall_6; }
		
		//(':' VersionNumber)?
		public Group getGroup_7() { return cGroup_7; }
		
		//':'
		public Keyword getColonKeyword_7_0() { return cColonKeyword_7_0; }
		
		//VersionNumber
		public RuleCall getVersionNumberParserRuleCall_7_1() { return cVersionNumberParserRuleCall_7_1; }
		
		//('#' (Path|UrnKvp))?
		public Group getGroup_8() { return cGroup_8; }
		
		//'#'
		public Keyword getNumberSignKeyword_8_0() { return cNumberSignKeyword_8_0; }
		
		//(Path|UrnKvp)
		public Alternatives getAlternatives_8_1() { return cAlternatives_8_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_8_1_0() { return cPathParserRuleCall_8_1_0; }
		
		//UrnKvp
		public RuleCall getUrnKvpParserRuleCall_8_1_1() { return cUrnKvpParserRuleCall_8_1_1; }
	}
	public class WellFormedUrnIdWithFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.WellFormedUrnIdWithFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cPathNameParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cPathNameParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cVersionNumberParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cNumberSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_9_0 = (RuleCall)cAlternatives_9.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_9_1 = (RuleCall)cAlternatives_9.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_9_2 = (RuleCall)cAlternatives_9.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_9_3 = (RuleCall)cAlternatives_9.eContents().get(3);
		
		//WellFormedUrnIdWithFragment:
		//    PathName ':'  PathName ':' PathName ':' (PathName) (':' VersionNumber)? '#' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//PathName ':'  PathName ':' PathName ':' (PathName) (':' VersionNumber)? '#' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING)
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_2() { return cPathNameParserRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_4() { return cPathNameParserRuleCall_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//(PathName)
		public RuleCall getPathNameParserRuleCall_6() { return cPathNameParserRuleCall_6; }
		
		//(':' VersionNumber)?
		public Group getGroup_7() { return cGroup_7; }
		
		//':'
		public Keyword getColonKeyword_7_0() { return cColonKeyword_7_0; }
		
		//VersionNumber
		public RuleCall getVersionNumberParserRuleCall_7_1() { return cVersionNumberParserRuleCall_7_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_8() { return cNumberSignKeyword_8; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|INT|STRING)
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_9_0() { return cLOWERCASE_IDTerminalRuleCall_9_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_9_1() { return cUPPERCASE_IDTerminalRuleCall_9_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_9_2() { return cINTTerminalRuleCall_9_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_9_3() { return cSTRINGTerminalRuleCall_9_3; }
	}
	public class UrnKvpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.UrnKvp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cPathParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//UrnKvp:
		//    PathName '=' (Path|INT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PathName '=' (Path|INT)
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(Path|INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//Path
		public RuleCall getPathParserRuleCall_2_0() { return cPathParserRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class LocalFilePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LocalFilePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		///**
		// * Local file paths become locally based URNs and can be used wherever URNs are accepted. Their interpretation depends
		// * on whether there is an encoder for their file extension.
		// */
		//LocalFilePath:
		//    (CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID) ('/' (CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID))* ('.' LOWERCASE_ID)? ('#' LOWERCASE_ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID) ('/' (CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID))* ('.' LOWERCASE_ID)? ('#' LOWERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//(CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_0_0() { return cCAMELCASE_IDTerminalRuleCall_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_1() { return cLOWERCASE_IDTerminalRuleCall_0_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_0_2() { return cLOWERCASE_DASHIDTerminalRuleCall_0_2; }
		
		//('/' (CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//(CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_1_1_0() { return cCAMELCASE_IDTerminalRuleCall_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_1_1_2() { return cLOWERCASE_DASHIDTerminalRuleCall_1_1_2; }
		
		//('.' LOWERCASE_ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_2_1() { return cLOWERCASE_IDTerminalRuleCall_2_1; }
		
		//('#' LOWERCASE_ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_3_1() { return cLOWERCASE_IDTerminalRuleCall_3_1; }
	}
	public class ObserveStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ObserveStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0_0 = (RuleCall)cAnnotationsAssignment_0_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_1_0 = (RuleCall)cAnnotationsAssignment_0_1.eContents().get(0);
		private final Keyword cObserveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyObserveStatementBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//ObserveStatement:
		//    (annotations+=Annotation (annotations+=Annotation)*)? 'observe' body=ObserveStatementBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(annotations+=Annotation (annotations+=Annotation)*)? 'observe' body=ObserveStatementBody
		public Group getGroup() { return cGroup; }
		
		//(annotations+=Annotation (annotations+=Annotation)*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0_0() { return cAnnotationsAssignment_0_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0_0; }
		
		//(annotations+=Annotation)*
		public Assignment getAnnotationsAssignment_0_1() { return cAnnotationsAssignment_0_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_1_0() { return cAnnotationsAnnotationParserRuleCall_0_1_0; }
		
		//'observe'
		public Keyword getObserveKeyword_1() { return cObserveKeyword_1; }
		
		//body=ObserveStatementBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//ObserveStatementBody
		public RuleCall getBodyObserveStatementBodyParserRuleCall_2_0() { return cBodyObserveStatementBodyParserRuleCall_2_0; }
	}
	public class ObserveStatementBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ObserveStatementBody");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cUrnAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cUrnUrnParserRuleCall_0_0_0_0 = (RuleCall)cUrnAssignment_0_0_0.eContents().get(0);
		private final Keyword cAsKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cConceptAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConceptNamedObservableSemanticsParserRuleCall_0_1_0 = (RuleCall)cConceptAssignment_0_1.eContents().get(0);
		private final Assignment cDocstringAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDocstringSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cDocstringAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cExtendsKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cParentsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cParentsPathNameParserRuleCall_0_3_1_0 = (RuleCall)cParentsAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_3_2 = (Group)cGroup_0_3.eContents().get(2);
		private final Keyword cCommaKeyword_0_3_2_0 = (Keyword)cGroup_0_3_2.eContents().get(0);
		private final Assignment cParentsAssignment_0_3_2_1 = (Assignment)cGroup_0_3_2.eContents().get(1);
		private final RuleCall cParentsPathNameParserRuleCall_0_3_2_1_0 = (RuleCall)cParentsAssignment_0_3_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_0_4 = (UnorderedGroup)cGroup_0.eContents().get(4);
		private final Group cGroup_0_4_0 = (Group)cUnorderedGroup_0_4.eContents().get(0);
		private final Keyword cObservingKeyword_0_4_0_0 = (Keyword)cGroup_0_4_0.eContents().get(0);
		private final Assignment cStatesAssignment_0_4_0_1 = (Assignment)cGroup_0_4_0.eContents().get(1);
		private final RuleCall cStatesObservableSemanticsParserRuleCall_0_4_0_1_0 = (RuleCall)cStatesAssignment_0_4_0_1.eContents().get(0);
		private final Group cGroup_0_4_0_2 = (Group)cGroup_0_4_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_4_0_2_0 = (Keyword)cGroup_0_4_0_2.eContents().get(0);
		private final Assignment cStatesAssignment_0_4_0_2_1 = (Assignment)cGroup_0_4_0_2.eContents().get(1);
		private final RuleCall cStatesObservableSemanticsParserRuleCall_0_4_0_2_1_0 = (RuleCall)cStatesAssignment_0_4_0_2_1.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cUnorderedGroup_0_4.eContents().get(1);
		private final Keyword cChildrenKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final Group cGroup_0_4_1_1 = (Group)cGroup_0_4_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_4_1_1_0 = (Keyword)cGroup_0_4_1_1.eContents().get(0);
		private final Assignment cObservationsAssignment_0_4_1_1_1 = (Assignment)cGroup_0_4_1_1.eContents().get(1);
		private final RuleCall cObservationsObserveStatementBodyParserRuleCall_0_4_1_1_1_0 = (RuleCall)cObservationsAssignment_0_4_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4_1_1_2 = (Keyword)cGroup_0_4_1_1.eContents().get(2);
		private final Group cGroup_0_4_1_2 = (Group)cGroup_0_4_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_4_1_2_0 = (Keyword)cGroup_0_4_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_4_1_2_1 = (Keyword)cGroup_0_4_1_2.eContents().get(1);
		private final Assignment cObservationsAssignment_0_4_1_2_2 = (Assignment)cGroup_0_4_1_2.eContents().get(2);
		private final RuleCall cObservationsObserveStatementBodyParserRuleCall_0_4_1_2_2_0 = (RuleCall)cObservationsAssignment_0_4_1_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4_1_2_3 = (Keyword)cGroup_0_4_1_2.eContents().get(3);
		private final Assignment cActionsAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cActionsActionSpecificationParserRuleCall_0_5_0 = (RuleCall)cActionsAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cUsingKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAccessorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAccessorFunctionParserRuleCall_1_1_0 = (RuleCall)cAccessorAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cMetadataKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMetadataAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMetadataMapParserRuleCall_2_1_0 = (RuleCall)cMetadataAssignment_2_1.eContents().get(0);
		
		///**
		// * FIXME the child observation in parenthesis conflicts with a standard declaration and cannot be
		// * specified.
		// */
		//ObserveStatementBody:
		//    (urn=Urn 'as')?
		//    concept=NamedObservableSemantics
		//        (docstring = STRING)?
		//        ('extends' parents+=PathName (',' parents+=PathName)*)?
		//        ((
		//            'observing'
		//                // validator will ensure that the semantics has an associated value
		//                ( states+=ObservableSemantics) (',' states+=ObservableSemantics)*
		//        )? &
		//        (
		//            'children'
		//                // validator will ensure that the semantics has an associated value
		//                ( '(' observations+=ObserveStatementBody ')') (',' '(' observations+=ObserveStatementBody ')')*
		//        )?)
		//        (actions+=ActionSpecification*) &
		//        ('using' (accessor=Function)?)? &
		//        ('metadata' metadata=Map)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(urn=Urn 'as')?
		//concept=NamedObservableSemantics
		//    (docstring = STRING)?
		//    ('extends' parents+=PathName (',' parents+=PathName)*)?
		//    ((
		//        'observing'
		//            // validator will ensure that the semantics has an associated value
		//            ( states+=ObservableSemantics) (',' states+=ObservableSemantics)*
		//    )? &
		//    (
		//        'children'
		//            // validator will ensure that the semantics has an associated value
		//            ( '(' observations+=ObserveStatementBody ')') (',' '(' observations+=ObserveStatementBody ')')*
		//    )?)
		//    (actions+=ActionSpecification*) &
		//    ('using' (accessor=Function)?)? &
		//    ('metadata' metadata=Map)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//(urn=Urn 'as')?
		//concept=NamedObservableSemantics
		//    (docstring = STRING)?
		//    ('extends' parents+=PathName (',' parents+=PathName)*)?
		//    ((
		//        'observing'
		//            // validator will ensure that the semantics has an associated value
		//            ( states+=ObservableSemantics) (',' states+=ObservableSemantics)*
		//    )? &
		//    (
		//        'children'
		//            // validator will ensure that the semantics has an associated value
		//            ( '(' observations+=ObserveStatementBody ')') (',' '(' observations+=ObserveStatementBody ')')*
		//    )?)
		//    (actions+=ActionSpecification*)
		public Group getGroup_0() { return cGroup_0; }
		
		//(urn=Urn 'as')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//urn=Urn
		public Assignment getUrnAssignment_0_0_0() { return cUrnAssignment_0_0_0; }
		
		//Urn
		public RuleCall getUrnUrnParserRuleCall_0_0_0_0() { return cUrnUrnParserRuleCall_0_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_0_0_1() { return cAsKeyword_0_0_1; }
		
		//concept=NamedObservableSemantics
		public Assignment getConceptAssignment_0_1() { return cConceptAssignment_0_1; }
		
		//NamedObservableSemantics
		public RuleCall getConceptNamedObservableSemanticsParserRuleCall_0_1_0() { return cConceptNamedObservableSemanticsParserRuleCall_0_1_0; }
		
		//(docstring = STRING)?
		public Assignment getDocstringAssignment_0_2() { return cDocstringAssignment_0_2; }
		
		//STRING
		public RuleCall getDocstringSTRINGTerminalRuleCall_0_2_0() { return cDocstringSTRINGTerminalRuleCall_0_2_0; }
		
		//('extends' parents+=PathName (',' parents+=PathName)*)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_0_3_0() { return cExtendsKeyword_0_3_0; }
		
		//parents+=PathName
		public Assignment getParentsAssignment_0_3_1() { return cParentsAssignment_0_3_1; }
		
		//PathName
		public RuleCall getParentsPathNameParserRuleCall_0_3_1_0() { return cParentsPathNameParserRuleCall_0_3_1_0; }
		
		//(',' parents+=PathName)*
		public Group getGroup_0_3_2() { return cGroup_0_3_2; }
		
		//','
		public Keyword getCommaKeyword_0_3_2_0() { return cCommaKeyword_0_3_2_0; }
		
		//parents+=PathName
		public Assignment getParentsAssignment_0_3_2_1() { return cParentsAssignment_0_3_2_1; }
		
		//PathName
		public RuleCall getParentsPathNameParserRuleCall_0_3_2_1_0() { return cParentsPathNameParserRuleCall_0_3_2_1_0; }
		
		//((
		//    'observing'
		//        // validator will ensure that the semantics has an associated value
		//        ( states+=ObservableSemantics) (',' states+=ObservableSemantics)*
		//)? &
		//(
		//    'children'
		//        // validator will ensure that the semantics has an associated value
		//        ( '(' observations+=ObserveStatementBody ')') (',' '(' observations+=ObserveStatementBody ')')*
		//)?)
		public UnorderedGroup getUnorderedGroup_0_4() { return cUnorderedGroup_0_4; }
		
		//(
		//            'observing'
		//                // validator will ensure that the semantics has an associated value
		//                ( states+=ObservableSemantics) (',' states+=ObservableSemantics)*
		//        )?
		public Group getGroup_0_4_0() { return cGroup_0_4_0; }
		
		//'observing'
		public Keyword getObservingKeyword_0_4_0_0() { return cObservingKeyword_0_4_0_0; }
		
		//// validator will ensure that the semantics has an associated value
		//( states+=ObservableSemantics)
		public Assignment getStatesAssignment_0_4_0_1() { return cStatesAssignment_0_4_0_1; }
		
		//ObservableSemantics
		public RuleCall getStatesObservableSemanticsParserRuleCall_0_4_0_1_0() { return cStatesObservableSemanticsParserRuleCall_0_4_0_1_0; }
		
		//(',' states+=ObservableSemantics)*
		public Group getGroup_0_4_0_2() { return cGroup_0_4_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_4_0_2_0() { return cCommaKeyword_0_4_0_2_0; }
		
		//states+=ObservableSemantics
		public Assignment getStatesAssignment_0_4_0_2_1() { return cStatesAssignment_0_4_0_2_1; }
		
		//ObservableSemantics
		public RuleCall getStatesObservableSemanticsParserRuleCall_0_4_0_2_1_0() { return cStatesObservableSemanticsParserRuleCall_0_4_0_2_1_0; }
		
		//(
		//    'children'
		//        // validator will ensure that the semantics has an associated value
		//        ( '(' observations+=ObserveStatementBody ')') (',' '(' observations+=ObserveStatementBody ')')*
		//)?
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }
		
		//'children'
		public Keyword getChildrenKeyword_0_4_1_0() { return cChildrenKeyword_0_4_1_0; }
		
		//// validator will ensure that the semantics has an associated value
		//( '(' observations+=ObserveStatementBody ')')
		public Group getGroup_0_4_1_1() { return cGroup_0_4_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_4_1_1_0() { return cLeftParenthesisKeyword_0_4_1_1_0; }
		
		//observations+=ObserveStatementBody
		public Assignment getObservationsAssignment_0_4_1_1_1() { return cObservationsAssignment_0_4_1_1_1; }
		
		//ObserveStatementBody
		public RuleCall getObservationsObserveStatementBodyParserRuleCall_0_4_1_1_1_0() { return cObservationsObserveStatementBodyParserRuleCall_0_4_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4_1_1_2() { return cRightParenthesisKeyword_0_4_1_1_2; }
		
		//(',' '(' observations+=ObserveStatementBody ')')*
		public Group getGroup_0_4_1_2() { return cGroup_0_4_1_2; }
		
		//','
		public Keyword getCommaKeyword_0_4_1_2_0() { return cCommaKeyword_0_4_1_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_4_1_2_1() { return cLeftParenthesisKeyword_0_4_1_2_1; }
		
		//observations+=ObserveStatementBody
		public Assignment getObservationsAssignment_0_4_1_2_2() { return cObservationsAssignment_0_4_1_2_2; }
		
		//ObserveStatementBody
		public RuleCall getObservationsObserveStatementBodyParserRuleCall_0_4_1_2_2_0() { return cObservationsObserveStatementBodyParserRuleCall_0_4_1_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4_1_2_3() { return cRightParenthesisKeyword_0_4_1_2_3; }
		
		//(actions+=ActionSpecification*)
		public Assignment getActionsAssignment_0_5() { return cActionsAssignment_0_5; }
		
		//ActionSpecification
		public RuleCall getActionsActionSpecificationParserRuleCall_0_5_0() { return cActionsActionSpecificationParserRuleCall_0_5_0; }
		
		//('using' (accessor=Function)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'using'
		public Keyword getUsingKeyword_1_0() { return cUsingKeyword_1_0; }
		
		//(accessor=Function)?
		public Assignment getAccessorAssignment_1_1() { return cAccessorAssignment_1_1; }
		
		//Function
		public RuleCall getAccessorFunctionParserRuleCall_1_1_0() { return cAccessorFunctionParserRuleCall_1_1_0; }
		
		//('metadata' metadata=Map)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'metadata'
		public Keyword getMetadataKeyword_2_0() { return cMetadataKeyword_2_0; }
		
		//metadata=Map
		public Assignment getMetadataAssignment_2_1() { return cMetadataAssignment_2_1; }
		
		//Map
		public RuleCall getMetadataMapParserRuleCall_2_1_0() { return cMetadataMapParserRuleCall_2_1_0; }
	}
	public class ObservableSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ObservableSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValueLiteralValueWithConceptParserRuleCall_0_0_0 = (RuleCall)cValueAssignment_0_0.eContents().get(0);
		private final Keyword cAsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cGenericAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cGenericAnyKeyword_1_0 = (Keyword)cGenericAssignment_1.eContents().get(0);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cAccordingKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cToKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cAccordingToAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cAccordingToPropertyIdParserRuleCall_3_0_2_0 = (RuleCall)cAccordingToAssignment_3_0_2.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cUnorderedGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cInKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_0_1 = (Alternatives)cGroup_3_1_0.eContents().get(1);
		private final Assignment cUnitAssignment_3_1_0_1_0 = (Assignment)cAlternatives_3_1_0_1.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_3_1_0_1_0_0 = (RuleCall)cUnitAssignment_3_1_0_1_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_3_1_0_1_1 = (Assignment)cAlternatives_3_1_0_1.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_3_1_0_1_1_0 = (RuleCall)cCurrencyAssignment_3_1_0_1_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Keyword cPerKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_3_1_1_1_0 = (RuleCall)cUnitAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Assignment cValueOperatorsAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_3_2_0_0 = (RuleCall)cValueOperatorsAssignment_3_2_0.eContents().get(0);
		private final Assignment cValueOperatorsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_3_2_1_0 = (RuleCall)cValueOperatorsAssignment_3_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3_3 = (Alternatives)cUnorderedGroup_3.eContents().get(3);
		private final Assignment cOptionalAssignment_3_3_0 = (Assignment)cAlternatives_3_3.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_3_3_0_0 = (Keyword)cOptionalAssignment_3_3_0.eContents().get(0);
		private final Keyword cRequiredKeyword_3_3_1 = (Keyword)cAlternatives_3_3.eContents().get(1);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Assignment cFromAssignment_3_4_0 = (Assignment)cGroup_3_4.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_3_4_0_0 = (RuleCall)cFromAssignment_3_4_0.eContents().get(0);
		private final Keyword cToKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cToAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_3_4_2_0 = (RuleCall)cToAssignment_3_4_2.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cNamedKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cNameAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final Alternatives cNameAlternatives_3_5_1_0 = (Alternatives)cNameAssignment_3_5_1.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_3_5_1_0_0 = (RuleCall)cNameAlternatives_3_5_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_5_1_0_1 = (RuleCall)cNameAlternatives_3_5_1_0.eContents().get(1);
		
		///**
		// * Observable semantics is a concept declaration with optional observation semantics and formal name.
		// */
		//ObservableSemantics:
		//    // value may be an ID and in that case it can be used in models as an attribute for the URN as long
		//    // as the ID is not defined in the namespace.
		//    (value=LiteralValueWithConcept 'as')?
		//    (generic?='any')?
		//    declaration=ConceptDeclaration
		//    (
		//        ('according' 'to' accordingTo=PropertyId)? &
		//        (
		//            (=> 'in' (unit=Unit | currency=Currency)) |
		//            (=> 'per' unit=Unit)
		//        )? &
		//        (=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        (from=Number 'to' to=Number)? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//    // value may be an ID and in that case it can be used in models as an attribute for the URN as long
		//    // as the ID is not defined in the namespace.
		//    (value=LiteralValueWithConcept 'as')?
		//    (generic?='any')?
		//    declaration=ConceptDeclaration
		//    (
		//        ('according' 'to' accordingTo=PropertyId)? &
		//        (
		//            (=> 'in' (unit=Unit | currency=Currency)) |
		//            (=> 'per' unit=Unit)
		//        )? &
		//        (=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        (from=Number 'to' to=Number)? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		//    )
		public Group getGroup() { return cGroup; }
		
		//// value may be an ID and in that case it can be used in models as an attribute for the URN as long
		//// as the ID is not defined in the namespace.
		//(value=LiteralValueWithConcept 'as')?
		public Group getGroup_0() { return cGroup_0; }
		
		//value=LiteralValueWithConcept
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }
		
		//LiteralValueWithConcept
		public RuleCall getValueLiteralValueWithConceptParserRuleCall_0_0_0() { return cValueLiteralValueWithConceptParserRuleCall_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_0_1() { return cAsKeyword_0_1; }
		
		//(generic?='any')?
		public Assignment getGenericAssignment_1() { return cGenericAssignment_1; }
		
		//'any'
		public Keyword getGenericAnyKeyword_1_0() { return cGenericAnyKeyword_1_0; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_2_0() { return cDeclarationConceptDeclarationParserRuleCall_2_0; }
		
		//    (
		//        ('according' 'to' accordingTo=PropertyId)? &
		//        (
		//            (=> 'in' (unit=Unit | currency=Currency)) |
		//            (=> 'per' unit=Unit)
		//        )? &
		//        (=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        (from=Number 'to' to=Number)? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		//    )
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('according' 'to' accordingTo=PropertyId)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'according'
		public Keyword getAccordingKeyword_3_0_0() { return cAccordingKeyword_3_0_0; }
		
		//'to'
		public Keyword getToKeyword_3_0_1() { return cToKeyword_3_0_1; }
		
		//accordingTo=PropertyId
		public Assignment getAccordingToAssignment_3_0_2() { return cAccordingToAssignment_3_0_2; }
		
		//PropertyId
		public RuleCall getAccordingToPropertyIdParserRuleCall_3_0_2_0() { return cAccordingToPropertyIdParserRuleCall_3_0_2_0; }
		
		//(
		//    (=> 'in' (unit=Unit | currency=Currency)) |
		//    (=> 'per' unit=Unit)
		//)?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//(=> 'in' (unit=Unit | currency=Currency))
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//=> 'in'
		public Keyword getInKeyword_3_1_0_0() { return cInKeyword_3_1_0_0; }
		
		//(unit=Unit | currency=Currency)
		public Alternatives getAlternatives_3_1_0_1() { return cAlternatives_3_1_0_1; }
		
		//unit=Unit
		public Assignment getUnitAssignment_3_1_0_1_0() { return cUnitAssignment_3_1_0_1_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_1_0_1_0_0() { return cUnitUnitParserRuleCall_3_1_0_1_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_3_1_0_1_1() { return cCurrencyAssignment_3_1_0_1_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_3_1_0_1_1_0() { return cCurrencyCurrencyParserRuleCall_3_1_0_1_1_0; }
		
		//(=> 'per' unit=Unit)
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//=> 'per'
		public Keyword getPerKeyword_3_1_1_0() { return cPerKeyword_3_1_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_3_1_1_1() { return cUnitAssignment_3_1_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_1_1_1_0() { return cUnitUnitParserRuleCall_3_1_1_1_0; }
		
		//(=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//=> valueOperators+=ValueOperator
		public Assignment getValueOperatorsAssignment_3_2_0() { return cValueOperatorsAssignment_3_2_0; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_3_2_0_0() { return cValueOperatorsValueOperatorParserRuleCall_3_2_0_0; }
		
		//(valueOperators+=ValueOperator)*
		public Assignment getValueOperatorsAssignment_3_2_1() { return cValueOperatorsAssignment_3_2_1; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_3_2_1_0() { return cValueOperatorsValueOperatorParserRuleCall_3_2_1_0; }
		
		//(optional?='optional'| 'required')?
		public Alternatives getAlternatives_3_3() { return cAlternatives_3_3; }
		
		//optional?='optional'
		public Assignment getOptionalAssignment_3_3_0() { return cOptionalAssignment_3_3_0; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_3_3_0_0() { return cOptionalOptionalKeyword_3_3_0_0; }
		
		//'required'
		public Keyword getRequiredKeyword_3_3_1() { return cRequiredKeyword_3_3_1; }
		
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        (from=Number 'to' to=Number)?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//from=Number
		public Assignment getFromAssignment_3_4_0() { return cFromAssignment_3_4_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_3_4_0_0() { return cFromNumberParserRuleCall_3_4_0_0; }
		
		//'to'
		public Keyword getToKeyword_3_4_1() { return cToKeyword_3_4_1; }
		
		//to=Number
		public Assignment getToAssignment_3_4_2() { return cToAssignment_3_4_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_3_4_2_0() { return cToNumberParserRuleCall_3_4_2_0; }
		
		//('named' name=(LOWERCASE_ID|STRING))?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'named'
		public Keyword getNamedKeyword_3_5_0() { return cNamedKeyword_3_5_0; }
		
		//name=(LOWERCASE_ID|STRING)
		public Assignment getNameAssignment_3_5_1() { return cNameAssignment_3_5_1; }
		
		//(LOWERCASE_ID|STRING)
		public Alternatives getNameAlternatives_3_5_1_0() { return cNameAlternatives_3_5_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_3_5_1_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_3_5_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_5_1_0_1() { return cNameSTRINGTerminalRuleCall_3_5_1_0_1; }
	}
	public class SimpleObservableSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.SimpleObservableSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cGenericAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cGenericAnyKeyword_0_0_0 = (Keyword)cGenericAssignment_0_0.eContents().get(0);
		private final Assignment cGlobalAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cGlobalAllKeyword_0_1_0 = (Keyword)cGlobalAssignment_0_1.eContents().get(0);
		private final Assignment cExclusiveAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cExclusiveOnlyKeyword_0_2_0 = (Keyword)cExclusiveAssignment_0_2.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_0_0 = (Group)cAlternatives_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_0_0_0 = (Group)cGroup_2_0_0_0.eContents().get(0);
		private final Keyword cInKeyword_2_0_0_0_0_0 = (Keyword)cGroup_2_0_0_0_0.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0_0_0_1 = (Alternatives)cGroup_2_0_0_0_0.eContents().get(1);
		private final Assignment cUnitAssignment_2_0_0_0_0_1_0 = (Assignment)cAlternatives_2_0_0_0_0_1.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_2_0_0_0_0_1_0_0 = (RuleCall)cUnitAssignment_2_0_0_0_0_1_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_2_0_0_0_0_1_1 = (Assignment)cAlternatives_2_0_0_0_0_1.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_2_0_0_0_0_1_1_0 = (RuleCall)cCurrencyAssignment_2_0_0_0_0_1_1.eContents().get(0);
		private final Group cGroup_2_0_0_1 = (Group)cAlternatives_2_0_0.eContents().get(1);
		private final Keyword cPerKeyword_2_0_0_1_0 = (Keyword)cGroup_2_0_0_1.eContents().get(0);
		private final Assignment cUnitAssignment_2_0_0_1_1 = (Assignment)cGroup_2_0_0_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_2_0_0_1_1_0 = (RuleCall)cUnitAssignment_2_0_0_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Assignment cValueOperatorsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_2_1_0_0 = (RuleCall)cValueOperatorsAssignment_2_1_0.eContents().get(0);
		private final Assignment cValueOperatorsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_2_1_1_0 = (RuleCall)cValueOperatorsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Assignment cFromAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_2_2_0_0 = (RuleCall)cFromAssignment_2_2_0.eContents().get(0);
		private final Keyword cToKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cToAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_2_2_2_0 = (RuleCall)cToAssignment_2_2_2.eContents().get(0);
		
		///*
		// * Used for constraints and values: has no value and admits the additional qualifiers to specify
		// * the level of generality w.r.t. subclasses. Removes 'according to' but leaves value operators
		// */
		//SimpleObservableSemantics returns ObservableSemantics:
		//    (generic?='any' | global?='all' | exclusive?='only')?
		//    declaration=ConceptDeclaration
		//    ( =>
		//        ( =>
		//            (=> 'in' (unit=Unit | currency=Currency)) |
		//            (=> 'per' unit=Unit)
		//        )? &
		//        (=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (from=Number 'to' to=Number)?
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//(generic?='any' | global?='all' | exclusive?='only')?
		//declaration=ConceptDeclaration
		//( =>
		//    ( =>
		//        (=> 'in' (unit=Unit | currency=Currency)) |
		//        (=> 'per' unit=Unit)
		//    )? &
		//    (=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//    (from=Number 'to' to=Number)?
		//)
		public Group getGroup() { return cGroup; }
		
		//(generic?='any' | global?='all' | exclusive?='only')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//generic?='any'
		public Assignment getGenericAssignment_0_0() { return cGenericAssignment_0_0; }
		
		//'any'
		public Keyword getGenericAnyKeyword_0_0_0() { return cGenericAnyKeyword_0_0_0; }
		
		//global?='all'
		public Assignment getGlobalAssignment_0_1() { return cGlobalAssignment_0_1; }
		
		//'all'
		public Keyword getGlobalAllKeyword_0_1_0() { return cGlobalAllKeyword_0_1_0; }
		
		//exclusive?='only'
		public Assignment getExclusiveAssignment_0_2() { return cExclusiveAssignment_0_2; }
		
		//'only'
		public Keyword getExclusiveOnlyKeyword_0_2_0() { return cExclusiveOnlyKeyword_0_2_0; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_1_0() { return cDeclarationConceptDeclarationParserRuleCall_1_0; }
		
		//( =>
		//    ( =>
		//        (=> 'in' (unit=Unit | currency=Currency)) |
		//        (=> 'per' unit=Unit)
		//    )? &
		//    (=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//    (from=Number 'to' to=Number)?
		//)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//=>
		//       ( =>
		//           (=> 'in' (unit=Unit | currency=Currency)) |
		//           (=> 'per' unit=Unit)
		//       )?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//=>
		//           (=> 'in' (unit=Unit | currency=Currency)) |
		//           (=> 'per' unit=Unit)
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }
		
		//=>
		//           (=> 'in' (unit=Unit | currency=Currency))
		public Group getGroup_2_0_0_0() { return cGroup_2_0_0_0; }
		
		//=> 'in' (unit=Unit | currency=Currency)
		public Group getGroup_2_0_0_0_0() { return cGroup_2_0_0_0_0; }
		
		//=> 'in'
		public Keyword getInKeyword_2_0_0_0_0_0() { return cInKeyword_2_0_0_0_0_0; }
		
		//(unit=Unit | currency=Currency)
		public Alternatives getAlternatives_2_0_0_0_0_1() { return cAlternatives_2_0_0_0_0_1; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_0_0_0_0_1_0() { return cUnitAssignment_2_0_0_0_0_1_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_2_0_0_0_0_1_0_0() { return cUnitUnitParserRuleCall_2_0_0_0_0_1_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_2_0_0_0_0_1_1() { return cCurrencyAssignment_2_0_0_0_0_1_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_2_0_0_0_0_1_1_0() { return cCurrencyCurrencyParserRuleCall_2_0_0_0_0_1_1_0; }
		
		//(=> 'per' unit=Unit)
		public Group getGroup_2_0_0_1() { return cGroup_2_0_0_1; }
		
		//=> 'per'
		public Keyword getPerKeyword_2_0_0_1_0() { return cPerKeyword_2_0_0_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_0_0_1_1() { return cUnitAssignment_2_0_0_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_2_0_0_1_1_0() { return cUnitUnitParserRuleCall_2_0_0_1_1_0; }
		
		//(=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//=> valueOperators+=ValueOperator
		public Assignment getValueOperatorsAssignment_2_1_0() { return cValueOperatorsAssignment_2_1_0; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_2_1_0_0() { return cValueOperatorsValueOperatorParserRuleCall_2_1_0_0; }
		
		//(valueOperators+=ValueOperator)*
		public Assignment getValueOperatorsAssignment_2_1_1() { return cValueOperatorsAssignment_2_1_1; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_2_1_1_0() { return cValueOperatorsValueOperatorParserRuleCall_2_1_1_0; }
		
		//(from=Number 'to' to=Number)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//from=Number
		public Assignment getFromAssignment_2_2_0() { return cFromAssignment_2_2_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_2_2_0_0() { return cFromNumberParserRuleCall_2_2_0_0; }
		
		//'to'
		public Keyword getToKeyword_2_2_1() { return cToKeyword_2_2_1; }
		
		//to=Number
		public Assignment getToAssignment_2_2_2() { return cToAssignment_2_2_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_2_2_2_0() { return cToNumberParserRuleCall_2_2_2_0; }
	}
	public class ValueOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ValueOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cModifierAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cModifierVALUE_OPERATORParserRuleCall_0_0_0_0 = (RuleCall)cModifierAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Assignment cDownToAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final Keyword cDownToDownKeyword_0_0_1_0_0 = (Keyword)cDownToAssignment_0_0_1_0.eContents().get(0);
		private final Keyword cToKeyword_0_0_1_1 = (Keyword)cGroup_0_0_1.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cComparisonValueAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cComparisonValueNumberParserRuleCall_0_1_0_0 = (RuleCall)cComparisonValueAssignment_0_1_0.eContents().get(0);
		private final Assignment cComparisonQuantityAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cComparisonQuantityQuantityParserRuleCall_0_1_1_0 = (RuleCall)cComparisonQuantityAssignment_0_1_1.eContents().get(0);
		private final Assignment cComparisonConceptAssignment_0_1_2 = (Assignment)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cComparisonConceptConceptDeclarationParserRuleCall_0_1_2_0 = (RuleCall)cComparisonConceptAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cAlternatives_0_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_0_1_3_0 = (Keyword)cGroup_0_1_3.eContents().get(0);
		private final Assignment cComparisonObservableAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cComparisonObservableObservableSemanticsParserRuleCall_0_1_3_1_0 = (RuleCall)cComparisonObservableAssignment_0_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3_2 = (Keyword)cGroup_0_1_3.eContents().get(2);
		private final Assignment cTotalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTotalTotalKeyword_1_0 = (Keyword)cTotalAssignment_1.eContents().get(0);
		private final Assignment cAveragedAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cAveragedAveragedKeyword_2_0 = (Keyword)cAveragedAssignment_2.eContents().get(0);
		private final Assignment cSummedAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cSummedSummedKeyword_3_0 = (Keyword)cSummedAssignment_3.eContents().get(0);
		
		//ValueOperator:
		//    (modifier=VALUE_OPERATOR | downTo='down' 'to')
		//        (comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration | ('(' comparisonObservable=ObservableSemantics ')')) |
		//    total='total' |
		//    averaged='averaged' |
		//    summed='summed'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(modifier=VALUE_OPERATOR | downTo='down' 'to')
		//    (comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration | ('(' comparisonObservable=ObservableSemantics ')')) |
		//total='total' |
		//averaged='averaged' |
		//summed='summed'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(modifier=VALUE_OPERATOR | downTo='down' 'to')
		//    (comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration | ('(' comparisonObservable=ObservableSemantics ')'))
		public Group getGroup_0() { return cGroup_0; }
		
		//(modifier=VALUE_OPERATOR | downTo='down' 'to')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//modifier=VALUE_OPERATOR
		public Assignment getModifierAssignment_0_0_0() { return cModifierAssignment_0_0_0; }
		
		//VALUE_OPERATOR
		public RuleCall getModifierVALUE_OPERATORParserRuleCall_0_0_0_0() { return cModifierVALUE_OPERATORParserRuleCall_0_0_0_0; }
		
		//downTo='down' 'to'
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//downTo='down'
		public Assignment getDownToAssignment_0_0_1_0() { return cDownToAssignment_0_0_1_0; }
		
		//'down'
		public Keyword getDownToDownKeyword_0_0_1_0_0() { return cDownToDownKeyword_0_0_1_0_0; }
		
		//'to'
		public Keyword getToKeyword_0_0_1_1() { return cToKeyword_0_0_1_1; }
		
		//(comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration | ('(' comparisonObservable=ObservableSemantics ')'))
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//comparisonValue=Number
		public Assignment getComparisonValueAssignment_0_1_0() { return cComparisonValueAssignment_0_1_0; }
		
		//Number
		public RuleCall getComparisonValueNumberParserRuleCall_0_1_0_0() { return cComparisonValueNumberParserRuleCall_0_1_0_0; }
		
		//comparisonQuantity=Quantity
		public Assignment getComparisonQuantityAssignment_0_1_1() { return cComparisonQuantityAssignment_0_1_1; }
		
		//Quantity
		public RuleCall getComparisonQuantityQuantityParserRuleCall_0_1_1_0() { return cComparisonQuantityQuantityParserRuleCall_0_1_1_0; }
		
		//comparisonConcept+=ConceptDeclaration
		public Assignment getComparisonConceptAssignment_0_1_2() { return cComparisonConceptAssignment_0_1_2; }
		
		//ConceptDeclaration
		public RuleCall getComparisonConceptConceptDeclarationParserRuleCall_0_1_2_0() { return cComparisonConceptConceptDeclarationParserRuleCall_0_1_2_0; }
		
		//('(' comparisonObservable=ObservableSemantics ')')
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_3_0() { return cLeftParenthesisKeyword_0_1_3_0; }
		
		//comparisonObservable=ObservableSemantics
		public Assignment getComparisonObservableAssignment_0_1_3_1() { return cComparisonObservableAssignment_0_1_3_1; }
		
		//ObservableSemantics
		public RuleCall getComparisonObservableObservableSemanticsParserRuleCall_0_1_3_1_0() { return cComparisonObservableObservableSemanticsParserRuleCall_0_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_3_2() { return cRightParenthesisKeyword_0_1_3_2; }
		
		//total='total'
		public Assignment getTotalAssignment_1() { return cTotalAssignment_1; }
		
		//'total'
		public Keyword getTotalTotalKeyword_1_0() { return cTotalTotalKeyword_1_0; }
		
		//averaged='averaged'
		public Assignment getAveragedAssignment_2() { return cAveragedAssignment_2; }
		
		//'averaged'
		public Keyword getAveragedAveragedKeyword_2_0() { return cAveragedAveragedKeyword_2_0; }
		
		//summed='summed'
		public Assignment getSummedAssignment_3() { return cSummedAssignment_3; }
		
		//'summed'
		public Keyword getSummedSummedKeyword_3_0() { return cSummedSummedKeyword_3_0; }
	}
	public class AnnotatedObservableSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.AnnotatedObservableSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cGenericAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cGenericAnyKeyword_2_0 = (Keyword)cGenericAssignment_2.eContents().get(0);
		private final Assignment cDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationAssignment_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cAccordingKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cToKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cAccordingToAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cAccordingToPropertyIdParserRuleCall_4_0_2_0 = (RuleCall)cAccordingToAssignment_4_0_2.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cUnorderedGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cAlternatives_4_1.eContents().get(0);
		private final Keyword cInKeyword_4_1_0_0 = (Keyword)cGroup_4_1_0.eContents().get(0);
		private final Alternatives cAlternatives_4_1_0_1 = (Alternatives)cGroup_4_1_0.eContents().get(1);
		private final Assignment cUnitAssignment_4_1_0_1_0 = (Assignment)cAlternatives_4_1_0_1.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_4_1_0_1_0_0 = (RuleCall)cUnitAssignment_4_1_0_1_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_4_1_0_1_1 = (Assignment)cAlternatives_4_1_0_1.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_4_1_0_1_1_0 = (RuleCall)cCurrencyAssignment_4_1_0_1_1.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cAlternatives_4_1.eContents().get(1);
		private final Keyword cPerKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cUnitAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_4_1_1_1_0 = (RuleCall)cUnitAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cUnorderedGroup_4.eContents().get(2);
		private final Assignment cValueOperatorsAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_4_2_0_0 = (RuleCall)cValueOperatorsAssignment_4_2_0.eContents().get(0);
		private final Assignment cValueOperatorsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_4_2_1_0 = (RuleCall)cValueOperatorsAssignment_4_2_1.eContents().get(0);
		private final Alternatives cAlternatives_4_3 = (Alternatives)cUnorderedGroup_4.eContents().get(3);
		private final Assignment cOptionalAssignment_4_3_0 = (Assignment)cAlternatives_4_3.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_4_3_0_0 = (Keyword)cOptionalAssignment_4_3_0.eContents().get(0);
		private final Keyword cRequiredKeyword_4_3_1 = (Keyword)cAlternatives_4_3.eContents().get(1);
		private final Group cGroup_4_4 = (Group)cUnorderedGroup_4.eContents().get(4);
		private final Assignment cFromAssignment_4_4_0 = (Assignment)cGroup_4_4.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_4_4_0_0 = (RuleCall)cFromAssignment_4_4_0.eContents().get(0);
		private final Keyword cToKeyword_4_4_1 = (Keyword)cGroup_4_4.eContents().get(1);
		private final Assignment cToAssignment_4_4_2 = (Assignment)cGroup_4_4.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_4_4_2_0 = (RuleCall)cToAssignment_4_4_2.eContents().get(0);
		private final Group cGroup_4_5 = (Group)cUnorderedGroup_4.eContents().get(5);
		private final Keyword cNamedKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Assignment cNameAssignment_4_5_1 = (Assignment)cGroup_4_5.eContents().get(1);
		private final Alternatives cNameAlternatives_4_5_1_0 = (Alternatives)cNameAssignment_4_5_1.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_4_5_1_0_0 = (RuleCall)cNameAlternatives_4_5_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_5_1_0_1 = (RuleCall)cNameAlternatives_4_5_1_0.eContents().get(1);
		
		///**
		// * Same as full observable semantics above but with annotations and without 'as' (using
		// * contextualizer-specific annotations for role in models).
		// */
		//AnnotatedObservableSemantics returns ObservableSemantics:
		//    annotations += Annotation*
		//    (value=Value 'as')?
		//    (generic?='any')?
		//    declaration=ConceptDeclaration
		//    (
		//        ('according' 'to' accordingTo=PropertyId)? &
		//        (
		//            ('in' (unit=Unit | currency=Currency)) |
		//            ('per' unit=Unit)
		//        )? &
		//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        (from=Number 'to' to=Number)? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//    annotations += Annotation*
		//    (value=Value 'as')?
		//    (generic?='any')?
		//    declaration=ConceptDeclaration
		//    (
		//        ('according' 'to' accordingTo=PropertyId)? &
		//        (
		//            ('in' (unit=Unit | currency=Currency)) |
		//            ('per' unit=Unit)
		//        )? &
		//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        (from=Number 'to' to=Number)? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		//    )
		public Group getGroup() { return cGroup; }
		
		//annotations += Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//(value=Value 'as')?
		public Group getGroup_1() { return cGroup_1; }
		
		//value=Value
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0_0() { return cValueValueParserRuleCall_1_0_0; }
		
		//'as'
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }
		
		//(generic?='any')?
		public Assignment getGenericAssignment_2() { return cGenericAssignment_2; }
		
		//'any'
		public Keyword getGenericAnyKeyword_2_0() { return cGenericAnyKeyword_2_0; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_3() { return cDeclarationAssignment_3; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_3_0() { return cDeclarationConceptDeclarationParserRuleCall_3_0; }
		
		//    (
		//        ('according' 'to' accordingTo=PropertyId)? &
		//        (
		//            ('in' (unit=Unit | currency=Currency)) |
		//            ('per' unit=Unit)
		//        )? &
		//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        (from=Number 'to' to=Number)? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		//    )
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }
		
		//('according' 'to' accordingTo=PropertyId)?
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'according'
		public Keyword getAccordingKeyword_4_0_0() { return cAccordingKeyword_4_0_0; }
		
		//'to'
		public Keyword getToKeyword_4_0_1() { return cToKeyword_4_0_1; }
		
		//accordingTo=PropertyId
		public Assignment getAccordingToAssignment_4_0_2() { return cAccordingToAssignment_4_0_2; }
		
		//PropertyId
		public RuleCall getAccordingToPropertyIdParserRuleCall_4_0_2_0() { return cAccordingToPropertyIdParserRuleCall_4_0_2_0; }
		
		//(
		//    ('in' (unit=Unit | currency=Currency)) |
		//    ('per' unit=Unit)
		//)?
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//('in' (unit=Unit | currency=Currency))
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }
		
		//'in'
		public Keyword getInKeyword_4_1_0_0() { return cInKeyword_4_1_0_0; }
		
		//(unit=Unit | currency=Currency)
		public Alternatives getAlternatives_4_1_0_1() { return cAlternatives_4_1_0_1; }
		
		//unit=Unit
		public Assignment getUnitAssignment_4_1_0_1_0() { return cUnitAssignment_4_1_0_1_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_4_1_0_1_0_0() { return cUnitUnitParserRuleCall_4_1_0_1_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_4_1_0_1_1() { return cCurrencyAssignment_4_1_0_1_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_4_1_0_1_1_0() { return cCurrencyCurrencyParserRuleCall_4_1_0_1_1_0; }
		
		//('per' unit=Unit)
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//'per'
		public Keyword getPerKeyword_4_1_1_0() { return cPerKeyword_4_1_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_4_1_1_1() { return cUnitAssignment_4_1_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_4_1_1_1_0() { return cUnitUnitParserRuleCall_4_1_1_1_0; }
		
		//(valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//valueOperators+=ValueOperator
		public Assignment getValueOperatorsAssignment_4_2_0() { return cValueOperatorsAssignment_4_2_0; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_4_2_0_0() { return cValueOperatorsValueOperatorParserRuleCall_4_2_0_0; }
		
		//(valueOperators+=ValueOperator)*
		public Assignment getValueOperatorsAssignment_4_2_1() { return cValueOperatorsAssignment_4_2_1; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_4_2_1_0() { return cValueOperatorsValueOperatorParserRuleCall_4_2_1_0; }
		
		//(optional?='optional'| 'required')?
		public Alternatives getAlternatives_4_3() { return cAlternatives_4_3; }
		
		//optional?='optional'
		public Assignment getOptionalAssignment_4_3_0() { return cOptionalAssignment_4_3_0; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_4_3_0_0() { return cOptionalOptionalKeyword_4_3_0_0; }
		
		//'required'
		public Keyword getRequiredKeyword_4_3_1() { return cRequiredKeyword_4_3_1; }
		
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        (from=Number 'to' to=Number)?
		public Group getGroup_4_4() { return cGroup_4_4; }
		
		//from=Number
		public Assignment getFromAssignment_4_4_0() { return cFromAssignment_4_4_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_4_4_0_0() { return cFromNumberParserRuleCall_4_4_0_0; }
		
		//'to'
		public Keyword getToKeyword_4_4_1() { return cToKeyword_4_4_1; }
		
		//to=Number
		public Assignment getToAssignment_4_4_2() { return cToAssignment_4_4_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_4_4_2_0() { return cToNumberParserRuleCall_4_4_2_0; }
		
		//('named' name=(LOWERCASE_ID|STRING))?
		public Group getGroup_4_5() { return cGroup_4_5; }
		
		//'named'
		public Keyword getNamedKeyword_4_5_0() { return cNamedKeyword_4_5_0; }
		
		//name=(LOWERCASE_ID|STRING)
		public Assignment getNameAssignment_4_5_1() { return cNameAssignment_4_5_1; }
		
		//(LOWERCASE_ID|STRING)
		public Alternatives getNameAlternatives_4_5_1_0() { return cNameAlternatives_4_5_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_4_5_1_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_4_5_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_5_1_0_1() { return cNameSTRINGTerminalRuleCall_4_5_1_0_1; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cAlternatives_1.eContents().get(0);
		private final Assignment cModelReferenceAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Alternatives cModelReferenceAlternatives_1_0_0_0 = (Alternatives)cModelReferenceAssignment_1_0_0.eContents().get(0);
		private final RuleCall cModelReferenceLOWERCASE_IDTerminalRuleCall_1_0_0_0_0 = (RuleCall)cModelReferenceAlternatives_1_0_0_0.eContents().get(0);
		private final RuleCall cModelReferencePathNameParserRuleCall_1_0_0_0_1 = (RuleCall)cModelReferenceAlternatives_1_0_0_0.eContents().get(1);
		private final RuleCall cModelReferenceUrnIdParserRuleCall_1_0_0_0_2 = (RuleCall)cModelReferenceAlternatives_1_0_0_0.eContents().get(2);
		private final RuleCall cModelReferenceSTRINGTerminalRuleCall_1_0_0_0_3 = (RuleCall)cModelReferenceAlternatives_1_0_0_0.eContents().get(3);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Assignment cObservableAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cObservableDependencyObservableSemanticsParserRuleCall_1_0_1_0_0 = (RuleCall)cObservableAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Assignment cOptionsAssignment_1_0_1_1_0 = (Assignment)cGroup_1_0_1_1.eContents().get(0);
		private final RuleCall cOptionsOptionParserRuleCall_1_0_1_1_0_0 = (RuleCall)cOptionsAssignment_1_0_1_1_0.eContents().get(0);
		private final Assignment cOptionsAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_1_0_1_1_1_0 = (RuleCall)cOptionsAssignment_1_0_1_1_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_1 = (UnorderedGroup)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cUnorderedGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cAlternativeObservablesAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cAlternativeObservablesAlternativeDependencyObservableSemanticsParserRuleCall_1_1_0_1_0 = (RuleCall)cAlternativeObservablesAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_0_2 = (Group)cGroup_1_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_0_2_0 = (Keyword)cGroup_1_1_0_2.eContents().get(0);
		private final Assignment cAlternativeObservablesAssignment_1_1_0_2_1 = (Assignment)cGroup_1_1_0_2.eContents().get(1);
		private final RuleCall cAlternativeObservablesAlternativeDependencyObservableSemanticsParserRuleCall_1_1_0_2_1_0 = (RuleCall)cAlternativeObservablesAssignment_1_1_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_0_3 = (Keyword)cGroup_1_1_0.eContents().get(3);
		private final Alternatives cAlternatives_1_1_0_4 = (Alternatives)cGroup_1_1_0.eContents().get(4);
		private final Assignment cOptionalAssignment_1_1_0_4_0 = (Assignment)cAlternatives_1_1_0_4.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_1_1_0_4_0_0 = (Keyword)cOptionalAssignment_1_1_0_4_0.eContents().get(0);
		private final Keyword cRequiredKeyword_1_1_0_4_1 = (Keyword)cAlternatives_1_1_0_4.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cUnorderedGroup_1_1.eContents().get(1);
		private final Keyword cNamedKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_1_1_0 = (Alternatives)cNameAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_1_1_1_1_0_0 = (RuleCall)cNameAlternatives_1_1_1_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_1_1_1_0_1 = (RuleCall)cNameAlternatives_1_1_1_1_0.eContents().get(1);
		
		//Dependency:
		//    annotations += Annotation*
		//    ((
		//        modelReference=(LOWERCASE_ID|PathName|UrnId|STRING) |
		//        observable=DependencyObservableSemantics (options+=Option (options+=Option)*)?
		//    ) |
		//    (
		//        '('
		//            alternativeObservables+=AlternativeDependencyObservableSemantics (',' alternativeObservables+=AlternativeDependencyObservableSemantics)*
		//        ')'
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        'named' name=(LOWERCASE_ID|STRING)
		//    ))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    annotations += Annotation*
		//    ((
		//        modelReference=(LOWERCASE_ID|PathName|UrnId|STRING) |
		//        observable=DependencyObservableSemantics (options+=Option (options+=Option)*)?
		//    ) |
		//    (
		//        '('
		//            alternativeObservables+=AlternativeDependencyObservableSemantics (',' alternativeObservables+=AlternativeDependencyObservableSemantics)*
		//        ')'
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        'named' name=(LOWERCASE_ID|STRING)
		//    ))
		public Group getGroup() { return cGroup; }
		
		//annotations += Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//    ((
		//        modelReference=(LOWERCASE_ID|PathName|UrnId|STRING) |
		//        observable=DependencyObservableSemantics (options+=Option (options+=Option)*)?
		//    ) |
		//    (
		//        '('
		//            alternativeObservables+=AlternativeDependencyObservableSemantics (',' alternativeObservables+=AlternativeDependencyObservableSemantics)*
		//        ')'
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        'named' name=(LOWERCASE_ID|STRING)
		//    ))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(
		//        modelReference=(LOWERCASE_ID|PathName|UrnId|STRING) |
		//        observable=DependencyObservableSemantics (options+=Option (options+=Option)*)?
		//    )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//modelReference=(LOWERCASE_ID|PathName|UrnId|STRING)
		public Assignment getModelReferenceAssignment_1_0_0() { return cModelReferenceAssignment_1_0_0; }
		
		//(LOWERCASE_ID|PathName|UrnId|STRING)
		public Alternatives getModelReferenceAlternatives_1_0_0_0() { return cModelReferenceAlternatives_1_0_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getModelReferenceLOWERCASE_IDTerminalRuleCall_1_0_0_0_0() { return cModelReferenceLOWERCASE_IDTerminalRuleCall_1_0_0_0_0; }
		
		//PathName
		public RuleCall getModelReferencePathNameParserRuleCall_1_0_0_0_1() { return cModelReferencePathNameParserRuleCall_1_0_0_0_1; }
		
		//UrnId
		public RuleCall getModelReferenceUrnIdParserRuleCall_1_0_0_0_2() { return cModelReferenceUrnIdParserRuleCall_1_0_0_0_2; }
		
		//STRING
		public RuleCall getModelReferenceSTRINGTerminalRuleCall_1_0_0_0_3() { return cModelReferenceSTRINGTerminalRuleCall_1_0_0_0_3; }
		
		//observable=DependencyObservableSemantics (options+=Option (options+=Option)*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//observable=DependencyObservableSemantics
		public Assignment getObservableAssignment_1_0_1_0() { return cObservableAssignment_1_0_1_0; }
		
		//DependencyObservableSemantics
		public RuleCall getObservableDependencyObservableSemanticsParserRuleCall_1_0_1_0_0() { return cObservableDependencyObservableSemanticsParserRuleCall_1_0_1_0_0; }
		
		//(options+=Option (options+=Option)*)?
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//options+=Option
		public Assignment getOptionsAssignment_1_0_1_1_0() { return cOptionsAssignment_1_0_1_1_0; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_1_0_1_1_0_0() { return cOptionsOptionParserRuleCall_1_0_1_1_0_0; }
		
		//(options+=Option)*
		public Assignment getOptionsAssignment_1_0_1_1_1() { return cOptionsAssignment_1_0_1_1_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_1_0_1_1_1_0() { return cOptionsOptionParserRuleCall_1_0_1_1_1_0; }
		
		//    (
		//        '('
		//            alternativeObservables+=AlternativeDependencyObservableSemantics (',' alternativeObservables+=AlternativeDependencyObservableSemantics)*
		//        ')'
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        'named' name=(LOWERCASE_ID|STRING)
		//    )
		public UnorderedGroup getUnorderedGroup_1_1() { return cUnorderedGroup_1_1; }
		
		//'('
		//    alternativeObservables+=AlternativeDependencyObservableSemantics (',' alternativeObservables+=AlternativeDependencyObservableSemantics)*
		//')'
		//(optional?='optional'| 'required')?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0_0() { return cLeftParenthesisKeyword_1_1_0_0; }
		
		//alternativeObservables+=AlternativeDependencyObservableSemantics
		public Assignment getAlternativeObservablesAssignment_1_1_0_1() { return cAlternativeObservablesAssignment_1_1_0_1; }
		
		//AlternativeDependencyObservableSemantics
		public RuleCall getAlternativeObservablesAlternativeDependencyObservableSemanticsParserRuleCall_1_1_0_1_0() { return cAlternativeObservablesAlternativeDependencyObservableSemanticsParserRuleCall_1_1_0_1_0; }
		
		//(',' alternativeObservables+=AlternativeDependencyObservableSemantics)*
		public Group getGroup_1_1_0_2() { return cGroup_1_1_0_2; }
		
		//','
		public Keyword getCommaKeyword_1_1_0_2_0() { return cCommaKeyword_1_1_0_2_0; }
		
		//alternativeObservables+=AlternativeDependencyObservableSemantics
		public Assignment getAlternativeObservablesAssignment_1_1_0_2_1() { return cAlternativeObservablesAssignment_1_1_0_2_1; }
		
		//AlternativeDependencyObservableSemantics
		public RuleCall getAlternativeObservablesAlternativeDependencyObservableSemanticsParserRuleCall_1_1_0_2_1_0() { return cAlternativeObservablesAlternativeDependencyObservableSemanticsParserRuleCall_1_1_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_0_3() { return cRightParenthesisKeyword_1_1_0_3; }
		
		//(optional?='optional'| 'required')?
		public Alternatives getAlternatives_1_1_0_4() { return cAlternatives_1_1_0_4; }
		
		//optional?='optional'
		public Assignment getOptionalAssignment_1_1_0_4_0() { return cOptionalAssignment_1_1_0_4_0; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_1_1_0_4_0_0() { return cOptionalOptionalKeyword_1_1_0_4_0_0; }
		
		//'required'
		public Keyword getRequiredKeyword_1_1_0_4_1() { return cRequiredKeyword_1_1_0_4_1; }
		
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        'named' name=(LOWERCASE_ID|STRING)
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        'named'
		public Keyword getNamedKeyword_1_1_1_0() { return cNamedKeyword_1_1_1_0; }
		
		//name=(LOWERCASE_ID|STRING)
		public Assignment getNameAssignment_1_1_1_1() { return cNameAssignment_1_1_1_1; }
		
		//(LOWERCASE_ID|STRING)
		public Alternatives getNameAlternatives_1_1_1_1_0() { return cNameAlternatives_1_1_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_1_1_1_1_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_1_1_1_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_1_1_1_0_1() { return cNameSTRINGTerminalRuleCall_1_1_1_1_0_1; }
	}
	public class ConceptDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ConceptDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMainConceptParserRuleCall_0_0 = (RuleCall)cMainAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cOfKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cGroup_1_0_0.eContents().get(1);
		private final Assignment cDistributedOfInherencyAssignment_1_0_0_1_0 = (Assignment)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cDistributedOfInherencyEachKeyword_1_0_0_1_0_0 = (Keyword)cDistributedOfInherencyAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cInherencyAssignment_1_0_0_1_1 = (Assignment)cGroup_1_0_0_1.eContents().get(1);
		private final RuleCall cInherencySimpleConceptDeclarationParserRuleCall_1_0_0_1_1_0 = (RuleCall)cInherencyAssignment_1_0_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cForKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cDistributedForInherencyAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cDistributedForInherencyEachKeyword_1_1_1_0_0 = (Keyword)cDistributedForInherencyAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cMotivationAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cMotivationSimpleConceptDeclarationParserRuleCall_1_1_1_1_0 = (RuleCall)cMotivationAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cWithKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cCompresentAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cCompresentSimpleConceptDeclarationParserRuleCall_1_2_1_0 = (RuleCall)cCompresentAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cUnorderedGroup_1.eContents().get(3);
		private final Keyword cCausedKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cByKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cCausantAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cCausantSimpleConceptDeclarationParserRuleCall_1_3_2_0 = (RuleCall)cCausantAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cUnorderedGroup_1.eContents().get(4);
		private final Keyword cAdjacentKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Keyword cToKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cAdjacentAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cAdjacentSimpleConceptDeclarationParserRuleCall_1_4_2_0 = (RuleCall)cAdjacentAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cUnorderedGroup_1.eContents().get(5);
		private final Keyword cContainedKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Keyword cInKeyword_1_5_1 = (Keyword)cGroup_1_5.eContents().get(1);
		private final Assignment cContainerAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cContainerSimpleConceptDeclarationParserRuleCall_1_5_2_0 = (RuleCall)cContainerAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cUnorderedGroup_1.eContents().get(6);
		private final Keyword cContainingKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cContainedAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cContainedSimpleConceptDeclarationParserRuleCall_1_6_1_0 = (RuleCall)cContainedAssignment_1_6_1.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cUnorderedGroup_1.eContents().get(7);
		private final Keyword cCausingKeyword_1_7_0 = (Keyword)cGroup_1_7.eContents().get(0);
		private final Assignment cCausedAssignment_1_7_1 = (Assignment)cGroup_1_7.eContents().get(1);
		private final RuleCall cCausedSimpleConceptDeclarationParserRuleCall_1_7_1_0 = (RuleCall)cCausedAssignment_1_7_1.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cUnorderedGroup_1.eContents().get(8);
		private final Keyword cDuringKeyword_1_8_0 = (Keyword)cGroup_1_8.eContents().get(0);
		private final Group cGroup_1_8_1 = (Group)cGroup_1_8.eContents().get(1);
		private final Assignment cDistributedTemporalInherencyAssignment_1_8_1_0 = (Assignment)cGroup_1_8_1.eContents().get(0);
		private final Keyword cDistributedTemporalInherencyEachKeyword_1_8_1_0_0 = (Keyword)cDistributedTemporalInherencyAssignment_1_8_1_0.eContents().get(0);
		private final Assignment cDuringAssignment_1_8_1_1 = (Assignment)cGroup_1_8_1.eContents().get(1);
		private final RuleCall cDuringSimpleConceptDeclarationParserRuleCall_1_8_1_1_0 = (RuleCall)cDuringAssignment_1_8_1_1.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cUnorderedGroup_1.eContents().get(9);
		private final Keyword cWithinKeyword_1_9_0 = (Keyword)cGroup_1_9.eContents().get(0);
		private final Group cGroup_1_9_1 = (Group)cGroup_1_9.eContents().get(1);
		private final Assignment cDistributedWithinInherencyAssignment_1_9_1_0 = (Assignment)cGroup_1_9_1.eContents().get(0);
		private final Keyword cDistributedWithinInherencyEachKeyword_1_9_1_0_0 = (Keyword)cDistributedWithinInherencyAssignment_1_9_1_0.eContents().get(0);
		private final Assignment cContextAssignment_1_9_1_1 = (Assignment)cGroup_1_9_1.eContents().get(1);
		private final RuleCall cContextSimpleConceptDeclarationParserRuleCall_1_9_1_1_0 = (RuleCall)cContextAssignment_1_9_1_1.eContents().get(0);
		private final Group cGroup_1_10 = (Group)cUnorderedGroup_1.eContents().get(10);
		private final Keyword cLinkingKeyword_1_10_0 = (Keyword)cGroup_1_10.eContents().get(0);
		private final Assignment cRelationshipSourceAssignment_1_10_1 = (Assignment)cGroup_1_10.eContents().get(1);
		private final RuleCall cRelationshipSourceSimpleConceptDeclarationParserRuleCall_1_10_1_0 = (RuleCall)cRelationshipSourceAssignment_1_10_1.eContents().get(0);
		private final Keyword cToKeyword_1_10_2 = (Keyword)cGroup_1_10.eContents().get(2);
		private final Assignment cRelationshipTargetAssignment_1_10_3 = (Assignment)cGroup_1_10.eContents().get(3);
		private final RuleCall cRelationshipTargetSimpleConceptDeclarationParserRuleCall_1_10_3_0 = (RuleCall)cRelationshipTargetAssignment_1_10_3.eContents().get(0);
		
		//ConceptDeclaration:
		//    main+=Concept+
		//        // binary semantic operators; also 'as', 'by' and 'follows' handled in other rules
		//        (=>
		//            // primary physical inherency (observational inherency is given using 'within'). Any observable can be inherent to any countable.
		//            ('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))? &
		//            // purpose (achievement event created from target). Partitions qualities and applies to anything that can be created.
		//            ('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))? &
		//            // compresence (subject, process, event, presence or partitioned quality)
		//            ('with' compresent=SimpleConceptDeclaration)? &
		//            // cause towards self - causant can be anything (?)
		//            ('caused' 'by' causant=SimpleConceptDeclaration)? &
		//            // spatial adjacency (see 'follows' operator for temporal adjacency in events) - Only for countables
		//            ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? &
		//            // being contained - Countables only
		//            ('contained' 'in' container=SimpleConceptDeclaration)? &
		//            // containing - Countables only
		//            ('containing' contained=SimpleConceptDeclaration)? &
		//            // cause towards events, processes, quality partitions
		//            ('causing'   caused=SimpleConceptDeclaration)? &
		//            // concomitant with any occurrent
		//            ('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))? &
		//            // observational inherency: specifies context for observations, either as part of semantics or to
		//            // subclass the use of a model to a specified context. Applies to any observable, only countables as argument
		//            ('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))? &
		//            // for relationships: specialize source and target types, both subjects
		//            ('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
		//        )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//main+=Concept+
		//    // binary semantic operators; also 'as', 'by' and 'follows' handled in other rules
		//    (=>
		//        // primary physical inherency (observational inherency is given using 'within'). Any observable can be inherent to any countable.
		//        ('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))? &
		//        // purpose (achievement event created from target). Partitions qualities and applies to anything that can be created.
		//        ('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))? &
		//        // compresence (subject, process, event, presence or partitioned quality)
		//        ('with' compresent=SimpleConceptDeclaration)? &
		//        // cause towards self - causant can be anything (?)
		//        ('caused' 'by' causant=SimpleConceptDeclaration)? &
		//        // spatial adjacency (see 'follows' operator for temporal adjacency in events) - Only for countables
		//        ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? &
		//        // being contained - Countables only
		//        ('contained' 'in' container=SimpleConceptDeclaration)? &
		//        // containing - Countables only
		//        ('containing' contained=SimpleConceptDeclaration)? &
		//        // cause towards events, processes, quality partitions
		//        ('causing'   caused=SimpleConceptDeclaration)? &
		//        // concomitant with any occurrent
		//        ('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))? &
		//        // observational inherency: specifies context for observations, either as part of semantics or to
		//        // subclass the use of a model to a specified context. Applies to any observable, only countables as argument
		//        ('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))? &
		//        // for relationships: specialize source and target types, both subjects
		//        ('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
		//    )?
		public Group getGroup() { return cGroup; }
		
		//main+=Concept+
		public Assignment getMainAssignment_0() { return cMainAssignment_0; }
		
		//Concept
		public RuleCall getMainConceptParserRuleCall_0_0() { return cMainConceptParserRuleCall_0_0; }
		
		//// binary semantic operators; also 'as', 'by' and 'follows' handled in other rules
		//(=>
		//    // primary physical inherency (observational inherency is given using 'within'). Any observable can be inherent to any countable.
		//    ('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))? &
		//    // purpose (achievement event created from target). Partitions qualities and applies to anything that can be created.
		//    ('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))? &
		//    // compresence (subject, process, event, presence or partitioned quality)
		//    ('with' compresent=SimpleConceptDeclaration)? &
		//    // cause towards self - causant can be anything (?)
		//    ('caused' 'by' causant=SimpleConceptDeclaration)? &
		//    // spatial adjacency (see 'follows' operator for temporal adjacency in events) - Only for countables
		//    ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? &
		//    // being contained - Countables only
		//    ('contained' 'in' container=SimpleConceptDeclaration)? &
		//    // containing - Countables only
		//    ('containing' contained=SimpleConceptDeclaration)? &
		//    // cause towards events, processes, quality partitions
		//    ('causing'   caused=SimpleConceptDeclaration)? &
		//    // concomitant with any occurrent
		//    ('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))? &
		//    // observational inherency: specifies context for observations, either as part of semantics or to
		//    // subclass the use of a model to a specified context. Applies to any observable, only countables as argument
		//    ('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))? &
		//    // for relationships: specialize source and target types, both subjects
		//    ('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
		//)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//=>
		//            // primary physical inherency (observational inherency is given using 'within'). Any observable can be inherent to any countable.
		//            ('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1_0_0_0() { return cOfKeyword_1_0_0_0; }
		
		//((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration)
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//(distributedOfInherency?='each')?
		public Assignment getDistributedOfInherencyAssignment_1_0_0_1_0() { return cDistributedOfInherencyAssignment_1_0_0_1_0; }
		
		//'each'
		public Keyword getDistributedOfInherencyEachKeyword_1_0_0_1_0_0() { return cDistributedOfInherencyEachKeyword_1_0_0_1_0_0; }
		
		//inherency=SimpleConceptDeclaration
		public Assignment getInherencyAssignment_1_0_0_1_1() { return cInherencyAssignment_1_0_0_1_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getInherencySimpleConceptDeclarationParserRuleCall_1_0_0_1_1_0() { return cInherencySimpleConceptDeclarationParserRuleCall_1_0_0_1_1_0; }
		
		//// purpose (achievement event created from target). Partitions qualities and applies to anything that can be created.
		//('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'for'
		public Keyword getForKeyword_1_1_0() { return cForKeyword_1_1_0; }
		
		//((distributedForInherency?='each')? motivation=SimpleConceptDeclaration)
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//(distributedForInherency?='each')?
		public Assignment getDistributedForInherencyAssignment_1_1_1_0() { return cDistributedForInherencyAssignment_1_1_1_0; }
		
		//'each'
		public Keyword getDistributedForInherencyEachKeyword_1_1_1_0_0() { return cDistributedForInherencyEachKeyword_1_1_1_0_0; }
		
		//motivation=SimpleConceptDeclaration
		public Assignment getMotivationAssignment_1_1_1_1() { return cMotivationAssignment_1_1_1_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getMotivationSimpleConceptDeclarationParserRuleCall_1_1_1_1_0() { return cMotivationSimpleConceptDeclarationParserRuleCall_1_1_1_1_0; }
		
		//// compresence (subject, process, event, presence or partitioned quality)
		//('with' compresent=SimpleConceptDeclaration)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'with'
		public Keyword getWithKeyword_1_2_0() { return cWithKeyword_1_2_0; }
		
		//compresent=SimpleConceptDeclaration
		public Assignment getCompresentAssignment_1_2_1() { return cCompresentAssignment_1_2_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getCompresentSimpleConceptDeclarationParserRuleCall_1_2_1_0() { return cCompresentSimpleConceptDeclarationParserRuleCall_1_2_1_0; }
		
		//// cause towards self - causant can be anything (?)
		//('caused' 'by' causant=SimpleConceptDeclaration)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'caused'
		public Keyword getCausedKeyword_1_3_0() { return cCausedKeyword_1_3_0; }
		
		//'by'
		public Keyword getByKeyword_1_3_1() { return cByKeyword_1_3_1; }
		
		//causant=SimpleConceptDeclaration
		public Assignment getCausantAssignment_1_3_2() { return cCausantAssignment_1_3_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getCausantSimpleConceptDeclarationParserRuleCall_1_3_2_0() { return cCausantSimpleConceptDeclarationParserRuleCall_1_3_2_0; }
		
		//// spatial adjacency (see 'follows' operator for temporal adjacency in events) - Only for countables
		//('adjacent' 'to' adjacent=SimpleConceptDeclaration)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'adjacent'
		public Keyword getAdjacentKeyword_1_4_0() { return cAdjacentKeyword_1_4_0; }
		
		//'to'
		public Keyword getToKeyword_1_4_1() { return cToKeyword_1_4_1; }
		
		//adjacent=SimpleConceptDeclaration
		public Assignment getAdjacentAssignment_1_4_2() { return cAdjacentAssignment_1_4_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getAdjacentSimpleConceptDeclarationParserRuleCall_1_4_2_0() { return cAdjacentSimpleConceptDeclarationParserRuleCall_1_4_2_0; }
		
		//// being contained - Countables only
		//('contained' 'in' container=SimpleConceptDeclaration)?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'contained'
		public Keyword getContainedKeyword_1_5_0() { return cContainedKeyword_1_5_0; }
		
		//'in'
		public Keyword getInKeyword_1_5_1() { return cInKeyword_1_5_1; }
		
		//container=SimpleConceptDeclaration
		public Assignment getContainerAssignment_1_5_2() { return cContainerAssignment_1_5_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getContainerSimpleConceptDeclarationParserRuleCall_1_5_2_0() { return cContainerSimpleConceptDeclarationParserRuleCall_1_5_2_0; }
		
		//// containing - Countables only
		//('containing' contained=SimpleConceptDeclaration)?
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//'containing'
		public Keyword getContainingKeyword_1_6_0() { return cContainingKeyword_1_6_0; }
		
		//contained=SimpleConceptDeclaration
		public Assignment getContainedAssignment_1_6_1() { return cContainedAssignment_1_6_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getContainedSimpleConceptDeclarationParserRuleCall_1_6_1_0() { return cContainedSimpleConceptDeclarationParserRuleCall_1_6_1_0; }
		
		//// cause towards events, processes, quality partitions
		//('causing'   caused=SimpleConceptDeclaration)?
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//'causing'
		public Keyword getCausingKeyword_1_7_0() { return cCausingKeyword_1_7_0; }
		
		//caused=SimpleConceptDeclaration
		public Assignment getCausedAssignment_1_7_1() { return cCausedAssignment_1_7_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getCausedSimpleConceptDeclarationParserRuleCall_1_7_1_0() { return cCausedSimpleConceptDeclarationParserRuleCall_1_7_1_0; }
		
		//// concomitant with any occurrent
		//('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))?
		public Group getGroup_1_8() { return cGroup_1_8; }
		
		//'during'
		public Keyword getDuringKeyword_1_8_0() { return cDuringKeyword_1_8_0; }
		
		//((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration)
		public Group getGroup_1_8_1() { return cGroup_1_8_1; }
		
		//(distributedTemporalInherency?='each')?
		public Assignment getDistributedTemporalInherencyAssignment_1_8_1_0() { return cDistributedTemporalInherencyAssignment_1_8_1_0; }
		
		//'each'
		public Keyword getDistributedTemporalInherencyEachKeyword_1_8_1_0_0() { return cDistributedTemporalInherencyEachKeyword_1_8_1_0_0; }
		
		//during=SimpleConceptDeclaration
		public Assignment getDuringAssignment_1_8_1_1() { return cDuringAssignment_1_8_1_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getDuringSimpleConceptDeclarationParserRuleCall_1_8_1_1_0() { return cDuringSimpleConceptDeclarationParserRuleCall_1_8_1_1_0; }
		
		//// observational inherency: specifies context for observations, either as part of semantics or to
		//// subclass the use of a model to a specified context. Applies to any observable, only countables as argument
		//('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))?
		public Group getGroup_1_9() { return cGroup_1_9; }
		
		//'within'
		public Keyword getWithinKeyword_1_9_0() { return cWithinKeyword_1_9_0; }
		
		//((distributedWithinInherency?='each')? context=SimpleConceptDeclaration)
		public Group getGroup_1_9_1() { return cGroup_1_9_1; }
		
		//(distributedWithinInherency?='each')?
		public Assignment getDistributedWithinInherencyAssignment_1_9_1_0() { return cDistributedWithinInherencyAssignment_1_9_1_0; }
		
		//'each'
		public Keyword getDistributedWithinInherencyEachKeyword_1_9_1_0_0() { return cDistributedWithinInherencyEachKeyword_1_9_1_0_0; }
		
		//context=SimpleConceptDeclaration
		public Assignment getContextAssignment_1_9_1_1() { return cContextAssignment_1_9_1_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getContextSimpleConceptDeclarationParserRuleCall_1_9_1_1_0() { return cContextSimpleConceptDeclarationParserRuleCall_1_9_1_1_0; }
		
		//// for relationships: specialize source and target types, both subjects
		//('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
		public Group getGroup_1_10() { return cGroup_1_10; }
		
		//'linking'
		public Keyword getLinkingKeyword_1_10_0() { return cLinkingKeyword_1_10_0; }
		
		//relationshipSource=SimpleConceptDeclaration
		public Assignment getRelationshipSourceAssignment_1_10_1() { return cRelationshipSourceAssignment_1_10_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getRelationshipSourceSimpleConceptDeclarationParserRuleCall_1_10_1_0() { return cRelationshipSourceSimpleConceptDeclarationParserRuleCall_1_10_1_0; }
		
		//'to'
		public Keyword getToKeyword_1_10_2() { return cToKeyword_1_10_2; }
		
		//relationshipTarget=SimpleConceptDeclaration
		public Assignment getRelationshipTargetAssignment_1_10_3() { return cRelationshipTargetAssignment_1_10_3; }
		
		//SimpleConceptDeclaration
		public RuleCall getRelationshipTargetSimpleConceptDeclarationParserRuleCall_1_10_3_0() { return cRelationshipTargetSimpleConceptDeclarationParserRuleCall_1_10_3_0; }
	}
	public class ConceptReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ConceptReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameAuthorityIdParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameCAMELCASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameNamespaceIdParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTemplateTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cTemplateTypeAlternatives_3_0_0 = (Alternatives)cTemplateTypeAssignment_3_0.eContents().get(0);
		private final Keyword cTemplateTypeDollarSignLeftCurlyBracketKeyword_3_0_0_0 = (Keyword)cTemplateTypeAlternatives_3_0_0.eContents().get(0);
		private final Keyword cTemplateTypeNumberSignLeftCurlyBracketKeyword_3_0_0_1 = (Keyword)cTemplateTypeAlternatives_3_0_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cExtendsConceptParserRuleCall_3_1_0_0_0 = (RuleCall)cExtendsAssignment_3_1_0_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_0_1 = (Keyword)cGroup_3_1_0.eContents().get(1);
		private final Assignment cNameAssignment_3_1_0_2 = (Assignment)cGroup_3_1_0.eContents().get(2);
		private final Keyword cNameContextKeyword_3_1_0_2_0 = (Keyword)cNameAssignment_3_1_0_2.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Assignment cExtendsAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cExtendsConceptParserRuleCall_3_1_1_0_0 = (RuleCall)cExtendsAssignment_3_1_1_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_1_1 = (Keyword)cGroup_3_1_1.eContents().get(1);
		private final Assignment cNameAssignment_3_1_1_2 = (Assignment)cGroup_3_1_1.eContents().get(2);
		private final Keyword cNameInherentKeyword_3_1_1_2_0 = (Keyword)cNameAssignment_3_1_1_2.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cAlternatives_3_1.eContents().get(2);
		private final Assignment cExtendsAssignment_3_1_2_0 = (Assignment)cGroup_3_1_2.eContents().get(0);
		private final RuleCall cExtendsConceptParserRuleCall_3_1_2_0_0 = (RuleCall)cExtendsAssignment_3_1_2_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_2_1 = (Keyword)cGroup_3_1_2.eContents().get(1);
		private final Assignment cNameAssignment_3_1_2_2 = (Assignment)cGroup_3_1_2.eContents().get(2);
		private final Keyword cNameCompresentKeyword_3_1_2_2_0 = (Keyword)cNameAssignment_3_1_2_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cAlternatives_3_1.eContents().get(3);
		private final Assignment cExtendsAssignment_3_1_3_0 = (Assignment)cGroup_3_1_3.eContents().get(0);
		private final RuleCall cExtendsConceptParserRuleCall_3_1_3_0_0 = (RuleCall)cExtendsAssignment_3_1_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_3_1 = (Keyword)cGroup_3_1_3.eContents().get(1);
		private final Assignment cNameAssignment_3_1_3_2 = (Assignment)cGroup_3_1_3.eContents().get(2);
		private final Keyword cNameAdjacentKeyword_3_1_3_2_0 = (Keyword)cNameAssignment_3_1_3_2.eContents().get(0);
		private final Group cGroup_3_1_4 = (Group)cAlternatives_3_1.eContents().get(4);
		private final Assignment cExtendsAssignment_3_1_4_0 = (Assignment)cGroup_3_1_4.eContents().get(0);
		private final RuleCall cExtendsConceptParserRuleCall_3_1_4_0_0 = (RuleCall)cExtendsAssignment_3_1_4_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_4_1 = (Keyword)cGroup_3_1_4.eContents().get(1);
		private final Assignment cNameAssignment_3_1_4_2 = (Assignment)cGroup_3_1_4.eContents().get(2);
		private final Keyword cNameContainerKeyword_3_1_4_2_0 = (Keyword)cNameAssignment_3_1_4_2.eContents().get(0);
		private final Group cGroup_3_1_5 = (Group)cAlternatives_3_1.eContents().get(5);
		private final Assignment cExtendsAssignment_3_1_5_0 = (Assignment)cGroup_3_1_5.eContents().get(0);
		private final RuleCall cExtendsConceptParserRuleCall_3_1_5_0_0 = (RuleCall)cExtendsAssignment_3_1_5_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_5_1 = (Keyword)cGroup_3_1_5.eContents().get(1);
		private final Assignment cNameAssignment_3_1_5_2 = (Assignment)cGroup_3_1_5.eContents().get(2);
		private final Keyword cNameContainedKeyword_3_1_5_2_0 = (Keyword)cNameAssignment_3_1_5_2.eContents().get(0);
		private final Group cGroup_3_1_6 = (Group)cAlternatives_3_1.eContents().get(6);
		private final Assignment cExtendsAssignment_3_1_6_0 = (Assignment)cGroup_3_1_6.eContents().get(0);
		private final RuleCall cExtendsConceptParserRuleCall_3_1_6_0_0 = (RuleCall)cExtendsAssignment_3_1_6_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_6_1 = (Keyword)cGroup_3_1_6.eContents().get(1);
		private final Assignment cNameAssignment_3_1_6_2 = (Assignment)cGroup_3_1_6.eContents().get(2);
		private final Keyword cNamePurposeKeyword_3_1_6_2_0 = (Keyword)cNameAssignment_3_1_6_2.eContents().get(0);
		private final Group cGroup_3_1_7 = (Group)cAlternatives_3_1.eContents().get(7);
		private final Assignment cExtendsAssignment_3_1_7_0 = (Assignment)cGroup_3_1_7.eContents().get(0);
		private final RuleCall cExtendsConceptParserRuleCall_3_1_7_0_0 = (RuleCall)cExtendsAssignment_3_1_7_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_7_1 = (Keyword)cGroup_3_1_7.eContents().get(1);
		private final Assignment cNameAssignment_3_1_7_2 = (Assignment)cGroup_3_1_7.eContents().get(2);
		private final Keyword cNameCausantKeyword_3_1_7_2_0 = (Keyword)cNameAssignment_3_1_7_2.eContents().get(0);
		private final Group cGroup_3_1_8 = (Group)cAlternatives_3_1.eContents().get(8);
		private final Assignment cExtendsAssignment_3_1_8_0 = (Assignment)cGroup_3_1_8.eContents().get(0);
		private final RuleCall cExtendsConceptParserRuleCall_3_1_8_0_0 = (RuleCall)cExtendsAssignment_3_1_8_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_8_1 = (Keyword)cGroup_3_1_8.eContents().get(1);
		private final Assignment cNameAssignment_3_1_8_2 = (Assignment)cGroup_3_1_8.eContents().get(2);
		private final Keyword cNameCausedKeyword_3_1_8_2_0 = (Keyword)cNameAssignment_3_1_8_2.eContents().get(0);
		private final Group cGroup_3_1_9 = (Group)cAlternatives_3_1.eContents().get(9);
		private final Assignment cExtendsAssignment_3_1_9_0 = (Assignment)cGroup_3_1_9.eContents().get(0);
		private final RuleCall cExtendsConceptParserRuleCall_3_1_9_0_0 = (RuleCall)cExtendsAssignment_3_1_9_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_9_1 = (Keyword)cGroup_3_1_9.eContents().get(1);
		private final Assignment cNameAssignment_3_1_9_2 = (Assignment)cGroup_3_1_9.eContents().get(2);
		private final Keyword cNameCooccurrentKeyword_3_1_9_2_0 = (Keyword)cNameAssignment_3_1_9_2.eContents().get(0);
		private final Assignment cTemplateAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Keyword cTemplateRightCurlyBracketKeyword_3_2_0 = (Keyword)cTemplateAssignment_3_2.eContents().get(0);
		
		//ConceptReference:
		//    name=AuthorityId |
		//    name=CAMELCASE_ID |
		//    name=NamespaceId  |
		//    templateType=('${' | '#{') (
		//            // identifiers for target of semantic ops; also used to connect to UO with 'model' statements
		//            extends=Concept ':' name='context'     |
		//            extends=Concept ':' name='inherent'    |
		//            extends=Concept ':' name='compresent'  |
		//            extends=Concept ':' name='adjacent'    |
		//            extends=Concept ':' name='container'   |
		//            extends=Concept ':' name='contained'   |
		//            extends=Concept ':' name='purpose'     |
		//            extends=Concept ':' name='causant'     |
		//            extends=Concept ':' name='caused'      |
		//            extends=Concept ':' name='cooccurrent'
		//        ) template?='}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=AuthorityId |
		//name=CAMELCASE_ID |
		//name=NamespaceId  |
		//templateType=('${' | '#{') (
		//        // identifiers for target of semantic ops; also used to connect to UO with 'model' statements
		//        extends=Concept ':' name='context'     |
		//        extends=Concept ':' name='inherent'    |
		//        extends=Concept ':' name='compresent'  |
		//        extends=Concept ':' name='adjacent'    |
		//        extends=Concept ':' name='container'   |
		//        extends=Concept ':' name='contained'   |
		//        extends=Concept ':' name='purpose'     |
		//        extends=Concept ':' name='causant'     |
		//        extends=Concept ':' name='caused'      |
		//        extends=Concept ':' name='cooccurrent'
		//    ) template?='}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=AuthorityId
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//AuthorityId
		public RuleCall getNameAuthorityIdParserRuleCall_0_0() { return cNameAuthorityIdParserRuleCall_0_0; }
		
		//name=CAMELCASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CAMELCASE_ID
		public RuleCall getNameCAMELCASE_IDTerminalRuleCall_1_0() { return cNameCAMELCASE_IDTerminalRuleCall_1_0; }
		
		//name=NamespaceId
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//NamespaceId
		public RuleCall getNameNamespaceIdParserRuleCall_2_0() { return cNameNamespaceIdParserRuleCall_2_0; }
		
		//templateType=('${' | '#{') (
		//        // identifiers for target of semantic ops; also used to connect to UO with 'model' statements
		//        extends=Concept ':' name='context'     |
		//        extends=Concept ':' name='inherent'    |
		//        extends=Concept ':' name='compresent'  |
		//        extends=Concept ':' name='adjacent'    |
		//        extends=Concept ':' name='container'   |
		//        extends=Concept ':' name='contained'   |
		//        extends=Concept ':' name='purpose'     |
		//        extends=Concept ':' name='causant'     |
		//        extends=Concept ':' name='caused'      |
		//        extends=Concept ':' name='cooccurrent'
		//    ) template?='}'
		public Group getGroup_3() { return cGroup_3; }
		
		//templateType=('${' | '#{')
		public Assignment getTemplateTypeAssignment_3_0() { return cTemplateTypeAssignment_3_0; }
		
		//('${' | '#{')
		public Alternatives getTemplateTypeAlternatives_3_0_0() { return cTemplateTypeAlternatives_3_0_0; }
		
		//'${'
		public Keyword getTemplateTypeDollarSignLeftCurlyBracketKeyword_3_0_0_0() { return cTemplateTypeDollarSignLeftCurlyBracketKeyword_3_0_0_0; }
		
		//'#{'
		public Keyword getTemplateTypeNumberSignLeftCurlyBracketKeyword_3_0_0_1() { return cTemplateTypeNumberSignLeftCurlyBracketKeyword_3_0_0_1; }
		
		//(
		//           // identifiers for target of semantic ops; also used to connect to UO with 'model' statements
		//           extends=Concept ':' name='context'     |
		//           extends=Concept ':' name='inherent'    |
		//           extends=Concept ':' name='compresent'  |
		//           extends=Concept ':' name='adjacent'    |
		//           extends=Concept ':' name='container'   |
		//           extends=Concept ':' name='contained'   |
		//           extends=Concept ':' name='purpose'     |
		//           extends=Concept ':' name='causant'     |
		//           extends=Concept ':' name='caused'      |
		//           extends=Concept ':' name='cooccurrent'
		//       )
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//// identifiers for target of semantic ops; also used to connect to UO with 'model' statements
		//extends=Concept ':' name='context'
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//// identifiers for target of semantic ops; also used to connect to UO with 'model' statements
		//extends=Concept
		public Assignment getExtendsAssignment_3_1_0_0() { return cExtendsAssignment_3_1_0_0; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_3_1_0_0_0() { return cExtendsConceptParserRuleCall_3_1_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_0_1() { return cColonKeyword_3_1_0_1; }
		
		//name='context'
		public Assignment getNameAssignment_3_1_0_2() { return cNameAssignment_3_1_0_2; }
		
		//'context'
		public Keyword getNameContextKeyword_3_1_0_2_0() { return cNameContextKeyword_3_1_0_2_0; }
		
		//extends=Concept ':' name='inherent'
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_3_1_1_0() { return cExtendsAssignment_3_1_1_0; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_3_1_1_0_0() { return cExtendsConceptParserRuleCall_3_1_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_1_1() { return cColonKeyword_3_1_1_1; }
		
		//name='inherent'
		public Assignment getNameAssignment_3_1_1_2() { return cNameAssignment_3_1_1_2; }
		
		//'inherent'
		public Keyword getNameInherentKeyword_3_1_1_2_0() { return cNameInherentKeyword_3_1_1_2_0; }
		
		//extends=Concept ':' name='compresent'
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_3_1_2_0() { return cExtendsAssignment_3_1_2_0; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_3_1_2_0_0() { return cExtendsConceptParserRuleCall_3_1_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_2_1() { return cColonKeyword_3_1_2_1; }
		
		//name='compresent'
		public Assignment getNameAssignment_3_1_2_2() { return cNameAssignment_3_1_2_2; }
		
		//'compresent'
		public Keyword getNameCompresentKeyword_3_1_2_2_0() { return cNameCompresentKeyword_3_1_2_2_0; }
		
		//extends=Concept ':' name='adjacent'
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_3_1_3_0() { return cExtendsAssignment_3_1_3_0; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_3_1_3_0_0() { return cExtendsConceptParserRuleCall_3_1_3_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_3_1() { return cColonKeyword_3_1_3_1; }
		
		//name='adjacent'
		public Assignment getNameAssignment_3_1_3_2() { return cNameAssignment_3_1_3_2; }
		
		//'adjacent'
		public Keyword getNameAdjacentKeyword_3_1_3_2_0() { return cNameAdjacentKeyword_3_1_3_2_0; }
		
		//extends=Concept ':' name='container'
		public Group getGroup_3_1_4() { return cGroup_3_1_4; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_3_1_4_0() { return cExtendsAssignment_3_1_4_0; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_3_1_4_0_0() { return cExtendsConceptParserRuleCall_3_1_4_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_4_1() { return cColonKeyword_3_1_4_1; }
		
		//name='container'
		public Assignment getNameAssignment_3_1_4_2() { return cNameAssignment_3_1_4_2; }
		
		//'container'
		public Keyword getNameContainerKeyword_3_1_4_2_0() { return cNameContainerKeyword_3_1_4_2_0; }
		
		//extends=Concept ':' name='contained'
		public Group getGroup_3_1_5() { return cGroup_3_1_5; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_3_1_5_0() { return cExtendsAssignment_3_1_5_0; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_3_1_5_0_0() { return cExtendsConceptParserRuleCall_3_1_5_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_5_1() { return cColonKeyword_3_1_5_1; }
		
		//name='contained'
		public Assignment getNameAssignment_3_1_5_2() { return cNameAssignment_3_1_5_2; }
		
		//'contained'
		public Keyword getNameContainedKeyword_3_1_5_2_0() { return cNameContainedKeyword_3_1_5_2_0; }
		
		//extends=Concept ':' name='purpose'
		public Group getGroup_3_1_6() { return cGroup_3_1_6; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_3_1_6_0() { return cExtendsAssignment_3_1_6_0; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_3_1_6_0_0() { return cExtendsConceptParserRuleCall_3_1_6_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_6_1() { return cColonKeyword_3_1_6_1; }
		
		//name='purpose'
		public Assignment getNameAssignment_3_1_6_2() { return cNameAssignment_3_1_6_2; }
		
		//'purpose'
		public Keyword getNamePurposeKeyword_3_1_6_2_0() { return cNamePurposeKeyword_3_1_6_2_0; }
		
		//extends=Concept ':' name='causant'
		public Group getGroup_3_1_7() { return cGroup_3_1_7; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_3_1_7_0() { return cExtendsAssignment_3_1_7_0; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_3_1_7_0_0() { return cExtendsConceptParserRuleCall_3_1_7_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_7_1() { return cColonKeyword_3_1_7_1; }
		
		//name='causant'
		public Assignment getNameAssignment_3_1_7_2() { return cNameAssignment_3_1_7_2; }
		
		//'causant'
		public Keyword getNameCausantKeyword_3_1_7_2_0() { return cNameCausantKeyword_3_1_7_2_0; }
		
		//extends=Concept ':' name='caused'
		public Group getGroup_3_1_8() { return cGroup_3_1_8; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_3_1_8_0() { return cExtendsAssignment_3_1_8_0; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_3_1_8_0_0() { return cExtendsConceptParserRuleCall_3_1_8_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_8_1() { return cColonKeyword_3_1_8_1; }
		
		//name='caused'
		public Assignment getNameAssignment_3_1_8_2() { return cNameAssignment_3_1_8_2; }
		
		//'caused'
		public Keyword getNameCausedKeyword_3_1_8_2_0() { return cNameCausedKeyword_3_1_8_2_0; }
		
		//extends=Concept ':' name='cooccurrent'
		public Group getGroup_3_1_9() { return cGroup_3_1_9; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_3_1_9_0() { return cExtendsAssignment_3_1_9_0; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_3_1_9_0_0() { return cExtendsConceptParserRuleCall_3_1_9_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1_9_1() { return cColonKeyword_3_1_9_1; }
		
		//name='cooccurrent'
		public Assignment getNameAssignment_3_1_9_2() { return cNameAssignment_3_1_9_2; }
		
		//'cooccurrent'
		public Keyword getNameCooccurrentKeyword_3_1_9_2_0() { return cNameCooccurrentKeyword_3_1_9_2_0; }
		
		//template?='}'
		public Assignment getTemplateAssignment_3_2() { return cTemplateAssignment_3_2; }
		
		//'}'
		public Keyword getTemplateRightCurlyBracketKeyword_3_2_0() { return cTemplateRightCurlyBracketKeyword_3_2_0; }
	}
	public class OPERATOR_TARGETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.OPERATOR_TARGET");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInherentKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCompresentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAdjacentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cContainerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cContainedKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPurposeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCausantKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCausedKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCooccurrentKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//OPERATOR_TARGET:
		//    'context'|
		//    'inherent'   |
		//    'compresent' |
		//    'adjacent'   |
		//    'container'  |
		//    'contained'  |
		//    'purpose'    |
		//    'causant'    |
		//    'caused'     |
		//    'cooccurrent'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'context'|
		//'inherent'   |
		//'compresent' |
		//'adjacent'   |
		//'container'  |
		//'contained'  |
		//'purpose'    |
		//'causant'    |
		//'caused'     |
		//'cooccurrent'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//'inherent'
		public Keyword getInherentKeyword_1() { return cInherentKeyword_1; }
		
		//'compresent'
		public Keyword getCompresentKeyword_2() { return cCompresentKeyword_2; }
		
		//'adjacent'
		public Keyword getAdjacentKeyword_3() { return cAdjacentKeyword_3; }
		
		//'container'
		public Keyword getContainerKeyword_4() { return cContainerKeyword_4; }
		
		//'contained'
		public Keyword getContainedKeyword_5() { return cContainedKeyword_5; }
		
		//'purpose'
		public Keyword getPurposeKeyword_6() { return cPurposeKeyword_6; }
		
		//'causant'
		public Keyword getCausantKeyword_7() { return cCausantKeyword_7; }
		
		//'caused'
		public Keyword getCausedKeyword_8() { return cCausedKeyword_8; }
		
		//'cooccurrent'
		public Keyword getCooccurrentKeyword_9() { return cCooccurrentKeyword_9; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNegatedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cNegatedAlternatives_0_0_0 = (Alternatives)cNegatedAssignment_0_0.eContents().get(0);
		private final Keyword cNegatedNotKeyword_0_0_0_0 = (Keyword)cNegatedAlternatives_0_0_0.eContents().get(0);
		private final Keyword cNegatedNoKeyword_0_0_0_1 = (Keyword)cNegatedAlternatives_0_0_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameConceptReferenceParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cAuthConceptAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final Keyword cAuthConceptIdentifiedKeyword_0_2_0_0 = (Keyword)cAuthConceptAssignment_0_2_0.eContents().get(0);
		private final Keyword cAsKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Alternatives cAlternatives_0_2_2 = (Alternatives)cGroup_0_2.eContents().get(2);
		private final Assignment cStringIdentifierAssignment_0_2_2_0 = (Assignment)cAlternatives_0_2_2.eContents().get(0);
		private final Alternatives cStringIdentifierAlternatives_0_2_2_0_0 = (Alternatives)cStringIdentifierAssignment_0_2_2_0.eContents().get(0);
		private final RuleCall cStringIdentifierIDTerminalRuleCall_0_2_2_0_0_0 = (RuleCall)cStringIdentifierAlternatives_0_2_2_0_0.eContents().get(0);
		private final RuleCall cStringIdentifierSTRINGTerminalRuleCall_0_2_2_0_0_1 = (RuleCall)cStringIdentifierAlternatives_0_2_2_0_0.eContents().get(1);
		private final RuleCall cStringIdentifierUPPERCASE_IDTerminalRuleCall_0_2_2_0_0_2 = (RuleCall)cStringIdentifierAlternatives_0_2_2_0_0.eContents().get(2);
		private final RuleCall cStringIdentifierCAMELCASE_IDTerminalRuleCall_0_2_2_0_0_3 = (RuleCall)cStringIdentifierAlternatives_0_2_2_0_0.eContents().get(3);
		private final Assignment cIntIdentifierAssignment_0_2_2_1 = (Assignment)cAlternatives_0_2_2.eContents().get(1);
		private final RuleCall cIntIdentifierINTTerminalRuleCall_0_2_2_1_0 = (RuleCall)cIntIdentifierAssignment_0_2_2_1.eContents().get(0);
		private final Keyword cByKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Assignment cAuthorityAssignment_0_2_4 = (Assignment)cGroup_0_2.eContents().get(4);
		private final Alternatives cAuthorityAlternatives_0_2_4_0 = (Alternatives)cAuthorityAssignment_0_2_4.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_IDTerminalRuleCall_0_2_4_0_0 = (RuleCall)cAuthorityAlternatives_0_2_4_0.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_PATHTerminalRuleCall_0_2_4_0_1 = (RuleCall)cAuthorityAlternatives_0_2_4_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPresenceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cPresencePresenceKeyword_1_0_0 = (Keyword)cPresenceAssignment_1_0.eContents().get(0);
		private final Keyword cOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConceptAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_1_2_0 = (RuleCall)cConceptAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cCountAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cCountCountKeyword_2_0_0 = (Keyword)cCountAssignment_2_0.eContents().get(0);
		private final Keyword cOfKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConceptAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_2_2_0 = (RuleCall)cConceptAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cDistanceAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDistanceDistanceKeyword_3_0_0 = (Keyword)cDistanceAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cToKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cFromKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Assignment cConceptAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_3_2_0 = (RuleCall)cConceptAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cProbabilityAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cProbabilityProbabilityKeyword_4_0_0 = (Keyword)cProbabilityAssignment_4_0.eContents().get(0);
		private final Keyword cOfKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConceptAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_4_2_0 = (RuleCall)cConceptAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cChangeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cChangeAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final Keyword cChangeInKeyword_5_1_0_0 = (Keyword)cChangeAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cAlternatives_5_1.eContents().get(1);
		private final Assignment cRateAssignment_5_1_1_0 = (Assignment)cGroup_5_1_1.eContents().get(0);
		private final Keyword cRateRateKeyword_5_1_1_0_0 = (Keyword)cRateAssignment_5_1_1_0.eContents().get(0);
		private final Keyword cOfKeyword_5_1_1_1 = (Keyword)cGroup_5_1_1.eContents().get(1);
		private final Assignment cConceptAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_5_2_0 = (RuleCall)cConceptAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cChangedAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cChangedChangedKeyword_6_0_0 = (Keyword)cChangedAssignment_6_0.eContents().get(0);
		private final Assignment cConceptAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_6_1_0 = (RuleCall)cConceptAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cFromKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cChangedFromAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cChangedFromSimpleConceptDeclarationParserRuleCall_6_2_1_0 = (RuleCall)cChangedFromAssignment_6_2_1.eContents().get(0);
		private final Keyword cToKeyword_6_2_2 = (Keyword)cGroup_6_2.eContents().get(2);
		private final Assignment cChangedToAssignment_6_2_3 = (Assignment)cGroup_6_2.eContents().get(3);
		private final RuleCall cChangedToSimpleConceptDeclarationParserRuleCall_6_2_3_0 = (RuleCall)cChangedToAssignment_6_2_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cUncertaintyAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cUncertaintyUncertaintyKeyword_7_0_0 = (Keyword)cUncertaintyAssignment_7_0.eContents().get(0);
		private final Keyword cOfKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cConceptAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_7_2_0 = (RuleCall)cConceptAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cMagnitudeAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cMagnitudeMagnitudeKeyword_8_0_0 = (Keyword)cMagnitudeAssignment_8_0.eContents().get(0);
		private final Keyword cOfKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cConceptAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_8_2_0 = (RuleCall)cConceptAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cLevelAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cLevelLevelKeyword_9_0_0 = (Keyword)cLevelAssignment_9_0.eContents().get(0);
		private final Keyword cOfKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cConceptAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_9_2_0 = (RuleCall)cConceptAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cTypeAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cTypeTypeKeyword_10_0_0 = (Keyword)cTypeAssignment_10_0.eContents().get(0);
		private final Keyword cOfKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cConceptAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_10_2_0 = (RuleCall)cConceptAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cObservabilityAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cObservabilityObservabilityKeyword_11_0_0 = (Keyword)cObservabilityAssignment_11_0.eContents().get(0);
		private final Keyword cOfKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cConceptAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_11_2_0 = (RuleCall)cConceptAssignment_11_2.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cProportionAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Keyword cProportionProportionKeyword_12_0_0 = (Keyword)cProportionAssignment_12_0.eContents().get(0);
		private final Keyword cOfKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cConceptAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_12_2_0 = (RuleCall)cConceptAssignment_12_2.eContents().get(0);
		private final Group cGroup_12_3 = (Group)cGroup_12.eContents().get(3);
		private final Keyword cInKeyword_12_3_0 = (Keyword)cGroup_12_3.eContents().get(0);
		private final Assignment cOtherAssignment_12_3_1 = (Assignment)cGroup_12_3.eContents().get(1);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_12_3_1_0 = (RuleCall)cOtherAssignment_12_3_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Assignment cPercentageAssignment_13_0 = (Assignment)cGroup_13.eContents().get(0);
		private final Keyword cPercentagePercentageKeyword_13_0_0 = (Keyword)cPercentageAssignment_13_0.eContents().get(0);
		private final Keyword cOfKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cConceptAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_13_2_0 = (RuleCall)cConceptAssignment_13_2.eContents().get(0);
		private final Group cGroup_13_3 = (Group)cGroup_13.eContents().get(3);
		private final Keyword cInKeyword_13_3_0 = (Keyword)cGroup_13_3.eContents().get(0);
		private final Assignment cOtherAssignment_13_3_1 = (Assignment)cGroup_13_3.eContents().get(1);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_13_3_1_0 = (RuleCall)cOtherAssignment_13_3_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Assignment cRatioAssignment_14_0 = (Assignment)cGroup_14.eContents().get(0);
		private final Keyword cRatioRatioKeyword_14_0_0 = (Keyword)cRatioAssignment_14_0.eContents().get(0);
		private final Keyword cOfKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cConceptAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_14_2_0 = (RuleCall)cConceptAssignment_14_2.eContents().get(0);
		private final Keyword cToKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Assignment cOtherAssignment_14_4 = (Assignment)cGroup_14.eContents().get(4);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_14_4_0 = (RuleCall)cOtherAssignment_14_4.eContents().get(0);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Assignment cMonetaryAssignment_15_0 = (Assignment)cGroup_15.eContents().get(0);
		private final Keyword cMonetaryMonetaryKeyword_15_0_0 = (Keyword)cMonetaryAssignment_15_0.eContents().get(0);
		private final Assignment cValueAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final Keyword cValueValueKeyword_15_1_0 = (Keyword)cValueAssignment_15_1.eContents().get(0);
		private final Keyword cOfKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cConceptAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_15_3_0 = (RuleCall)cConceptAssignment_15_3.eContents().get(0);
		private final Group cGroup_15_4 = (Group)cGroup_15.eContents().get(4);
		private final Keyword cOverKeyword_15_4_0 = (Keyword)cGroup_15_4.eContents().get(0);
		private final Assignment cOtherAssignment_15_4_1 = (Assignment)cGroup_15_4.eContents().get(1);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_15_4_1_0 = (RuleCall)cOtherAssignment_15_4_1.eContents().get(0);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Assignment cOccurrenceAssignment_16_0 = (Assignment)cGroup_16.eContents().get(0);
		private final Keyword cOccurrenceOccurrenceKeyword_16_0_0 = (Keyword)cOccurrenceAssignment_16_0.eContents().get(0);
		private final Keyword cOfKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Assignment cConceptAssignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_16_2_0 = (RuleCall)cConceptAssignment_16_2.eContents().get(0);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Keyword cLeftParenthesisKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Assignment cDeclarationAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cDeclarationExpressionParserRuleCall_17_1_0 = (RuleCall)cDeclarationAssignment_17_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		
		//Concept:
		//    (negated?=('not'|'no'))? name=ConceptReference
		//        // if the following is there, the name becomes an alias for the authority concept
		//        // DEPRECATED - use AUTHORITY:conceptexpr
		//        (authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))? |
		//    // unary operators
		//    presence?='presence' 'of' concept=SimpleConceptDeclaration |
		//    count?='count' 'of' concept=SimpleConceptDeclaration |
		//    distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration |
		//    probability?='probability' 'of' concept=SimpleConceptDeclaration |
		////    assessment?='assessment' 'of' concept=SimpleConceptDeclaration |
		//    'change' (change?='in' | (rate?='rate' 'of')) concept=SimpleConceptDeclaration |
		//    changed?='changed' concept=SimpleConceptDeclaration
		//        (=> 'from' changedFrom=SimpleConceptDeclaration 'to' changedTo=SimpleConceptDeclaration)? |
		//    uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration |
		//    magnitude?='magnitude' 'of' concept=SimpleConceptDeclaration |
		//    level?='level' 'of' concept=SimpleConceptDeclaration |
		//    type?='type' 'of' concept=SimpleConceptDeclaration |
		//    observability?='observability' 'of' concept=SimpleConceptDeclaration |
		//    proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
		//    percentage?='percentage' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
		//    ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration |
		//    (monetary?='monetary')? value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? |
		//    occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration |
		//    '(' declaration=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//    (negated?=('not'|'no'))? name=ConceptReference
		//        // if the following is there, the name becomes an alias for the authority concept
		//        // DEPRECATED - use AUTHORITY:conceptexpr
		//        (authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))? |
		//    // unary operators
		//    presence?='presence' 'of' concept=SimpleConceptDeclaration |
		//    count?='count' 'of' concept=SimpleConceptDeclaration |
		//    distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration |
		//    probability?='probability' 'of' concept=SimpleConceptDeclaration |
		////    assessment?='assessment' 'of' concept=SimpleConceptDeclaration |
		//    'change' (change?='in' | (rate?='rate' 'of')) concept=SimpleConceptDeclaration |
		//    changed?='changed' concept=SimpleConceptDeclaration
		//        (=> 'from' changedFrom=SimpleConceptDeclaration 'to' changedTo=SimpleConceptDeclaration)? |
		//    uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration |
		//    magnitude?='magnitude' 'of' concept=SimpleConceptDeclaration |
		//    level?='level' 'of' concept=SimpleConceptDeclaration |
		//    type?='type' 'of' concept=SimpleConceptDeclaration |
		//    observability?='observability' 'of' concept=SimpleConceptDeclaration |
		//    proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
		//    percentage?='percentage' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
		//    ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration |
		//    (monetary?='monetary')? value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? |
		//    occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration |
		//    '(' declaration=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(negated?=('not'|'no'))? name=ConceptReference
		//    // if the following is there, the name becomes an alias for the authority concept
		//    // DEPRECATED - use AUTHORITY:conceptexpr
		//    (authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?
		public Group getGroup_0() { return cGroup_0; }
		
		//(negated?=('not'|'no'))?
		public Assignment getNegatedAssignment_0_0() { return cNegatedAssignment_0_0; }
		
		//('not'|'no')
		public Alternatives getNegatedAlternatives_0_0_0() { return cNegatedAlternatives_0_0_0; }
		
		//'not'
		public Keyword getNegatedNotKeyword_0_0_0_0() { return cNegatedNotKeyword_0_0_0_0; }
		
		//'no'
		public Keyword getNegatedNoKeyword_0_0_0_1() { return cNegatedNoKeyword_0_0_0_1; }
		
		//name=ConceptReference
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ConceptReference
		public RuleCall getNameConceptReferenceParserRuleCall_0_1_0() { return cNameConceptReferenceParserRuleCall_0_1_0; }
		
		//// if the following is there, the name becomes an alias for the authority concept
		//// DEPRECATED - use AUTHORITY:conceptexpr
		//(authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//authConcept?='identified'
		public Assignment getAuthConceptAssignment_0_2_0() { return cAuthConceptAssignment_0_2_0; }
		
		//'identified'
		public Keyword getAuthConceptIdentifiedKeyword_0_2_0_0() { return cAuthConceptIdentifiedKeyword_0_2_0_0; }
		
		//'as'
		public Keyword getAsKeyword_0_2_1() { return cAsKeyword_0_2_1; }
		
		//(stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT)
		public Alternatives getAlternatives_0_2_2() { return cAlternatives_0_2_2; }
		
		//stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID)
		public Assignment getStringIdentifierAssignment_0_2_2_0() { return cStringIdentifierAssignment_0_2_2_0; }
		
		//(ID|STRING|UPPERCASE_ID|CAMELCASE_ID)
		public Alternatives getStringIdentifierAlternatives_0_2_2_0_0() { return cStringIdentifierAlternatives_0_2_2_0_0; }
		
		//ID
		public RuleCall getStringIdentifierIDTerminalRuleCall_0_2_2_0_0_0() { return cStringIdentifierIDTerminalRuleCall_0_2_2_0_0_0; }
		
		//STRING
		public RuleCall getStringIdentifierSTRINGTerminalRuleCall_0_2_2_0_0_1() { return cStringIdentifierSTRINGTerminalRuleCall_0_2_2_0_0_1; }
		
		//UPPERCASE_ID
		public RuleCall getStringIdentifierUPPERCASE_IDTerminalRuleCall_0_2_2_0_0_2() { return cStringIdentifierUPPERCASE_IDTerminalRuleCall_0_2_2_0_0_2; }
		
		//CAMELCASE_ID
		public RuleCall getStringIdentifierCAMELCASE_IDTerminalRuleCall_0_2_2_0_0_3() { return cStringIdentifierCAMELCASE_IDTerminalRuleCall_0_2_2_0_0_3; }
		
		//intIdentifier=INT
		public Assignment getIntIdentifierAssignment_0_2_2_1() { return cIntIdentifierAssignment_0_2_2_1; }
		
		//INT
		public RuleCall getIntIdentifierINTTerminalRuleCall_0_2_2_1_0() { return cIntIdentifierINTTerminalRuleCall_0_2_2_1_0; }
		
		//'by'
		public Keyword getByKeyword_0_2_3() { return cByKeyword_0_2_3; }
		
		//authority=(UPPERCASE_ID|UPPERCASE_PATH)
		public Assignment getAuthorityAssignment_0_2_4() { return cAuthorityAssignment_0_2_4; }
		
		//(UPPERCASE_ID|UPPERCASE_PATH)
		public Alternatives getAuthorityAlternatives_0_2_4_0() { return cAuthorityAlternatives_0_2_4_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthorityUPPERCASE_IDTerminalRuleCall_0_2_4_0_0() { return cAuthorityUPPERCASE_IDTerminalRuleCall_0_2_4_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthorityUPPERCASE_PATHTerminalRuleCall_0_2_4_0_1() { return cAuthorityUPPERCASE_PATHTerminalRuleCall_0_2_4_0_1; }
		
		//// unary operators
		//presence?='presence' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_1() { return cGroup_1; }
		
		//// unary operators
		//presence?='presence'
		public Assignment getPresenceAssignment_1_0() { return cPresenceAssignment_1_0; }
		
		//'presence'
		public Keyword getPresencePresenceKeyword_1_0_0() { return cPresencePresenceKeyword_1_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1_1() { return cOfKeyword_1_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_1_2() { return cConceptAssignment_1_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_1_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_1_2_0; }
		
		//count?='count' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_2() { return cGroup_2; }
		
		//count?='count'
		public Assignment getCountAssignment_2_0() { return cCountAssignment_2_0; }
		
		//'count'
		public Keyword getCountCountKeyword_2_0_0() { return cCountCountKeyword_2_0_0; }
		
		//'of'
		public Keyword getOfKeyword_2_1() { return cOfKeyword_2_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_2_2() { return cConceptAssignment_2_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_2_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_2_2_0; }
		
		//distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration
		public Group getGroup_3() { return cGroup_3; }
		
		//distance?='distance'
		public Assignment getDistanceAssignment_3_0() { return cDistanceAssignment_3_0; }
		
		//'distance'
		public Keyword getDistanceDistanceKeyword_3_0_0() { return cDistanceDistanceKeyword_3_0_0; }
		
		//('to' | 'from')
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'to'
		public Keyword getToKeyword_3_1_0() { return cToKeyword_3_1_0; }
		
		//'from'
		public Keyword getFromKeyword_3_1_1() { return cFromKeyword_3_1_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_3_2() { return cConceptAssignment_3_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_3_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_3_2_0; }
		
		//probability?='probability' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_4() { return cGroup_4; }
		
		//probability?='probability'
		public Assignment getProbabilityAssignment_4_0() { return cProbabilityAssignment_4_0; }
		
		//'probability'
		public Keyword getProbabilityProbabilityKeyword_4_0_0() { return cProbabilityProbabilityKeyword_4_0_0; }
		
		//'of'
		public Keyword getOfKeyword_4_1() { return cOfKeyword_4_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_4_2() { return cConceptAssignment_4_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_4_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_4_2_0; }
		
		////    assessment?='assessment' 'of' concept=SimpleConceptDeclaration |
		//    'change' (change?='in' | (rate?='rate' 'of')) concept=SimpleConceptDeclaration
		public Group getGroup_5() { return cGroup_5; }
		
		////    assessment?='assessment' 'of' concept=SimpleConceptDeclaration |
		//    'change'
		public Keyword getChangeKeyword_5_0() { return cChangeKeyword_5_0; }
		
		//(change?='in' | (rate?='rate' 'of'))
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//change?='in'
		public Assignment getChangeAssignment_5_1_0() { return cChangeAssignment_5_1_0; }
		
		//'in'
		public Keyword getChangeInKeyword_5_1_0_0() { return cChangeInKeyword_5_1_0_0; }
		
		//(rate?='rate' 'of')
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//rate?='rate'
		public Assignment getRateAssignment_5_1_1_0() { return cRateAssignment_5_1_1_0; }
		
		//'rate'
		public Keyword getRateRateKeyword_5_1_1_0_0() { return cRateRateKeyword_5_1_1_0_0; }
		
		//'of'
		public Keyword getOfKeyword_5_1_1_1() { return cOfKeyword_5_1_1_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_5_2() { return cConceptAssignment_5_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_5_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_5_2_0; }
		
		//changed?='changed' concept=SimpleConceptDeclaration
		//    (=> 'from' changedFrom=SimpleConceptDeclaration 'to' changedTo=SimpleConceptDeclaration)?
		public Group getGroup_6() { return cGroup_6; }
		
		//changed?='changed'
		public Assignment getChangedAssignment_6_0() { return cChangedAssignment_6_0; }
		
		//'changed'
		public Keyword getChangedChangedKeyword_6_0_0() { return cChangedChangedKeyword_6_0_0; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_6_1() { return cConceptAssignment_6_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_6_1_0() { return cConceptSimpleConceptDeclarationParserRuleCall_6_1_0; }
		
		//(=> 'from' changedFrom=SimpleConceptDeclaration 'to' changedTo=SimpleConceptDeclaration)?
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//=> 'from'
		public Keyword getFromKeyword_6_2_0() { return cFromKeyword_6_2_0; }
		
		//changedFrom=SimpleConceptDeclaration
		public Assignment getChangedFromAssignment_6_2_1() { return cChangedFromAssignment_6_2_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getChangedFromSimpleConceptDeclarationParserRuleCall_6_2_1_0() { return cChangedFromSimpleConceptDeclarationParserRuleCall_6_2_1_0; }
		
		//'to'
		public Keyword getToKeyword_6_2_2() { return cToKeyword_6_2_2; }
		
		//changedTo=SimpleConceptDeclaration
		public Assignment getChangedToAssignment_6_2_3() { return cChangedToAssignment_6_2_3; }
		
		//SimpleConceptDeclaration
		public RuleCall getChangedToSimpleConceptDeclarationParserRuleCall_6_2_3_0() { return cChangedToSimpleConceptDeclarationParserRuleCall_6_2_3_0; }
		
		//uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_7() { return cGroup_7; }
		
		//uncertainty?='uncertainty'
		public Assignment getUncertaintyAssignment_7_0() { return cUncertaintyAssignment_7_0; }
		
		//'uncertainty'
		public Keyword getUncertaintyUncertaintyKeyword_7_0_0() { return cUncertaintyUncertaintyKeyword_7_0_0; }
		
		//'of'
		public Keyword getOfKeyword_7_1() { return cOfKeyword_7_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_7_2() { return cConceptAssignment_7_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_7_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_7_2_0; }
		
		//magnitude?='magnitude' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_8() { return cGroup_8; }
		
		//magnitude?='magnitude'
		public Assignment getMagnitudeAssignment_8_0() { return cMagnitudeAssignment_8_0; }
		
		//'magnitude'
		public Keyword getMagnitudeMagnitudeKeyword_8_0_0() { return cMagnitudeMagnitudeKeyword_8_0_0; }
		
		//'of'
		public Keyword getOfKeyword_8_1() { return cOfKeyword_8_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_8_2() { return cConceptAssignment_8_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_8_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_8_2_0; }
		
		//level?='level' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_9() { return cGroup_9; }
		
		//level?='level'
		public Assignment getLevelAssignment_9_0() { return cLevelAssignment_9_0; }
		
		//'level'
		public Keyword getLevelLevelKeyword_9_0_0() { return cLevelLevelKeyword_9_0_0; }
		
		//'of'
		public Keyword getOfKeyword_9_1() { return cOfKeyword_9_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_9_2() { return cConceptAssignment_9_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_9_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_9_2_0; }
		
		//type?='type' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_10() { return cGroup_10; }
		
		//type?='type'
		public Assignment getTypeAssignment_10_0() { return cTypeAssignment_10_0; }
		
		//'type'
		public Keyword getTypeTypeKeyword_10_0_0() { return cTypeTypeKeyword_10_0_0; }
		
		//'of'
		public Keyword getOfKeyword_10_1() { return cOfKeyword_10_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_10_2() { return cConceptAssignment_10_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_10_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_10_2_0; }
		
		//observability?='observability' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_11() { return cGroup_11; }
		
		//observability?='observability'
		public Assignment getObservabilityAssignment_11_0() { return cObservabilityAssignment_11_0; }
		
		//'observability'
		public Keyword getObservabilityObservabilityKeyword_11_0_0() { return cObservabilityObservabilityKeyword_11_0_0; }
		
		//'of'
		public Keyword getOfKeyword_11_1() { return cOfKeyword_11_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_11_2() { return cConceptAssignment_11_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_11_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_11_2_0; }
		
		//proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)?
		public Group getGroup_12() { return cGroup_12; }
		
		//proportion?='proportion'
		public Assignment getProportionAssignment_12_0() { return cProportionAssignment_12_0; }
		
		//'proportion'
		public Keyword getProportionProportionKeyword_12_0_0() { return cProportionProportionKeyword_12_0_0; }
		
		//'of'
		public Keyword getOfKeyword_12_1() { return cOfKeyword_12_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_12_2() { return cConceptAssignment_12_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_12_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_12_2_0; }
		
		//(=> 'in' other=SimpleConceptDeclaration)?
		public Group getGroup_12_3() { return cGroup_12_3; }
		
		//=> 'in'
		public Keyword getInKeyword_12_3_0() { return cInKeyword_12_3_0; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_12_3_1() { return cOtherAssignment_12_3_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_12_3_1_0() { return cOtherSimpleConceptDeclarationParserRuleCall_12_3_1_0; }
		
		//percentage?='percentage' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)?
		public Group getGroup_13() { return cGroup_13; }
		
		//percentage?='percentage'
		public Assignment getPercentageAssignment_13_0() { return cPercentageAssignment_13_0; }
		
		//'percentage'
		public Keyword getPercentagePercentageKeyword_13_0_0() { return cPercentagePercentageKeyword_13_0_0; }
		
		//'of'
		public Keyword getOfKeyword_13_1() { return cOfKeyword_13_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_13_2() { return cConceptAssignment_13_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_13_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_13_2_0; }
		
		//(=> 'in' other=SimpleConceptDeclaration)?
		public Group getGroup_13_3() { return cGroup_13_3; }
		
		//=> 'in'
		public Keyword getInKeyword_13_3_0() { return cInKeyword_13_3_0; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_13_3_1() { return cOtherAssignment_13_3_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_13_3_1_0() { return cOtherSimpleConceptDeclarationParserRuleCall_13_3_1_0; }
		
		//ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration
		public Group getGroup_14() { return cGroup_14; }
		
		//ratio?='ratio'
		public Assignment getRatioAssignment_14_0() { return cRatioAssignment_14_0; }
		
		//'ratio'
		public Keyword getRatioRatioKeyword_14_0_0() { return cRatioRatioKeyword_14_0_0; }
		
		//'of'
		public Keyword getOfKeyword_14_1() { return cOfKeyword_14_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_14_2() { return cConceptAssignment_14_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_14_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_14_2_0; }
		
		//=> 'to'
		public Keyword getToKeyword_14_3() { return cToKeyword_14_3; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_14_4() { return cOtherAssignment_14_4; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_14_4_0() { return cOtherSimpleConceptDeclarationParserRuleCall_14_4_0; }
		
		//(monetary?='monetary')? value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)?
		public Group getGroup_15() { return cGroup_15; }
		
		//(monetary?='monetary')?
		public Assignment getMonetaryAssignment_15_0() { return cMonetaryAssignment_15_0; }
		
		//'monetary'
		public Keyword getMonetaryMonetaryKeyword_15_0_0() { return cMonetaryMonetaryKeyword_15_0_0; }
		
		//value?='value'
		public Assignment getValueAssignment_15_1() { return cValueAssignment_15_1; }
		
		//'value'
		public Keyword getValueValueKeyword_15_1_0() { return cValueValueKeyword_15_1_0; }
		
		//'of'
		public Keyword getOfKeyword_15_2() { return cOfKeyword_15_2; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_15_3() { return cConceptAssignment_15_3; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_15_3_0() { return cConceptSimpleConceptDeclarationParserRuleCall_15_3_0; }
		
		//(=> 'over' other=SimpleConceptDeclaration)?
		public Group getGroup_15_4() { return cGroup_15_4; }
		
		//=> 'over'
		public Keyword getOverKeyword_15_4_0() { return cOverKeyword_15_4_0; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_15_4_1() { return cOtherAssignment_15_4_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_15_4_1_0() { return cOtherSimpleConceptDeclarationParserRuleCall_15_4_1_0; }
		
		//occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_16() { return cGroup_16; }
		
		//occurrence?='occurrence'
		public Assignment getOccurrenceAssignment_16_0() { return cOccurrenceAssignment_16_0; }
		
		//'occurrence'
		public Keyword getOccurrenceOccurrenceKeyword_16_0_0() { return cOccurrenceOccurrenceKeyword_16_0_0; }
		
		//'of'
		public Keyword getOfKeyword_16_1() { return cOfKeyword_16_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_16_2() { return cConceptAssignment_16_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_16_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_16_2_0; }
		
		//'(' declaration=Expression ')'
		public Group getGroup_17() { return cGroup_17; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_17_0() { return cLeftParenthesisKeyword_17_0; }
		
		//declaration=Expression
		public Assignment getDeclarationAssignment_17_1() { return cDeclarationAssignment_17_1; }
		
		//Expression
		public RuleCall getDeclarationExpressionParserRuleCall_17_1_0() { return cDeclarationExpressionParserRuleCall_17_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_17_2() { return cRightParenthesisKeyword_17_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Expression");
		private final RuleCall cTermParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns ConceptDeclaration:
		//    Term
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Term
		public RuleCall getTermParserRuleCall() { return cTermParserRuleCall; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorsOrKeyword_1_0_0 = (Keyword)cOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsFactorParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//Term returns ConceptDeclaration:
		//    Factor (operators+='or' operands+=Factor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (operators+='or' operands+=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(operators+='or' operands+=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operators+='or'
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//'or'
		public Keyword getOperatorsOrKeyword_1_0_0() { return cOperatorsOrKeyword_1_0_0; }
		
		//operands+=Factor
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//Factor
		public RuleCall getOperandsFactorParserRuleCall_1_1_0() { return cOperandsFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConceptDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0 = (Alternatives)cOperatorsAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorsAndKeyword_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorsFollowsKeyword_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(1);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsTermParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//Factor returns ConceptDeclaration:
		//    // semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
		//    ConceptDeclaration (operators+=('and'|'follows') operands+=Term)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
		//ConceptDeclaration (operators+=('and'|'follows') operands+=Term)*
		public Group getGroup() { return cGroup; }
		
		//// semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
		//ConceptDeclaration
		public RuleCall getConceptDeclarationParserRuleCall_0() { return cConceptDeclarationParserRuleCall_0; }
		
		//(operators+=('and'|'follows') operands+=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operators+=('and'|'follows')
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//('and'|'follows')
		public Alternatives getOperatorsAlternatives_1_0_0() { return cOperatorsAlternatives_1_0_0; }
		
		//'and'
		public Keyword getOperatorsAndKeyword_1_0_0_0() { return cOperatorsAndKeyword_1_0_0_0; }
		
		//'follows'
		public Keyword getOperatorsFollowsKeyword_1_0_0_1() { return cOperatorsFollowsKeyword_1_0_0_1; }
		
		//operands+=Term
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//Term
		public RuleCall getOperandsTermParserRuleCall_1_1_0() { return cOperandsTermParserRuleCall_1_1_0; }
	}
	public class SimpleConceptDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.SimpleConceptDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cMainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainConceptParserRuleCall_1_0 = (RuleCall)cMainAssignment_1.eContents().get(0);
		
		///*
		// * Declaration without inherency and context, used in Concept to ensure that
		// * the 'within' and 'of' remain outer-level unless parenthesesized.
		// */
		//SimpleConceptDeclaration returns ConceptDeclaration:
		//    (name=STRING)? main+=Concept+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=STRING)? main+=Concept+
		public Group getGroup() { return cGroup; }
		
		//(name=STRING)?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//main+=Concept+
		public Assignment getMainAssignment_1() { return cMainAssignment_1; }
		
		//Concept
		public RuleCall getMainConceptParserRuleCall_1_0() { return cMainConceptParserRuleCall_1_0; }
	}
	public class UpperOntologyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.UpperOntologyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Assignment cAgentSpecifierAssignment_1_0_0_0_0 = (Assignment)cGroup_1_0_0_0.eContents().get(0);
		private final Alternatives cAgentSpecifierAlternatives_1_0_0_0_0_0 = (Alternatives)cAgentSpecifierAssignment_1_0_0_0_0.eContents().get(0);
		private final Keyword cAgentSpecifierDeliberativeKeyword_1_0_0_0_0_0_0 = (Keyword)cAgentSpecifierAlternatives_1_0_0_0_0_0.eContents().get(0);
		private final Keyword cAgentSpecifierInteractiveKeyword_1_0_0_0_0_0_1 = (Keyword)cAgentSpecifierAlternatives_1_0_0_0_0_0.eContents().get(1);
		private final Keyword cAgentSpecifierReactiveKeyword_1_0_0_0_0_0_2 = (Keyword)cAgentSpecifierAlternatives_1_0_0_0_0_0.eContents().get(2);
		private final Assignment cConceptAssignment_1_0_0_0_1 = (Assignment)cGroup_1_0_0_0.eContents().get(1);
		private final Keyword cConceptAgentKeyword_1_0_0_0_1_0 = (Keyword)cConceptAssignment_1_0_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Assignment cPropertySpecifiersAssignment_1_0_0_1_0 = (Assignment)cGroup_1_0_0_1.eContents().get(0);
		private final RuleCall cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_0_0 = (RuleCall)cPropertySpecifiersAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cPropertySpecifiersAssignment_1_0_0_1_1 = (Assignment)cGroup_1_0_0_1.eContents().get(1);
		private final RuleCall cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_1_0 = (RuleCall)cPropertySpecifiersAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cConceptAssignment_1_0_0_1_2 = (Assignment)cGroup_1_0_0_1.eContents().get(2);
		private final Keyword cConceptRelationshipKeyword_1_0_0_1_2_0 = (Keyword)cConceptAssignment_1_0_0_1_2.eContents().get(0);
		private final Keyword cUsingKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cCoreconceptAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final Alternatives cCoreconceptAlternatives_1_0_2_0 = (Alternatives)cCoreconceptAssignment_1_0_2.eContents().get(0);
		private final RuleCall cCoreconceptNamespaceIdParserRuleCall_1_0_2_0_0 = (RuleCall)cCoreconceptAlternatives_1_0_2_0.eContents().get(0);
		private final RuleCall cCoreconceptPropertyIdParserRuleCall_1_0_2_0_1 = (RuleCall)cCoreconceptAlternatives_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperandOPERATOR_TARGETParserRuleCall_1_1_0_0 = (RuleCall)cOperandAssignment_1_1_0.eContents().get(0);
		private final Keyword cUsingKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cPropertyAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final Alternatives cPropertyAlternatives_1_1_2_0 = (Alternatives)cPropertyAssignment_1_1_2.eContents().get(0);
		private final RuleCall cPropertyPropertyIdParserRuleCall_1_1_2_0_0 = (RuleCall)cPropertyAlternatives_1_1_2_0.eContents().get(0);
		private final RuleCall cPropertyNamespaceIdParserRuleCall_1_1_2_0_1 = (RuleCall)cPropertyAlternatives_1_1_2_0.eContents().get(1);
		
		///*
		// * statement to connect specialized type or target of relationship to upper ontology
		// */
		//UpperOntologyDefinition:
		//    'model'
		//    (
		//        (
		//            ((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent') |
		//            (propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)* concept = 'relationship')?)
		//            'using' coreconcept=(NamespaceId|PropertyId)
		//        ) |
		//        (
		//            operand=OPERATOR_TARGET 'using' property=(PropertyId|NamespaceId)
		//        )
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'model'
		//(
		//    (
		//        ((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent') |
		//        (propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)* concept = 'relationship')?)
		//        'using' coreconcept=(NamespaceId|PropertyId)
		//    ) |
		//    (
		//        operand=OPERATOR_TARGET 'using' property=(PropertyId|NamespaceId)
		//    )
		//)
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//(
		//    (
		//        ((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent') |
		//        (propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)* concept = 'relationship')?)
		//        'using' coreconcept=(NamespaceId|PropertyId)
		//    ) |
		//    (
		//        operand=OPERATOR_TARGET 'using' property=(PropertyId|NamespaceId)
		//    )
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(
		//    ((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent') |
		//    (propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)* concept = 'relationship')?)
		//    'using' coreconcept=(NamespaceId|PropertyId)
		//)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent') |
		//(propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)* concept = 'relationship')?)
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//(agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent')
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//agentSpecifier=('deliberative' | 'interactive' | 'reactive')
		public Assignment getAgentSpecifierAssignment_1_0_0_0_0() { return cAgentSpecifierAssignment_1_0_0_0_0; }
		
		//('deliberative' | 'interactive' | 'reactive')
		public Alternatives getAgentSpecifierAlternatives_1_0_0_0_0_0() { return cAgentSpecifierAlternatives_1_0_0_0_0_0; }
		
		//'deliberative'
		public Keyword getAgentSpecifierDeliberativeKeyword_1_0_0_0_0_0_0() { return cAgentSpecifierDeliberativeKeyword_1_0_0_0_0_0_0; }
		
		//'interactive'
		public Keyword getAgentSpecifierInteractiveKeyword_1_0_0_0_0_0_1() { return cAgentSpecifierInteractiveKeyword_1_0_0_0_0_0_1; }
		
		//'reactive'
		public Keyword getAgentSpecifierReactiveKeyword_1_0_0_0_0_0_2() { return cAgentSpecifierReactiveKeyword_1_0_0_0_0_0_2; }
		
		//concept='agent'
		public Assignment getConceptAssignment_1_0_0_0_1() { return cConceptAssignment_1_0_0_0_1; }
		
		//'agent'
		public Keyword getConceptAgentKeyword_1_0_0_0_1_0() { return cConceptAgentKeyword_1_0_0_0_1_0; }
		
		//(propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)* concept = 'relationship')?
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//propertySpecifiers+=PROPERTY_TYPE
		public Assignment getPropertySpecifiersAssignment_1_0_0_1_0() { return cPropertySpecifiersAssignment_1_0_0_1_0; }
		
		//PROPERTY_TYPE
		public RuleCall getPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_0_0() { return cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_0_0; }
		
		//(propertySpecifiers+=PROPERTY_TYPE)*
		public Assignment getPropertySpecifiersAssignment_1_0_0_1_1() { return cPropertySpecifiersAssignment_1_0_0_1_1; }
		
		//PROPERTY_TYPE
		public RuleCall getPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_1_0() { return cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_1_0; }
		
		//concept = 'relationship'
		public Assignment getConceptAssignment_1_0_0_1_2() { return cConceptAssignment_1_0_0_1_2; }
		
		//'relationship'
		public Keyword getConceptRelationshipKeyword_1_0_0_1_2_0() { return cConceptRelationshipKeyword_1_0_0_1_2_0; }
		
		//'using'
		public Keyword getUsingKeyword_1_0_1() { return cUsingKeyword_1_0_1; }
		
		//coreconcept=(NamespaceId|PropertyId)
		public Assignment getCoreconceptAssignment_1_0_2() { return cCoreconceptAssignment_1_0_2; }
		
		//(NamespaceId|PropertyId)
		public Alternatives getCoreconceptAlternatives_1_0_2_0() { return cCoreconceptAlternatives_1_0_2_0; }
		
		//NamespaceId
		public RuleCall getCoreconceptNamespaceIdParserRuleCall_1_0_2_0_0() { return cCoreconceptNamespaceIdParserRuleCall_1_0_2_0_0; }
		
		//PropertyId
		public RuleCall getCoreconceptPropertyIdParserRuleCall_1_0_2_0_1() { return cCoreconceptPropertyIdParserRuleCall_1_0_2_0_1; }
		
		//(
		//    operand=OPERATOR_TARGET 'using' property=(PropertyId|NamespaceId)
		//)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operand=OPERATOR_TARGET
		public Assignment getOperandAssignment_1_1_0() { return cOperandAssignment_1_1_0; }
		
		//OPERATOR_TARGET
		public RuleCall getOperandOPERATOR_TARGETParserRuleCall_1_1_0_0() { return cOperandOPERATOR_TARGETParserRuleCall_1_1_0_0; }
		
		//'using'
		public Keyword getUsingKeyword_1_1_1() { return cUsingKeyword_1_1_1; }
		
		//property=(PropertyId|NamespaceId)
		public Assignment getPropertyAssignment_1_1_2() { return cPropertyAssignment_1_1_2; }
		
		//(PropertyId|NamespaceId)
		public Alternatives getPropertyAlternatives_1_1_2_0() { return cPropertyAlternatives_1_1_2_0; }
		
		//PropertyId
		public RuleCall getPropertyPropertyIdParserRuleCall_1_1_2_0_0() { return cPropertyPropertyIdParserRuleCall_1_1_2_0_0; }
		
		//NamespaceId
		public RuleCall getPropertyNamespaceIdParserRuleCall_1_1_2_0_1() { return cPropertyNamespaceIdParserRuleCall_1_1_2_0_1; }
	}
	public class ConceptStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ConceptStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cAbstractAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_1_0_0 = (Keyword)cAbstractAssignment_1_0.eContents().get(0);
		private final Assignment cDeniableAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cDeniableDeniableKeyword_1_1_0 = (Keyword)cDeniableAssignment_1_1.eContents().get(0);
		private final Assignment cSubjectiveAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cSubjectiveSubjectiveKeyword_1_2_0 = (Keyword)cSubjectiveAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cUnorderedGroup_1.eContents().get(3);
		private final Assignment cAgentSpecifierAssignment_1_3_0 = (Assignment)cAlternatives_1_3.eContents().get(0);
		private final Alternatives cAgentSpecifierAlternatives_1_3_0_0 = (Alternatives)cAgentSpecifierAssignment_1_3_0.eContents().get(0);
		private final Keyword cAgentSpecifierDeliberativeKeyword_1_3_0_0_0 = (Keyword)cAgentSpecifierAlternatives_1_3_0_0.eContents().get(0);
		private final Keyword cAgentSpecifierInteractiveKeyword_1_3_0_0_1 = (Keyword)cAgentSpecifierAlternatives_1_3_0_0.eContents().get(1);
		private final Keyword cAgentSpecifierReactiveKeyword_1_3_0_0_2 = (Keyword)cAgentSpecifierAlternatives_1_3_0_0.eContents().get(2);
		private final Group cGroup_1_3_1 = (Group)cAlternatives_1_3.eContents().get(1);
		private final Assignment cPropertySpecifiersAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_0_0 = (RuleCall)cPropertySpecifiersAssignment_1_3_1_0.eContents().get(0);
		private final Assignment cPropertySpecifiersAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_1_0 = (RuleCall)cPropertySpecifiersAssignment_1_3_1_1.eContents().get(0);
		private final Assignment cAttributeSpecifierAssignment_1_3_2 = (Assignment)cAlternatives_1_3.eContents().get(2);
		private final Keyword cAttributeSpecifierRescalingKeyword_1_3_2_0 = (Keyword)cAttributeSpecifierAssignment_1_3_2.eContents().get(0);
		private final Assignment cConceptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConceptCONCEPT_TYPEParserRuleCall_2_0 = (RuleCall)cConceptAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyConceptStatementBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNamedKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameNamespaceIdParserRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		
		//ConceptStatement:
		//    annotations += Annotation*
		//    ((abstract?='abstract')? &
		//     (deniable?='deniable')? &
		//     (subjective?='subjective')? &
		//     (agentSpecifier=('deliberative' | 'interactive' | 'reactive') |
		//        (propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)*) |
		//        attributeSpecifier='rescaling')?)
		//    concept=CONCEPT_TYPE body=ConceptStatementBody
		//    // this is tautological and not meant to be used, just putting the
		//    // name field in the model so that it can be filled for cross-referencing
		//    // TODO is there a better way?
		//    ('named' name=NamespaceId)?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations += Annotation*
		//((abstract?='abstract')? &
		// (deniable?='deniable')? &
		// (subjective?='subjective')? &
		// (agentSpecifier=('deliberative' | 'interactive' | 'reactive') |
		//    (propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)*) |
		//    attributeSpecifier='rescaling')?)
		//concept=CONCEPT_TYPE body=ConceptStatementBody
		//// this is tautological and not meant to be used, just putting the
		//// name field in the model so that it can be filled for cross-referencing
		//// TODO is there a better way?
		//('named' name=NamespaceId)?
		public Group getGroup() { return cGroup; }
		
		//annotations += Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//((abstract?='abstract')? &
		// (deniable?='deniable')? &
		// (subjective?='subjective')? &
		// (agentSpecifier=('deliberative' | 'interactive' | 'reactive') |
		//    (propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)*) |
		//    attributeSpecifier='rescaling')?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//(abstract?='abstract')?
		public Assignment getAbstractAssignment_1_0() { return cAbstractAssignment_1_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0_0() { return cAbstractAbstractKeyword_1_0_0; }
		
		//(deniable?='deniable')?
		public Assignment getDeniableAssignment_1_1() { return cDeniableAssignment_1_1; }
		
		//'deniable'
		public Keyword getDeniableDeniableKeyword_1_1_0() { return cDeniableDeniableKeyword_1_1_0; }
		
		//(subjective?='subjective')?
		public Assignment getSubjectiveAssignment_1_2() { return cSubjectiveAssignment_1_2; }
		
		//'subjective'
		public Keyword getSubjectiveSubjectiveKeyword_1_2_0() { return cSubjectiveSubjectiveKeyword_1_2_0; }
		
		//(agentSpecifier=('deliberative' | 'interactive' | 'reactive') |
		//   (propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)*) |
		//   attributeSpecifier='rescaling')?
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//agentSpecifier=('deliberative' | 'interactive' | 'reactive')
		public Assignment getAgentSpecifierAssignment_1_3_0() { return cAgentSpecifierAssignment_1_3_0; }
		
		//('deliberative' | 'interactive' | 'reactive')
		public Alternatives getAgentSpecifierAlternatives_1_3_0_0() { return cAgentSpecifierAlternatives_1_3_0_0; }
		
		//'deliberative'
		public Keyword getAgentSpecifierDeliberativeKeyword_1_3_0_0_0() { return cAgentSpecifierDeliberativeKeyword_1_3_0_0_0; }
		
		//'interactive'
		public Keyword getAgentSpecifierInteractiveKeyword_1_3_0_0_1() { return cAgentSpecifierInteractiveKeyword_1_3_0_0_1; }
		
		//'reactive'
		public Keyword getAgentSpecifierReactiveKeyword_1_3_0_0_2() { return cAgentSpecifierReactiveKeyword_1_3_0_0_2; }
		
		//(propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)*)
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//propertySpecifiers+=PROPERTY_TYPE
		public Assignment getPropertySpecifiersAssignment_1_3_1_0() { return cPropertySpecifiersAssignment_1_3_1_0; }
		
		//PROPERTY_TYPE
		public RuleCall getPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_0_0() { return cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_0_0; }
		
		//(propertySpecifiers+=PROPERTY_TYPE)*
		public Assignment getPropertySpecifiersAssignment_1_3_1_1() { return cPropertySpecifiersAssignment_1_3_1_1; }
		
		//PROPERTY_TYPE
		public RuleCall getPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_1_0() { return cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_1_0; }
		
		//attributeSpecifier='rescaling'
		public Assignment getAttributeSpecifierAssignment_1_3_2() { return cAttributeSpecifierAssignment_1_3_2; }
		
		//'rescaling'
		public Keyword getAttributeSpecifierRescalingKeyword_1_3_2_0() { return cAttributeSpecifierRescalingKeyword_1_3_2_0; }
		
		//concept=CONCEPT_TYPE
		public Assignment getConceptAssignment_2() { return cConceptAssignment_2; }
		
		//CONCEPT_TYPE
		public RuleCall getConceptCONCEPT_TYPEParserRuleCall_2_0() { return cConceptCONCEPT_TYPEParserRuleCall_2_0; }
		
		//body=ConceptStatementBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ConceptStatementBody
		public RuleCall getBodyConceptStatementBodyParserRuleCall_3_0() { return cBodyConceptStatementBodyParserRuleCall_3_0; }
		
		//// this is tautological and not meant to be used, just putting the
		//// name field in the model so that it can be filled for cross-referencing
		//// TODO is there a better way?
		//('named' name=NamespaceId)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'named'
		public Keyword getNamedKeyword_4_0() { return cNamedKeyword_4_0; }
		
		//name=NamespaceId
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//NamespaceId
		public RuleCall getNameNamespaceIdParserRuleCall_4_1_0() { return cNameNamespaceIdParserRuleCall_4_1_0; }
	}
	public class ConceptStatementBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ConceptStatementBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRootAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cRootRootKeyword_2_0_0 = (Keyword)cRootAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNameCAMELCASE_IDTerminalRuleCall_2_1_0_0 = (RuleCall)cNameAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cIdentifiedKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Keyword cAsKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Alternatives cAlternatives_2_1_1_2 = (Alternatives)cGroup_2_1_1.eContents().get(2);
		private final Assignment cStringIdentifierAssignment_2_1_1_2_0 = (Assignment)cAlternatives_2_1_1_2.eContents().get(0);
		private final Alternatives cStringIdentifierAlternatives_2_1_1_2_0_0 = (Alternatives)cStringIdentifierAssignment_2_1_1_2_0.eContents().get(0);
		private final RuleCall cStringIdentifierIDTerminalRuleCall_2_1_1_2_0_0_0 = (RuleCall)cStringIdentifierAlternatives_2_1_1_2_0_0.eContents().get(0);
		private final RuleCall cStringIdentifierSTRINGTerminalRuleCall_2_1_1_2_0_0_1 = (RuleCall)cStringIdentifierAlternatives_2_1_1_2_0_0.eContents().get(1);
		private final Assignment cIntIdentifierAssignment_2_1_1_2_1 = (Assignment)cAlternatives_2_1_1_2.eContents().get(1);
		private final RuleCall cIntIdentifierINTTerminalRuleCall_2_1_1_2_1_0 = (RuleCall)cIntIdentifierAssignment_2_1_1_2_1.eContents().get(0);
		private final Keyword cByKeyword_2_1_1_3 = (Keyword)cGroup_2_1_1.eContents().get(3);
		private final Assignment cAuthorityAssignment_2_1_1_4 = (Assignment)cGroup_2_1_1.eContents().get(4);
		private final Alternatives cAuthorityAlternatives_2_1_1_4_0 = (Alternatives)cAuthorityAssignment_2_1_1_4.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_IDTerminalRuleCall_2_1_1_4_0_0 = (RuleCall)cAuthorityAlternatives_2_1_1_4_0.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_PATHTerminalRuleCall_2_1_1_4_0_1 = (RuleCall)cAuthorityAlternatives_2_1_1_4_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cDocstringAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cDocstringSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cDocstringAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_0_0 = (Alternatives)cGroup_3_1_0.eContents().get(0);
		private final Keyword cIsKeyword_3_1_0_0_0 = (Keyword)cAlternatives_3_1_0_0.eContents().get(0);
		private final Assignment cAliasAssignment_3_1_0_0_1 = (Assignment)cAlternatives_3_1_0_0.eContents().get(1);
		private final Keyword cAliasEqualsKeyword_3_1_0_0_1_0 = (Keyword)cAliasAssignment_3_1_0_0_1.eContents().get(0);
		private final Assignment cCoreConceptAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final Keyword cCoreConceptCoreKeyword_3_1_0_1_0 = (Keyword)cCoreConceptAssignment_3_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cNothingAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final Keyword cNothingNothingKeyword_3_1_1_0_0 = (Keyword)cNothingAssignment_3_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1 = (Group)cAlternatives_3_1_1.eContents().get(1);
		private final Assignment cParentsAssignment_3_1_1_1_0 = (Assignment)cGroup_3_1_1_1.eContents().get(0);
		private final RuleCall cParentsConceptDeclarationParserRuleCall_3_1_1_1_0_0 = (RuleCall)cParentsAssignment_3_1_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1_1 = (Group)cGroup_3_1_1_1.eContents().get(1);
		private final Assignment cConnectorsAssignment_3_1_1_1_1_0 = (Assignment)cGroup_3_1_1_1_1.eContents().get(0);
		private final Alternatives cConnectorsAlternatives_3_1_1_1_1_0_0 = (Alternatives)cConnectorsAssignment_3_1_1_1_1_0.eContents().get(0);
		private final Keyword cConnectorsCommaKeyword_3_1_1_1_1_0_0_0 = (Keyword)cConnectorsAlternatives_3_1_1_1_1_0_0.eContents().get(0);
		private final Keyword cConnectorsOrKeyword_3_1_1_1_1_0_0_1 = (Keyword)cConnectorsAlternatives_3_1_1_1_1_0_0.eContents().get(1);
		private final Keyword cConnectorsAndKeyword_3_1_1_1_1_0_0_2 = (Keyword)cConnectorsAlternatives_3_1_1_1_1_0_0.eContents().get(2);
		private final Assignment cParentsAssignment_3_1_1_1_1_1 = (Assignment)cGroup_3_1_1_1_1.eContents().get(1);
		private final RuleCall cParentsConceptDeclarationParserRuleCall_3_1_1_1_1_1_0 = (RuleCall)cParentsAssignment_3_1_1_1_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cDefinesKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final Group cGroup_3_2_1_0 = (Group)cAlternatives_3_2_1.eContents().get(0);
		private final Keyword cAuthorityKeyword_3_2_1_0_0 = (Keyword)cGroup_3_2_1_0.eContents().get(0);
		private final Assignment cDefinedAuthorityAssignment_3_2_1_0_1 = (Assignment)cGroup_3_2_1_0.eContents().get(1);
		private final Alternatives cDefinedAuthorityAlternatives_3_2_1_0_1_0 = (Alternatives)cDefinedAuthorityAssignment_3_2_1_0_1.eContents().get(0);
		private final RuleCall cDefinedAuthorityUPPERCASE_IDTerminalRuleCall_3_2_1_0_1_0_0 = (RuleCall)cDefinedAuthorityAlternatives_3_2_1_0_1_0.eContents().get(0);
		private final RuleCall cDefinedAuthorityUPPERCASE_PATHTerminalRuleCall_3_2_1_0_1_0_1 = (RuleCall)cDefinedAuthorityAlternatives_3_2_1_0_1_0.eContents().get(1);
		private final Assignment cUpperConceptAssignment_3_2_1_1 = (Assignment)cAlternatives_3_2_1.eContents().get(1);
		private final RuleCall cUpperConceptConceptParserRuleCall_3_2_1_1_0 = (RuleCall)cUpperConceptAssignment_3_2_1_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cRequiresKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cRequirementsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cRequirementsIdentityRequirementParserRuleCall_3_3_1_0 = (RuleCall)cRequirementsAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_3_2 = (Group)cGroup_3_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_3_2_0 = (Keyword)cGroup_3_3_2.eContents().get(0);
		private final Assignment cRequirementsAssignment_3_3_2_1 = (Assignment)cGroup_3_3_2.eContents().get(1);
		private final RuleCall cRequirementsIdentityRequirementParserRuleCall_3_3_2_1_0 = (RuleCall)cRequirementsAssignment_3_3_2_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cDescribesKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cDescribedQualityAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cDescribedQualityConceptDeclarationParserRuleCall_3_4_1_0 = (RuleCall)cDescribedQualityAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_4_2 = (Group)cGroup_3_4.eContents().get(2);
		private final Keyword cAsKeyword_3_4_2_0 = (Keyword)cGroup_3_4_2.eContents().get(0);
		private final Assignment cDescriptionConstraintsAssignment_3_4_2_1 = (Assignment)cGroup_3_4_2.eContents().get(1);
		private final RuleCall cDescriptionConstraintsDescriptionConstraintsParserRuleCall_3_4_2_1_0 = (RuleCall)cDescriptionConstraintsAssignment_3_4_2_1.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cIncreasesKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Keyword cWithKeyword_3_5_1 = (Keyword)cGroup_3_5.eContents().get(1);
		private final Assignment cDescribedProportionalityAssignment_3_5_2 = (Assignment)cGroup_3_5.eContents().get(2);
		private final RuleCall cDescribedProportionalityConceptDeclarationParserRuleCall_3_5_2_0 = (RuleCall)cDescribedProportionalityAssignment_3_5_2.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Keyword cDecreasesKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Keyword cWithKeyword_3_6_1 = (Keyword)cGroup_3_6.eContents().get(1);
		private final Assignment cDescribedInverseProportionalityQualityAssignment_3_6_2 = (Assignment)cGroup_3_6.eContents().get(2);
		private final RuleCall cDescribedInverseProportionalityQualityConceptDeclarationParserRuleCall_3_6_2_0 = (RuleCall)cDescribedInverseProportionalityQualityAssignment_3_6_2.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final Keyword cMarksKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cDescribedNonzeroQualityAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final RuleCall cDescribedNonzeroQualityConceptDeclarationParserRuleCall_3_7_1_0 = (RuleCall)cDescribedNonzeroQualityAssignment_3_7_1.eContents().get(0);
		private final Group cGroup_3_8 = (Group)cUnorderedGroup_3.eContents().get(8);
		private final Keyword cClassifiesKeyword_3_8_0 = (Keyword)cGroup_3_8.eContents().get(0);
		private final Assignment cClassifiesQualityAssignment_3_8_1 = (Assignment)cGroup_3_8.eContents().get(1);
		private final RuleCall cClassifiesQualityConceptDeclarationParserRuleCall_3_8_1_0 = (RuleCall)cClassifiesQualityAssignment_3_8_1.eContents().get(0);
		private final Group cGroup_3_9 = (Group)cUnorderedGroup_3.eContents().get(9);
		private final Keyword cDiscretizesKeyword_3_9_0 = (Keyword)cGroup_3_9.eContents().get(0);
		private final Assignment cDiscretizesQualityAssignment_3_9_1 = (Assignment)cGroup_3_9.eContents().get(1);
		private final RuleCall cDiscretizesQualityConceptDeclarationParserRuleCall_3_9_1_0 = (RuleCall)cDiscretizesQualityAssignment_3_9_1.eContents().get(0);
		private final Group cGroup_3_10 = (Group)cUnorderedGroup_3.eContents().get(10);
		private final Keyword cInheritsKeyword_3_10_0 = (Keyword)cGroup_3_10.eContents().get(0);
		private final Assignment cActuallyInheritedTraitsAssignment_3_10_1 = (Assignment)cGroup_3_10.eContents().get(1);
		private final RuleCall cActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_10_1_0 = (RuleCall)cActuallyInheritedTraitsAssignment_3_10_1.eContents().get(0);
		private final Group cGroup_3_10_2 = (Group)cGroup_3_10.eContents().get(2);
		private final Keyword cCommaKeyword_3_10_2_0 = (Keyword)cGroup_3_10_2.eContents().get(0);
		private final Assignment cActuallyInheritedTraitsAssignment_3_10_2_1 = (Assignment)cGroup_3_10_2.eContents().get(1);
		private final RuleCall cActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_10_2_1_0 = (RuleCall)cActuallyInheritedTraitsAssignment_3_10_2_1.eContents().get(0);
		private final Group cGroup_3_11 = (Group)cUnorderedGroup_3.eContents().get(11);
		private final Keyword cHasKeyword_3_11_0 = (Keyword)cGroup_3_11.eContents().get(0);
		private final Keyword cRoleKeyword_3_11_1 = (Keyword)cGroup_3_11.eContents().get(1);
		private final Assignment cRolesAssignment_3_11_2 = (Assignment)cGroup_3_11.eContents().get(2);
		private final RuleCall cRolesConceptDeclarationParserRuleCall_3_11_2_0 = (RuleCall)cRolesAssignment_3_11_2.eContents().get(0);
		private final Group cGroup_3_11_3 = (Group)cGroup_3_11.eContents().get(3);
		private final Keyword cCommaKeyword_3_11_3_0 = (Keyword)cGroup_3_11_3.eContents().get(0);
		private final Assignment cRolesAssignment_3_11_3_1 = (Assignment)cGroup_3_11_3.eContents().get(1);
		private final RuleCall cRolesConceptDeclarationParserRuleCall_3_11_3_1_0 = (RuleCall)cRolesAssignment_3_11_3_1.eContents().get(0);
		private final Group cGroup_3_11_4 = (Group)cGroup_3_11.eContents().get(4);
		private final Keyword cTargetingKeyword_3_11_4_0 = (Keyword)cGroup_3_11_4.eContents().get(0);
		private final Assignment cTargetObservablesAssignment_3_11_4_1 = (Assignment)cGroup_3_11_4.eContents().get(1);
		private final RuleCall cTargetObservablesConceptDeclarationParserRuleCall_3_11_4_1_0 = (RuleCall)cTargetObservablesAssignment_3_11_4_1.eContents().get(0);
		private final Group cGroup_3_11_4_2 = (Group)cGroup_3_11_4.eContents().get(2);
		private final Keyword cCommaKeyword_3_11_4_2_0 = (Keyword)cGroup_3_11_4_2.eContents().get(0);
		private final Assignment cTargetObservablesAssignment_3_11_4_2_1 = (Assignment)cGroup_3_11_4_2.eContents().get(1);
		private final RuleCall cTargetObservablesConceptDeclarationParserRuleCall_3_11_4_2_1_0 = (RuleCall)cTargetObservablesAssignment_3_11_4_2_1.eContents().get(0);
		private final Group cGroup_3_11_5 = (Group)cGroup_3_11.eContents().get(5);
		private final Keyword cInKeyword_3_11_5_0 = (Keyword)cGroup_3_11_5.eContents().get(0);
		private final Assignment cRestrictedObservablesAssignment_3_11_5_1 = (Assignment)cGroup_3_11_5.eContents().get(1);
		private final RuleCall cRestrictedObservablesConceptDeclarationParserRuleCall_3_11_5_1_0 = (RuleCall)cRestrictedObservablesAssignment_3_11_5_1.eContents().get(0);
		private final Group cGroup_3_11_5_2 = (Group)cGroup_3_11_5.eContents().get(2);
		private final Keyword cCommaKeyword_3_11_5_2_0 = (Keyword)cGroup_3_11_5_2.eContents().get(0);
		private final Assignment cRestrictedObservablesAssignment_3_11_5_2_1 = (Assignment)cGroup_3_11_5_2.eContents().get(1);
		private final RuleCall cRestrictedObservablesConceptDeclarationParserRuleCall_3_11_5_2_1_0 = (RuleCall)cRestrictedObservablesAssignment_3_11_5_2_1.eContents().get(0);
		private final Group cGroup_3_12 = (Group)cUnorderedGroup_3.eContents().get(12);
		private final Keyword cConfersKeyword_3_12_0 = (Keyword)cGroup_3_12.eContents().get(0);
		private final Assignment cConferredTraitsAssignment_3_12_1 = (Assignment)cGroup_3_12.eContents().get(1);
		private final RuleCall cConferredTraitsConceptDeclarationParserRuleCall_3_12_1_0 = (RuleCall)cConferredTraitsAssignment_3_12_1.eContents().get(0);
		private final Group cGroup_3_12_2 = (Group)cGroup_3_12.eContents().get(2);
		private final Keyword cCommaKeyword_3_12_2_0 = (Keyword)cGroup_3_12_2.eContents().get(0);
		private final Assignment cConferredTraitsAssignment_3_12_2_1 = (Assignment)cGroup_3_12_2.eContents().get(1);
		private final RuleCall cConferredTraitsConceptDeclarationParserRuleCall_3_12_2_1_0 = (RuleCall)cConferredTraitsAssignment_3_12_2_1.eContents().get(0);
		private final Group cGroup_3_12_3 = (Group)cGroup_3_12.eContents().get(3);
		private final Keyword cToKeyword_3_12_3_0 = (Keyword)cGroup_3_12_3.eContents().get(0);
		private final Assignment cConferredTargetsAssignment_3_12_3_1 = (Assignment)cGroup_3_12_3.eContents().get(1);
		private final RuleCall cConferredTargetsConceptDeclarationParserRuleCall_3_12_3_1_0 = (RuleCall)cConferredTargetsAssignment_3_12_3_1.eContents().get(0);
		private final Group cGroup_3_12_3_2 = (Group)cGroup_3_12_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_12_3_2_0 = (Keyword)cGroup_3_12_3_2.eContents().get(0);
		private final Assignment cConferredTargetsAssignment_3_12_3_2_1 = (Assignment)cGroup_3_12_3_2.eContents().get(1);
		private final RuleCall cConferredTargetsConceptDeclarationParserRuleCall_3_12_3_2_1_0 = (RuleCall)cConferredTargetsAssignment_3_12_3_2_1.eContents().get(0);
		private final Group cGroup_3_13 = (Group)cUnorderedGroup_3.eContents().get(13);
		private final Keyword cEmergesKeyword_3_13_0 = (Keyword)cGroup_3_13.eContents().get(0);
		private final Keyword cFromKeyword_3_13_1 = (Keyword)cGroup_3_13.eContents().get(1);
		private final Assignment cEmergenceTriggersAssignment_3_13_2 = (Assignment)cGroup_3_13.eContents().get(2);
		private final RuleCall cEmergenceTriggersConceptDeclarationParserRuleCall_3_13_2_0 = (RuleCall)cEmergenceTriggersAssignment_3_13_2.eContents().get(0);
		private final Group cGroup_3_13_3 = (Group)cGroup_3_13.eContents().get(3);
		private final Keyword cCommaKeyword_3_13_3_0 = (Keyword)cGroup_3_13_3.eContents().get(0);
		private final Assignment cEmergenceTriggersAssignment_3_13_3_1 = (Assignment)cGroup_3_13_3.eContents().get(1);
		private final RuleCall cEmergenceTriggersConceptDeclarationParserRuleCall_3_13_3_1_0 = (RuleCall)cEmergenceTriggersAssignment_3_13_3_1.eContents().get(0);
		private final Group cGroup_3_14 = (Group)cUnorderedGroup_3.eContents().get(14);
		private final Keyword cCreatesKeyword_3_14_0 = (Keyword)cGroup_3_14.eContents().get(0);
		private final Assignment cCreatesAssignment_3_14_1 = (Assignment)cGroup_3_14.eContents().get(1);
		private final RuleCall cCreatesConceptDeclarationParserRuleCall_3_14_1_0 = (RuleCall)cCreatesAssignment_3_14_1.eContents().get(0);
		private final Group cGroup_3_14_2 = (Group)cGroup_3_14.eContents().get(2);
		private final Keyword cCommaKeyword_3_14_2_0 = (Keyword)cGroup_3_14_2.eContents().get(0);
		private final Assignment cCreatesAssignment_3_14_2_1 = (Assignment)cGroup_3_14_2.eContents().get(1);
		private final RuleCall cCreatesConceptDeclarationParserRuleCall_3_14_2_1_0 = (RuleCall)cCreatesAssignment_3_14_2_1.eContents().get(0);
		private final Group cGroup_3_15 = (Group)cUnorderedGroup_3.eContents().get(15);
		private final Keyword cAppliesKeyword_3_15_0 = (Keyword)cGroup_3_15.eContents().get(0);
		private final Keyword cToKeyword_3_15_1 = (Keyword)cGroup_3_15.eContents().get(1);
		private final Assignment cTraitTargetsAssignment_3_15_2 = (Assignment)cGroup_3_15.eContents().get(2);
		private final RuleCall cTraitTargetsApplicableTargetParserRuleCall_3_15_2_0 = (RuleCall)cTraitTargetsAssignment_3_15_2.eContents().get(0);
		private final Group cGroup_3_15_3 = (Group)cGroup_3_15.eContents().get(3);
		private final Keyword cCommaKeyword_3_15_3_0 = (Keyword)cGroup_3_15_3.eContents().get(0);
		private final Assignment cTraitTargetsAssignment_3_15_3_1 = (Assignment)cGroup_3_15_3.eContents().get(1);
		private final RuleCall cTraitTargetsApplicableTargetParserRuleCall_3_15_3_1_0 = (RuleCall)cTraitTargetsAssignment_3_15_3_1.eContents().get(0);
		private final Group cGroup_3_16 = (Group)cUnorderedGroup_3.eContents().get(16);
		private final Keyword cLinksKeyword_3_16_0 = (Keyword)cGroup_3_16.eContents().get(0);
		private final Assignment cDomainsAssignment_3_16_1 = (Assignment)cGroup_3_16.eContents().get(1);
		private final RuleCall cDomainsSimpleConceptDeclarationParserRuleCall_3_16_1_0 = (RuleCall)cDomainsAssignment_3_16_1.eContents().get(0);
		private final Keyword cToKeyword_3_16_2 = (Keyword)cGroup_3_16.eContents().get(2);
		private final Assignment cRangesAssignment_3_16_3 = (Assignment)cGroup_3_16.eContents().get(3);
		private final RuleCall cRangesSimpleConceptDeclarationParserRuleCall_3_16_3_0 = (RuleCall)cRangesAssignment_3_16_3.eContents().get(0);
		private final Group cGroup_3_16_4 = (Group)cGroup_3_16.eContents().get(4);
		private final Keyword cCommaKeyword_3_16_4_0 = (Keyword)cGroup_3_16_4.eContents().get(0);
		private final Assignment cDomainsAssignment_3_16_4_1 = (Assignment)cGroup_3_16_4.eContents().get(1);
		private final RuleCall cDomainsSimpleConceptDeclarationParserRuleCall_3_16_4_1_0 = (RuleCall)cDomainsAssignment_3_16_4_1.eContents().get(0);
		private final Keyword cToKeyword_3_16_4_2 = (Keyword)cGroup_3_16_4.eContents().get(2);
		private final Assignment cRangesAssignment_3_16_4_3 = (Assignment)cGroup_3_16_4.eContents().get(3);
		private final RuleCall cRangesSimpleConceptDeclarationParserRuleCall_3_16_4_3_0 = (RuleCall)cRangesAssignment_3_16_4_3.eContents().get(0);
		private final Group cGroup_3_17 = (Group)cUnorderedGroup_3.eContents().get(17);
		private final Keyword cAffectsKeyword_3_17_0 = (Keyword)cGroup_3_17.eContents().get(0);
		private final Assignment cQualitiesAffectedAssignment_3_17_1 = (Assignment)cGroup_3_17.eContents().get(1);
		private final RuleCall cQualitiesAffectedConceptDeclarationParserRuleCall_3_17_1_0 = (RuleCall)cQualitiesAffectedAssignment_3_17_1.eContents().get(0);
		private final Group cGroup_3_17_2 = (Group)cGroup_3_17.eContents().get(2);
		private final Keyword cCommaKeyword_3_17_2_0 = (Keyword)cGroup_3_17_2.eContents().get(0);
		private final Assignment cQualitiesAffectedAssignment_3_17_2_1 = (Assignment)cGroup_3_17_2.eContents().get(1);
		private final RuleCall cQualitiesAffectedConceptDeclarationParserRuleCall_3_17_2_1_0 = (RuleCall)cQualitiesAffectedAssignment_3_17_2_1.eContents().get(0);
		private final Group cGroup_3_18 = (Group)cUnorderedGroup_3.eContents().get(18);
		private final Keyword cHasKeyword_3_18_0 = (Keyword)cGroup_3_18.eContents().get(0);
		private final Assignment cDisjointAssignment_3_18_1 = (Assignment)cGroup_3_18.eContents().get(1);
		private final Keyword cDisjointDisjointKeyword_3_18_1_0 = (Keyword)cDisjointAssignment_3_18_1.eContents().get(0);
		private final Keyword cChildrenKeyword_3_18_2 = (Keyword)cGroup_3_18.eContents().get(2);
		private final Assignment cChildrenAssignment_3_18_3 = (Assignment)cGroup_3_18.eContents().get(3);
		private final RuleCall cChildrenChildConceptParserRuleCall_3_18_3_0 = (RuleCall)cChildrenAssignment_3_18_3.eContents().get(0);
		private final Group cGroup_3_18_4 = (Group)cGroup_3_18.eContents().get(4);
		private final Keyword cCommaKeyword_3_18_4_0 = (Keyword)cGroup_3_18_4.eContents().get(0);
		private final Assignment cChildrenAssignment_3_18_4_1 = (Assignment)cGroup_3_18_4.eContents().get(1);
		private final RuleCall cChildrenChildConceptParserRuleCall_3_18_4_1_0 = (RuleCall)cChildrenAssignment_3_18_4_1.eContents().get(0);
		private final Group cGroup_3_19 = (Group)cUnorderedGroup_3.eContents().get(19);
		private final Keyword cImpliesKeyword_3_19_0 = (Keyword)cGroup_3_19.eContents().get(0);
		private final Assignment cImplicationsAssignment_3_19_1 = (Assignment)cGroup_3_19.eContents().get(1);
		private final RuleCall cImplicationsImplicationParserRuleCall_3_19_1_0 = (RuleCall)cImplicationsAssignment_3_19_1.eContents().get(0);
		private final Group cGroup_3_19_2 = (Group)cGroup_3_19.eContents().get(2);
		private final Keyword cCommaKeyword_3_19_2_0 = (Keyword)cGroup_3_19_2.eContents().get(0);
		private final Assignment cImplicationsAssignment_3_19_2_1 = (Assignment)cGroup_3_19_2.eContents().get(1);
		private final RuleCall cImplicationsImplicationParserRuleCall_3_19_2_1_0 = (RuleCall)cImplicationsAssignment_3_19_2_1.eContents().get(0);
		private final Group cGroup_3_20 = (Group)cUnorderedGroup_3.eContents().get(20);
		private final Keyword cUsesKeyword_3_20_0 = (Keyword)cGroup_3_20.eContents().get(0);
		private final Keyword cAuthorityKeyword_3_20_1 = (Keyword)cGroup_3_20.eContents().get(1);
		private final Assignment cAuthoritiesAssignment_3_20_2 = (Assignment)cGroup_3_20.eContents().get(2);
		private final Alternatives cAuthoritiesAlternatives_3_20_2_0 = (Alternatives)cAuthoritiesAssignment_3_20_2.eContents().get(0);
		private final RuleCall cAuthoritiesUPPERCASE_IDTerminalRuleCall_3_20_2_0_0 = (RuleCall)cAuthoritiesAlternatives_3_20_2_0.eContents().get(0);
		private final RuleCall cAuthoritiesUPPERCASE_PATHTerminalRuleCall_3_20_2_0_1 = (RuleCall)cAuthoritiesAlternatives_3_20_2_0.eContents().get(1);
		private final Group cGroup_3_21 = (Group)cUnorderedGroup_3.eContents().get(21);
		private final Keyword cMetadataKeyword_3_21_0 = (Keyword)cGroup_3_21.eContents().get(0);
		private final Assignment cMetadataAssignment_3_21_1 = (Assignment)cGroup_3_21.eContents().get(1);
		private final RuleCall cMetadataMapParserRuleCall_3_21_1_0 = (RuleCall)cMetadataAssignment_3_21_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_22 = (Assignment)cUnorderedGroup_3.eContents().get(22);
		private final RuleCall cPropertiesPropertyStatementParserRuleCall_3_22_0 = (RuleCall)cPropertiesAssignment_3_22.eContents().get(0);
		
		///*
		// * ------------------------------------------------------------------------------------------
		// * Ontology language - basically a more intuitive and imperative OW2L/Manchester syntax. Does not
		// * cover all of OWL2 yet, but should be plenty for modeling.
		// *
		// * deniable is for traits only. If a trait is deniable, 'not Trait' is a trait (of not being Trait).
		// * if not deniable, 'not Trait' means being any of the other concrete traits; if there is only one
		// * concrete trait it's an error. If there are two, it means being the other.
		// *
		// * Many of the verbs like "confers" or "creates" can also qualify actions in k.Actors, so that
		// * attributes and objects can be assigned/created/destroyed (and resolved) as the result of
		// * behavior actions.
		// *
		// * ------------------------------------------------------------------------------------------
		// */
		//ConceptStatementBody:
		//    // FIXME shouldn't have to repeat these two. Mostly to keep the underlying ECore neat at the children.
		//    annotations += Annotation*
		//    (abstract?='abstract')?
		//    (root?='root' | name=CAMELCASE_ID ('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?)
		//    (
		//        (docstring=STRING)? &
		//    /*
		//               * child of. Allows "nothing" as the only root-level parent for very special purposes.
		//               * Using 'extends' allows to reuse the subclasses of the extended concept and prevents
		//               * adding children of its own (a 'foster parent' of sorts). It should only be permitted for
		//               * subjective orderings.
		//               */
		//        ((('is' | alias?='equals') (coreConcept?='core')?) (nothing?='nothing' | parents+=ConceptDeclaration (connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))? &
		////    /*
		////     * traits contextualized. Only applicable to
		////     * classes. Abstract class must declare exposed traits; concrete class must
		////     * provide matching values using 'exposing'
		////     */
		////        (
		////            ('exposes' contextualizedTraits+=ObservableSemantics (','  contextualizedTraits+=ObservableSemantics)*) |
		////            (specific?='exposing' contextualizesTraits+=ConceptDeclaration (','  contextualizesTraits+=ConceptDeclaration)*)
		////        )? &
		//    /*
		//     * identifies main concepts for authority
		//     *
		//     * First-class concepts in the root domain can also rebase the
		//     * foundational concepts in the observation ontology.
		//     */
		//        ('defines' (('authority' definedAuthority=(UPPERCASE_ID|UPPERCASE_PATH)) | upperConcept=Concept))? &
		//    /*
		//               * requires identity, context or realm.
		//               */
		//        ('requires' requirements+=IdentityRequirement (',' requirements+=IdentityRequirement)*)? &
		//        /*
		//         * Various forms of link between an attribute (or quality) and a quality. Describes is the least
		//         * specific: others, such as direct and inverse proportionality, flagging and classifications
		//         * provide more detail and allow more inferences and validation in models.
		//         */
		//        // just establish a link
		//        ('describes' describedQuality=ConceptDeclaration  ('as' descriptionConstraints=DescriptionConstraints)? )? &
		//        // for quantity, direct and inverse proportionalities, use with orderings or qualities
		//        ('increases' 'with' describedProportionality=ConceptDeclaration)? &
		//        ('decreases' 'with' describedInverseProportionalityQuality=ConceptDeclaration)? &
		//        // must be deniable and relate to a quantity
		//        ('marks' describedNonzeroQuality=ConceptDeclaration)? &
		//        // any quality
		//        ('classifies' classifiesQuality=ConceptDeclaration)? &
		//        // only for quantities
		//        ('discretizes' discretizesQuality=ConceptDeclaration)? &
		//    /*
		//               * Traits that ARE inherited by this concept. Long version of <trait> <concept> for
		//               * reading clarity if no 'within' part is given.
		//               *
		//               * If the 'within' part is given, the concept is not given any traits but the specified
		//               * traits are inherited by the observables of any observation of this concept made within
		//               * those contexts. This will add a restriction to the restrictedObservable rather than
		//               * modify this concept.
		//               *
		//               * Not allowed for class (types) which should use 'contextualizes'.
		//               */
		//        ('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)? &
		//    /*
		//               * Roles within a context. The concept is not given any traits but the specified
		//               * traits are inherited by the observables of any observation of this concept made within
		//               * those contexts. This will add a restriction to the restrictedObservable rather than
		//               * modify this concept, and Thinklab will use the restrictions to attribute traits
		//               * after resolution.
		//               *
		//               * 'in' specifies a context (often a process if role is dynamic but can be a subject or event)
		//               * 'for' (optional) specifies a target subject/event type within the context; the context itself
		//               *       is used if not specified.
		//               */
		//        ('has' 'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)*
		//            /* FIXME 'for' here causes unexplained issues when 'for' in concept declarations is used, although there should be
		//             * complete independence between the declarations. */
		//            ('targeting' targetObservables+=ConceptDeclaration (',' targetObservables+=ConceptDeclaration)*)?
		//            ('in' restrictedObservables+=ConceptDeclaration (',' restrictedObservables+=ConceptDeclaration)*))? &
		//    /*
		//               * for processes: confer given trait(s) [or role(s)] to (participant subjects).
		//               */
		//        ('confers' conferredTraits+=ConceptDeclaration (',' conferredTraits+=ConceptDeclaration)*
		//            ('to' conferredTargets+=ConceptDeclaration (',' conferredTargets+=ConceptDeclaration)*)?
		//        )? &
		//        /*
		//         * explicit declaration of triggers for emergent observables (subjects, processes and configuration)
		//         */
		//        ('emerges' 'from' emergenceTriggers+=ConceptDeclaration (',' emergenceTriggers+=ConceptDeclaration)*)? &
		//    /**
		//     * Shorthand for common 'part of' restriction. TODO deprecate? Part-of should be left to the worldview.
		//     */
		////    (('part' | constituent?='constituent' | constitutes?='consists') partOf?='of' whole=ConceptDeclaration)? &
		//    /*
		//     * for processes: creates quality. Also for structural relationships (creates subject) and functional relationships\
		//     * (creates process). Paired with "affects" for process -> quality.
		//     */
		//    ('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)? &
		//    /*
		//     * traits can specify the set of allowed targets here. Also allows qualities and
		//     * processes to specify their inherent target.
		//     *
		//     * If applying concept is a role and it applies to a relationship, this can also restrict the source and destination.
		//     */
		//    ('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)? &
		//    /*
		//     * only for relationships: set domain and range of the associated property.
		//     */
		//    ('links' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration
		//            (',' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration)*)? &
		//    /*
		//     * only for relationships - set the inverse of the associated property (through the
		//     * relationship concept).
		//     */
		////    ('inverse' 'of' inverse=ConceptDeclaration)? &
		//    /*
		//     * for processes; lists qualities affected;
		//     * for deliberative agents: lists the subject types whose states this can
		//     * modify.
		//     */
		//    ('affects' qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)? &
		//    ('has' (disjoint?='disjoint')? 'children' children+=ChildConcept (',' children+=ChildConcept)*)? &
		//    ('implies' implications+=Implication (',' implications+=Implication)*)? &
		//    ('uses' 'authority' authorities+=(UPPERCASE_ID|UPPERCASE_PATH))? &
		//    ('metadata' metadata=Map)? &
		//    // properties are only object properties and are declared on appearance. This makes typos
		//    // problematic, of course, but the alternative is a load of ugly syntax.
		//    (properties+=PropertyStatement*)
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    // FIXME shouldn't have to repeat these two. Mostly to keep the underlying ECore neat at the children.
		//    annotations += Annotation*
		//    (abstract?='abstract')?
		//    (root?='root' | name=CAMELCASE_ID ('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?)
		//    (
		//        (docstring=STRING)? &
		//    /*
		//               * child of. Allows "nothing" as the only root-level parent for very special purposes.
		//               * Using 'extends' allows to reuse the subclasses of the extended concept and prevents
		//               * adding children of its own (a 'foster parent' of sorts). It should only be permitted for
		//               * subjective orderings.
		//               */
		//        ((('is' | alias?='equals') (coreConcept?='core')?) (nothing?='nothing' | parents+=ConceptDeclaration (connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))? &
		////    /*
		////     * traits contextualized. Only applicable to
		////     * classes. Abstract class must declare exposed traits; concrete class must
		////     * provide matching values using 'exposing'
		////     */
		////        (
		////            ('exposes' contextualizedTraits+=ObservableSemantics (','  contextualizedTraits+=ObservableSemantics)*) |
		////            (specific?='exposing' contextualizesTraits+=ConceptDeclaration (','  contextualizesTraits+=ConceptDeclaration)*)
		////        )? &
		//    /*
		//     * identifies main concepts for authority
		//     *
		//     * First-class concepts in the root domain can also rebase the
		//     * foundational concepts in the observation ontology.
		//     */
		//        ('defines' (('authority' definedAuthority=(UPPERCASE_ID|UPPERCASE_PATH)) | upperConcept=Concept))? &
		//    /*
		//               * requires identity, context or realm.
		//               */
		//        ('requires' requirements+=IdentityRequirement (',' requirements+=IdentityRequirement)*)? &
		//        /*
		//         * Various forms of link between an attribute (or quality) and a quality. Describes is the least
		//         * specific: others, such as direct and inverse proportionality, flagging and classifications
		//         * provide more detail and allow more inferences and validation in models.
		//         */
		//        // just establish a link
		//        ('describes' describedQuality=ConceptDeclaration  ('as' descriptionConstraints=DescriptionConstraints)? )? &
		//        // for quantity, direct and inverse proportionalities, use with orderings or qualities
		//        ('increases' 'with' describedProportionality=ConceptDeclaration)? &
		//        ('decreases' 'with' describedInverseProportionalityQuality=ConceptDeclaration)? &
		//        // must be deniable and relate to a quantity
		//        ('marks' describedNonzeroQuality=ConceptDeclaration)? &
		//        // any quality
		//        ('classifies' classifiesQuality=ConceptDeclaration)? &
		//        // only for quantities
		//        ('discretizes' discretizesQuality=ConceptDeclaration)? &
		//    /*
		//               * Traits that ARE inherited by this concept. Long version of <trait> <concept> for
		//               * reading clarity if no 'within' part is given.
		//               *
		//               * If the 'within' part is given, the concept is not given any traits but the specified
		//               * traits are inherited by the observables of any observation of this concept made within
		//               * those contexts. This will add a restriction to the restrictedObservable rather than
		//               * modify this concept.
		//               *
		//               * Not allowed for class (types) which should use 'contextualizes'.
		//               */
		//        ('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)? &
		//    /*
		//               * Roles within a context. The concept is not given any traits but the specified
		//               * traits are inherited by the observables of any observation of this concept made within
		//               * those contexts. This will add a restriction to the restrictedObservable rather than
		//               * modify this concept, and Thinklab will use the restrictions to attribute traits
		//               * after resolution.
		//               *
		//               * 'in' specifies a context (often a process if role is dynamic but can be a subject or event)
		//               * 'for' (optional) specifies a target subject/event type within the context; the context itself
		//               *       is used if not specified.
		//               */
		//        ('has' 'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)*
		//            /* FIXME 'for' here causes unexplained issues when 'for' in concept declarations is used, although there should be
		//             * complete independence between the declarations. */
		//            ('targeting' targetObservables+=ConceptDeclaration (',' targetObservables+=ConceptDeclaration)*)?
		//            ('in' restrictedObservables+=ConceptDeclaration (',' restrictedObservables+=ConceptDeclaration)*))? &
		//    /*
		//               * for processes: confer given trait(s) [or role(s)] to (participant subjects).
		//               */
		//        ('confers' conferredTraits+=ConceptDeclaration (',' conferredTraits+=ConceptDeclaration)*
		//            ('to' conferredTargets+=ConceptDeclaration (',' conferredTargets+=ConceptDeclaration)*)?
		//        )? &
		//        /*
		//         * explicit declaration of triggers for emergent observables (subjects, processes and configuration)
		//         */
		//        ('emerges' 'from' emergenceTriggers+=ConceptDeclaration (',' emergenceTriggers+=ConceptDeclaration)*)? &
		//    /**
		//     * Shorthand for common 'part of' restriction. TODO deprecate? Part-of should be left to the worldview.
		//     */
		////    (('part' | constituent?='constituent' | constitutes?='consists') partOf?='of' whole=ConceptDeclaration)? &
		//    /*
		//     * for processes: creates quality. Also for structural relationships (creates subject) and functional relationships\
		//     * (creates process). Paired with "affects" for process -> quality.
		//     */
		//    ('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)? &
		//    /*
		//     * traits can specify the set of allowed targets here. Also allows qualities and
		//     * processes to specify their inherent target.
		//     *
		//     * If applying concept is a role and it applies to a relationship, this can also restrict the source and destination.
		//     */
		//    ('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)? &
		//    /*
		//     * only for relationships: set domain and range of the associated property.
		//     */
		//    ('links' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration
		//            (',' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration)*)? &
		//    /*
		//     * only for relationships - set the inverse of the associated property (through the
		//     * relationship concept).
		//     */
		////    ('inverse' 'of' inverse=ConceptDeclaration)? &
		//    /*
		//     * for processes; lists qualities affected;
		//     * for deliberative agents: lists the subject types whose states this can
		//     * modify.
		//     */
		//    ('affects' qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)? &
		//    ('has' (disjoint?='disjoint')? 'children' children+=ChildConcept (',' children+=ChildConcept)*)? &
		//    ('implies' implications+=Implication (',' implications+=Implication)*)? &
		//    ('uses' 'authority' authorities+=(UPPERCASE_ID|UPPERCASE_PATH))? &
		//    ('metadata' metadata=Map)? &
		//    // properties are only object properties and are declared on appearance. This makes typos
		//    // problematic, of course, but the alternative is a load of ugly syntax.
		//    (properties+=PropertyStatement*)
		//    )
		public Group getGroup() { return cGroup; }
		
		//// FIXME shouldn't have to repeat these two. Mostly to keep the underlying ECore neat at the children.
		//annotations += Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//(abstract?='abstract')?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//(root?='root' | name=CAMELCASE_ID ('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//root?='root'
		public Assignment getRootAssignment_2_0() { return cRootAssignment_2_0; }
		
		//'root'
		public Keyword getRootRootKeyword_2_0_0() { return cRootRootKeyword_2_0_0; }
		
		//name=CAMELCASE_ID ('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//name=CAMELCASE_ID
		public Assignment getNameAssignment_2_1_0() { return cNameAssignment_2_1_0; }
		
		//CAMELCASE_ID
		public RuleCall getNameCAMELCASE_IDTerminalRuleCall_2_1_0_0() { return cNameCAMELCASE_IDTerminalRuleCall_2_1_0_0; }
		
		//('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//'identified'
		public Keyword getIdentifiedKeyword_2_1_1_0() { return cIdentifiedKeyword_2_1_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2_1_1_1() { return cAsKeyword_2_1_1_1; }
		
		//(stringIdentifier=(ID | STRING) | intIdentifier=INT)
		public Alternatives getAlternatives_2_1_1_2() { return cAlternatives_2_1_1_2; }
		
		//stringIdentifier=(ID | STRING)
		public Assignment getStringIdentifierAssignment_2_1_1_2_0() { return cStringIdentifierAssignment_2_1_1_2_0; }
		
		//(ID | STRING)
		public Alternatives getStringIdentifierAlternatives_2_1_1_2_0_0() { return cStringIdentifierAlternatives_2_1_1_2_0_0; }
		
		//ID
		public RuleCall getStringIdentifierIDTerminalRuleCall_2_1_1_2_0_0_0() { return cStringIdentifierIDTerminalRuleCall_2_1_1_2_0_0_0; }
		
		//STRING
		public RuleCall getStringIdentifierSTRINGTerminalRuleCall_2_1_1_2_0_0_1() { return cStringIdentifierSTRINGTerminalRuleCall_2_1_1_2_0_0_1; }
		
		//intIdentifier=INT
		public Assignment getIntIdentifierAssignment_2_1_1_2_1() { return cIntIdentifierAssignment_2_1_1_2_1; }
		
		//INT
		public RuleCall getIntIdentifierINTTerminalRuleCall_2_1_1_2_1_0() { return cIntIdentifierINTTerminalRuleCall_2_1_1_2_1_0; }
		
		//'by'
		public Keyword getByKeyword_2_1_1_3() { return cByKeyword_2_1_1_3; }
		
		//authority=(UPPERCASE_ID|UPPERCASE_PATH)
		public Assignment getAuthorityAssignment_2_1_1_4() { return cAuthorityAssignment_2_1_1_4; }
		
		//(UPPERCASE_ID|UPPERCASE_PATH)
		public Alternatives getAuthorityAlternatives_2_1_1_4_0() { return cAuthorityAlternatives_2_1_1_4_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthorityUPPERCASE_IDTerminalRuleCall_2_1_1_4_0_0() { return cAuthorityUPPERCASE_IDTerminalRuleCall_2_1_1_4_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthorityUPPERCASE_PATHTerminalRuleCall_2_1_1_4_0_1() { return cAuthorityUPPERCASE_PATHTerminalRuleCall_2_1_1_4_0_1; }
		
		//    (
		//        (docstring=STRING)? &
		//    /*
		//               * child of. Allows "nothing" as the only root-level parent for very special purposes.
		//               * Using 'extends' allows to reuse the subclasses of the extended concept and prevents
		//               * adding children of its own (a 'foster parent' of sorts). It should only be permitted for
		//               * subjective orderings.
		//               */
		//        ((('is' | alias?='equals') (coreConcept?='core')?) (nothing?='nothing' | parents+=ConceptDeclaration (connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))? &
		////    /*
		////     * traits contextualized. Only applicable to
		////     * classes. Abstract class must declare exposed traits; concrete class must
		////     * provide matching values using 'exposing'
		////     */
		////        (
		////            ('exposes' contextualizedTraits+=ObservableSemantics (','  contextualizedTraits+=ObservableSemantics)*) |
		////            (specific?='exposing' contextualizesTraits+=ConceptDeclaration (','  contextualizesTraits+=ConceptDeclaration)*)
		////        )? &
		//    /*
		//     * identifies main concepts for authority
		//     *
		//     * First-class concepts in the root domain can also rebase the
		//     * foundational concepts in the observation ontology.
		//     */
		//        ('defines' (('authority' definedAuthority=(UPPERCASE_ID|UPPERCASE_PATH)) | upperConcept=Concept))? &
		//    /*
		//               * requires identity, context or realm.
		//               */
		//        ('requires' requirements+=IdentityRequirement (',' requirements+=IdentityRequirement)*)? &
		//        /*
		//         * Various forms of link between an attribute (or quality) and a quality. Describes is the least
		//         * specific: others, such as direct and inverse proportionality, flagging and classifications
		//         * provide more detail and allow more inferences and validation in models.
		//         */
		//        // just establish a link
		//        ('describes' describedQuality=ConceptDeclaration  ('as' descriptionConstraints=DescriptionConstraints)? )? &
		//        // for quantity, direct and inverse proportionalities, use with orderings or qualities
		//        ('increases' 'with' describedProportionality=ConceptDeclaration)? &
		//        ('decreases' 'with' describedInverseProportionalityQuality=ConceptDeclaration)? &
		//        // must be deniable and relate to a quantity
		//        ('marks' describedNonzeroQuality=ConceptDeclaration)? &
		//        // any quality
		//        ('classifies' classifiesQuality=ConceptDeclaration)? &
		//        // only for quantities
		//        ('discretizes' discretizesQuality=ConceptDeclaration)? &
		//    /*
		//               * Traits that ARE inherited by this concept. Long version of <trait> <concept> for
		//               * reading clarity if no 'within' part is given.
		//               *
		//               * If the 'within' part is given, the concept is not given any traits but the specified
		//               * traits are inherited by the observables of any observation of this concept made within
		//               * those contexts. This will add a restriction to the restrictedObservable rather than
		//               * modify this concept.
		//               *
		//               * Not allowed for class (types) which should use 'contextualizes'.
		//               */
		//        ('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)? &
		//    /*
		//               * Roles within a context. The concept is not given any traits but the specified
		//               * traits are inherited by the observables of any observation of this concept made within
		//               * those contexts. This will add a restriction to the restrictedObservable rather than
		//               * modify this concept, and Thinklab will use the restrictions to attribute traits
		//               * after resolution.
		//               *
		//               * 'in' specifies a context (often a process if role is dynamic but can be a subject or event)
		//               * 'for' (optional) specifies a target subject/event type within the context; the context itself
		//               *       is used if not specified.
		//               */
		//        ('has' 'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)*
		//            /* FIXME 'for' here causes unexplained issues when 'for' in concept declarations is used, although there should be
		//             * complete independence between the declarations. */
		//            ('targeting' targetObservables+=ConceptDeclaration (',' targetObservables+=ConceptDeclaration)*)?
		//            ('in' restrictedObservables+=ConceptDeclaration (',' restrictedObservables+=ConceptDeclaration)*))? &
		//    /*
		//               * for processes: confer given trait(s) [or role(s)] to (participant subjects).
		//               */
		//        ('confers' conferredTraits+=ConceptDeclaration (',' conferredTraits+=ConceptDeclaration)*
		//            ('to' conferredTargets+=ConceptDeclaration (',' conferredTargets+=ConceptDeclaration)*)?
		//        )? &
		//        /*
		//         * explicit declaration of triggers for emergent observables (subjects, processes and configuration)
		//         */
		//        ('emerges' 'from' emergenceTriggers+=ConceptDeclaration (',' emergenceTriggers+=ConceptDeclaration)*)? &
		//    /**
		//     * Shorthand for common 'part of' restriction. TODO deprecate? Part-of should be left to the worldview.
		//     */
		////    (('part' | constituent?='constituent' | constitutes?='consists') partOf?='of' whole=ConceptDeclaration)? &
		//    /*
		//     * for processes: creates quality. Also for structural relationships (creates subject) and functional relationships\
		//     * (creates process). Paired with "affects" for process -> quality.
		//     */
		//    ('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)? &
		//    /*
		//     * traits can specify the set of allowed targets here. Also allows qualities and
		//     * processes to specify their inherent target.
		//     *
		//     * If applying concept is a role and it applies to a relationship, this can also restrict the source and destination.
		//     */
		//    ('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)? &
		//    /*
		//     * only for relationships: set domain and range of the associated property.
		//     */
		//    ('links' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration
		//            (',' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration)*)? &
		//    /*
		//     * only for relationships - set the inverse of the associated property (through the
		//     * relationship concept).
		//     */
		////    ('inverse' 'of' inverse=ConceptDeclaration)? &
		//    /*
		//     * for processes; lists qualities affected;
		//     * for deliberative agents: lists the subject types whose states this can
		//     * modify.
		//     */
		//    ('affects' qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)? &
		//    ('has' (disjoint?='disjoint')? 'children' children+=ChildConcept (',' children+=ChildConcept)*)? &
		//    ('implies' implications+=Implication (',' implications+=Implication)*)? &
		//    ('uses' 'authority' authorities+=(UPPERCASE_ID|UPPERCASE_PATH))? &
		//    ('metadata' metadata=Map)? &
		//    // properties are only object properties and are declared on appearance. This makes typos
		//    // problematic, of course, but the alternative is a load of ugly syntax.
		//    (properties+=PropertyStatement*)
		//    )
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//(docstring=STRING)?
		public Assignment getDocstringAssignment_3_0() { return cDocstringAssignment_3_0; }
		
		//STRING
		public RuleCall getDocstringSTRINGTerminalRuleCall_3_0_0() { return cDocstringSTRINGTerminalRuleCall_3_0_0; }
		
		///*
		//           * child of. Allows "nothing" as the only root-level parent for very special purposes.
		//           * Using 'extends' allows to reuse the subclasses of the extended concept and prevents
		//           * adding children of its own (a 'foster parent' of sorts). It should only be permitted for
		//           * subjective orderings.
		//           */
		//    ((('is' | alias?='equals') (coreConcept?='core')?) (nothing?='nothing' | parents+=ConceptDeclaration (connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//(('is' | alias?='equals') (coreConcept?='core')?)
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//('is' | alias?='equals')
		public Alternatives getAlternatives_3_1_0_0() { return cAlternatives_3_1_0_0; }
		
		//'is'
		public Keyword getIsKeyword_3_1_0_0_0() { return cIsKeyword_3_1_0_0_0; }
		
		//alias?='equals'
		public Assignment getAliasAssignment_3_1_0_0_1() { return cAliasAssignment_3_1_0_0_1; }
		
		//'equals'
		public Keyword getAliasEqualsKeyword_3_1_0_0_1_0() { return cAliasEqualsKeyword_3_1_0_0_1_0; }
		
		//(coreConcept?='core')?
		public Assignment getCoreConceptAssignment_3_1_0_1() { return cCoreConceptAssignment_3_1_0_1; }
		
		//'core'
		public Keyword getCoreConceptCoreKeyword_3_1_0_1_0() { return cCoreConceptCoreKeyword_3_1_0_1_0; }
		
		//(nothing?='nothing' | parents+=ConceptDeclaration (connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*)
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }
		
		//nothing?='nothing'
		public Assignment getNothingAssignment_3_1_1_0() { return cNothingAssignment_3_1_1_0; }
		
		//'nothing'
		public Keyword getNothingNothingKeyword_3_1_1_0_0() { return cNothingNothingKeyword_3_1_1_0_0; }
		
		//parents+=ConceptDeclaration (connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*
		public Group getGroup_3_1_1_1() { return cGroup_3_1_1_1; }
		
		//parents+=ConceptDeclaration
		public Assignment getParentsAssignment_3_1_1_1_0() { return cParentsAssignment_3_1_1_1_0; }
		
		//ConceptDeclaration
		public RuleCall getParentsConceptDeclarationParserRuleCall_3_1_1_1_0_0() { return cParentsConceptDeclarationParserRuleCall_3_1_1_1_0_0; }
		
		//(connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*
		public Group getGroup_3_1_1_1_1() { return cGroup_3_1_1_1_1; }
		
		//connectors+=(',' | 'or' | 'and')
		public Assignment getConnectorsAssignment_3_1_1_1_1_0() { return cConnectorsAssignment_3_1_1_1_1_0; }
		
		//(',' | 'or' | 'and')
		public Alternatives getConnectorsAlternatives_3_1_1_1_1_0_0() { return cConnectorsAlternatives_3_1_1_1_1_0_0; }
		
		//','
		public Keyword getConnectorsCommaKeyword_3_1_1_1_1_0_0_0() { return cConnectorsCommaKeyword_3_1_1_1_1_0_0_0; }
		
		//'or'
		public Keyword getConnectorsOrKeyword_3_1_1_1_1_0_0_1() { return cConnectorsOrKeyword_3_1_1_1_1_0_0_1; }
		
		//'and'
		public Keyword getConnectorsAndKeyword_3_1_1_1_1_0_0_2() { return cConnectorsAndKeyword_3_1_1_1_1_0_0_2; }
		
		//parents+=ConceptDeclaration
		public Assignment getParentsAssignment_3_1_1_1_1_1() { return cParentsAssignment_3_1_1_1_1_1; }
		
		//ConceptDeclaration
		public RuleCall getParentsConceptDeclarationParserRuleCall_3_1_1_1_1_1_0() { return cParentsConceptDeclarationParserRuleCall_3_1_1_1_1_1_0; }
		
		////    /*
		////     * traits contextualized. Only applicable to
		////     * classes. Abstract class must declare exposed traits; concrete class must
		////     * provide matching values using 'exposing'
		////     */
		////        (
		////            ('exposes' contextualizedTraits+=ObservableSemantics (','  contextualizedTraits+=ObservableSemantics)*) |
		////            (specific?='exposing' contextualizesTraits+=ConceptDeclaration (','  contextualizesTraits+=ConceptDeclaration)*)
		////        )? &
		//    /*
		//     * identifies main concepts for authority
		//     *
		//     * First-class concepts in the root domain can also rebase the
		//     * foundational concepts in the observation ontology.
		//     */
		//        ('defines' (('authority' definedAuthority=(UPPERCASE_ID|UPPERCASE_PATH)) | upperConcept=Concept))?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'defines'
		public Keyword getDefinesKeyword_3_2_0() { return cDefinesKeyword_3_2_0; }
		
		//(('authority' definedAuthority=(UPPERCASE_ID|UPPERCASE_PATH)) | upperConcept=Concept)
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }
		
		//('authority' definedAuthority=(UPPERCASE_ID|UPPERCASE_PATH))
		public Group getGroup_3_2_1_0() { return cGroup_3_2_1_0; }
		
		//'authority'
		public Keyword getAuthorityKeyword_3_2_1_0_0() { return cAuthorityKeyword_3_2_1_0_0; }
		
		//definedAuthority=(UPPERCASE_ID|UPPERCASE_PATH)
		public Assignment getDefinedAuthorityAssignment_3_2_1_0_1() { return cDefinedAuthorityAssignment_3_2_1_0_1; }
		
		//(UPPERCASE_ID|UPPERCASE_PATH)
		public Alternatives getDefinedAuthorityAlternatives_3_2_1_0_1_0() { return cDefinedAuthorityAlternatives_3_2_1_0_1_0; }
		
		//UPPERCASE_ID
		public RuleCall getDefinedAuthorityUPPERCASE_IDTerminalRuleCall_3_2_1_0_1_0_0() { return cDefinedAuthorityUPPERCASE_IDTerminalRuleCall_3_2_1_0_1_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getDefinedAuthorityUPPERCASE_PATHTerminalRuleCall_3_2_1_0_1_0_1() { return cDefinedAuthorityUPPERCASE_PATHTerminalRuleCall_3_2_1_0_1_0_1; }
		
		//upperConcept=Concept
		public Assignment getUpperConceptAssignment_3_2_1_1() { return cUpperConceptAssignment_3_2_1_1; }
		
		//Concept
		public RuleCall getUpperConceptConceptParserRuleCall_3_2_1_1_0() { return cUpperConceptConceptParserRuleCall_3_2_1_1_0; }
		
		///*
		//           * requires identity, context or realm.
		//           */
		//    ('requires' requirements+=IdentityRequirement (',' requirements+=IdentityRequirement)*)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'requires'
		public Keyword getRequiresKeyword_3_3_0() { return cRequiresKeyword_3_3_0; }
		
		//requirements+=IdentityRequirement
		public Assignment getRequirementsAssignment_3_3_1() { return cRequirementsAssignment_3_3_1; }
		
		//IdentityRequirement
		public RuleCall getRequirementsIdentityRequirementParserRuleCall_3_3_1_0() { return cRequirementsIdentityRequirementParserRuleCall_3_3_1_0; }
		
		//(',' requirements+=IdentityRequirement)*
		public Group getGroup_3_3_2() { return cGroup_3_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_3_2_0() { return cCommaKeyword_3_3_2_0; }
		
		//requirements+=IdentityRequirement
		public Assignment getRequirementsAssignment_3_3_2_1() { return cRequirementsAssignment_3_3_2_1; }
		
		//IdentityRequirement
		public RuleCall getRequirementsIdentityRequirementParserRuleCall_3_3_2_1_0() { return cRequirementsIdentityRequirementParserRuleCall_3_3_2_1_0; }
		
		///*
		// * Various forms of link between an attribute (or quality) and a quality. Describes is the least
		// * specific: others, such as direct and inverse proportionality, flagging and classifications
		// * provide more detail and allow more inferences and validation in models.
		// */
		//// just establish a link
		//('describes' describedQuality=ConceptDeclaration  ('as' descriptionConstraints=DescriptionConstraints)? )?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'describes'
		public Keyword getDescribesKeyword_3_4_0() { return cDescribesKeyword_3_4_0; }
		
		//describedQuality=ConceptDeclaration
		public Assignment getDescribedQualityAssignment_3_4_1() { return cDescribedQualityAssignment_3_4_1; }
		
		//ConceptDeclaration
		public RuleCall getDescribedQualityConceptDeclarationParserRuleCall_3_4_1_0() { return cDescribedQualityConceptDeclarationParserRuleCall_3_4_1_0; }
		
		//('as' descriptionConstraints=DescriptionConstraints)?
		public Group getGroup_3_4_2() { return cGroup_3_4_2; }
		
		//'as'
		public Keyword getAsKeyword_3_4_2_0() { return cAsKeyword_3_4_2_0; }
		
		//descriptionConstraints=DescriptionConstraints
		public Assignment getDescriptionConstraintsAssignment_3_4_2_1() { return cDescriptionConstraintsAssignment_3_4_2_1; }
		
		//DescriptionConstraints
		public RuleCall getDescriptionConstraintsDescriptionConstraintsParserRuleCall_3_4_2_1_0() { return cDescriptionConstraintsDescriptionConstraintsParserRuleCall_3_4_2_1_0; }
		
		//// for quantity, direct and inverse proportionalities, use with orderings or qualities
		//('increases' 'with' describedProportionality=ConceptDeclaration)?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'increases'
		public Keyword getIncreasesKeyword_3_5_0() { return cIncreasesKeyword_3_5_0; }
		
		//'with'
		public Keyword getWithKeyword_3_5_1() { return cWithKeyword_3_5_1; }
		
		//describedProportionality=ConceptDeclaration
		public Assignment getDescribedProportionalityAssignment_3_5_2() { return cDescribedProportionalityAssignment_3_5_2; }
		
		//ConceptDeclaration
		public RuleCall getDescribedProportionalityConceptDeclarationParserRuleCall_3_5_2_0() { return cDescribedProportionalityConceptDeclarationParserRuleCall_3_5_2_0; }
		
		//('decreases' 'with' describedInverseProportionalityQuality=ConceptDeclaration)?
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//'decreases'
		public Keyword getDecreasesKeyword_3_6_0() { return cDecreasesKeyword_3_6_0; }
		
		//'with'
		public Keyword getWithKeyword_3_6_1() { return cWithKeyword_3_6_1; }
		
		//describedInverseProportionalityQuality=ConceptDeclaration
		public Assignment getDescribedInverseProportionalityQualityAssignment_3_6_2() { return cDescribedInverseProportionalityQualityAssignment_3_6_2; }
		
		//ConceptDeclaration
		public RuleCall getDescribedInverseProportionalityQualityConceptDeclarationParserRuleCall_3_6_2_0() { return cDescribedInverseProportionalityQualityConceptDeclarationParserRuleCall_3_6_2_0; }
		
		//// must be deniable and relate to a quantity
		//('marks' describedNonzeroQuality=ConceptDeclaration)?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'marks'
		public Keyword getMarksKeyword_3_7_0() { return cMarksKeyword_3_7_0; }
		
		//describedNonzeroQuality=ConceptDeclaration
		public Assignment getDescribedNonzeroQualityAssignment_3_7_1() { return cDescribedNonzeroQualityAssignment_3_7_1; }
		
		//ConceptDeclaration
		public RuleCall getDescribedNonzeroQualityConceptDeclarationParserRuleCall_3_7_1_0() { return cDescribedNonzeroQualityConceptDeclarationParserRuleCall_3_7_1_0; }
		
		//// any quality
		//('classifies' classifiesQuality=ConceptDeclaration)?
		public Group getGroup_3_8() { return cGroup_3_8; }
		
		//'classifies'
		public Keyword getClassifiesKeyword_3_8_0() { return cClassifiesKeyword_3_8_0; }
		
		//classifiesQuality=ConceptDeclaration
		public Assignment getClassifiesQualityAssignment_3_8_1() { return cClassifiesQualityAssignment_3_8_1; }
		
		//ConceptDeclaration
		public RuleCall getClassifiesQualityConceptDeclarationParserRuleCall_3_8_1_0() { return cClassifiesQualityConceptDeclarationParserRuleCall_3_8_1_0; }
		
		//// only for quantities
		//('discretizes' discretizesQuality=ConceptDeclaration)?
		public Group getGroup_3_9() { return cGroup_3_9; }
		
		//'discretizes'
		public Keyword getDiscretizesKeyword_3_9_0() { return cDiscretizesKeyword_3_9_0; }
		
		//discretizesQuality=ConceptDeclaration
		public Assignment getDiscretizesQualityAssignment_3_9_1() { return cDiscretizesQualityAssignment_3_9_1; }
		
		//ConceptDeclaration
		public RuleCall getDiscretizesQualityConceptDeclarationParserRuleCall_3_9_1_0() { return cDiscretizesQualityConceptDeclarationParserRuleCall_3_9_1_0; }
		
		///*
		//           * Traits that ARE inherited by this concept. Long version of <trait> <concept> for
		//           * reading clarity if no 'within' part is given.
		//           *
		//           * If the 'within' part is given, the concept is not given any traits but the specified
		//           * traits are inherited by the observables of any observation of this concept made within
		//           * those contexts. This will add a restriction to the restrictedObservable rather than
		//           * modify this concept.
		//           *
		//           * Not allowed for class (types) which should use 'contextualizes'.
		//           */
		//    ('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)?
		public Group getGroup_3_10() { return cGroup_3_10; }
		
		//'inherits'
		public Keyword getInheritsKeyword_3_10_0() { return cInheritsKeyword_3_10_0; }
		
		//actuallyInheritedTraits+=ConceptDeclaration
		public Assignment getActuallyInheritedTraitsAssignment_3_10_1() { return cActuallyInheritedTraitsAssignment_3_10_1; }
		
		//ConceptDeclaration
		public RuleCall getActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_10_1_0() { return cActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_10_1_0; }
		
		//(',' actuallyInheritedTraits+=ConceptDeclaration)*
		public Group getGroup_3_10_2() { return cGroup_3_10_2; }
		
		//','
		public Keyword getCommaKeyword_3_10_2_0() { return cCommaKeyword_3_10_2_0; }
		
		//actuallyInheritedTraits+=ConceptDeclaration
		public Assignment getActuallyInheritedTraitsAssignment_3_10_2_1() { return cActuallyInheritedTraitsAssignment_3_10_2_1; }
		
		//ConceptDeclaration
		public RuleCall getActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_10_2_1_0() { return cActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_10_2_1_0; }
		
		///*
		//           * Roles within a context. The concept is not given any traits but the specified
		//           * traits are inherited by the observables of any observation of this concept made within
		//           * those contexts. This will add a restriction to the restrictedObservable rather than
		//           * modify this concept, and Thinklab will use the restrictions to attribute traits
		//           * after resolution.
		//           *
		//           * 'in' specifies a context (often a process if role is dynamic but can be a subject or event)
		//           * 'for' (optional) specifies a target subject/event type within the context; the context itself
		//           *       is used if not specified.
		//           */
		//    ('has' 'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)*
		//        /* FIXME 'for' here causes unexplained issues when 'for' in concept declarations is used, although there should be
		//         * complete independence between the declarations. */
		//        ('targeting' targetObservables+=ConceptDeclaration (',' targetObservables+=ConceptDeclaration)*)?
		//        ('in' restrictedObservables+=ConceptDeclaration (',' restrictedObservables+=ConceptDeclaration)*))?
		public Group getGroup_3_11() { return cGroup_3_11; }
		
		//'has'
		public Keyword getHasKeyword_3_11_0() { return cHasKeyword_3_11_0; }
		
		//'role'
		public Keyword getRoleKeyword_3_11_1() { return cRoleKeyword_3_11_1; }
		
		//roles+=ConceptDeclaration
		public Assignment getRolesAssignment_3_11_2() { return cRolesAssignment_3_11_2; }
		
		//ConceptDeclaration
		public RuleCall getRolesConceptDeclarationParserRuleCall_3_11_2_0() { return cRolesConceptDeclarationParserRuleCall_3_11_2_0; }
		
		//(',' roles+=ConceptDeclaration)*
		public Group getGroup_3_11_3() { return cGroup_3_11_3; }
		
		//','
		public Keyword getCommaKeyword_3_11_3_0() { return cCommaKeyword_3_11_3_0; }
		
		//roles+=ConceptDeclaration
		public Assignment getRolesAssignment_3_11_3_1() { return cRolesAssignment_3_11_3_1; }
		
		//ConceptDeclaration
		public RuleCall getRolesConceptDeclarationParserRuleCall_3_11_3_1_0() { return cRolesConceptDeclarationParserRuleCall_3_11_3_1_0; }
		
		///* FIXME 'for' here causes unexplained issues when 'for' in concept declarations is used, although there should be
		// * complete independence between the declarations. */
		//('targeting' targetObservables+=ConceptDeclaration (',' targetObservables+=ConceptDeclaration)*)?
		public Group getGroup_3_11_4() { return cGroup_3_11_4; }
		
		//'targeting'
		public Keyword getTargetingKeyword_3_11_4_0() { return cTargetingKeyword_3_11_4_0; }
		
		//targetObservables+=ConceptDeclaration
		public Assignment getTargetObservablesAssignment_3_11_4_1() { return cTargetObservablesAssignment_3_11_4_1; }
		
		//ConceptDeclaration
		public RuleCall getTargetObservablesConceptDeclarationParserRuleCall_3_11_4_1_0() { return cTargetObservablesConceptDeclarationParserRuleCall_3_11_4_1_0; }
		
		//(',' targetObservables+=ConceptDeclaration)*
		public Group getGroup_3_11_4_2() { return cGroup_3_11_4_2; }
		
		//','
		public Keyword getCommaKeyword_3_11_4_2_0() { return cCommaKeyword_3_11_4_2_0; }
		
		//targetObservables+=ConceptDeclaration
		public Assignment getTargetObservablesAssignment_3_11_4_2_1() { return cTargetObservablesAssignment_3_11_4_2_1; }
		
		//ConceptDeclaration
		public RuleCall getTargetObservablesConceptDeclarationParserRuleCall_3_11_4_2_1_0() { return cTargetObservablesConceptDeclarationParserRuleCall_3_11_4_2_1_0; }
		
		//('in' restrictedObservables+=ConceptDeclaration (',' restrictedObservables+=ConceptDeclaration)*)
		public Group getGroup_3_11_5() { return cGroup_3_11_5; }
		
		//'in'
		public Keyword getInKeyword_3_11_5_0() { return cInKeyword_3_11_5_0; }
		
		//restrictedObservables+=ConceptDeclaration
		public Assignment getRestrictedObservablesAssignment_3_11_5_1() { return cRestrictedObservablesAssignment_3_11_5_1; }
		
		//ConceptDeclaration
		public RuleCall getRestrictedObservablesConceptDeclarationParserRuleCall_3_11_5_1_0() { return cRestrictedObservablesConceptDeclarationParserRuleCall_3_11_5_1_0; }
		
		//(',' restrictedObservables+=ConceptDeclaration)*
		public Group getGroup_3_11_5_2() { return cGroup_3_11_5_2; }
		
		//','
		public Keyword getCommaKeyword_3_11_5_2_0() { return cCommaKeyword_3_11_5_2_0; }
		
		//restrictedObservables+=ConceptDeclaration
		public Assignment getRestrictedObservablesAssignment_3_11_5_2_1() { return cRestrictedObservablesAssignment_3_11_5_2_1; }
		
		//ConceptDeclaration
		public RuleCall getRestrictedObservablesConceptDeclarationParserRuleCall_3_11_5_2_1_0() { return cRestrictedObservablesConceptDeclarationParserRuleCall_3_11_5_2_1_0; }
		
		///*
		//           * for processes: confer given trait(s) [or role(s)] to (participant subjects).
		//           */
		//    ('confers' conferredTraits+=ConceptDeclaration (',' conferredTraits+=ConceptDeclaration)*
		//        ('to' conferredTargets+=ConceptDeclaration (',' conferredTargets+=ConceptDeclaration)*)?
		//    )?
		public Group getGroup_3_12() { return cGroup_3_12; }
		
		//'confers'
		public Keyword getConfersKeyword_3_12_0() { return cConfersKeyword_3_12_0; }
		
		//conferredTraits+=ConceptDeclaration
		public Assignment getConferredTraitsAssignment_3_12_1() { return cConferredTraitsAssignment_3_12_1; }
		
		//ConceptDeclaration
		public RuleCall getConferredTraitsConceptDeclarationParserRuleCall_3_12_1_0() { return cConferredTraitsConceptDeclarationParserRuleCall_3_12_1_0; }
		
		//(',' conferredTraits+=ConceptDeclaration)*
		public Group getGroup_3_12_2() { return cGroup_3_12_2; }
		
		//','
		public Keyword getCommaKeyword_3_12_2_0() { return cCommaKeyword_3_12_2_0; }
		
		//conferredTraits+=ConceptDeclaration
		public Assignment getConferredTraitsAssignment_3_12_2_1() { return cConferredTraitsAssignment_3_12_2_1; }
		
		//ConceptDeclaration
		public RuleCall getConferredTraitsConceptDeclarationParserRuleCall_3_12_2_1_0() { return cConferredTraitsConceptDeclarationParserRuleCall_3_12_2_1_0; }
		
		//('to' conferredTargets+=ConceptDeclaration (',' conferredTargets+=ConceptDeclaration)*)?
		public Group getGroup_3_12_3() { return cGroup_3_12_3; }
		
		//'to'
		public Keyword getToKeyword_3_12_3_0() { return cToKeyword_3_12_3_0; }
		
		//conferredTargets+=ConceptDeclaration
		public Assignment getConferredTargetsAssignment_3_12_3_1() { return cConferredTargetsAssignment_3_12_3_1; }
		
		//ConceptDeclaration
		public RuleCall getConferredTargetsConceptDeclarationParserRuleCall_3_12_3_1_0() { return cConferredTargetsConceptDeclarationParserRuleCall_3_12_3_1_0; }
		
		//(',' conferredTargets+=ConceptDeclaration)*
		public Group getGroup_3_12_3_2() { return cGroup_3_12_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_12_3_2_0() { return cCommaKeyword_3_12_3_2_0; }
		
		//conferredTargets+=ConceptDeclaration
		public Assignment getConferredTargetsAssignment_3_12_3_2_1() { return cConferredTargetsAssignment_3_12_3_2_1; }
		
		//ConceptDeclaration
		public RuleCall getConferredTargetsConceptDeclarationParserRuleCall_3_12_3_2_1_0() { return cConferredTargetsConceptDeclarationParserRuleCall_3_12_3_2_1_0; }
		
		///*
		// * explicit declaration of triggers for emergent observables (subjects, processes and configuration)
		// */
		//('emerges' 'from' emergenceTriggers+=ConceptDeclaration (',' emergenceTriggers+=ConceptDeclaration)*)?
		public Group getGroup_3_13() { return cGroup_3_13; }
		
		//'emerges'
		public Keyword getEmergesKeyword_3_13_0() { return cEmergesKeyword_3_13_0; }
		
		//'from'
		public Keyword getFromKeyword_3_13_1() { return cFromKeyword_3_13_1; }
		
		//emergenceTriggers+=ConceptDeclaration
		public Assignment getEmergenceTriggersAssignment_3_13_2() { return cEmergenceTriggersAssignment_3_13_2; }
		
		//ConceptDeclaration
		public RuleCall getEmergenceTriggersConceptDeclarationParserRuleCall_3_13_2_0() { return cEmergenceTriggersConceptDeclarationParserRuleCall_3_13_2_0; }
		
		//(',' emergenceTriggers+=ConceptDeclaration)*
		public Group getGroup_3_13_3() { return cGroup_3_13_3; }
		
		//','
		public Keyword getCommaKeyword_3_13_3_0() { return cCommaKeyword_3_13_3_0; }
		
		//emergenceTriggers+=ConceptDeclaration
		public Assignment getEmergenceTriggersAssignment_3_13_3_1() { return cEmergenceTriggersAssignment_3_13_3_1; }
		
		//ConceptDeclaration
		public RuleCall getEmergenceTriggersConceptDeclarationParserRuleCall_3_13_3_1_0() { return cEmergenceTriggersConceptDeclarationParserRuleCall_3_13_3_1_0; }
		
		//    /**
		//     * Shorthand for common 'part of' restriction. TODO deprecate? Part-of should be left to the worldview.
		//     */
		////    (('part' | constituent?='constituent' | constitutes?='consists') partOf?='of' whole=ConceptDeclaration)? &
		//    /*
		//     * for processes: creates quality. Also for structural relationships (creates subject) and functional relationships\
		//     * (creates process). Paired with "affects" for process -> quality.
		//     */
		//    ('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)?
		public Group getGroup_3_14() { return cGroup_3_14; }
		
		//'creates'
		public Keyword getCreatesKeyword_3_14_0() { return cCreatesKeyword_3_14_0; }
		
		//creates+=ConceptDeclaration
		public Assignment getCreatesAssignment_3_14_1() { return cCreatesAssignment_3_14_1; }
		
		//ConceptDeclaration
		public RuleCall getCreatesConceptDeclarationParserRuleCall_3_14_1_0() { return cCreatesConceptDeclarationParserRuleCall_3_14_1_0; }
		
		//(',' creates+=ConceptDeclaration)*
		public Group getGroup_3_14_2() { return cGroup_3_14_2; }
		
		//','
		public Keyword getCommaKeyword_3_14_2_0() { return cCommaKeyword_3_14_2_0; }
		
		//creates+=ConceptDeclaration
		public Assignment getCreatesAssignment_3_14_2_1() { return cCreatesAssignment_3_14_2_1; }
		
		//ConceptDeclaration
		public RuleCall getCreatesConceptDeclarationParserRuleCall_3_14_2_1_0() { return cCreatesConceptDeclarationParserRuleCall_3_14_2_1_0; }
		
		///*
		// * traits can specify the set of allowed targets here. Also allows qualities and
		// * processes to specify their inherent target.
		// *
		// * If applying concept is a role and it applies to a relationship, this can also restrict the source and destination.
		// */
		//('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)?
		public Group getGroup_3_15() { return cGroup_3_15; }
		
		//'applies'
		public Keyword getAppliesKeyword_3_15_0() { return cAppliesKeyword_3_15_0; }
		
		//'to'
		public Keyword getToKeyword_3_15_1() { return cToKeyword_3_15_1; }
		
		//traitTargets+=ApplicableTarget
		public Assignment getTraitTargetsAssignment_3_15_2() { return cTraitTargetsAssignment_3_15_2; }
		
		//ApplicableTarget
		public RuleCall getTraitTargetsApplicableTargetParserRuleCall_3_15_2_0() { return cTraitTargetsApplicableTargetParserRuleCall_3_15_2_0; }
		
		//(',' traitTargets+=ApplicableTarget)*
		public Group getGroup_3_15_3() { return cGroup_3_15_3; }
		
		//','
		public Keyword getCommaKeyword_3_15_3_0() { return cCommaKeyword_3_15_3_0; }
		
		//traitTargets+=ApplicableTarget
		public Assignment getTraitTargetsAssignment_3_15_3_1() { return cTraitTargetsAssignment_3_15_3_1; }
		
		//ApplicableTarget
		public RuleCall getTraitTargetsApplicableTargetParserRuleCall_3_15_3_1_0() { return cTraitTargetsApplicableTargetParserRuleCall_3_15_3_1_0; }
		
		///*
		// * only for relationships: set domain and range of the associated property.
		// */
		//('links' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration
		//        (',' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration)*)?
		public Group getGroup_3_16() { return cGroup_3_16; }
		
		//'links'
		public Keyword getLinksKeyword_3_16_0() { return cLinksKeyword_3_16_0; }
		
		//domains+=SimpleConceptDeclaration
		public Assignment getDomainsAssignment_3_16_1() { return cDomainsAssignment_3_16_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getDomainsSimpleConceptDeclarationParserRuleCall_3_16_1_0() { return cDomainsSimpleConceptDeclarationParserRuleCall_3_16_1_0; }
		
		//=> 'to'
		public Keyword getToKeyword_3_16_2() { return cToKeyword_3_16_2; }
		
		//ranges+=SimpleConceptDeclaration
		public Assignment getRangesAssignment_3_16_3() { return cRangesAssignment_3_16_3; }
		
		//SimpleConceptDeclaration
		public RuleCall getRangesSimpleConceptDeclarationParserRuleCall_3_16_3_0() { return cRangesSimpleConceptDeclarationParserRuleCall_3_16_3_0; }
		
		//(',' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration)*
		public Group getGroup_3_16_4() { return cGroup_3_16_4; }
		
		//','
		public Keyword getCommaKeyword_3_16_4_0() { return cCommaKeyword_3_16_4_0; }
		
		//domains+=SimpleConceptDeclaration
		public Assignment getDomainsAssignment_3_16_4_1() { return cDomainsAssignment_3_16_4_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getDomainsSimpleConceptDeclarationParserRuleCall_3_16_4_1_0() { return cDomainsSimpleConceptDeclarationParserRuleCall_3_16_4_1_0; }
		
		//=> 'to'
		public Keyword getToKeyword_3_16_4_2() { return cToKeyword_3_16_4_2; }
		
		//ranges+=SimpleConceptDeclaration
		public Assignment getRangesAssignment_3_16_4_3() { return cRangesAssignment_3_16_4_3; }
		
		//SimpleConceptDeclaration
		public RuleCall getRangesSimpleConceptDeclarationParserRuleCall_3_16_4_3_0() { return cRangesSimpleConceptDeclarationParserRuleCall_3_16_4_3_0; }
		
		//    /*
		//     * only for relationships - set the inverse of the associated property (through the
		//     * relationship concept).
		//     */
		////    ('inverse' 'of' inverse=ConceptDeclaration)? &
		//    /*
		//     * for processes; lists qualities affected;
		//     * for deliberative agents: lists the subject types whose states this can
		//     * modify.
		//     */
		//    ('affects' qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)?
		public Group getGroup_3_17() { return cGroup_3_17; }
		
		//'affects'
		public Keyword getAffectsKeyword_3_17_0() { return cAffectsKeyword_3_17_0; }
		
		//qualitiesAffected+=ConceptDeclaration
		public Assignment getQualitiesAffectedAssignment_3_17_1() { return cQualitiesAffectedAssignment_3_17_1; }
		
		//ConceptDeclaration
		public RuleCall getQualitiesAffectedConceptDeclarationParserRuleCall_3_17_1_0() { return cQualitiesAffectedConceptDeclarationParserRuleCall_3_17_1_0; }
		
		//(',' qualitiesAffected+=ConceptDeclaration)*
		public Group getGroup_3_17_2() { return cGroup_3_17_2; }
		
		//','
		public Keyword getCommaKeyword_3_17_2_0() { return cCommaKeyword_3_17_2_0; }
		
		//qualitiesAffected+=ConceptDeclaration
		public Assignment getQualitiesAffectedAssignment_3_17_2_1() { return cQualitiesAffectedAssignment_3_17_2_1; }
		
		//ConceptDeclaration
		public RuleCall getQualitiesAffectedConceptDeclarationParserRuleCall_3_17_2_1_0() { return cQualitiesAffectedConceptDeclarationParserRuleCall_3_17_2_1_0; }
		
		//('has' (disjoint?='disjoint')? 'children' children+=ChildConcept (',' children+=ChildConcept)*)?
		public Group getGroup_3_18() { return cGroup_3_18; }
		
		//'has'
		public Keyword getHasKeyword_3_18_0() { return cHasKeyword_3_18_0; }
		
		//(disjoint?='disjoint')?
		public Assignment getDisjointAssignment_3_18_1() { return cDisjointAssignment_3_18_1; }
		
		//'disjoint'
		public Keyword getDisjointDisjointKeyword_3_18_1_0() { return cDisjointDisjointKeyword_3_18_1_0; }
		
		//'children'
		public Keyword getChildrenKeyword_3_18_2() { return cChildrenKeyword_3_18_2; }
		
		//children+=ChildConcept
		public Assignment getChildrenAssignment_3_18_3() { return cChildrenAssignment_3_18_3; }
		
		//ChildConcept
		public RuleCall getChildrenChildConceptParserRuleCall_3_18_3_0() { return cChildrenChildConceptParserRuleCall_3_18_3_0; }
		
		//(',' children+=ChildConcept)*
		public Group getGroup_3_18_4() { return cGroup_3_18_4; }
		
		//','
		public Keyword getCommaKeyword_3_18_4_0() { return cCommaKeyword_3_18_4_0; }
		
		//children+=ChildConcept
		public Assignment getChildrenAssignment_3_18_4_1() { return cChildrenAssignment_3_18_4_1; }
		
		//ChildConcept
		public RuleCall getChildrenChildConceptParserRuleCall_3_18_4_1_0() { return cChildrenChildConceptParserRuleCall_3_18_4_1_0; }
		
		//('implies' implications+=Implication (',' implications+=Implication)*)?
		public Group getGroup_3_19() { return cGroup_3_19; }
		
		//'implies'
		public Keyword getImpliesKeyword_3_19_0() { return cImpliesKeyword_3_19_0; }
		
		//implications+=Implication
		public Assignment getImplicationsAssignment_3_19_1() { return cImplicationsAssignment_3_19_1; }
		
		//Implication
		public RuleCall getImplicationsImplicationParserRuleCall_3_19_1_0() { return cImplicationsImplicationParserRuleCall_3_19_1_0; }
		
		//(',' implications+=Implication)*
		public Group getGroup_3_19_2() { return cGroup_3_19_2; }
		
		//','
		public Keyword getCommaKeyword_3_19_2_0() { return cCommaKeyword_3_19_2_0; }
		
		//implications+=Implication
		public Assignment getImplicationsAssignment_3_19_2_1() { return cImplicationsAssignment_3_19_2_1; }
		
		//Implication
		public RuleCall getImplicationsImplicationParserRuleCall_3_19_2_1_0() { return cImplicationsImplicationParserRuleCall_3_19_2_1_0; }
		
		//('uses' 'authority' authorities+=(UPPERCASE_ID|UPPERCASE_PATH))?
		public Group getGroup_3_20() { return cGroup_3_20; }
		
		//'uses'
		public Keyword getUsesKeyword_3_20_0() { return cUsesKeyword_3_20_0; }
		
		//'authority'
		public Keyword getAuthorityKeyword_3_20_1() { return cAuthorityKeyword_3_20_1; }
		
		//authorities+=(UPPERCASE_ID|UPPERCASE_PATH)
		public Assignment getAuthoritiesAssignment_3_20_2() { return cAuthoritiesAssignment_3_20_2; }
		
		//(UPPERCASE_ID|UPPERCASE_PATH)
		public Alternatives getAuthoritiesAlternatives_3_20_2_0() { return cAuthoritiesAlternatives_3_20_2_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthoritiesUPPERCASE_IDTerminalRuleCall_3_20_2_0_0() { return cAuthoritiesUPPERCASE_IDTerminalRuleCall_3_20_2_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthoritiesUPPERCASE_PATHTerminalRuleCall_3_20_2_0_1() { return cAuthoritiesUPPERCASE_PATHTerminalRuleCall_3_20_2_0_1; }
		
		//('metadata' metadata=Map)?
		public Group getGroup_3_21() { return cGroup_3_21; }
		
		//'metadata'
		public Keyword getMetadataKeyword_3_21_0() { return cMetadataKeyword_3_21_0; }
		
		//metadata=Map
		public Assignment getMetadataAssignment_3_21_1() { return cMetadataAssignment_3_21_1; }
		
		//Map
		public RuleCall getMetadataMapParserRuleCall_3_21_1_0() { return cMetadataMapParserRuleCall_3_21_1_0; }
		
		//// properties are only object properties and are declared on appearance. This makes typos
		//// problematic, of course, but the alternative is a load of ugly syntax.
		//(properties+=PropertyStatement*)
		public Assignment getPropertiesAssignment_3_22() { return cPropertiesAssignment_3_22; }
		
		//PropertyStatement
		public RuleCall getPropertiesPropertyStatementParserRuleCall_3_22_0() { return cPropertiesPropertyStatementParserRuleCall_3_22_0; }
	}
	public class DescriptionConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.DescriptionConstraints");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLowerAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLowerNumberParserRuleCall_0_0_0 = (RuleCall)cLowerAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cToKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cHigherAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cHigherNumberParserRuleCall_0_1_1_0 = (RuleCall)cHigherAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cInKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Alternatives cAlternatives_0_2_1 = (Alternatives)cGroup_0_2.eContents().get(1);
		private final Assignment cCurrencyAssignment_0_2_1_0 = (Assignment)cAlternatives_0_2_1.eContents().get(0);
		private final RuleCall cCurrencyCurrencyParserRuleCall_0_2_1_0_0 = (RuleCall)cCurrencyAssignment_0_2_1_0.eContents().get(0);
		private final Assignment cUnitAssignment_0_2_1_1 = (Assignment)cAlternatives_0_2_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_0_2_1_1_0 = (RuleCall)cUnitAssignment_0_2_1_1.eContents().get(0);
		private final Assignment cConceptAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_1_0 = (RuleCall)cConceptAssignment_1.eContents().get(0);
		
		//DescriptionConstraints:
		//    lower=Number ('to' higher=Number)? ('in' (currency=Currency | unit=Unit))? |
		//    concept=SimpleConceptDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lower=Number ('to' higher=Number)? ('in' (currency=Currency | unit=Unit))? |
		//concept=SimpleConceptDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lower=Number ('to' higher=Number)? ('in' (currency=Currency | unit=Unit))?
		public Group getGroup_0() { return cGroup_0; }
		
		//lower=Number
		public Assignment getLowerAssignment_0_0() { return cLowerAssignment_0_0; }
		
		//Number
		public RuleCall getLowerNumberParserRuleCall_0_0_0() { return cLowerNumberParserRuleCall_0_0_0; }
		
		//('to' higher=Number)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'to'
		public Keyword getToKeyword_0_1_0() { return cToKeyword_0_1_0; }
		
		//higher=Number
		public Assignment getHigherAssignment_0_1_1() { return cHigherAssignment_0_1_1; }
		
		//Number
		public RuleCall getHigherNumberParserRuleCall_0_1_1_0() { return cHigherNumberParserRuleCall_0_1_1_0; }
		
		//('in' (currency=Currency | unit=Unit))?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'in'
		public Keyword getInKeyword_0_2_0() { return cInKeyword_0_2_0; }
		
		//(currency=Currency | unit=Unit)
		public Alternatives getAlternatives_0_2_1() { return cAlternatives_0_2_1; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_0_2_1_0() { return cCurrencyAssignment_0_2_1_0; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_0_2_1_0_0() { return cCurrencyCurrencyParserRuleCall_0_2_1_0_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_0_2_1_1() { return cUnitAssignment_0_2_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_0_2_1_1_0() { return cUnitUnitParserRuleCall_0_2_1_1_0; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_1() { return cConceptAssignment_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_1_0() { return cConceptSimpleConceptDeclarationParserRuleCall_1_0; }
	}
	public class ImplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Implication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantifierQuantificationParserRuleCall_0_0 = (RuleCall)cQuantifierAssignment_0.eContents().get(0);
		private final Assignment cConceptAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_1_0 = (RuleCall)cConceptAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTargetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTargetConceptDeclarationParserRuleCall_2_1_0 = (RuleCall)cTargetAssignment_2_1.eContents().get(0);
		
		//Implication:
		//    (quantifier=Quantification)? concept=ConceptDeclaration
		//         /*(*/('as' target=ConceptDeclaration)? /* & ('within' context=ConceptDeclaration)?)?  */
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(quantifier=Quantification)? concept=ConceptDeclaration
		//     /*(*/('as' target=ConceptDeclaration)?
		public Group getGroup() { return cGroup; }
		
		//(quantifier=Quantification)?
		public Assignment getQuantifierAssignment_0() { return cQuantifierAssignment_0; }
		
		//Quantification
		public RuleCall getQuantifierQuantificationParserRuleCall_0_0() { return cQuantifierQuantificationParserRuleCall_0_0; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_1() { return cConceptAssignment_1; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_1_0() { return cConceptConceptDeclarationParserRuleCall_1_0; }
		
		///*(*/('as' target=ConceptDeclaration)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//target=ConceptDeclaration
		public Assignment getTargetAssignment_2_1() { return cTargetAssignment_2_1; }
		
		//ConceptDeclaration
		public RuleCall getTargetConceptDeclarationParserRuleCall_2_1_0() { return cTargetConceptDeclarationParserRuleCall_2_1_0; }
	}
	public class QuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Quantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuantificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOnlyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cOnlyOnlyKeyword_1_0_0 = (Keyword)cOnlyAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Assignment cExactlyAssignment_1_1_0_0 = (Assignment)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cExactlyExactlyKeyword_1_1_0_0_0 = (Keyword)cExactlyAssignment_1_1_0_0.eContents().get(0);
		private final Group cGroup_1_1_0_1 = (Group)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cAtKeyword_1_1_0_1_0 = (Keyword)cGroup_1_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1_1 = (Alternatives)cGroup_1_1_0_1.eContents().get(1);
		private final Assignment cAtLeastAssignment_1_1_0_1_1_0 = (Assignment)cAlternatives_1_1_0_1_1.eContents().get(0);
		private final Keyword cAtLeastLeastKeyword_1_1_0_1_1_0_0 = (Keyword)cAtLeastAssignment_1_1_0_1_1_0.eContents().get(0);
		private final Assignment cAtMostAssignment_1_1_0_1_1_1 = (Assignment)cAlternatives_1_1_0_1_1.eContents().get(1);
		private final Keyword cAtMostMostKeyword_1_1_0_1_1_1_0 = (Keyword)cAtMostAssignment_1_1_0_1_1_1.eContents().get(0);
		private final Assignment cCardinalityAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_1_1_1_0 = (RuleCall)cCardinalityAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cOrKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cOrMoreAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final Keyword cOrMoreMoreKeyword_1_1_2_1_0 = (Keyword)cOrMoreAssignment_1_1_2_1.eContents().get(0);
		
		//Quantification: {Quantification}
		//    (only?='only' | (exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')? )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Quantification}
		//   (only?='only' | (exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')? )?
		public Group getGroup() { return cGroup; }
		
		//{Quantification}
		public Action getQuantificationAction_0() { return cQuantificationAction_0; }
		
		//(only?='only' | (exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')? )?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//only?='only'
		public Assignment getOnlyAssignment_1_0() { return cOnlyAssignment_1_0; }
		
		//'only'
		public Keyword getOnlyOnlyKeyword_1_0_0() { return cOnlyOnlyKeyword_1_0_0; }
		
		//(exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))?
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//exactly?='exactly'
		public Assignment getExactlyAssignment_1_1_0_0() { return cExactlyAssignment_1_1_0_0; }
		
		//'exactly'
		public Keyword getExactlyExactlyKeyword_1_1_0_0_0() { return cExactlyExactlyKeyword_1_1_0_0_0; }
		
		//'at' (atLeast?='least' | atMost?='most')
		public Group getGroup_1_1_0_1() { return cGroup_1_1_0_1; }
		
		//'at'
		public Keyword getAtKeyword_1_1_0_1_0() { return cAtKeyword_1_1_0_1_0; }
		
		//(atLeast?='least' | atMost?='most')
		public Alternatives getAlternatives_1_1_0_1_1() { return cAlternatives_1_1_0_1_1; }
		
		//atLeast?='least'
		public Assignment getAtLeastAssignment_1_1_0_1_1_0() { return cAtLeastAssignment_1_1_0_1_1_0; }
		
		//'least'
		public Keyword getAtLeastLeastKeyword_1_1_0_1_1_0_0() { return cAtLeastLeastKeyword_1_1_0_1_1_0_0; }
		
		//atMost?='most'
		public Assignment getAtMostAssignment_1_1_0_1_1_1() { return cAtMostAssignment_1_1_0_1_1_1; }
		
		//'most'
		public Keyword getAtMostMostKeyword_1_1_0_1_1_1_0() { return cAtMostMostKeyword_1_1_0_1_1_1_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_1_1_1() { return cCardinalityAssignment_1_1_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_1_1_1_0() { return cCardinalityINTTerminalRuleCall_1_1_1_0; }
		
		//('or' orMore?='more')?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'or'
		public Keyword getOrKeyword_1_1_2_0() { return cOrKeyword_1_1_2_0; }
		
		//orMore?='more'
		public Assignment getOrMoreAssignment_1_1_2_1() { return cOrMoreAssignment_1_1_2_1; }
		
		//'more'
		public Keyword getOrMoreMoreKeyword_1_1_2_1_0() { return cOrMoreMoreKeyword_1_1_2_1_0; }
	}
	public class PropertyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.PropertyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPropertyAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Alternatives cPropertyAlternatives_0_0_0 = (Alternatives)cPropertyAssignment_0_0.eContents().get(0);
		private final RuleCall cPropertyPropertyIdParserRuleCall_0_0_0_0 = (RuleCall)cPropertyAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cPropertyBACKCASE_IDTerminalRuleCall_0_0_0_1 = (RuleCall)cPropertyAlternatives_0_0_0.eContents().get(1);
		private final Assignment cHasAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cHasHasKeyword_0_1_0 = (Keyword)cHasAssignment_0_1.eContents().get(0);
		private final Assignment cContainsAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cContainsContainsKeyword_0_2_0 = (Keyword)cContainsAssignment_0_2.eContents().get(0);
		private final Assignment cUsesAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final Keyword cUsesUsesKeyword_0_3_0 = (Keyword)cUsesAssignment_0_3.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOnlyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cOnlyOnlyKeyword_1_0_0 = (Keyword)cOnlyAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Assignment cExactlyAssignment_1_1_0_0 = (Assignment)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cExactlyExactlyKeyword_1_1_0_0_0 = (Keyword)cExactlyAssignment_1_1_0_0.eContents().get(0);
		private final Group cGroup_1_1_0_1 = (Group)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cAtKeyword_1_1_0_1_0 = (Keyword)cGroup_1_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1_1 = (Alternatives)cGroup_1_1_0_1.eContents().get(1);
		private final Assignment cAtLeastAssignment_1_1_0_1_1_0 = (Assignment)cAlternatives_1_1_0_1_1.eContents().get(0);
		private final Keyword cAtLeastLeastKeyword_1_1_0_1_1_0_0 = (Keyword)cAtLeastAssignment_1_1_0_1_1_0.eContents().get(0);
		private final Assignment cAtMostAssignment_1_1_0_1_1_1 = (Assignment)cAlternatives_1_1_0_1_1.eContents().get(1);
		private final Keyword cAtMostMostKeyword_1_1_0_1_1_1_0 = (Keyword)cAtMostAssignment_1_1_0_1_1_1.eContents().get(0);
		private final Assignment cCardinalityAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCardinalityINTTerminalRuleCall_1_1_1_0 = (RuleCall)cCardinalityAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cOrKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cOrMoreAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final Keyword cOrMoreMoreKeyword_1_1_2_1_0 = (Keyword)cOrMoreAssignment_1_1_2_1.eContents().get(0);
		private final Assignment cPropertyTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyTargetSimpleConceptDeclarationParserRuleCall_2_0 = (RuleCall)cPropertyTargetAssignment_2.eContents().get(0);
		
		//PropertyStatement:
		//    (property=(PropertyId|BACKCASE_ID) | has?='has' | contains?='contains' | uses?='uses')
		//        (only?='only' | (exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')? )?
		//        propertyTarget=SimpleConceptDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(property=(PropertyId|BACKCASE_ID) | has?='has' | contains?='contains' | uses?='uses')
		//    (only?='only' | (exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')? )?
		//    propertyTarget=SimpleConceptDeclaration
		public Group getGroup() { return cGroup; }
		
		//(property=(PropertyId|BACKCASE_ID) | has?='has' | contains?='contains' | uses?='uses')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//property=(PropertyId|BACKCASE_ID)
		public Assignment getPropertyAssignment_0_0() { return cPropertyAssignment_0_0; }
		
		//(PropertyId|BACKCASE_ID)
		public Alternatives getPropertyAlternatives_0_0_0() { return cPropertyAlternatives_0_0_0; }
		
		//PropertyId
		public RuleCall getPropertyPropertyIdParserRuleCall_0_0_0_0() { return cPropertyPropertyIdParserRuleCall_0_0_0_0; }
		
		//BACKCASE_ID
		public RuleCall getPropertyBACKCASE_IDTerminalRuleCall_0_0_0_1() { return cPropertyBACKCASE_IDTerminalRuleCall_0_0_0_1; }
		
		//has?='has'
		public Assignment getHasAssignment_0_1() { return cHasAssignment_0_1; }
		
		//'has'
		public Keyword getHasHasKeyword_0_1_0() { return cHasHasKeyword_0_1_0; }
		
		//contains?='contains'
		public Assignment getContainsAssignment_0_2() { return cContainsAssignment_0_2; }
		
		//'contains'
		public Keyword getContainsContainsKeyword_0_2_0() { return cContainsContainsKeyword_0_2_0; }
		
		//uses?='uses'
		public Assignment getUsesAssignment_0_3() { return cUsesAssignment_0_3; }
		
		//'uses'
		public Keyword getUsesUsesKeyword_0_3_0() { return cUsesUsesKeyword_0_3_0; }
		
		//(only?='only' | (exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')? )?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//only?='only'
		public Assignment getOnlyAssignment_1_0() { return cOnlyAssignment_1_0; }
		
		//'only'
		public Keyword getOnlyOnlyKeyword_1_0_0() { return cOnlyOnlyKeyword_1_0_0; }
		
		//(exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))?
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//exactly?='exactly'
		public Assignment getExactlyAssignment_1_1_0_0() { return cExactlyAssignment_1_1_0_0; }
		
		//'exactly'
		public Keyword getExactlyExactlyKeyword_1_1_0_0_0() { return cExactlyExactlyKeyword_1_1_0_0_0; }
		
		//'at' (atLeast?='least' | atMost?='most')
		public Group getGroup_1_1_0_1() { return cGroup_1_1_0_1; }
		
		//'at'
		public Keyword getAtKeyword_1_1_0_1_0() { return cAtKeyword_1_1_0_1_0; }
		
		//(atLeast?='least' | atMost?='most')
		public Alternatives getAlternatives_1_1_0_1_1() { return cAlternatives_1_1_0_1_1; }
		
		//atLeast?='least'
		public Assignment getAtLeastAssignment_1_1_0_1_1_0() { return cAtLeastAssignment_1_1_0_1_1_0; }
		
		//'least'
		public Keyword getAtLeastLeastKeyword_1_1_0_1_1_0_0() { return cAtLeastLeastKeyword_1_1_0_1_1_0_0; }
		
		//atMost?='most'
		public Assignment getAtMostAssignment_1_1_0_1_1_1() { return cAtMostAssignment_1_1_0_1_1_1; }
		
		//'most'
		public Keyword getAtMostMostKeyword_1_1_0_1_1_1_0() { return cAtMostMostKeyword_1_1_0_1_1_1_0; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_1_1_1() { return cCardinalityAssignment_1_1_1; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_1_1_1_0() { return cCardinalityINTTerminalRuleCall_1_1_1_0; }
		
		//('or' orMore?='more')?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'or'
		public Keyword getOrKeyword_1_1_2_0() { return cOrKeyword_1_1_2_0; }
		
		//orMore?='more'
		public Assignment getOrMoreAssignment_1_1_2_1() { return cOrMoreAssignment_1_1_2_1; }
		
		//'more'
		public Keyword getOrMoreMoreKeyword_1_1_2_1_0() { return cOrMoreMoreKeyword_1_1_2_1_0; }
		
		//propertyTarget=SimpleConceptDeclaration
		public Assignment getPropertyTargetAssignment_2() { return cPropertyTargetAssignment_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getPropertyTargetSimpleConceptDeclarationParserRuleCall_2_0() { return cPropertyTargetSimpleConceptDeclarationParserRuleCall_2_0; }
	}
	public class ApplicableTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ApplicableTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetConceptDeclarationParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBetweenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLinkFromAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLinkFromConceptDeclarationParserRuleCall_1_1_0 = (RuleCall)cLinkFromAssignment_1_1.eContents().get(0);
		private final Keyword cAndKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLinkToAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLinkToConceptDeclarationParserRuleCall_1_3_0 = (RuleCall)cLinkToAssignment_1_3.eContents().get(0);
		
		//ApplicableTarget:
		//    target=ConceptDeclaration ('between' linkFrom=ConceptDeclaration 'and' linkTo=ConceptDeclaration)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//target=ConceptDeclaration ('between' linkFrom=ConceptDeclaration 'and' linkTo=ConceptDeclaration)?
		public Group getGroup() { return cGroup; }
		
		//target=ConceptDeclaration
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//ConceptDeclaration
		public RuleCall getTargetConceptDeclarationParserRuleCall_0_0() { return cTargetConceptDeclarationParserRuleCall_0_0; }
		
		//('between' linkFrom=ConceptDeclaration 'and' linkTo=ConceptDeclaration)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'between'
		public Keyword getBetweenKeyword_1_0() { return cBetweenKeyword_1_0; }
		
		//linkFrom=ConceptDeclaration
		public Assignment getLinkFromAssignment_1_1() { return cLinkFromAssignment_1_1; }
		
		//ConceptDeclaration
		public RuleCall getLinkFromConceptDeclarationParserRuleCall_1_1_0() { return cLinkFromConceptDeclarationParserRuleCall_1_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_2() { return cAndKeyword_1_2; }
		
		//linkTo=ConceptDeclaration
		public Assignment getLinkToAssignment_1_3() { return cLinkToAssignment_1_3; }
		
		//ConceptDeclaration
		public RuleCall getLinkToConceptDeclarationParserRuleCall_1_3_0() { return cLinkToConceptDeclarationParserRuleCall_1_3_0; }
	}
	public class ChildConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ChildConcept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAbstractAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0_0 = (Keyword)cAbstractAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameCAMELCASE_IDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConceptStatementBodyParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ChildConcept returns ConceptStatementBody:
		//    (abstract?='abstract')? name=CAMELCASE_ID |
		//    '(' ConceptStatementBody ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(abstract?='abstract')? name=CAMELCASE_ID |
		//'(' ConceptStatementBody ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(abstract?='abstract')? name=CAMELCASE_ID
		public Group getGroup_0() { return cGroup_0; }
		
		//(abstract?='abstract')?
		public Assignment getAbstractAssignment_0_0() { return cAbstractAssignment_0_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0_0() { return cAbstractAbstractKeyword_0_0_0; }
		
		//name=CAMELCASE_ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getNameCAMELCASE_IDTerminalRuleCall_0_1_0() { return cNameCAMELCASE_IDTerminalRuleCall_0_1_0; }
		
		//'(' ConceptStatementBody ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//ConceptStatementBody
		public RuleCall getConceptStatementBodyParserRuleCall_1_1() { return cConceptStatementBodyParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class IdentityRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.IdentityRequirement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0_0 = (Alternatives)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cTypeIdentityKeyword_0_0_0_0 = (Keyword)cTypeAlternatives_0_0_0.eContents().get(0);
		private final Keyword cTypeAttributeKeyword_0_0_0_1 = (Keyword)cTypeAlternatives_0_0_0.eContents().get(1);
		private final Keyword cTypeRealmKeyword_0_0_0_2 = (Keyword)cTypeAlternatives_0_0_0.eContents().get(2);
		private final Keyword cTypeExtentKeyword_0_0_0_3 = (Keyword)cTypeAlternatives_0_0_0.eContents().get(3);
		private final Assignment cIdentitiesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdentitiesConceptDeclarationParserRuleCall_0_1_0 = (RuleCall)cIdentitiesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cIdentitiesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cIdentitiesConceptDeclarationParserRuleCall_0_2_1_0 = (RuleCall)cIdentitiesAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAuthorityKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAuthorityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cAuthorityAlternatives_1_1_0 = (Alternatives)cAuthorityAssignment_1_1.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_IDTerminalRuleCall_1_1_0_0 = (RuleCall)cAuthorityAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_PATHTerminalRuleCall_1_1_0_1 = (RuleCall)cAuthorityAlternatives_1_1_0.eContents().get(1);
		
		//IdentityRequirement:
		//    type=('identity' | 'attribute' | 'realm' | 'extent') identities+=ConceptDeclaration (',' identities+=ConceptDeclaration)* |
		//     'authority' authority=(UPPERCASE_ID|UPPERCASE_PATH)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//type=('identity' | 'attribute' | 'realm' | 'extent') identities+=ConceptDeclaration (',' identities+=ConceptDeclaration)* |
		// 'authority' authority=(UPPERCASE_ID|UPPERCASE_PATH)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=('identity' | 'attribute' | 'realm' | 'extent') identities+=ConceptDeclaration (',' identities+=ConceptDeclaration)*
		public Group getGroup_0() { return cGroup_0; }
		
		//type=('identity' | 'attribute' | 'realm' | 'extent')
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//('identity' | 'attribute' | 'realm' | 'extent')
		public Alternatives getTypeAlternatives_0_0_0() { return cTypeAlternatives_0_0_0; }
		
		//'identity'
		public Keyword getTypeIdentityKeyword_0_0_0_0() { return cTypeIdentityKeyword_0_0_0_0; }
		
		//'attribute'
		public Keyword getTypeAttributeKeyword_0_0_0_1() { return cTypeAttributeKeyword_0_0_0_1; }
		
		//'realm'
		public Keyword getTypeRealmKeyword_0_0_0_2() { return cTypeRealmKeyword_0_0_0_2; }
		
		//'extent'
		public Keyword getTypeExtentKeyword_0_0_0_3() { return cTypeExtentKeyword_0_0_0_3; }
		
		//identities+=ConceptDeclaration
		public Assignment getIdentitiesAssignment_0_1() { return cIdentitiesAssignment_0_1; }
		
		//ConceptDeclaration
		public RuleCall getIdentitiesConceptDeclarationParserRuleCall_0_1_0() { return cIdentitiesConceptDeclarationParserRuleCall_0_1_0; }
		
		//(',' identities+=ConceptDeclaration)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//identities+=ConceptDeclaration
		public Assignment getIdentitiesAssignment_0_2_1() { return cIdentitiesAssignment_0_2_1; }
		
		//ConceptDeclaration
		public RuleCall getIdentitiesConceptDeclarationParserRuleCall_0_2_1_0() { return cIdentitiesConceptDeclarationParserRuleCall_0_2_1_0; }
		
		//'authority' authority=(UPPERCASE_ID|UPPERCASE_PATH)
		public Group getGroup_1() { return cGroup_1; }
		
		//'authority'
		public Keyword getAuthorityKeyword_1_0() { return cAuthorityKeyword_1_0; }
		
		//authority=(UPPERCASE_ID|UPPERCASE_PATH)
		public Assignment getAuthorityAssignment_1_1() { return cAuthorityAssignment_1_1; }
		
		//(UPPERCASE_ID|UPPERCASE_PATH)
		public Alternatives getAuthorityAlternatives_1_1_0() { return cAuthorityAlternatives_1_1_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthorityUPPERCASE_IDTerminalRuleCall_1_1_0_0() { return cAuthorityUPPERCASE_IDTerminalRuleCall_1_1_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthorityUPPERCASE_PATHTerminalRuleCall_1_1_0_1() { return cAuthorityUPPERCASE_PATHTerminalRuleCall_1_1_0_1; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameANNOTATION_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		///*
		// * Ultra-simple restriction statements:
		// *
		// * uses [only] CCC [for PPP]; // PPP can be a property or a concept
		// * uses at [least|most] 1 CCC [for PPP]
		// * uses exactly 1 CCC [for PPP]
		// * uses 120 for PPP // data property
		// *
		// * uses = has; requires = functional has; contains = part-of (contextually resolved). implies is only for roles.
		// *
		// * if PPP is a concept (much more intuitive), must be restricting a known one and hasPPP is created (or used).
		// *
		// * Also hosts the 'uses authority' restriction which is only accepted by domains.
		// *
		// */
		////RestrictionStatement:
		////    relType=('uses' | 'has' | 'contains' | 'implies') definitions+=RestrictionDefinition (',' definitions+=RestrictionDefinition)* |
		////    'uses' 'authority' authorities+=(UPPERCASE_ID|UPPERCASE_PATH) (=> ',' authorities+=(UPPERCASE_ID|UPPERCASE_PATH))* |
		////    'uses' value=Literal literal?='for' subject=(CAMELCASE_ID | NamespaceId);
		////
		////RestrictionDefinition:
		////    // concept restriction: the 'for' should introduce a concept, for a property defined by k.LAB
		////    (only?='only' | none?='no' | ((exactly?='exactly' | ('at' atLeast?='least') | ('at' atMost?='most')) howmany=INT))?
		////    (source=ConceptDeclaration | dataType=DataType) ('inheriting' traitType=ConceptDeclaration)?
		////    ('as' (subject=ConceptDeclaration))? /*|
		////    // data restriction, only for special cases in worldview namespaces; 'for' introduces a data property from core ontologies
		////    value=Literal ('to' maxValue=Number)? 'for' property=PropertyId */
		////;
		//Annotation:
		//    name=ANNOTATION_ID (=> '(' parameters=ParameterList? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ANNOTATION_ID (=> '(' parameters=ParameterList? ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ANNOTATION_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ANNOTATION_ID
		public RuleCall getNameANNOTATION_IDTerminalRuleCall_0_0() { return cNameANNOTATION_IDTerminalRuleCall_0_0; }
		
		//(=> '(' parameters=ParameterList? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_1_0() { return cParametersParameterListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentsValueWithIdAndConceptParserRuleCall_2_0 = (RuleCall)cContentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContentsValueWithIdAndConceptParserRuleCall_3_1_0 = (RuleCall)cContentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//List:
		//    {List} '(' contents+=ValueWithIdAndConcept? ((',')? contents+=ValueWithIdAndConcept)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{List} '(' contents+=ValueWithIdAndConcept? ((',')? contents+=ValueWithIdAndConcept)* ')'
		public Group getGroup() { return cGroup; }
		
		//{List}
		public Action getListAction_0() { return cListAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//contents+=ValueWithIdAndConcept?
		public Assignment getContentsAssignment_2() { return cContentsAssignment_2; }
		
		//ValueWithIdAndConcept
		public RuleCall getContentsValueWithIdAndConceptParserRuleCall_2_0() { return cContentsValueWithIdAndConceptParserRuleCall_2_0; }
		
		//((',')? contents+=ValueWithIdAndConcept)*
		public Group getGroup_3() { return cGroup_3; }
		
		//(',')?
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//contents+=ValueWithIdAndConcept
		public Assignment getContentsAssignment_3_1() { return cContentsAssignment_3_1; }
		
		//ValueWithIdAndConcept
		public RuleCall getContentsValueWithIdAndConceptParserRuleCall_3_1_0() { return cContentsValueWithIdAndConceptParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFromAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_0_0_0 = (RuleCall)cFromAssignment_0_0.eContents().get(0);
		private final Keyword cToKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cToAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_0_2_0 = (RuleCall)cToAssignment_0_2.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cBooleanAlternatives_3_0 = (Alternatives)cBooleanAssignment_3.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_3_0_0 = (Keyword)cBooleanAlternatives_3_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_3_0_1 = (Keyword)cBooleanAlternatives_3_0.eContents().get(1);
		
		//Literal:
		//     from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//from=Number => 'to' => to=Number
		public Group getGroup_0() { return cGroup_0; }
		
		//from=Number
		public Assignment getFromAssignment_0_0() { return cFromAssignment_0_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_0_0_0() { return cFromNumberParserRuleCall_0_0_0; }
		
		//=> 'to'
		public Keyword getToKeyword_0_1() { return cToKeyword_0_1; }
		
		//=> to=Number
		public Assignment getToAssignment_0_2() { return cToAssignment_0_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_0_2_0() { return cToNumberParserRuleCall_0_2_0; }
		
		//number=Number
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0() { return cNumberNumberParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_3_0() { return cBooleanAlternatives_3_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_3_0_0() { return cBooleanTrueKeyword_3_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_3_0_1() { return cBooleanFalseKeyword_3_0_1; }
	}
	public class LiteralOrIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LiteralOrID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Assignment cBooleanAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cBooleanAlternatives_2_0 = (Alternatives)cBooleanAssignment_2.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_2_0_0 = (Keyword)cBooleanAlternatives_2_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_2_0_1 = (Keyword)cBooleanAlternatives_2_0.eContents().get(1);
		private final Assignment cIdAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		
		//LiteralOrID returns Literal:
		//    number=Number | string=STRING | boolean=('true' | 'false') | id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//number=Number | string=STRING | boolean=('true' | 'false') | id=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_2() { return cBooleanAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_2_0() { return cBooleanAlternatives_2_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_2_0_0() { return cBooleanTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_2_0_1() { return cBooleanFalseKeyword_2_0_1; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
	}
	public class LiteralOrIdOrCommaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LiteralOrIdOrComma");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFromAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_0_0_0 = (RuleCall)cFromAssignment_0_0.eContents().get(0);
		private final Keyword cToKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cToAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_0_2_0 = (RuleCall)cToAssignment_0_2.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cBooleanAlternatives_3_0 = (Alternatives)cBooleanAssignment_3.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_3_0_0 = (Keyword)cBooleanAlternatives_3_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_3_0_1 = (Keyword)cBooleanAlternatives_3_0.eContents().get(1);
		private final Assignment cIdAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cCommaAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cCommaCommaKeyword_5_0 = (Keyword)cCommaAssignment_5.eContents().get(0);
		
		//LiteralOrIdOrComma returns Literal:
		//     from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=',';
		@Override public ParserRule getRule() { return rule; }
		
		//from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=','
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//from=Number => 'to' => to=Number
		public Group getGroup_0() { return cGroup_0; }
		
		//from=Number
		public Assignment getFromAssignment_0_0() { return cFromAssignment_0_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_0_0_0() { return cFromNumberParserRuleCall_0_0_0; }
		
		//=> 'to'
		public Keyword getToKeyword_0_1() { return cToKeyword_0_1; }
		
		//=> to=Number
		public Assignment getToAssignment_0_2() { return cToAssignment_0_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_0_2_0() { return cToNumberParserRuleCall_0_2_0; }
		
		//number=Number
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0() { return cNumberNumberParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_3_0() { return cBooleanAlternatives_3_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_3_0_0() { return cBooleanTrueKeyword_3_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_3_0_1() { return cBooleanFalseKeyword_3_0_1; }
		
		//id=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }
		
		//comma?=','
		public Assignment getCommaAssignment_5() { return cCommaAssignment_5; }
		
		//','
		public Keyword getCommaCommaKeyword_5_0() { return cCommaCommaKeyword_5_0; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntriesMapEntryParserRuleCall_2_0_0 = (RuleCall)cEntriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntriesMapEntryParserRuleCall_2_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Map:
		//    {Map} '{' (entries+=MapEntry (=> (',')? entries+=MapEntry)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Map} '{' (entries+=MapEntry (=> (',')? entries+=MapEntry)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Map}
		public Action getMapAction_0() { return cMapAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(entries+=MapEntry (=> (',')? entries+=MapEntry)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entries+=MapEntry
		public Assignment getEntriesAssignment_2_0() { return cEntriesAssignment_2_0; }
		
		//MapEntry
		public RuleCall getEntriesMapEntryParserRuleCall_2_0_0() { return cEntriesMapEntryParserRuleCall_2_0_0; }
		
		//(=> (',')? entries+=MapEntry)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//=> (',')?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_1_0_0() { return cCommaKeyword_2_1_0_0; }
		
		//entries+=MapEntry
		public Assignment getEntriesAssignment_2_1_1() { return cEntriesAssignment_2_1_1; }
		
		//MapEntry
		public RuleCall getEntriesMapEntryParserRuleCall_2_1_1_0() { return cEntriesMapEntryParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.MapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassifierClassifierRHSWithIdNoSetParserRuleCall_0_0 = (RuleCall)cClassifierAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueWithIdAndConceptParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MapEntry:
		//    // must remove 'in (...)' from classifiers to avoid conflict with observable units, which are more necessary.
		//    classifier=ClassifierRHSWithIdNoSet ':' value=ValueWithIdAndConcept
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// must remove 'in (...)' from classifiers to avoid conflict with observable units, which are more necessary.
		//classifier=ClassifierRHSWithIdNoSet ':' value=ValueWithIdAndConcept
		public Group getGroup() { return cGroup; }
		
		//// must remove 'in (...)' from classifiers to avoid conflict with observable units, which are more necessary.
		//classifier=ClassifierRHSWithIdNoSet
		public Assignment getClassifierAssignment_0() { return cClassifierAssignment_0; }
		
		//ClassifierRHSWithIdNoSet
		public RuleCall getClassifierClassifierRHSWithIdNoSetParserRuleCall_0_0() { return cClassifierClassifierRHSWithIdNoSetParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ValueWithIdAndConcept
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ValueWithIdAndConcept
		public RuleCall getValueValueWithIdAndConceptParserRuleCall_2_0() { return cValueValueWithIdAndConceptParserRuleCall_2_0; }
	}
	public class DocSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.DocSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdPropertyIdParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOnKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cDefinitionAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cDefinitionDefinitionKeyword_1_1_0_0 = (Keyword)cDefinitionAssignment_1_1_0.eContents().get(0);
		private final Assignment cInitializationAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cInitializationInitializationKeyword_1_1_1_0 = (Keyword)cInitializationAssignment_1_1_1.eContents().get(0);
		private final Assignment cTerminationAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cTerminationTerminationKeyword_1_1_2_0 = (Keyword)cTerminationAssignment_1_1_2.eContents().get(0);
		private final Assignment cTransitionAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final Keyword cTransitionTransitionKeyword_1_1_3_0 = (Keyword)cTransitionAssignment_1_1_3.eContents().get(0);
		
		//DocSelector:
		//    id=PropertyId |
		//    'on' (
		//        definition?='definition' |
		//        initialization?='initialization' |
		//        termination?='termination' |
		//        transition?='transition'
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=PropertyId |
		//'on' (
		//    definition?='definition' |
		//    initialization?='initialization' |
		//    termination?='termination' |
		//    transition?='transition'
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=PropertyId
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//PropertyId
		public RuleCall getIdPropertyIdParserRuleCall_0_0() { return cIdPropertyIdParserRuleCall_0_0; }
		
		//'on' (
		//    definition?='definition' |
		//    initialization?='initialization' |
		//    termination?='termination' |
		//    transition?='transition'
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//'on'
		public Keyword getOnKeyword_1_0() { return cOnKeyword_1_0; }
		
		//(
		//       definition?='definition' |
		//       initialization?='initialization' |
		//       termination?='termination' |
		//       transition?='transition'
		//   )
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//definition?='definition'
		public Assignment getDefinitionAssignment_1_1_0() { return cDefinitionAssignment_1_1_0; }
		
		//'definition'
		public Keyword getDefinitionDefinitionKeyword_1_1_0_0() { return cDefinitionDefinitionKeyword_1_1_0_0; }
		
		//initialization?='initialization'
		public Assignment getInitializationAssignment_1_1_1() { return cInitializationAssignment_1_1_1; }
		
		//'initialization'
		public Keyword getInitializationInitializationKeyword_1_1_1_0() { return cInitializationInitializationKeyword_1_1_1_0; }
		
		//termination?='termination'
		public Assignment getTerminationAssignment_1_1_2() { return cTerminationAssignment_1_1_2; }
		
		//'termination'
		public Keyword getTerminationTerminationKeyword_1_1_2_0() { return cTerminationTerminationKeyword_1_1_2_0; }
		
		//transition?='transition'
		public Assignment getTransitionAssignment_1_1_3() { return cTransitionAssignment_1_1_3; }
		
		//'transition'
		public Keyword getTransitionTransitionKeyword_1_1_3_0() { return cTransitionTransitionKeyword_1_1_3_0; }
	}
	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.KeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNamePathNameParserRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameValueKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cInteractiveAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cInteractiveQuestionMarkEqualsSignKeyword_1_0_0 = (Keyword)cInteractiveAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueWithIdAndConceptParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//KeyValuePair:
		//    name=(PathName | LOWERCASE_ID | 'value') (interactive?='?=' | '=') value=ValueWithIdAndConcept;
		@Override public ParserRule getRule() { return rule; }
		
		//name=(PathName | LOWERCASE_ID | 'value') (interactive?='?=' | '=') value=ValueWithIdAndConcept
		public Group getGroup() { return cGroup; }
		
		//name=(PathName | LOWERCASE_ID | 'value')
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(PathName | LOWERCASE_ID | 'value')
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_0_0_0() { return cNamePathNameParserRuleCall_0_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_0_0_1() { return cNameLOWERCASE_IDTerminalRuleCall_0_0_1; }
		
		//'value'
		public Keyword getNameValueKeyword_0_0_2() { return cNameValueKeyword_0_0_2; }
		
		//(interactive?='?=' | '=')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//interactive?='?='
		public Assignment getInteractiveAssignment_1_0() { return cInteractiveAssignment_1_0; }
		
		//'?='
		public Keyword getInteractiveQuestionMarkEqualsSignKeyword_1_0_0() { return cInteractiveQuestionMarkEqualsSignKeyword_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//value=ValueWithIdAndConcept
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ValueWithIdAndConcept
		public RuleCall getValueValueWithIdAndConceptParserRuleCall_2_0() { return cValueValueWithIdAndConceptParserRuleCall_2_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ParameterList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPairsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPairsKeyValuePairParserRuleCall_0_0_0 = (RuleCall)cPairsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cPairsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cPairsKeyValuePairParserRuleCall_0_1_1_0 = (RuleCall)cPairsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSingleValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSingleValueValueWithIdAndConceptParserRuleCall_1_0_0 = (RuleCall)cSingleValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cSingleValueAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cSingleValueValueWithIdAndConceptParserRuleCall_1_1_1_0_0 = (RuleCall)cSingleValueAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cPairsAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cPairsKeyValuePairParserRuleCall_1_1_1_1_0 = (RuleCall)cPairsAssignment_1_1_1_1.eContents().get(0);
		
		//ParameterList:
		//    pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)* |
		//    singleValue+=ValueWithIdAndConcept (=> ',' (singleValue+=ValueWithIdAndConcept | pairs+=KeyValuePair))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)* |
		//singleValue+=ValueWithIdAndConcept (=> ',' (singleValue+=ValueWithIdAndConcept | pairs+=KeyValuePair))*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*
		public Group getGroup_0() { return cGroup_0; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_0_0() { return cPairsAssignment_0_0; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_0_0_0() { return cPairsKeyValuePairParserRuleCall_0_0_0; }
		
		//(=> ',' pairs+=KeyValuePair)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//=> ','
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_0_1_1() { return cPairsAssignment_0_1_1; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_0_1_1_0() { return cPairsKeyValuePairParserRuleCall_0_1_1_0; }
		
		//singleValue+=ValueWithIdAndConcept (=> ',' (singleValue+=ValueWithIdAndConcept | pairs+=KeyValuePair))*
		public Group getGroup_1() { return cGroup_1; }
		
		//singleValue+=ValueWithIdAndConcept
		public Assignment getSingleValueAssignment_1_0() { return cSingleValueAssignment_1_0; }
		
		//ValueWithIdAndConcept
		public RuleCall getSingleValueValueWithIdAndConceptParserRuleCall_1_0_0() { return cSingleValueValueWithIdAndConceptParserRuleCall_1_0_0; }
		
		//(=> ',' (singleValue+=ValueWithIdAndConcept | pairs+=KeyValuePair))*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=> ','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//(singleValue+=ValueWithIdAndConcept | pairs+=KeyValuePair)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//singleValue+=ValueWithIdAndConcept
		public Assignment getSingleValueAssignment_1_1_1_0() { return cSingleValueAssignment_1_1_1_0; }
		
		//ValueWithIdAndConcept
		public RuleCall getSingleValueValueWithIdAndConceptParserRuleCall_1_1_1_0_0() { return cSingleValueValueWithIdAndConceptParserRuleCall_1_1_1_0_0; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_1_1_1_1() { return cPairsAssignment_1_1_1_1; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_1_1_1_1_0() { return cPairsKeyValuePairParserRuleCall_1_1_1_1_0; }
	}
	public class ValueWithIdAndConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ValueWithIdAndConcept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMapAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMapMapParserRuleCall_0_0 = (RuleCall)cMapAssignment_0.eContents().get(0);
		private final Assignment cConceptAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConceptSimpleObservableSemanticsParserRuleCall_1_0 = (RuleCall)cConceptAssignment_1.eContents().get(0);
		private final Assignment cFunctionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionFunctionParserRuleCall_2_0 = (RuleCall)cFunctionAssignment_2.eContents().get(0);
		private final Assignment cDateAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDateDateParserRuleCall_3_0 = (RuleCall)cDateAssignment_3.eContents().get(0);
		private final Assignment cLiteralAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cLiteralLiteralParserRuleCall_4_0 = (RuleCall)cLiteralAssignment_4.eContents().get(0);
		private final Assignment cExprAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cExprEXPRTerminalRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Assignment cTemplatevarAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cTemplatevarTEMPLATE_VARTerminalRuleCall_6_0 = (RuleCall)cTemplatevarAssignment_6.eContents().get(0);
		private final Assignment cIdAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Alternatives cIdAlternatives_7_0 = (Alternatives)cIdAssignment_7.eContents().get(0);
		private final RuleCall cIdPathNameParserRuleCall_7_0_0 = (RuleCall)cIdAlternatives_7_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_7_0_1 = (RuleCall)cIdAlternatives_7_0.eContents().get(1);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_7_0_2 = (RuleCall)cIdAlternatives_7_0.eContents().get(2);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_7_0_3 = (RuleCall)cIdAlternatives_7_0.eContents().get(3);
		private final Assignment cTableAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cTableLookupTableParserRuleCall_8_0 = (RuleCall)cTableAssignment_8.eContents().get(0);
		private final Assignment cListAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cListListParserRuleCall_9_0 = (RuleCall)cListAssignment_9.eContents().get(0);
		private final Assignment cQuantityAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cQuantityQuantityParserRuleCall_10_0 = (RuleCall)cQuantityAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cOpAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_11_0_0 = (RuleCall)cOpAssignment_11_0.eContents().get(0);
		private final Assignment cExpressionAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_11_1_0 = (RuleCall)cExpressionAssignment_11_1.eContents().get(0);
		private final Assignment cNullAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cNullUnknownKeyword_12_0 = (Keyword)cNullAssignment_12.eContents().get(0);
		
		//ValueWithIdAndConcept returns Value:
		//    map=Map |
		//    concept=SimpleObservableSemantics |
		//    function=Function |
		//    date=Date |
		//    literal=Literal |
		//    expr=EXPR |
		//    templatevar=TEMPLATE_VAR |
		//    id=(PathName|LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
		//    table=LookupTable |
		//    list=List |
		//    quantity=Quantity |
		//    op=REL_OPERATOR expression=Number |
		//    null?='unknown';
		@Override public ParserRule getRule() { return rule; }
		
		//map=Map |
		//concept=SimpleObservableSemantics |
		//function=Function |
		//date=Date |
		//literal=Literal |
		//expr=EXPR |
		//templatevar=TEMPLATE_VAR |
		//id=(PathName|LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
		//table=LookupTable |
		//list=List |
		//quantity=Quantity |
		//op=REL_OPERATOR expression=Number |
		//null?='unknown'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//map=Map
		public Assignment getMapAssignment_0() { return cMapAssignment_0; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_0_0() { return cMapMapParserRuleCall_0_0; }
		
		//concept=SimpleObservableSemantics
		public Assignment getConceptAssignment_1() { return cConceptAssignment_1; }
		
		//SimpleObservableSemantics
		public RuleCall getConceptSimpleObservableSemanticsParserRuleCall_1_0() { return cConceptSimpleObservableSemanticsParserRuleCall_1_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_2() { return cFunctionAssignment_2; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_2_0() { return cFunctionFunctionParserRuleCall_2_0; }
		
		//date=Date
		public Assignment getDateAssignment_3() { return cDateAssignment_3; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_3_0() { return cDateDateParserRuleCall_3_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_4() { return cLiteralAssignment_4; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_4_0() { return cLiteralLiteralParserRuleCall_4_0; }
		
		//expr=EXPR
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_5_0() { return cExprEXPRTerminalRuleCall_5_0; }
		
		//templatevar=TEMPLATE_VAR
		public Assignment getTemplatevarAssignment_6() { return cTemplatevarAssignment_6; }
		
		//TEMPLATE_VAR
		public RuleCall getTemplatevarTEMPLATE_VARTerminalRuleCall_6_0() { return cTemplatevarTEMPLATE_VARTerminalRuleCall_6_0; }
		
		//id=(PathName|LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Assignment getIdAssignment_7() { return cIdAssignment_7; }
		
		//(PathName|LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Alternatives getIdAlternatives_7_0() { return cIdAlternatives_7_0; }
		
		//PathName
		public RuleCall getIdPathNameParserRuleCall_7_0_0() { return cIdPathNameParserRuleCall_7_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_7_0_1() { return cIdLOWERCASE_IDTerminalRuleCall_7_0_1; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_7_0_2() { return cIdUPPERCASE_IDTerminalRuleCall_7_0_2; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_7_0_3() { return cIdCAMELCASE_IDTerminalRuleCall_7_0_3; }
		
		//table=LookupTable
		public Assignment getTableAssignment_8() { return cTableAssignment_8; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_8_0() { return cTableLookupTableParserRuleCall_8_0; }
		
		//list=List
		public Assignment getListAssignment_9() { return cListAssignment_9; }
		
		//List
		public RuleCall getListListParserRuleCall_9_0() { return cListListParserRuleCall_9_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_10() { return cQuantityAssignment_10; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_10_0() { return cQuantityQuantityParserRuleCall_10_0; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_11() { return cGroup_11; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_11_0() { return cOpAssignment_11_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_11_0_0() { return cOpREL_OPERATORParserRuleCall_11_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_11_1() { return cExpressionAssignment_11_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_11_1_0() { return cExpressionNumberParserRuleCall_11_1_0; }
		
		//null?='unknown'
		public Assignment getNullAssignment_12() { return cNullAssignment_12; }
		
		//'unknown'
		public Keyword getNullUnknownKeyword_12_0() { return cNullUnknownKeyword_12_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralOrIdOrCommaParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprEXPRTerminalRuleCall_2_0_0 = (RuleCall)cExprAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cInKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLanguageAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLanguageUPPERCASE_IDTerminalRuleCall_2_1_1_0 = (RuleCall)cLanguageAssignment_2_1_1.eContents().get(0);
		private final Assignment cIdAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cIdAlternatives_3_0 = (Alternatives)cIdAssignment_3.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_3_0_0 = (RuleCall)cIdAlternatives_3_0.eContents().get(0);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_3_0_1 = (RuleCall)cIdAlternatives_3_0.eContents().get(1);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_3_0_2 = (RuleCall)cIdAlternatives_3_0.eContents().get(2);
		private final Assignment cListAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cListListParserRuleCall_4_0 = (RuleCall)cListAssignment_4.eContents().get(0);
		private final Assignment cTableAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cTableLookupTableParserRuleCall_5_0 = (RuleCall)cTableAssignment_5.eContents().get(0);
		private final Assignment cQuantityAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cQuantityQuantityParserRuleCall_6_0 = (RuleCall)cQuantityAssignment_6.eContents().get(0);
		private final Assignment cDateAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cDateDateParserRuleCall_7_0 = (RuleCall)cDateAssignment_7.eContents().get(0);
		private final Assignment cMapAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cMapMapParserRuleCall_8_0 = (RuleCall)cMapAssignment_8.eContents().get(0);
		private final Assignment cNullAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cNullUnknownKeyword_9_0 = (Keyword)cNullAssignment_9.eContents().get(0);
		
		//Value:
		//    literal=LiteralOrIdOrComma |
		//    function=Function |
		//    expr=EXPR ('in' language=UPPERCASE_ID)? |
		//    id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
		//    list=List |
		//    table=LookupTable |
		//    quantity=Quantity |
		//    date=Date |
		//    map=Map |
		//    null?='unknown';
		@Override public ParserRule getRule() { return rule; }
		
		//literal=LiteralOrIdOrComma |
		//function=Function |
		//expr=EXPR ('in' language=UPPERCASE_ID)? |
		//id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
		//list=List |
		//table=LookupTable |
		//quantity=Quantity |
		//date=Date |
		//map=Map |
		//null?='unknown'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal=LiteralOrIdOrComma
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }
		
		//LiteralOrIdOrComma
		public RuleCall getLiteralLiteralOrIdOrCommaParserRuleCall_0_0() { return cLiteralLiteralOrIdOrCommaParserRuleCall_0_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }
		
		//expr=EXPR ('in' language=UPPERCASE_ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//expr=EXPR
		public Assignment getExprAssignment_2_0() { return cExprAssignment_2_0; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_2_0_0() { return cExprEXPRTerminalRuleCall_2_0_0; }
		
		//('in' language=UPPERCASE_ID)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'in'
		public Keyword getInKeyword_2_1_0() { return cInKeyword_2_1_0; }
		
		//language=UPPERCASE_ID
		public Assignment getLanguageAssignment_2_1_1() { return cLanguageAssignment_2_1_1; }
		
		//UPPERCASE_ID
		public RuleCall getLanguageUPPERCASE_IDTerminalRuleCall_2_1_1_0() { return cLanguageUPPERCASE_IDTerminalRuleCall_2_1_1_0; }
		
		//id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Alternatives getIdAlternatives_3_0() { return cIdAlternatives_3_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_3_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_3_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_3_0_1() { return cIdUPPERCASE_IDTerminalRuleCall_3_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_3_0_2() { return cIdCAMELCASE_IDTerminalRuleCall_3_0_2; }
		
		//list=List
		public Assignment getListAssignment_4() { return cListAssignment_4; }
		
		//List
		public RuleCall getListListParserRuleCall_4_0() { return cListListParserRuleCall_4_0; }
		
		//table=LookupTable
		public Assignment getTableAssignment_5() { return cTableAssignment_5; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_5_0() { return cTableLookupTableParserRuleCall_5_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_6() { return cQuantityAssignment_6; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_6_0() { return cQuantityQuantityParserRuleCall_6_0; }
		
		//date=Date
		public Assignment getDateAssignment_7() { return cDateAssignment_7; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_7_0() { return cDateDateParserRuleCall_7_0; }
		
		//map=Map
		public Assignment getMapAssignment_8() { return cMapAssignment_8; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_8_0() { return cMapMapParserRuleCall_8_0; }
		
		//null?='unknown'
		public Assignment getNullAssignment_9() { return cNullAssignment_9; }
		
		//'unknown'
		public Keyword getNullUnknownKeyword_9_0() { return cNullUnknownKeyword_9_0; }
	}
	public class LiteralValueWithConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LiteralValueWithConcept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cConceptAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_1_0 = (RuleCall)cConceptAssignment_1.eContents().get(0);
		private final Assignment cFunctionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionFunctionParserRuleCall_2_0 = (RuleCall)cFunctionAssignment_2.eContents().get(0);
		private final Assignment cExprAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cExprEXPRTerminalRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Assignment cQuantityAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cQuantityQuantityParserRuleCall_4_0 = (RuleCall)cQuantityAssignment_4.eContents().get(0);
		private final Assignment cDateAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cDateDateParserRuleCall_5_0 = (RuleCall)cDateAssignment_5.eContents().get(0);
		private final Assignment cIdAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Alternatives cIdAlternatives_6_0 = (Alternatives)cIdAssignment_6.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_6_0_0 = (RuleCall)cIdAlternatives_6_0.eContents().get(0);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_6_0_1 = (RuleCall)cIdAlternatives_6_0.eContents().get(1);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_6_0_2 = (RuleCall)cIdAlternatives_6_0.eContents().get(2);
		
		//// value for 'value as observable' idioms
		//LiteralValueWithConcept returns Value:
		//    literal=Literal |
		//    concept=ConceptDeclaration |
		//    function=Function |
		//    expr=EXPR |
		//    quantity=Quantity |
		//    date=Date |
		//    id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) /* |
		//    list=List |
		//    table=LookupTable |
		//    map=Map */;
		@Override public ParserRule getRule() { return rule; }
		
		//literal=Literal |
		//concept=ConceptDeclaration |
		//function=Function |
		//expr=EXPR |
		//quantity=Quantity |
		//date=Date |
		//id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_1() { return cConceptAssignment_1; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_1_0() { return cConceptConceptDeclarationParserRuleCall_1_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_2() { return cFunctionAssignment_2; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_2_0() { return cFunctionFunctionParserRuleCall_2_0; }
		
		//expr=EXPR
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_3_0() { return cExprEXPRTerminalRuleCall_3_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_4() { return cQuantityAssignment_4; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_4_0() { return cQuantityQuantityParserRuleCall_4_0; }
		
		//date=Date
		public Assignment getDateAssignment_5() { return cDateAssignment_5; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_5_0() { return cDateDateParserRuleCall_5_0; }
		
		//id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Assignment getIdAssignment_6() { return cIdAssignment_6; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID)
		public Alternatives getIdAlternatives_6_0() { return cIdAlternatives_6_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_6_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_6_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_6_0_1() { return cIdUPPERCASE_IDTerminalRuleCall_6_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_6_0_2() { return cIdCAMELCASE_IDTerminalRuleCall_6_0_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePathNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Function:
		//    name=PathName '(' parameters=ParameterList? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=PathName '(' parameters=ParameterList? ')'
		public Group getGroup() { return cGroup; }
		
		//name=PathName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_0_0() { return cNamePathNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyOPTION_KEYTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueWithIdAndConceptParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		////enum DataType:
		////    TEXT='text' |
		////    INTEGER='integer' |
		////    FLOAT='float' |
		////    BOOLEAN='boolean' |
		////    DATE='date';
		//Option:
		//    key=OPTION_KEY value=ValueWithIdAndConcept
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key=OPTION_KEY value=ValueWithIdAndConcept
		public Group getGroup() { return cGroup; }
		
		//key=OPTION_KEY
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//OPTION_KEY
		public RuleCall getKeyOPTION_KEYTerminalRuleCall_0_0() { return cKeyOPTION_KEYTerminalRuleCall_0_0; }
		
		//value=ValueWithIdAndConcept
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ValueWithIdAndConcept
		public RuleCall getValueValueWithIdAndConceptParserRuleCall_1_0() { return cValueValueWithIdAndConceptParserRuleCall_1_0; }
	}
	public class CONCEPT_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.CONCEPT_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cQualityKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cDECLARABLE_TYPEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////RESOLUTION_EXCEPTION:
		////    'error' |
		////    'nodata' |
		////    'missing'
		////;
		///**
		// * Carefully selected keywords to define a concept, which enable automatic definition of
		// * fairly complex semantics and validation against upper ontologies. For now implement
		// * physical properties, value concepts and basic agent types re: DOLCE types.
		// *
		// * A similar thing could be done for properties
		// *
		// * This is a lot of keywords, although it's probably good to protect these names from
		// * being used as identifiers in anything.
		// */
		//CONCEPT_TYPE:
		//    'quality' |
		//    DECLARABLE_TYPE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'quality' |
		//DECLARABLE_TYPE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'quality'
		public Keyword getQualityKeyword_0() { return cQualityKeyword_0; }
		
		//DECLARABLE_TYPE
		public RuleCall getDECLARABLE_TYPEParserRuleCall_1() { return cDECLARABLE_TYPEParserRuleCall_1; }
	}
	public class DECLARABLE_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.DECLARABLE_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cQuantityKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cConfigurationKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRelationshipKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBondKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExtentKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final RuleCall cEXTENSIVE_PROPERTYParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cINTENSIVE_PROPERTYParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAGENT_TYPEParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTRAITParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//DECLARABLE_TYPE:
		//    'class' |
		//    'quantity' |
		//    'configuration' |
		//    'relationship' |
		//    'bond' |
		//    'extent' |
		//    EXTENSIVE_PROPERTY |
		//    INTENSIVE_PROPERTY |
		//    AGENT_TYPE |
		//    TRAIT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'class' |
		//'quantity' |
		//'configuration' |
		//'relationship' |
		//'bond' |
		//'extent' |
		//EXTENSIVE_PROPERTY |
		//INTENSIVE_PROPERTY |
		//AGENT_TYPE |
		//TRAIT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//'quantity'
		public Keyword getQuantityKeyword_1() { return cQuantityKeyword_1; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_2() { return cConfigurationKeyword_2; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_3() { return cRelationshipKeyword_3; }
		
		//'bond'
		public Keyword getBondKeyword_4() { return cBondKeyword_4; }
		
		//'extent'
		public Keyword getExtentKeyword_5() { return cExtentKeyword_5; }
		
		//EXTENSIVE_PROPERTY
		public RuleCall getEXTENSIVE_PROPERTYParserRuleCall_6() { return cEXTENSIVE_PROPERTYParserRuleCall_6; }
		
		//INTENSIVE_PROPERTY
		public RuleCall getINTENSIVE_PROPERTYParserRuleCall_7() { return cINTENSIVE_PROPERTYParserRuleCall_7; }
		
		//AGENT_TYPE
		public RuleCall getAGENT_TYPEParserRuleCall_8() { return cAGENT_TYPEParserRuleCall_8; }
		
		//TRAIT
		public RuleCall getTRAITParserRuleCall_9() { return cTRAITParserRuleCall_9; }
	}
	public class TRAITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.TRAIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOrderingKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIdentityKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRoleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRealmKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDomainKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//TRAIT:
		//    'ordering' |
		//    'attribute' |
		//    'identity' |
		//    'role' |
		//    'realm' |
		//    'domain';
		@Override public ParserRule getRule() { return rule; }
		
		//'ordering' |
		//'attribute' |
		//'identity' |
		//'role' |
		//'realm' |
		//'domain'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ordering'
		public Keyword getOrderingKeyword_0() { return cOrderingKeyword_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//'identity'
		public Keyword getIdentityKeyword_2() { return cIdentityKeyword_2; }
		
		//'role'
		public Keyword getRoleKeyword_3() { return cRoleKeyword_3; }
		
		//'realm'
		public Keyword getRealmKeyword_4() { return cRealmKeyword_4; }
		
		//'domain'
		public Keyword getDomainKeyword_5() { return cDomainKeyword_5; }
	}
	public class EXTENSIVE_PROPERTYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.EXTENSIVE_PROPERTY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmountKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMassKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVolumeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cWeightKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMoneyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDurationKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAreaKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//EXTENSIVE_PROPERTY:
		//    'amount' |
		//    'length' |
		//    'mass' |
		//    'volume' |
		//    'weight' |
		//    'money' |
		//    'duration' |
		//    'area';
		@Override public ParserRule getRule() { return rule; }
		
		//'amount' |
		//'length' |
		//'mass' |
		//'volume' |
		//'weight' |
		//'money' |
		//'duration' |
		//'area'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'amount'
		public Keyword getAmountKeyword_0() { return cAmountKeyword_0; }
		
		//'length'
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//'mass'
		public Keyword getMassKeyword_2() { return cMassKeyword_2; }
		
		//'volume'
		public Keyword getVolumeKeyword_3() { return cVolumeKeyword_3; }
		
		//'weight'
		public Keyword getWeightKeyword_4() { return cWeightKeyword_4; }
		
		//'money'
		public Keyword getMoneyKeyword_5() { return cMoneyKeyword_5; }
		
		//'duration'
		public Keyword getDurationKeyword_6() { return cDurationKeyword_6; }
		
		//'area'
		public Keyword getAreaKeyword_7() { return cAreaKeyword_7; }
	}
	public class INTENSIVE_PROPERTYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.INTENSIVE_PROPERTY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAccelerationKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEnergyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEntropyKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPriorityKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cElectricPotentialKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cChargeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cResistanceKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cResistivityKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cPressureKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAngleKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cVelocityKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cTemperatureKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cViscosityKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//INTENSIVE_PROPERTY:
		//    'acceleration' |
		//    'energy' |
		//    'entropy' |
		//    'priority' |
		//    'electric-potential' |
		//    'charge' |
		//    'resistance' |
		//    'resistivity' |
		//    'pressure' |
		//    'angle' |
		//    'velocity' |
		//    'temperature' |
		//    'viscosity';
		@Override public ParserRule getRule() { return rule; }
		
		//'acceleration' |
		//'energy' |
		//'entropy' |
		//'priority' |
		//'electric-potential' |
		//'charge' |
		//'resistance' |
		//'resistivity' |
		//'pressure' |
		//'angle' |
		//'velocity' |
		//'temperature' |
		//'viscosity'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'acceleration'
		public Keyword getAccelerationKeyword_0() { return cAccelerationKeyword_0; }
		
		//'energy'
		public Keyword getEnergyKeyword_1() { return cEnergyKeyword_1; }
		
		//'entropy'
		public Keyword getEntropyKeyword_2() { return cEntropyKeyword_2; }
		
		//'priority'
		public Keyword getPriorityKeyword_3() { return cPriorityKeyword_3; }
		
		//'electric-potential'
		public Keyword getElectricPotentialKeyword_4() { return cElectricPotentialKeyword_4; }
		
		//'charge'
		public Keyword getChargeKeyword_5() { return cChargeKeyword_5; }
		
		//'resistance'
		public Keyword getResistanceKeyword_6() { return cResistanceKeyword_6; }
		
		//'resistivity'
		public Keyword getResistivityKeyword_7() { return cResistivityKeyword_7; }
		
		//'pressure'
		public Keyword getPressureKeyword_8() { return cPressureKeyword_8; }
		
		//'angle'
		public Keyword getAngleKeyword_9() { return cAngleKeyword_9; }
		
		//'velocity'
		public Keyword getVelocityKeyword_10() { return cVelocityKeyword_10; }
		
		//'temperature'
		public Keyword getTemperatureKeyword_11() { return cTemperatureKeyword_11; }
		
		//'viscosity'
		public Keyword getViscosityKeyword_12() { return cViscosityKeyword_12; }
	}
	public class AGENT_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.AGENT_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cThingKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cProcessKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAgentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEventKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//AGENT_TYPE:
		//    'thing' |
		//    'process' |
		//    'agent' |
		//    'event';
		@Override public ParserRule getRule() { return rule; }
		
		//'thing' |
		//'process' |
		//'agent' |
		//'event'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'thing'
		public Keyword getThingKeyword_0() { return cThingKeyword_0; }
		
		//'process'
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }
		
		//'agent'
		public Keyword getAgentKeyword_2() { return cAgentKeyword_2; }
		
		//'event'
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }
	}
	public class PROPERTY_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.PROPERTY_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFunctionalKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStructuralKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PROPERTY_TYPE:
		//    'functional' |
		//    'structural';
		@Override public ParserRule getRule() { return rule; }
		
		//'functional' |
		//'structural'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'functional'
		public Keyword getFunctionalKeyword_0() { return cFunctionalKeyword_0; }
		
		//'structural'
		public Keyword getStructuralKeyword_1() { return cStructuralKeyword_1; }
	}
	public class DependencyObservableSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.DependencyObservableSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValueLiteralValueWithConceptParserRuleCall_0_0_0 = (RuleCall)cValueAssignment_0_0.eContents().get(0);
		private final Keyword cAsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cGenericAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cGenericAnyKeyword_1_0 = (Keyword)cGenericAssignment_1.eContents().get(0);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cAccordingKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cToKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cAccordingToAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cAccordingToPropertyIdParserRuleCall_3_0_2_0 = (RuleCall)cAccordingToAssignment_3_0_2.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cUnorderedGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cInKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_0_1 = (Alternatives)cGroup_3_1_0.eContents().get(1);
		private final Assignment cUnitAssignment_3_1_0_1_0 = (Assignment)cAlternatives_3_1_0_1.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_3_1_0_1_0_0 = (RuleCall)cUnitAssignment_3_1_0_1_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_3_1_0_1_1 = (Assignment)cAlternatives_3_1_0_1.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_3_1_0_1_1_0 = (RuleCall)cCurrencyAssignment_3_1_0_1_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Keyword cPerKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_3_1_1_1_0 = (RuleCall)cUnitAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Assignment cFromAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_3_2_0_0 = (RuleCall)cFromAssignment_3_2_0.eContents().get(0);
		private final Keyword cToKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cToAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_3_2_2_0 = (RuleCall)cToAssignment_3_2_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Assignment cValueOperatorsAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_3_3_0_0 = (RuleCall)cValueOperatorsAssignment_3_3_0.eContents().get(0);
		private final Assignment cValueOperatorsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_3_3_1_0 = (RuleCall)cValueOperatorsAssignment_3_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_4 = (Alternatives)cUnorderedGroup_3.eContents().get(4);
		private final Assignment cOptionalAssignment_3_4_0 = (Assignment)cAlternatives_3_4.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_3_4_0_0 = (Keyword)cOptionalAssignment_3_4_0.eContents().get(0);
		private final Keyword cRequiredKeyword_3_4_1 = (Keyword)cAlternatives_3_4.eContents().get(1);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cNamedKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cNameAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final Alternatives cNameAlternatives_3_5_1_0 = (Alternatives)cNameAssignment_3_5_1.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_3_5_1_0_0 = (RuleCall)cNameAlternatives_3_5_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_5_1_0_1 = (RuleCall)cNameAlternatives_3_5_1_0.eContents().get(1);
		
		///*
		// * Full observable without the 'as <role>' but with 'optional'
		// */
		//DependencyObservableSemantics returns ObservableSemantics:
		//    (value=LiteralValueWithConcept 'as')?
		//    (generic?='any')?
		//    declaration=ConceptDeclaration
		//    (
		//        ('according' 'to' accordingTo=PropertyId)? &
		//        (
		//            ('in' (unit=Unit | currency=Currency)) |
		//            ('per' unit=Unit)
		//        )? &
		//        (from=Number 'to' to=Number)? &
		//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//    (value=LiteralValueWithConcept 'as')?
		//    (generic?='any')?
		//    declaration=ConceptDeclaration
		//    (
		//        ('according' 'to' accordingTo=PropertyId)? &
		//        (
		//            ('in' (unit=Unit | currency=Currency)) |
		//            ('per' unit=Unit)
		//        )? &
		//        (from=Number 'to' to=Number)? &
		//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		//    )
		public Group getGroup() { return cGroup; }
		
		//(value=LiteralValueWithConcept 'as')?
		public Group getGroup_0() { return cGroup_0; }
		
		//value=LiteralValueWithConcept
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }
		
		//LiteralValueWithConcept
		public RuleCall getValueLiteralValueWithConceptParserRuleCall_0_0_0() { return cValueLiteralValueWithConceptParserRuleCall_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_0_1() { return cAsKeyword_0_1; }
		
		//(generic?='any')?
		public Assignment getGenericAssignment_1() { return cGenericAssignment_1; }
		
		//'any'
		public Keyword getGenericAnyKeyword_1_0() { return cGenericAnyKeyword_1_0; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_2_0() { return cDeclarationConceptDeclarationParserRuleCall_2_0; }
		
		//    (
		//        ('according' 'to' accordingTo=PropertyId)? &
		//        (
		//            ('in' (unit=Unit | currency=Currency)) |
		//            ('per' unit=Unit)
		//        )? &
		//        (from=Number 'to' to=Number)? &
		//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (optional?='optional'| 'required')? &
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		//    )
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('according' 'to' accordingTo=PropertyId)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'according'
		public Keyword getAccordingKeyword_3_0_0() { return cAccordingKeyword_3_0_0; }
		
		//'to'
		public Keyword getToKeyword_3_0_1() { return cToKeyword_3_0_1; }
		
		//accordingTo=PropertyId
		public Assignment getAccordingToAssignment_3_0_2() { return cAccordingToAssignment_3_0_2; }
		
		//PropertyId
		public RuleCall getAccordingToPropertyIdParserRuleCall_3_0_2_0() { return cAccordingToPropertyIdParserRuleCall_3_0_2_0; }
		
		//(
		//    ('in' (unit=Unit | currency=Currency)) |
		//    ('per' unit=Unit)
		//)?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//('in' (unit=Unit | currency=Currency))
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'in'
		public Keyword getInKeyword_3_1_0_0() { return cInKeyword_3_1_0_0; }
		
		//(unit=Unit | currency=Currency)
		public Alternatives getAlternatives_3_1_0_1() { return cAlternatives_3_1_0_1; }
		
		//unit=Unit
		public Assignment getUnitAssignment_3_1_0_1_0() { return cUnitAssignment_3_1_0_1_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_1_0_1_0_0() { return cUnitUnitParserRuleCall_3_1_0_1_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_3_1_0_1_1() { return cCurrencyAssignment_3_1_0_1_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_3_1_0_1_1_0() { return cCurrencyCurrencyParserRuleCall_3_1_0_1_1_0; }
		
		//('per' unit=Unit)
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//'per'
		public Keyword getPerKeyword_3_1_1_0() { return cPerKeyword_3_1_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_3_1_1_1() { return cUnitAssignment_3_1_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_1_1_1_0() { return cUnitUnitParserRuleCall_3_1_1_1_0; }
		
		//(from=Number 'to' to=Number)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//from=Number
		public Assignment getFromAssignment_3_2_0() { return cFromAssignment_3_2_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_3_2_0_0() { return cFromNumberParserRuleCall_3_2_0_0; }
		
		//'to'
		public Keyword getToKeyword_3_2_1() { return cToKeyword_3_2_1; }
		
		//to=Number
		public Assignment getToAssignment_3_2_2() { return cToAssignment_3_2_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_3_2_2_0() { return cToNumberParserRuleCall_3_2_2_0; }
		
		//(valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//valueOperators+=ValueOperator
		public Assignment getValueOperatorsAssignment_3_3_0() { return cValueOperatorsAssignment_3_3_0; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_3_3_0_0() { return cValueOperatorsValueOperatorParserRuleCall_3_3_0_0; }
		
		//(valueOperators+=ValueOperator)*
		public Assignment getValueOperatorsAssignment_3_3_1() { return cValueOperatorsAssignment_3_3_1; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_3_3_1_0() { return cValueOperatorsValueOperatorParserRuleCall_3_3_1_0; }
		
		//(optional?='optional'| 'required')?
		public Alternatives getAlternatives_3_4() { return cAlternatives_3_4; }
		
		//optional?='optional'
		public Assignment getOptionalAssignment_3_4_0() { return cOptionalAssignment_3_4_0; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_3_4_0_0() { return cOptionalOptionalKeyword_3_4_0_0; }
		
		//'required'
		public Keyword getRequiredKeyword_3_4_1() { return cRequiredKeyword_3_4_1; }
		
		////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'named'
		public Keyword getNamedKeyword_3_5_0() { return cNamedKeyword_3_5_0; }
		
		//name=(LOWERCASE_ID|STRING)
		public Assignment getNameAssignment_3_5_1() { return cNameAssignment_3_5_1; }
		
		//(LOWERCASE_ID|STRING)
		public Alternatives getNameAlternatives_3_5_1_0() { return cNameAlternatives_3_5_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_3_5_1_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_3_5_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_5_1_0_1() { return cNameSTRINGTerminalRuleCall_3_5_1_0_1; }
	}
	public class AlternativeDependencyObservableSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.AlternativeDependencyObservableSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValueLiteralValueWithConceptParserRuleCall_0_0_0 = (RuleCall)cValueAssignment_0_0.eContents().get(0);
		private final Keyword cAsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cGenericAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cGenericAnyKeyword_1_0 = (Keyword)cGenericAssignment_1.eContents().get(0);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cAccordingKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cToKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cAccordingToAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cAccordingToPropertyIdParserRuleCall_3_0_2_0 = (RuleCall)cAccordingToAssignment_3_0_2.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cUnorderedGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cInKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_0_1 = (Alternatives)cGroup_3_1_0.eContents().get(1);
		private final Assignment cUnitAssignment_3_1_0_1_0 = (Assignment)cAlternatives_3_1_0_1.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_3_1_0_1_0_0 = (RuleCall)cUnitAssignment_3_1_0_1_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_3_1_0_1_1 = (Assignment)cAlternatives_3_1_0_1.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_3_1_0_1_1_0 = (RuleCall)cCurrencyAssignment_3_1_0_1_1.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Keyword cPerKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_3_1_1_1_0 = (RuleCall)cUnitAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Assignment cFromAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_3_2_0_0 = (RuleCall)cFromAssignment_3_2_0.eContents().get(0);
		private final Keyword cToKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cToAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_3_2_2_0 = (RuleCall)cToAssignment_3_2_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Assignment cValueOperatorsAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_3_3_0_0 = (RuleCall)cValueOperatorsAssignment_3_3_0.eContents().get(0);
		private final Assignment cValueOperatorsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_3_3_1_0 = (RuleCall)cValueOperatorsAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionEXPRTerminalRuleCall_4_1_0 = (RuleCall)cConditionAssignment_4_1.eContents().get(0);
		
		///*
		// * As above but meant for groups, so without name (supplied outside the group) and optional, but with
		// * an optional condition for switching
		// */
		//AlternativeDependencyObservableSemantics returns ObservableSemantics:
		//    (value=LiteralValueWithConcept 'as')?
		//    (generic?='any')?
		//    declaration=ConceptDeclaration
		//    (
		//        ('according' 'to' accordingTo=PropertyId)? &
		//        (
		//            ('in' (unit=Unit | currency=Currency)) |
		//            ('per' unit=Unit)
		//        )? &
		//        (from=Number 'to' to=Number)? &
		//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
		//    )
		//    ('if' condition=EXPR)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(value=LiteralValueWithConcept 'as')?
		//(generic?='any')?
		//declaration=ConceptDeclaration
		//(
		//    ('according' 'to' accordingTo=PropertyId)? &
		//    (
		//        ('in' (unit=Unit | currency=Currency)) |
		//        ('per' unit=Unit)
		//    )? &
		//    (from=Number 'to' to=Number)? &
		//    (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
		//)
		//('if' condition=EXPR)?
		public Group getGroup() { return cGroup; }
		
		//(value=LiteralValueWithConcept 'as')?
		public Group getGroup_0() { return cGroup_0; }
		
		//value=LiteralValueWithConcept
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }
		
		//LiteralValueWithConcept
		public RuleCall getValueLiteralValueWithConceptParserRuleCall_0_0_0() { return cValueLiteralValueWithConceptParserRuleCall_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_0_1() { return cAsKeyword_0_1; }
		
		//(generic?='any')?
		public Assignment getGenericAssignment_1() { return cGenericAssignment_1; }
		
		//'any'
		public Keyword getGenericAnyKeyword_1_0() { return cGenericAnyKeyword_1_0; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_2_0() { return cDeclarationConceptDeclarationParserRuleCall_2_0; }
		
		//(
		//    ('according' 'to' accordingTo=PropertyId)? &
		//    (
		//        ('in' (unit=Unit | currency=Currency)) |
		//        ('per' unit=Unit)
		//    )? &
		//    (from=Number 'to' to=Number)? &
		//    (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
		//)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('according' 'to' accordingTo=PropertyId)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'according'
		public Keyword getAccordingKeyword_3_0_0() { return cAccordingKeyword_3_0_0; }
		
		//'to'
		public Keyword getToKeyword_3_0_1() { return cToKeyword_3_0_1; }
		
		//accordingTo=PropertyId
		public Assignment getAccordingToAssignment_3_0_2() { return cAccordingToAssignment_3_0_2; }
		
		//PropertyId
		public RuleCall getAccordingToPropertyIdParserRuleCall_3_0_2_0() { return cAccordingToPropertyIdParserRuleCall_3_0_2_0; }
		
		//(
		//    ('in' (unit=Unit | currency=Currency)) |
		//    ('per' unit=Unit)
		//)?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//('in' (unit=Unit | currency=Currency))
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'in'
		public Keyword getInKeyword_3_1_0_0() { return cInKeyword_3_1_0_0; }
		
		//(unit=Unit | currency=Currency)
		public Alternatives getAlternatives_3_1_0_1() { return cAlternatives_3_1_0_1; }
		
		//unit=Unit
		public Assignment getUnitAssignment_3_1_0_1_0() { return cUnitAssignment_3_1_0_1_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_1_0_1_0_0() { return cUnitUnitParserRuleCall_3_1_0_1_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_3_1_0_1_1() { return cCurrencyAssignment_3_1_0_1_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_3_1_0_1_1_0() { return cCurrencyCurrencyParserRuleCall_3_1_0_1_1_0; }
		
		//('per' unit=Unit)
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//'per'
		public Keyword getPerKeyword_3_1_1_0() { return cPerKeyword_3_1_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_3_1_1_1() { return cUnitAssignment_3_1_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_1_1_1_0() { return cUnitUnitParserRuleCall_3_1_1_1_0; }
		
		//(from=Number 'to' to=Number)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//from=Number
		public Assignment getFromAssignment_3_2_0() { return cFromAssignment_3_2_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_3_2_0_0() { return cFromNumberParserRuleCall_3_2_0_0; }
		
		//'to'
		public Keyword getToKeyword_3_2_1() { return cToKeyword_3_2_1; }
		
		//to=Number
		public Assignment getToAssignment_3_2_2() { return cToAssignment_3_2_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_3_2_2_0() { return cToNumberParserRuleCall_3_2_2_0; }
		
		//(valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//valueOperators+=ValueOperator
		public Assignment getValueOperatorsAssignment_3_3_0() { return cValueOperatorsAssignment_3_3_0; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_3_3_0_0() { return cValueOperatorsValueOperatorParserRuleCall_3_3_0_0; }
		
		//(valueOperators+=ValueOperator)*
		public Assignment getValueOperatorsAssignment_3_3_1() { return cValueOperatorsAssignment_3_3_1; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_3_3_1_0() { return cValueOperatorsValueOperatorParserRuleCall_3_3_1_0; }
		
		//('if' condition=EXPR)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'if'
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }
		
		//condition=EXPR
		public Assignment getConditionAssignment_4_1() { return cConditionAssignment_4_1; }
		
		//EXPR
		public RuleCall getConditionEXPRTerminalRuleCall_4_1_0() { return cConditionEXPRTerminalRuleCall_4_1_0; }
	}
	public class NamedObservableSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.NamedObservableSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Keyword cNamedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_DASHIDTerminalRuleCall_2_0_1 = (RuleCall)cNameAlternatives_2_0.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0_2 = (RuleCall)cNameAlternatives_2_0.eContents().get(2);
		
		///*
		// * Observable with no quality semantics and mandatory name, for observations. Allows
		// * dashes in name.
		// */
		//NamedObservableSemantics returns ObservableSemantics:
		//    declaration=ConceptDeclaration 'named' name=(LOWERCASE_ID|LOWERCASE_DASHID|STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=ConceptDeclaration 'named' name=(LOWERCASE_ID|LOWERCASE_DASHID|STRING)
		public Group getGroup() { return cGroup; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_0_0() { return cDeclarationConceptDeclarationParserRuleCall_0_0; }
		
		//'named'
		public Keyword getNamedKeyword_1() { return cNamedKeyword_1; }
		
		//name=(LOWERCASE_ID|LOWERCASE_DASHID|STRING)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//(LOWERCASE_ID|LOWERCASE_DASHID|STRING)
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_2_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_2_0_0; }
		
		//LOWERCASE_DASHID
		public RuleCall getNameLOWERCASE_DASHIDTerminalRuleCall_2_0_1() { return cNameLOWERCASE_DASHIDTerminalRuleCall_2_0_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0_2() { return cNameSTRINGTerminalRuleCall_2_0_2; }
	}
	public class REL_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.REL_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cGtGreaterThanSignKeyword_0_0 = (Keyword)cGtAssignment_0.eContents().get(0);
		private final Assignment cLtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLtLessThanSignKeyword_1_0 = (Keyword)cLtAssignment_1.eContents().get(0);
		private final Assignment cEqAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cEqEqualsSignKeyword_2_0 = (Keyword)cEqAssignment_2.eContents().get(0);
		private final Assignment cNeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNeExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNeAssignment_3.eContents().get(0);
		private final Assignment cLeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cLeLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLeAssignment_4.eContents().get(0);
		private final Assignment cGeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cGeGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGeAssignment_5.eContents().get(0);
		
		///**
		// * ---------------------------------------
		// * Unit of measurement re: jsr-108, parseable by Java
		// * ---------------------------------------
		// */
		//REL_OPERATOR:
		//    (gt?='>' |
		//    lt?='<' |
		//    eq?='=' |
		//    ne?='!=' |
		//    le?='<=' |
		//    ge?='>=');
		@Override public ParserRule getRule() { return rule; }
		
		//(gt?='>' |
		//lt?='<' |
		//eq?='=' |
		//ne?='!=' |
		//le?='<=' |
		//ge?='>=')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//gt?='>'
		public Assignment getGtAssignment_0() { return cGtAssignment_0; }
		
		//'>'
		public Keyword getGtGreaterThanSignKeyword_0_0() { return cGtGreaterThanSignKeyword_0_0; }
		
		//lt?='<'
		public Assignment getLtAssignment_1() { return cLtAssignment_1; }
		
		//'<'
		public Keyword getLtLessThanSignKeyword_1_0() { return cLtLessThanSignKeyword_1_0; }
		
		//eq?='='
		public Assignment getEqAssignment_2() { return cEqAssignment_2; }
		
		//'='
		public Keyword getEqEqualsSignKeyword_2_0() { return cEqEqualsSignKeyword_2_0; }
		
		//ne?='!='
		public Assignment getNeAssignment_3() { return cNeAssignment_3; }
		
		//'!='
		public Keyword getNeExclamationMarkEqualsSignKeyword_3_0() { return cNeExclamationMarkEqualsSignKeyword_3_0; }
		
		//le?='<='
		public Assignment getLeAssignment_4() { return cLeAssignment_4; }
		
		//'<='
		public Keyword getLeLessThanSignEqualsSignKeyword_4_0() { return cLeLessThanSignEqualsSignKeyword_4_0; }
		
		//ge?='>='
		public Assignment getGeAssignment_5() { return cGeAssignment_5; }
		
		//'>='
		public Keyword getGeGreaterThanSignEqualsSignKeyword_5_0() { return cGeGreaterThanSignEqualsSignKeyword_5_0; }
	}
	public class UnitElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.UnitElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cIdAlternatives_0_0 = (Alternatives)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cIdAlternatives_0_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_0_0_1 = (RuleCall)cIdAlternatives_0_0.eContents().get(1);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_0_0_2 = (RuleCall)cIdAlternatives_0_0.eContents().get(2);
		private final RuleCall cIdBACKCASE_IDTerminalRuleCall_0_0_3 = (RuleCall)cIdAlternatives_0_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_1_1_0 = (RuleCall)cUnitAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//UnitElement:
		//    id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID) |
		//    '(' unit=Unit ')';
		@Override public ParserRule getRule() { return rule; }
		
		//id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID) |
		//'(' unit=Unit ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID)
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID)
		public Alternatives getIdAlternatives_0_0() { return cIdAlternatives_0_0; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_0_0_0() { return cIdCAMELCASE_IDTerminalRuleCall_0_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_0_0_1() { return cIdLOWERCASE_IDTerminalRuleCall_0_0_1; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_0_0_2() { return cIdUPPERCASE_IDTerminalRuleCall_0_0_2; }
		
		//BACKCASE_ID
		public RuleCall getIdBACKCASE_IDTerminalRuleCall_0_0_3() { return cIdBACKCASE_IDTerminalRuleCall_0_0_3; }
		
		//'(' unit=Unit ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_1_1() { return cUnitAssignment_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_1_0() { return cUnitUnitParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootUnitElementParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cConnectorsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cConnectorsUnitOpEnumRuleCall_2_0_0_0 = (RuleCall)cConnectorsAssignment_2_0_0.eContents().get(0);
		private final Assignment cUnitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitsUnitElementParserRuleCall_2_1_0 = (RuleCall)cUnitsAssignment_2_1.eContents().get(0);
		
		//Unit:
		//    {Unit} (root=UnitElement)? (=> (connectors+=UnitOp) (units+=UnitElement))*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unit} (root=UnitElement)? (=> (connectors+=UnitOp) (units+=UnitElement))*
		public Group getGroup() { return cGroup; }
		
		//{Unit}
		public Action getUnitAction_0() { return cUnitAction_0; }
		
		//(root=UnitElement)?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//UnitElement
		public RuleCall getRootUnitElementParserRuleCall_1_0() { return cRootUnitElementParserRuleCall_1_0; }
		
		//(=> (connectors+=UnitOp) (units+=UnitElement))*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> (connectors+=UnitOp)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//connectors+=UnitOp
		public Assignment getConnectorsAssignment_2_0_0() { return cConnectorsAssignment_2_0_0; }
		
		//UnitOp
		public RuleCall getConnectorsUnitOpEnumRuleCall_2_0_0_0() { return cConnectorsUnitOpEnumRuleCall_2_0_0_0; }
		
		//(units+=UnitElement)
		public Assignment getUnitsAssignment_2_1() { return cUnitsAssignment_2_1; }
		
		//UnitElement
		public RuleCall getUnitsUnitElementParserRuleCall_2_1_0() { return cUnitsUnitElementParserRuleCall_2_1_0; }
	}
	public class CurrencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Currency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cYearAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cYearINTTerminalRuleCall_1_1_0 = (RuleCall)cYearAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitsUnitElementParserRuleCall_2_1_0 = (RuleCall)cUnitsAssignment_2_1.eContents().get(0);
		
		//Currency:
		//    id=UPPERCASE_ID ('@' year=INT) (=> '/' (units+=UnitElement))*;
		@Override public ParserRule getRule() { return rule; }
		
		//id=UPPERCASE_ID ('@' year=INT) (=> '/' (units+=UnitElement))*
		public Group getGroup() { return cGroup; }
		
		//id=UPPERCASE_ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_0_0() { return cIdUPPERCASE_IDTerminalRuleCall_0_0; }
		
		//('@' year=INT)
		public Group getGroup_1() { return cGroup_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }
		
		//year=INT
		public Assignment getYearAssignment_1_1() { return cYearAssignment_1_1; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_1_1_0() { return cYearINTTerminalRuleCall_1_1_0; }
		
		//(=> '/' (units+=UnitElement))*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> '/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//(units+=UnitElement)
		public Assignment getUnitsAssignment_2_1() { return cUnitsAssignment_2_1; }
		
		//UnitElement
		public RuleCall getUnitsUnitElementParserRuleCall_2_1_0() { return cUnitsUnitElementParserRuleCall_2_1_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cNegativeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_0_1_0 = (Keyword)cNegativeAssignment_0_1.eContents().get(0);
		private final Assignment cRealAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRealINTTerminalRuleCall_1_0 = (RuleCall)cRealAssignment_1.eContents().get(0);
		private final Assignment cLongAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cLongLKeyword_2_0 = (Keyword)cLongAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cDecimalAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Keyword cDecimalFullStopKeyword_3_0_0_0 = (Keyword)cDecimalAssignment_3_0_0.eContents().get(0);
		private final Assignment cDecimalPartAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDecimalPartINTTerminalRuleCall_3_0_1_0 = (RuleCall)cDecimalPartAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cExponentialAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final Alternatives cExponentialAlternatives_4_0_0_0 = (Alternatives)cExponentialAssignment_4_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_4_0_0_0_0 = (Keyword)cExponentialAlternatives_4_0_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_4_0_0_0_1 = (Keyword)cExponentialAlternatives_4_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_4_0_1_0 = (Keyword)cAlternatives_4_0_1.eContents().get(0);
		private final Assignment cExpNegativeAssignment_4_0_1_1 = (Assignment)cAlternatives_4_0_1.eContents().get(1);
		private final Keyword cExpNegativeHyphenMinusKeyword_4_0_1_1_0 = (Keyword)cExpNegativeAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cExpAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cExpINTTerminalRuleCall_4_0_2_0 = (RuleCall)cExpAssignment_4_0_2.eContents().get(0);
		
		//Number:
		//    ('+' | negative?='-')? => real=INT (=> long?='l')? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | negative?='-')? => real=INT (=> long?='l')? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?
		public Group getGroup() { return cGroup; }
		
		//('+' | negative?='-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//negative?='-'
		public Assignment getNegativeAssignment_0_1() { return cNegativeAssignment_0_1; }
		
		//'-'
		public Keyword getNegativeHyphenMinusKeyword_0_1_0() { return cNegativeHyphenMinusKeyword_0_1_0; }
		
		//=> real=INT
		public Assignment getRealAssignment_1() { return cRealAssignment_1; }
		
		//INT
		public RuleCall getRealINTTerminalRuleCall_1_0() { return cRealINTTerminalRuleCall_1_0; }
		
		//(=> long?='l')?
		public Assignment getLongAssignment_2() { return cLongAssignment_2; }
		
		//'l'
		public Keyword getLongLKeyword_2_0() { return cLongLKeyword_2_0; }
		
		//=> (decimal?='.' decimalPart=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//decimal?='.' decimalPart=INT
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//decimal?='.'
		public Assignment getDecimalAssignment_3_0_0() { return cDecimalAssignment_3_0_0; }
		
		//'.'
		public Keyword getDecimalFullStopKeyword_3_0_0_0() { return cDecimalFullStopKeyword_3_0_0_0; }
		
		//decimalPart=INT
		public Assignment getDecimalPartAssignment_3_0_1() { return cDecimalPartAssignment_3_0_1; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_3_0_1_0() { return cDecimalPartINTTerminalRuleCall_3_0_1_0; }
		
		//=> (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//exponential?=('e' | 'E')
		public Assignment getExponentialAssignment_4_0_0() { return cExponentialAssignment_4_0_0; }
		
		//('e' | 'E')
		public Alternatives getExponentialAlternatives_4_0_0_0() { return cExponentialAlternatives_4_0_0_0; }
		
		//'e'
		public Keyword getExponentialEKeyword_4_0_0_0_0() { return cExponentialEKeyword_4_0_0_0_0; }
		
		//'E'
		public Keyword getExponentialEKeyword_4_0_0_0_1() { return cExponentialEKeyword_4_0_0_0_1; }
		
		//('+' | expNegative?='-')?
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_4_0_1_0() { return cPlusSignKeyword_4_0_1_0; }
		
		//expNegative?='-'
		public Assignment getExpNegativeAssignment_4_0_1_1() { return cExpNegativeAssignment_4_0_1_1; }
		
		//'-'
		public Keyword getExpNegativeHyphenMinusKeyword_4_0_1_1_0() { return cExpNegativeHyphenMinusKeyword_4_0_1_1_0; }
		
		//exp=INT
		public Assignment getExpAssignment_4_0_2() { return cExpAssignment_4_0_2; }
		
		//INT
		public RuleCall getExpINTTerminalRuleCall_4_0_2_0() { return cExpINTTerminalRuleCall_4_0_2_0; }
	}
	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueNumberParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOverAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cOverSolidusKeyword_1_0_0 = (Keyword)cOverAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cUnitAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_2_0_0 = (RuleCall)cUnitAssignment_2_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_2_1_0 = (RuleCall)cCurrencyAssignment_2_1.eContents().get(0);
		
		//Quantity:
		//    value=Number (over?='/' | '.') (unit=Unit | currency=Currency)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Number (over?='/' | '.') (unit=Unit | currency=Currency)
		public Group getGroup() { return cGroup; }
		
		//value=Number
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0_0() { return cValueNumberParserRuleCall_0_0; }
		
		//(over?='/' | '.')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//over?='/'
		public Assignment getOverAssignment_1_0() { return cOverAssignment_1_0; }
		
		//'/'
		public Keyword getOverSolidusKeyword_1_0_0() { return cOverSolidusKeyword_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//(unit=Unit | currency=Currency)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_0() { return cUnitAssignment_2_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_2_0_0() { return cUnitUnitParserRuleCall_2_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_2_1() { return cCurrencyAssignment_2_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_2_1_0() { return cCurrencyCurrencyParserRuleCall_2_1_0; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cYearAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cYearINTTerminalRuleCall_0_0 = (RuleCall)cYearAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cADKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCEKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cBcAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cBcBCKeyword_1_2_0 = (Keyword)cBcAssignment_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMonthINTTerminalRuleCall_3_0 = (RuleCall)cMonthAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDayINTTerminalRuleCall_5_0 = (RuleCall)cDayAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cHourAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cHourINTTerminalRuleCall_6_0_0 = (RuleCall)cHourAssignment_6_0.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMinAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_6_2_0 = (RuleCall)cMinAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cColonKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cSecAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cSecINTTerminalRuleCall_6_3_1_0 = (RuleCall)cSecAssignment_6_3_1.eContents().get(0);
		private final Group cGroup_6_3_2 = (Group)cGroup_6_3.eContents().get(2);
		private final Keyword cFullStopKeyword_6_3_2_0 = (Keyword)cGroup_6_3_2.eContents().get(0);
		private final Assignment cMsAssignment_6_3_2_1 = (Assignment)cGroup_6_3_2.eContents().get(1);
		private final RuleCall cMsINTTerminalRuleCall_6_3_2_1_0 = (RuleCall)cMsAssignment_6_3_2_1.eContents().get(0);
		
		//Date:
		//    year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
		public Group getGroup() { return cGroup; }
		
		//year=INT
		public Assignment getYearAssignment_0() { return cYearAssignment_0; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_0_0() { return cYearINTTerminalRuleCall_0_0; }
		
		//('AD' | 'CE' | bc?='BC')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'AD'
		public Keyword getADKeyword_1_0() { return cADKeyword_1_0; }
		
		//'CE'
		public Keyword getCEKeyword_1_1() { return cCEKeyword_1_1; }
		
		//bc?='BC'
		public Assignment getBcAssignment_1_2() { return cBcAssignment_1_2; }
		
		//'BC'
		public Keyword getBcBCKeyword_1_2_0() { return cBcBCKeyword_1_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//month=INT
		public Assignment getMonthAssignment_3() { return cMonthAssignment_3; }
		
		//INT
		public RuleCall getMonthINTTerminalRuleCall_3_0() { return cMonthINTTerminalRuleCall_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }
		
		//day=INT
		public Assignment getDayAssignment_5() { return cDayAssignment_5; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_5_0() { return cDayINTTerminalRuleCall_5_0; }
		
		//(hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//hour=INT
		public Assignment getHourAssignment_6_0() { return cHourAssignment_6_0; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_6_0_0() { return cHourINTTerminalRuleCall_6_0_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//min=INT
		public Assignment getMinAssignment_6_2() { return cMinAssignment_6_2; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_6_2_0() { return cMinINTTerminalRuleCall_6_2_0; }
		
		//(':' sec=INT ('.' ms=INT)?)?
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//':'
		public Keyword getColonKeyword_6_3_0() { return cColonKeyword_6_3_0; }
		
		//sec=INT
		public Assignment getSecAssignment_6_3_1() { return cSecAssignment_6_3_1; }
		
		//INT
		public RuleCall getSecINTTerminalRuleCall_6_3_1_0() { return cSecINTTerminalRuleCall_6_3_1_0; }
		
		//('.' ms=INT)?
		public Group getGroup_6_3_2() { return cGroup_6_3_2; }
		
		//'.'
		public Keyword getFullStopKeyword_6_3_2_0() { return cFullStopKeyword_6_3_2_0; }
		
		//ms=INT
		public Assignment getMsAssignment_6_3_2_1() { return cMsAssignment_6_3_2_1; }
		
		//INT
		public RuleCall getMsINTTerminalRuleCall_6_3_2_1_0() { return cMsINTTerminalRuleCall_6_3_2_1_0; }
	}
	public class PathNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.PathName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		
		//PathName:
		//    (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID) ('.' (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID) ('.' (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID))*
		public Group getGroup() { return cGroup; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_0() { return cLOWERCASE_IDTerminalRuleCall_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_0_1() { return cUPPERCASE_IDTerminalRuleCall_0_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_0_2() { return cLOWERCASE_DASHIDTerminalRuleCall_0_2; }
		
		//('.' (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1_0() { return cLOWERCASE_IDTerminalRuleCall_1_1_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_1_1_1() { return cUPPERCASE_IDTerminalRuleCall_1_1_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_1_1_2() { return cLOWERCASE_DASHIDTerminalRuleCall_1_1_2; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		
		//Path:
		//    (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID) (('.' | '/') (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID) (('.' | '/') (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID))*
		public Group getGroup() { return cGroup; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_0() { return cLOWERCASE_IDTerminalRuleCall_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_0_1() { return cUPPERCASE_IDTerminalRuleCall_0_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_0_2() { return cLOWERCASE_DASHIDTerminalRuleCall_0_2; }
		
		//(('.' | '/') (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID))*
		public Group getGroup_1() { return cGroup_1; }
		
		//('.' | '/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1_0() { return cLOWERCASE_IDTerminalRuleCall_1_1_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_1_1_1() { return cUPPERCASE_IDTerminalRuleCall_1_1_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_1_1_2() { return cLOWERCASE_DASHIDTerminalRuleCall_1_1_2; }
	}
	public class NamespaceIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.NamespaceId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NamespaceId:
		//    PathName ':' CAMELCASE_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//PathName ':' CAMELCASE_ID
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_2() { return cCAMELCASE_IDTerminalRuleCall_2; }
	}
	public class AuthorityIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.AuthorityId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cUPPERCASE_PATHTerminalRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_2_0 = (RuleCall)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_0_2_1 = (RuleCall)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2_2 = (RuleCall)cAlternatives_0_2.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_0_2_3 = (RuleCall)cAlternatives_0_2.eContents().get(3);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cFullStopKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_3_1 = (Alternatives)cGroup_0_3.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_3_1_0 = (RuleCall)cAlternatives_0_3_1.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_0_3_1_1 = (RuleCall)cAlternatives_0_3_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_3_1_2 = (RuleCall)cAlternatives_0_3_1.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_0_3_1_3 = (RuleCall)cAlternatives_0_3_1.eContents().get(3);
		private final RuleCall cWellFormedUrnIdWithFragmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AuthorityId:
		//    (UPPERCASE_PATH|UPPERCASE_ID) ':' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING) ('.' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING))* |
		//    WellFormedUrnIdWithFragment
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(UPPERCASE_PATH|UPPERCASE_ID) ':' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING) ('.' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING))* |
		//WellFormedUrnIdWithFragment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(UPPERCASE_PATH|UPPERCASE_ID) ':' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING) ('.' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING))*
		public Group getGroup_0() { return cGroup_0; }
		
		//(UPPERCASE_PATH|UPPERCASE_ID)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getUPPERCASE_PATHTerminalRuleCall_0_0_0() { return cUPPERCASE_PATHTerminalRuleCall_0_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_0_0_1() { return cUPPERCASE_IDTerminalRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|INT|STRING)
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_2_0() { return cLOWERCASE_IDTerminalRuleCall_0_2_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_0_2_1() { return cUPPERCASE_IDTerminalRuleCall_0_2_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2_2() { return cINTTerminalRuleCall_0_2_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2_3() { return cSTRINGTerminalRuleCall_0_2_3; }
		
		//('.' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING))*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'.'
		public Keyword getFullStopKeyword_0_3_0() { return cFullStopKeyword_0_3_0; }
		
		//(LOWERCASE_ID|UPPERCASE_ID|INT|STRING)
		public Alternatives getAlternatives_0_3_1() { return cAlternatives_0_3_1; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_3_1_0() { return cLOWERCASE_IDTerminalRuleCall_0_3_1_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_0_3_1_1() { return cUPPERCASE_IDTerminalRuleCall_0_3_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_3_1_2() { return cINTTerminalRuleCall_0_3_1_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_3_1_3() { return cSTRINGTerminalRuleCall_0_3_1_3; }
		
		//WellFormedUrnIdWithFragment
		public RuleCall getWellFormedUrnIdWithFragmentParserRuleCall_1() { return cWellFormedUrnIdWithFragmentParserRuleCall_1; }
	}
	public class PropertyIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.PropertyId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPathNameParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cBACKCASE_IDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		
		//PropertyId:
		//    (PathName | LOWERCASE_ID) ':' (LOWERCASE_ID|BACKCASE_ID|LOWERCASE_DASHID);
		@Override public ParserRule getRule() { return rule; }
		
		//(PathName | LOWERCASE_ID) ':' (LOWERCASE_ID|BACKCASE_ID|LOWERCASE_DASHID)
		public Group getGroup() { return cGroup; }
		
		//(PathName | LOWERCASE_ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0_0() { return cPathNameParserRuleCall_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_1() { return cLOWERCASE_IDTerminalRuleCall_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(LOWERCASE_ID|BACKCASE_ID|LOWERCASE_DASHID)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_2_0() { return cLOWERCASE_IDTerminalRuleCall_2_0; }
		
		//BACKCASE_ID
		public RuleCall getBACKCASE_IDTerminalRuleCall_2_1() { return cBACKCASE_IDTerminalRuleCall_2_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_2_2() { return cLOWERCASE_DASHIDTerminalRuleCall_2_2; }
	}
	public class VersionNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.VersionNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//VersionNumber:
		//    INT ('.' INT ('.' INT)?)? ('-')? ((LOWERCASE_ID|UPPERCASE_ID))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT ('.' INT)?)? ('-')? ((LOWERCASE_ID|UPPERCASE_ID))?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT ('.' INT)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//('.' INT)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2_1() { return cINTTerminalRuleCall_1_2_1; }
		
		//('-')?
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//((LOWERCASE_ID|UPPERCASE_ID))?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_3_0() { return cLOWERCASE_IDTerminalRuleCall_3_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_3_1() { return cUPPERCASE_IDTerminalRuleCall_3_1; }
	}
	
	public class UnitOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.UnitOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOVEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOVERSolidusKeyword_0_0 = (Keyword)cOVEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCARETEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCARETCircumflexAccentKeyword_1_0 = (Keyword)cCARETEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTAREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTARAsteriskKeyword_2_0 = (Keyword)cSTAREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnitOp:
		//    OVER='/' | CARET='^' | STAR='*';
		public EnumRule getRule() { return rule; }
		
		//OVER='/' | CARET='^' | STAR='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OVER='/'
		public EnumLiteralDeclaration getOVEREnumLiteralDeclaration_0() { return cOVEREnumLiteralDeclaration_0; }
		
		//'/'
		public Keyword getOVERSolidusKeyword_0_0() { return cOVERSolidusKeyword_0_0; }
		
		//CARET='^'
		public EnumLiteralDeclaration getCARETEnumLiteralDeclaration_1() { return cCARETEnumLiteralDeclaration_1; }
		
		//'^'
		public Keyword getCARETCircumflexAccentKeyword_1_0() { return cCARETCircumflexAccentKeyword_1_0; }
		
		//STAR='*'
		public EnumLiteralDeclaration getSTAREnumLiteralDeclaration_2() { return cSTAREnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getSTARAsteriskKeyword_2_0() { return cSTARAsteriskKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final ModelStatementElements pModelStatement;
	private final DefineStatementElements pDefineStatement;
	private final DefinitionBodyElements pDefinitionBody;
	private final ModelBodyStatementElements pModelBodyStatement;
	private final LookupTableArgumentElements pLookupTableArgument;
	private final LookupTableArgumentQualifiedElements pLookupTableArgumentQualified;
	private final ClassificationElements pClassification;
	private final ClassifierElements pClassifier;
	private final ClassifierRHSElements pClassifierRHS;
	private final ClassifierRHSWithIdElements pClassifierRHSWithId;
	private final ClassifierRHSWithIdNoSetElements pClassifierRHSWithIdNoSet;
	private final UrnElements pUrn;
	private final LookupTableElements pLookupTable;
	private final TableElements pTable;
	private final TwoWayTableElements pTwoWayTable;
	private final HeaderRowElements pHeaderRow;
	private final TableRowElements pTableRow;
	private final TwoWayHeaderRowElements pTwoWayHeaderRow;
	private final TableClassifierElements pTableClassifier;
	private final ActionSpecificationElements pActionSpecification;
	private final FunctionOrIDElements pFunctionOrID;
	private final ActionElements pAction;
	private final ValueAssignmentElements pValueAssignment;
	private final ComputableValueElements pComputableValue;
	private final ValueExecutionElements pValueExecution;
	private final ExecutableValueElements pExecutableValue;
	private final MODEL_TYPEElements pMODEL_TYPE;
	private final VALUE_OPERATORElements pVALUE_OPERATOR;
	private final NamespaceElements pNamespace;
	private final OwlImportElements pOwlImport;
	private final ImportElements pImport;
	private final UrnIdElements pUrnId;
	private final WellFormedUrnIdElements pWellFormedUrnId;
	private final WellFormedUrnIdWithFragmentElements pWellFormedUrnIdWithFragment;
	private final UrnKvpElements pUrnKvp;
	private final LocalFilePathElements pLocalFilePath;
	private final ObserveStatementElements pObserveStatement;
	private final ObserveStatementBodyElements pObserveStatementBody;
	private final ObservableSemanticsElements pObservableSemantics;
	private final SimpleObservableSemanticsElements pSimpleObservableSemantics;
	private final ValueOperatorElements pValueOperator;
	private final AnnotatedObservableSemanticsElements pAnnotatedObservableSemantics;
	private final DependencyElements pDependency;
	private final ConceptDeclarationElements pConceptDeclaration;
	private final ConceptReferenceElements pConceptReference;
	private final OPERATOR_TARGETElements pOPERATOR_TARGET;
	private final ConceptElements pConcept;
	private final ExpressionElements pExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final SimpleConceptDeclarationElements pSimpleConceptDeclaration;
	private final UpperOntologyDefinitionElements pUpperOntologyDefinition;
	private final ConceptStatementElements pConceptStatement;
	private final ConceptStatementBodyElements pConceptStatementBody;
	private final DescriptionConstraintsElements pDescriptionConstraints;
	private final ImplicationElements pImplication;
	private final QuantificationElements pQuantification;
	private final PropertyStatementElements pPropertyStatement;
	private final ApplicableTargetElements pApplicableTarget;
	private final ChildConceptElements pChildConcept;
	private final IdentityRequirementElements pIdentityRequirement;
	private final AnnotationElements pAnnotation;
	private final ListElements pList;
	private final LiteralElements pLiteral;
	private final LiteralOrIDElements pLiteralOrID;
	private final LiteralOrIdOrCommaElements pLiteralOrIdOrComma;
	private final MapElements pMap;
	private final MapEntryElements pMapEntry;
	private final DocSelectorElements pDocSelector;
	private final KeyValuePairElements pKeyValuePair;
	private final ParameterListElements pParameterList;
	private final ValueWithIdAndConceptElements pValueWithIdAndConcept;
	private final ValueElements pValue;
	private final LiteralValueWithConceptElements pLiteralValueWithConcept;
	private final FunctionElements pFunction;
	private final TerminalRule tEXPR;
	private final OptionElements pOption;
	private final TerminalRule tOPTION_KEY;
	private final CONCEPT_TYPEElements pCONCEPT_TYPE;
	private final DECLARABLE_TYPEElements pDECLARABLE_TYPE;
	private final TRAITElements pTRAIT;
	private final EXTENSIVE_PROPERTYElements pEXTENSIVE_PROPERTY;
	private final INTENSIVE_PROPERTYElements pINTENSIVE_PROPERTY;
	private final AGENT_TYPEElements pAGENT_TYPE;
	private final PROPERTY_TYPEElements pPROPERTY_TYPE;
	private final TerminalRule tANNOTATION_ID;
	private final DependencyObservableSemanticsElements pDependencyObservableSemantics;
	private final AlternativeDependencyObservableSemanticsElements pAlternativeDependencyObservableSemantics;
	private final NamedObservableSemanticsElements pNamedObservableSemantics;
	private final REL_OPERATORElements pREL_OPERATOR;
	private final UnitOpElements eUnitOp;
	private final UnitElementElements pUnitElement;
	private final UnitElements pUnit;
	private final CurrencyElements pCurrency;
	private final NumberElements pNumber;
	private final QuantityElements pQuantity;
	private final DateElements pDate;
	private final TerminalRule tTEMPLATE_VAR;
	private final TerminalRule tLOWERCASE_ID;
	private final TerminalRule tLOWERCASE_DASHID;
	private final PathNameElements pPathName;
	private final PathElements pPath;
	private final TerminalRule tSEPARATOR;
	private final TerminalRule tUPPERCASE_ID;
	private final TerminalRule tUPPERCASE_PATH;
	private final TerminalRule tCAMELCASE_ID;
	private final TerminalRule tBACKCASE_ID;
	private final NamespaceIdElements pNamespaceId;
	private final AuthorityIdElements pAuthorityId;
	private final PropertyIdElements pPropertyId;
	private final VersionNumberElements pVersionNumber;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KimGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pModelStatement = new ModelStatementElements();
		this.pDefineStatement = new DefineStatementElements();
		this.pDefinitionBody = new DefinitionBodyElements();
		this.pModelBodyStatement = new ModelBodyStatementElements();
		this.pLookupTableArgument = new LookupTableArgumentElements();
		this.pLookupTableArgumentQualified = new LookupTableArgumentQualifiedElements();
		this.pClassification = new ClassificationElements();
		this.pClassifier = new ClassifierElements();
		this.pClassifierRHS = new ClassifierRHSElements();
		this.pClassifierRHSWithId = new ClassifierRHSWithIdElements();
		this.pClassifierRHSWithIdNoSet = new ClassifierRHSWithIdNoSetElements();
		this.pUrn = new UrnElements();
		this.pLookupTable = new LookupTableElements();
		this.pTable = new TableElements();
		this.pTwoWayTable = new TwoWayTableElements();
		this.pHeaderRow = new HeaderRowElements();
		this.pTableRow = new TableRowElements();
		this.pTwoWayHeaderRow = new TwoWayHeaderRowElements();
		this.pTableClassifier = new TableClassifierElements();
		this.pActionSpecification = new ActionSpecificationElements();
		this.pFunctionOrID = new FunctionOrIDElements();
		this.pAction = new ActionElements();
		this.pValueAssignment = new ValueAssignmentElements();
		this.pComputableValue = new ComputableValueElements();
		this.pValueExecution = new ValueExecutionElements();
		this.pExecutableValue = new ExecutableValueElements();
		this.pMODEL_TYPE = new MODEL_TYPEElements();
		this.pVALUE_OPERATOR = new VALUE_OPERATORElements();
		this.pNamespace = new NamespaceElements();
		this.pOwlImport = new OwlImportElements();
		this.pImport = new ImportElements();
		this.pUrnId = new UrnIdElements();
		this.pWellFormedUrnId = new WellFormedUrnIdElements();
		this.pWellFormedUrnIdWithFragment = new WellFormedUrnIdWithFragmentElements();
		this.pUrnKvp = new UrnKvpElements();
		this.pLocalFilePath = new LocalFilePathElements();
		this.pObserveStatement = new ObserveStatementElements();
		this.pObserveStatementBody = new ObserveStatementBodyElements();
		this.pObservableSemantics = new ObservableSemanticsElements();
		this.pSimpleObservableSemantics = new SimpleObservableSemanticsElements();
		this.pValueOperator = new ValueOperatorElements();
		this.pAnnotatedObservableSemantics = new AnnotatedObservableSemanticsElements();
		this.pDependency = new DependencyElements();
		this.pConceptDeclaration = new ConceptDeclarationElements();
		this.pConceptReference = new ConceptReferenceElements();
		this.pOPERATOR_TARGET = new OPERATOR_TARGETElements();
		this.pConcept = new ConceptElements();
		this.pExpression = new ExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pSimpleConceptDeclaration = new SimpleConceptDeclarationElements();
		this.pUpperOntologyDefinition = new UpperOntologyDefinitionElements();
		this.pConceptStatement = new ConceptStatementElements();
		this.pConceptStatementBody = new ConceptStatementBodyElements();
		this.pDescriptionConstraints = new DescriptionConstraintsElements();
		this.pImplication = new ImplicationElements();
		this.pQuantification = new QuantificationElements();
		this.pPropertyStatement = new PropertyStatementElements();
		this.pApplicableTarget = new ApplicableTargetElements();
		this.pChildConcept = new ChildConceptElements();
		this.pIdentityRequirement = new IdentityRequirementElements();
		this.pAnnotation = new AnnotationElements();
		this.pList = new ListElements();
		this.pLiteral = new LiteralElements();
		this.pLiteralOrID = new LiteralOrIDElements();
		this.pLiteralOrIdOrComma = new LiteralOrIdOrCommaElements();
		this.pMap = new MapElements();
		this.pMapEntry = new MapEntryElements();
		this.pDocSelector = new DocSelectorElements();
		this.pKeyValuePair = new KeyValuePairElements();
		this.pParameterList = new ParameterListElements();
		this.pValueWithIdAndConcept = new ValueWithIdAndConceptElements();
		this.pValue = new ValueElements();
		this.pLiteralValueWithConcept = new LiteralValueWithConceptElements();
		this.pFunction = new FunctionElements();
		this.tEXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.EXPR");
		this.pOption = new OptionElements();
		this.tOPTION_KEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.OPTION_KEY");
		this.pCONCEPT_TYPE = new CONCEPT_TYPEElements();
		this.pDECLARABLE_TYPE = new DECLARABLE_TYPEElements();
		this.pTRAIT = new TRAITElements();
		this.pEXTENSIVE_PROPERTY = new EXTENSIVE_PROPERTYElements();
		this.pINTENSIVE_PROPERTY = new INTENSIVE_PROPERTYElements();
		this.pAGENT_TYPE = new AGENT_TYPEElements();
		this.pPROPERTY_TYPE = new PROPERTY_TYPEElements();
		this.tANNOTATION_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ANNOTATION_ID");
		this.pDependencyObservableSemantics = new DependencyObservableSemanticsElements();
		this.pAlternativeDependencyObservableSemantics = new AlternativeDependencyObservableSemanticsElements();
		this.pNamedObservableSemantics = new NamedObservableSemanticsElements();
		this.pREL_OPERATOR = new REL_OPERATORElements();
		this.eUnitOp = new UnitOpElements();
		this.pUnitElement = new UnitElementElements();
		this.pUnit = new UnitElements();
		this.pCurrency = new CurrencyElements();
		this.pNumber = new NumberElements();
		this.pQuantity = new QuantityElements();
		this.pDate = new DateElements();
		this.tTEMPLATE_VAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.TEMPLATE_VAR");
		this.tLOWERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LOWERCASE_ID");
		this.tLOWERCASE_DASHID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LOWERCASE_DASHID");
		this.pPathName = new PathNameElements();
		this.pPath = new PathElements();
		this.tSEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.SEPARATOR");
		this.tUPPERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.UPPERCASE_ID");
		this.tUPPERCASE_PATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.UPPERCASE_PATH");
		this.tCAMELCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.CAMELCASE_ID");
		this.tBACKCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.BACKCASE_ID");
		this.pNamespaceId = new NamespaceIdElements();
		this.pAuthorityId = new AuthorityIdElements();
		this.pPropertyId = new PropertyIdElements();
		this.pVersionNumber = new VersionNumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.integratedmodelling.kim.Kim".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * Namespace is mandatory at the beginning, but we check at validation of the
	// * first statement, so that special situations such as empty files or default
	// * namespaces are possible without errors.
	// */
	//Model:
	//    observable=ObservableSemantics |
	//    namespace=Namespace? statements+=Statement*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//    conceptStatement=ConceptStatement ';' |
	//    modelStatement=ModelStatement ';' |
	//    upperOntologyStatement=UpperOntologyDefinition ';' |
	//    defineStatement=DefineStatement ';' |
	//    observeStatement=ObserveStatement ';'
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ModelStatement:
	//     (annotations+=Annotation (annotations+=Annotation)*)?
	//     ((inactive?='void')? & ((projectPrivate?='project')? private?='private')?)? model=MODEL_TYPE body=ModelBodyStatement
	//;
	public ModelStatementElements getModelStatementAccess() {
		return pModelStatement;
	}
	
	public ParserRule getModelStatementRule() {
		return getModelStatementAccess().getRule();
	}
	
	//DefineStatement:
	//    // ridiculous to split like this, but makes the highlighting logics work
	//    (annotations+=Annotation (annotations+=Annotation)*)? 'define' defineBody=DefinitionBody
	//;
	public DefineStatementElements getDefineStatementAccess() {
		return pDefineStatement;
	}
	
	public ParserRule getDefineStatementRule() {
		return getDefineStatementAccess().getRule();
	}
	
	//DefinitionBody:
	//    (defineClass=LOWERCASE_ID)? name=(UPPERCASE_ID|LOWERCASE_ID) 'as' value=Value
	//;
	public DefinitionBodyElements getDefinitionBodyAccess() {
		return pDefinitionBody;
	}
	
	public ParserRule getDefinitionBodyRule() {
		return getDefinitionBodyAccess().getRule();
	}
	
	//ModelBodyStatement:
	//    (instantiator?='each')?
	//        (
	//            (
	//                (urns+=Urn (',' urns+=Urn)*) |
	//                number=Number |
	//                concept=ConceptDeclaration |
	//                boolean=('true' | 'false') //|
	//            )
	//             => 'as'
	//        )?
	//        /*
	//         * If the observable is a single role, then concept must be the actual observable and we're reinterpreting it. Observables
	//         * besides the first may have annotations for the contextualizers to react to.
	//         */
	//         ( (name=LOWERCASE_ID | (observables+=AnnotatedObservableSemantics (',' observables+=AnnotatedObservableSemantics)*)))
	//         (docstring=STRING)?
	//         ('observing' dependencies+=Dependency (',' dependencies+=Dependency)* )?
	//         ('observed' 'as' observer=ConceptDeclaration)?
	//         ('using' /*  | merging?='merging')*/ contextualizers+=ValueExecution (',' contextualizers+=ValueExecution)*)?
	//         (('classified' | discretization?='discretized') (('into' classification=Classification) | ('according' 'to' classificationProperty=PropertyId)))?
	//         // arg ? means result field, arg * means ignore column. If not given, will match self in the first column and result in last, ignoring anything in between
	//         (('lookup'
	//             ('(' lookupTableArgs+=LookupTableArgument (',' lookupTableArgs+=LookupTableArgument)* ')')?
	//             'into'
	//                 (lookupTable=Table | lookupTableId=UPPERCASE_ID)
	//         ) |
	//          (twoway?='match'
	//             ('(' lookupTableArgs+=LookupTableArgumentQualified ',' lookupTableArgs+=LookupTableArgumentQualified ')')?
	//             'to'
	//                 (lookupTable=TwoWayTable | lookupTableId=UPPERCASE_ID)
	//          )
	//         )?
	//         actions+=ActionSpecification*
	//         ('metadata' metadata=Map)?
	//;
	public ModelBodyStatementElements getModelBodyStatementAccess() {
		return pModelBodyStatement;
	}
	
	public ParserRule getModelBodyStatementRule() {
		return getModelBodyStatementAccess().getRule();
	}
	
	//LookupTableArgument:
	//    id=(LOWERCASE_ID | '?' | '*') |
	//    concept=ConceptDeclaration
	//;
	public LookupTableArgumentElements getLookupTableArgumentAccess() {
		return pLookupTableArgument;
	}
	
	public ParserRule getLookupTableArgumentRule() {
		return getLookupTableArgumentAccess().getRule();
	}
	
	//LookupTableArgumentQualified returns LookupTableArgument:
	//    (key=('column'|'row') '=')? id=LOWERCASE_ID |
	//    (key=('column'|'row') '=')? concept=ConceptDeclaration
	//;
	public LookupTableArgumentQualifiedElements getLookupTableArgumentQualifiedAccess() {
		return pLookupTableArgumentQualified;
	}
	
	public ParserRule getLookupTableArgumentQualifiedRule() {
		return getLookupTableArgumentQualifiedAccess().getRule();
	}
	
	//Classification:
	//    classifiers+=Classifier (=> ',' classifiers+=Classifier)*;
	public ClassificationElements getClassificationAccess() {
		return pClassification;
	}
	
	public ParserRule getClassificationRule() {
		return getClassificationAccess().getRule();
	}
	
	//Classifier:
	//    declaration=ConceptDeclaration (otherwise?='otherwise' | ('if' | negated?='unless') classifier=ClassifierRHS)?;
	public ClassifierElements getClassifierAccess() {
		return pClassifier;
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}
	
	//ClassifierRHS:
	//    (boolean='true' | boolean='false') |
	//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	//    num=Number |
	//    'in' set=List |
	//    string=STRING |
	//    concept=ConceptDeclaration |
	//    '(' toResolve+=ConceptDeclaration (=> ',' toResolve+=ConceptDeclaration)* ')' |
	//    op=REL_OPERATOR expression=Number |
	//    nodata='unknown' |
	//    star?='*';
	public ClassifierRHSElements getClassifierRHSAccess() {
		return pClassifierRHS;
	}
	
	public ParserRule getClassifierRHSRule() {
		return getClassifierRHSAccess().getRule();
	}
	
	//ClassifierRHSWithId returns ClassifierRHS:
	//    (boolean='true' | boolean='false') |
	//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	//    num=Number |
	//    'in' set=List |
	//    string=STRING |
	//    concept=ConceptDeclaration |
	//    id = (LOWERCASE_ID | PropertyId) |
	//    op=REL_OPERATOR expression=Number |
	//    nodata='unknown' |
	//    star?='*';
	public ClassifierRHSWithIdElements getClassifierRHSWithIdAccess() {
		return pClassifierRHSWithId;
	}
	
	public ParserRule getClassifierRHSWithIdRule() {
		return getClassifierRHSWithIdAccess().getRule();
	}
	
	//ClassifierRHSWithIdNoSet returns ClassifierRHS:
	//    (boolean='true' | boolean='false') |
	//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	//    num=Number |
	////    'in' set=List |
	//    string=STRING |
	//    concept=ConceptDeclaration |
	//    id = (LOWERCASE_ID | PropertyId) |
	//    op=REL_OPERATOR expression=Number |
	//    nodata='unknown' |
	//    star?='*';
	public ClassifierRHSWithIdNoSetElements getClassifierRHSWithIdNoSetAccess() {
		return pClassifierRHSWithIdNoSet;
	}
	
	public ParserRule getClassifierRHSWithIdNoSetRule() {
		return getClassifierRHSWithIdNoSetAccess().getRule();
	}
	
	//Urn:
	//    // String used when there are strange chars or keywords in the URN. Consecutive strings will be merged.
	//    name=(PathName|UrnId|LocalFilePath) | strings+=STRING+
	//;
	public UrnElements getUrnAccess() {
		return pUrn;
	}
	
	public ParserRule getUrnRule() {
		return getUrnAccess().getRule();
	}
	
	//// Lookup table literal
	//LookupTable: {LookupTable}
	//    '{{' table=(Table|TwoWayTable)? '}}'
	//;
	public LookupTableElements getLookupTableAccess() {
		return pLookupTable;
	}
	
	public ParserRule getLookupTableRule() {
		return getLookupTableAccess().getRule();
	}
	
	//Table:
	//    (headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//TwoWayTable returns Table:
	//    columnClassifiers=TwoWayHeaderRow SEPARATOR rows+=TableRow (',' rows+=TableRow)*;
	public TwoWayTableElements getTwoWayTableAccess() {
		return pTwoWayTable;
	}
	
	public ParserRule getTwoWayTableRule() {
		return getTwoWayTableAccess().getRule();
	}
	
	//HeaderRow:
	//    elements+=(LOWERCASE_ID|STRING) ('|' elements+=(LOWERCASE_ID|STRING))*
	//;
	public HeaderRowElements getHeaderRowAccess() {
		return pHeaderRow;
	}
	
	public ParserRule getHeaderRowRule() {
		return getHeaderRowAccess().getRule();
	}
	
	//TableRow:
	//    elements+=TableClassifier ('|' elements+=TableClassifier)*
	//;
	public TableRowElements getTableRowAccess() {
		return pTableRow;
	}
	
	public ParserRule getTableRowRule() {
		return getTableRowAccess().getRule();
	}
	
	//TwoWayHeaderRow returns TableRow:
	//    // ignore the first element
	//    (LOWERCASE_ID|TableClassifier) ('|' elements+=TableClassifier)+
	//;
	public TwoWayHeaderRowElements getTwoWayHeaderRowAccess() {
		return pTwoWayHeaderRow;
	}
	
	public ParserRule getTwoWayHeaderRowRule() {
		return getTwoWayHeaderRowAccess().getRule();
	}
	
	//TableClassifier returns ClassifierRHS:
	//    (boolean='true' | boolean='false') |
	//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	//    num=Number |
	//    quantity=Quantity |
	//    date=Date |
	//    'in' set=List |
	//    string=STRING |
	//    concept=ConceptDeclaration |
	//    op=REL_OPERATOR expression=Number |
	//    expr=EXPR |
	//    nodata='unknown' |
	//    star?='*' |
	//    anything?='#';
	public TableClassifierElements getTableClassifierAccess() {
		return pTableClassifier;
	}
	
	public ParserRule getTableClassifierRule() {
		return getTableClassifierAccess().getRule();
	}
	
	//ActionSpecification:
	//    (integrated?='aggregated')? over?='over'
	//        domain+=FunctionOrID (=> ',' (domain+=FunctionOrID))*
	//        (actions+=Action (=> ',' actions+=Action)*)?
	//      |
	//        (trigger?='on' (
	//                initialization?='definition' |
	////                resolution?='resolution' |
	//                instantiation ?= 'instantiation' |
	//                termination ?='termination' |
	////                stateInitialization ?= 'initialization'|
	//                event=ConceptDeclaration ('in' (anyContextEvent?='context' | (relatedEventContext?='related')) eventContext=ConceptDeclaration)?
	//            )
	//            (parameters = List)?
	//        )?
	//        actions+=Action (=> ',' actions+=Action)*
	//;
	public ActionSpecificationElements getActionSpecificationAccess() {
		return pActionSpecification;
	}
	
	public ParserRule getActionSpecificationRule() {
		return getActionSpecificationAccess().getRule();
	}
	
	//FunctionOrID:
	//    function=Function | functionId=(LOWERCASE_ID|NamespaceId);
	public FunctionOrIDElements getFunctionOrIDAccess() {
		return pFunctionOrID;
	}
	
	public ParserRule getFunctionOrIDRule() {
		return getFunctionOrIDAccess().getRule();
	}
	
	//Action:
	//    (set?='set')
	//        assignments+=ValueAssignment (',' assignments+=ValueAssignment)*
	//        (=> ('if' | conditionNegative?='unless') condition=Value)? |
	//    integrate?='integrate'
	//        assignments+=ValueAssignment (',' assignments+=ValueAssignment)*
	//        (=> ('if' | conditionNegative?='unless') condition=Value)? |
	//    do?=('do'|'then'|'finally')
	//        executed+=ValueExecution (',' executed+=ValueExecution)*
	//        (=> ('if' | conditionNegative?='unless') condition=Value)? |
	//    /*
	//     * 'move away' sounds a lot nicer than 'die'
	//     */
	//    move?='move' (where=Value | away?='away') (=> condition=Value)?;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//ValueAssignment:
	//    ((target = LOWERCASE_ID)? 'to')? assignedValue=ComputableValue
	//;
	public ValueAssignmentElements getValueAssignmentAccess() {
		return pValueAssignment;
	}
	
	public ParserRule getValueAssignmentRule() {
		return getValueAssignmentAccess().getRule();
	}
	
	///*
	// * this is made necessary by Xtext's inability of properly generating code when
	// * superclasses come from imported grammars.
	// */
	//ComputableValue:
	//    literal=LiteralOrIdOrComma |
	//    function=Function |
	//    expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))? |
	//    id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
	//    list=List |
	//    null?='unknown';
	public ComputableValueElements getComputableValueAccess() {
		return pComputableValue;
	}
	
	public ParserRule getComputableValueRule() {
		return getComputableValueAccess().getRule();
	}
	
	//ValueExecution returns ValueAssignment:
	//    execValue=ExecutableValue ('for' target=LOWERCASE_ID)?
	//;
	public ValueExecutionElements getValueExecutionAccess() {
		return pValueExecution;
	}
	
	public ParserRule getValueExecutionRule() {
		return getValueExecutionAccess().getRule();
	}
	
	//ExecutableValue returns ComputableValue:
	//    (
	//        function=Function |
	//        expr=EXPR ('in' language=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID))? |
	//        urn=(UrnId|STRING) // |
	////        model=Path
	//    ) (('if'|conditionNegated?='unless') condition=Value)?
	//;
	public ExecutableValueElements getExecutableValueAccess() {
		return pExecutableValue;
	}
	
	public ParserRule getExecutableValueRule() {
		return getExecutableValueAccess().getRule();
	}
	
	//MODEL_TYPE:
	//    'model' |
	//    'learn' |
	//    'number' |
	//    'object' |
	//    'text' |
	//    'boolean'
	//;
	public MODEL_TYPEElements getMODEL_TYPEAccess() {
		return pMODEL_TYPE;
	}
	
	public ParserRule getMODEL_TYPERule() {
		return getMODEL_TYPEAccess().getRule();
	}
	
	//VALUE_OPERATOR:
	//    '>'  |
	//    '>=' |
	//    '<='|
	//    '<'|
	//    'where'|
	//    '=='|
	//    '='| 'only'|
	//    'without'|
	//    '!='|
	//    'plus'|
	//    'minus'|
	//    'times'|
	//    'over' |
	//    'by'
	//;
	public VALUE_OPERATORElements getVALUE_OPERATORAccess() {
		return pVALUE_OPERATOR;
	}
	
	public ParserRule getVALUE_OPERATORRule() {
		return getVALUE_OPERATORAccess().getRule();
	}
	
	///*
	// * Namespace - entry point of all files. Only interactive sessions may start without this statement.
	// * A namespace may be a scenario - if so, nothing changes except its models will never be used from
	// * the DB unless the scenario is being computed (should be 'observe ... in scenario ....).
	// */
	//Namespace:
	//    (annotations+=Annotation (annotations+=Annotation)*)?
	//    (
	//        ((projectPrivate?='project')? private?='private')? &
	//        (inactive?='void')?
	//    )
	//    ('namespace' | scenario?='scenario' | worldviewBound?='worldview') name=PathName (docstring=STRING)?
	//    (
	//        ('using' 'language' language=UPPERCASE_ID)? &
	//        ('using' imported+=Import (=> ',' imported+=Import)*)? &
	//        ('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)? &
	//        ('covering' coverage+=Function (=> ',' coverage+=Function)*)? &
	//        ('in' 'domain' (rootDomain?='root' | domainConcept=Concept))? &
	//        ('disjoint' 'with' disjointNamespaces+=PathName (',' disjointNamespaces+=PathName)* )? &
	//        ('version' version=VersionNumber)? &
	//        ('resolve' ('from' lookupNamespace+=PathName*)? & ('outside' blacklistNamespace+=PathName*)? & ('using' weights=Map)?)?
	//    )
	//    ('observed' 'as' observer=ConceptDeclaration)?
	//    ('parameters' parameters=Map)?
	//    ('metadata' metadata=Map)?
	//    ';';
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//OwlImport:
	//    name=STRING ('as' prefix=LOWERCASE_ID) |
	//    (single=PathName | imports=List) 'from' urn=UrnId;
	public OwlImportElements getOwlImportAccess() {
		return pOwlImport;
	}
	
	public ParserRule getOwlImportRule() {
		return getOwlImportAccess().getRule();
	}
	
	//Import:
	//    ((imports=List | star?='*') 'from')? name=PathName/*[Namespace|PathName]*/;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	///**
	// * URN is 4 sections: node (or 'klab' for internal resources), catalog (or adapter for internal resources), namespace and
	// * resource ID. Admits a version number and a fragment (with only lowercase_id chars in it). It is
	// * legal, but not required, to start with the default prefix urn:klab:. The 4th path element (the ID) may be
	// * integer.
	// */
	//UrnId:
	//    ('urn:klab:')? PathName ':'  PathName ':' PathName ':' (Path|INT) (':' VersionNumber)? ('#' (Path|UrnKvp) ('&' (Path|UrnKvp))*)?;
	public UrnIdElements getUrnIdAccess() {
		return pUrnId;
	}
	
	public ParserRule getUrnIdRule() {
		return getUrnIdAccess().getRule();
	}
	
	//WellFormedUrnId:
	//    PathName ':'  PathName ':' PathName ':' (PathName) (':' VersionNumber)? ('#' (Path|UrnKvp))?;
	public WellFormedUrnIdElements getWellFormedUrnIdAccess() {
		return pWellFormedUrnId;
	}
	
	public ParserRule getWellFormedUrnIdRule() {
		return getWellFormedUrnIdAccess().getRule();
	}
	
	//WellFormedUrnIdWithFragment:
	//    PathName ':'  PathName ':' PathName ':' (PathName) (':' VersionNumber)? '#' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING);
	public WellFormedUrnIdWithFragmentElements getWellFormedUrnIdWithFragmentAccess() {
		return pWellFormedUrnIdWithFragment;
	}
	
	public ParserRule getWellFormedUrnIdWithFragmentRule() {
		return getWellFormedUrnIdWithFragmentAccess().getRule();
	}
	
	//UrnKvp:
	//    PathName '=' (Path|INT)
	//;
	public UrnKvpElements getUrnKvpAccess() {
		return pUrnKvp;
	}
	
	public ParserRule getUrnKvpRule() {
		return getUrnKvpAccess().getRule();
	}
	
	///**
	// * Local file paths become locally based URNs and can be used wherever URNs are accepted. Their interpretation depends
	// * on whether there is an encoder for their file extension.
	// */
	//LocalFilePath:
	//    (CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID) ('/' (CAMELCASE_ID|LOWERCASE_ID|LOWERCASE_DASHID))* ('.' LOWERCASE_ID)? ('#' LOWERCASE_ID)?
	//;
	public LocalFilePathElements getLocalFilePathAccess() {
		return pLocalFilePath;
	}
	
	public ParserRule getLocalFilePathRule() {
		return getLocalFilePathAccess().getRule();
	}
	
	//ObserveStatement:
	//    (annotations+=Annotation (annotations+=Annotation)*)? 'observe' body=ObserveStatementBody
	//;
	public ObserveStatementElements getObserveStatementAccess() {
		return pObserveStatement;
	}
	
	public ParserRule getObserveStatementRule() {
		return getObserveStatementAccess().getRule();
	}
	
	///**
	// * FIXME the child observation in parenthesis conflicts with a standard declaration and cannot be
	// * specified.
	// */
	//ObserveStatementBody:
	//    (urn=Urn 'as')?
	//    concept=NamedObservableSemantics
	//        (docstring = STRING)?
	//        ('extends' parents+=PathName (',' parents+=PathName)*)?
	//        ((
	//            'observing'
	//                // validator will ensure that the semantics has an associated value
	//                ( states+=ObservableSemantics) (',' states+=ObservableSemantics)*
	//        )? &
	//        (
	//            'children'
	//                // validator will ensure that the semantics has an associated value
	//                ( '(' observations+=ObserveStatementBody ')') (',' '(' observations+=ObserveStatementBody ')')*
	//        )?)
	//        (actions+=ActionSpecification*) &
	//        ('using' (accessor=Function)?)? &
	//        ('metadata' metadata=Map)?
	//;
	public ObserveStatementBodyElements getObserveStatementBodyAccess() {
		return pObserveStatementBody;
	}
	
	public ParserRule getObserveStatementBodyRule() {
		return getObserveStatementBodyAccess().getRule();
	}
	
	///**
	// * Observable semantics is a concept declaration with optional observation semantics and formal name.
	// */
	//ObservableSemantics:
	//    // value may be an ID and in that case it can be used in models as an attribute for the URN as long
	//    // as the ID is not defined in the namespace.
	//    (value=LiteralValueWithConcept 'as')?
	//    (generic?='any')?
	//    declaration=ConceptDeclaration
	//    (
	//        ('according' 'to' accordingTo=PropertyId)? &
	//        (
	//            (=> 'in' (unit=Unit | currency=Currency)) |
	//            (=> 'per' unit=Unit)
	//        )? &
	//        (=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
	//        (optional?='optional'| 'required')? &
	////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
	//        (from=Number 'to' to=Number)? &
	//        ('named' name=(LOWERCASE_ID|STRING))?
	//    );
	public ObservableSemanticsElements getObservableSemanticsAccess() {
		return pObservableSemantics;
	}
	
	public ParserRule getObservableSemanticsRule() {
		return getObservableSemanticsAccess().getRule();
	}
	
	///*
	// * Used for constraints and values: has no value and admits the additional qualifiers to specify
	// * the level of generality w.r.t. subclasses. Removes 'according to' but leaves value operators
	// */
	//SimpleObservableSemantics returns ObservableSemantics:
	//    (generic?='any' | global?='all' | exclusive?='only')?
	//    declaration=ConceptDeclaration
	//    ( =>
	//        ( =>
	//            (=> 'in' (unit=Unit | currency=Currency)) |
	//            (=> 'per' unit=Unit)
	//        )? &
	//        (=> valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
	//        (from=Number 'to' to=Number)?
	//    );
	public SimpleObservableSemanticsElements getSimpleObservableSemanticsAccess() {
		return pSimpleObservableSemantics;
	}
	
	public ParserRule getSimpleObservableSemanticsRule() {
		return getSimpleObservableSemanticsAccess().getRule();
	}
	
	//ValueOperator:
	//    (modifier=VALUE_OPERATOR | downTo='down' 'to')
	//        (comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration | ('(' comparisonObservable=ObservableSemantics ')')) |
	//    total='total' |
	//    averaged='averaged' |
	//    summed='summed'
	//;
	public ValueOperatorElements getValueOperatorAccess() {
		return pValueOperator;
	}
	
	public ParserRule getValueOperatorRule() {
		return getValueOperatorAccess().getRule();
	}
	
	///**
	// * Same as full observable semantics above but with annotations and without 'as' (using
	// * contextualizer-specific annotations for role in models).
	// */
	//AnnotatedObservableSemantics returns ObservableSemantics:
	//    annotations += Annotation*
	//    (value=Value 'as')?
	//    (generic?='any')?
	//    declaration=ConceptDeclaration
	//    (
	//        ('according' 'to' accordingTo=PropertyId)? &
	//        (
	//            ('in' (unit=Unit | currency=Currency)) |
	//            ('per' unit=Unit)
	//        )? &
	//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
	//        (optional?='optional'| 'required')? &
	////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
	//        (from=Number 'to' to=Number)? &
	//        ('named' name=(LOWERCASE_ID|STRING))?
	//    );
	public AnnotatedObservableSemanticsElements getAnnotatedObservableSemanticsAccess() {
		return pAnnotatedObservableSemantics;
	}
	
	public ParserRule getAnnotatedObservableSemanticsRule() {
		return getAnnotatedObservableSemanticsAccess().getRule();
	}
	
	//Dependency:
	//    annotations += Annotation*
	//    ((
	//        modelReference=(LOWERCASE_ID|PathName|UrnId|STRING) |
	//        observable=DependencyObservableSemantics (options+=Option (options+=Option)*)?
	//    ) |
	//    (
	//        '('
	//            alternativeObservables+=AlternativeDependencyObservableSemantics (',' alternativeObservables+=AlternativeDependencyObservableSemantics)*
	//        ')'
	//        (optional?='optional'| 'required')? &
	////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
	//        'named' name=(LOWERCASE_ID|STRING)
	//    ))
	//;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//ConceptDeclaration:
	//    main+=Concept+
	//        // binary semantic operators; also 'as', 'by' and 'follows' handled in other rules
	//        (=>
	//            // primary physical inherency (observational inherency is given using 'within'). Any observable can be inherent to any countable.
	//            ('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))? &
	//            // purpose (achievement event created from target). Partitions qualities and applies to anything that can be created.
	//            ('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))? &
	//            // compresence (subject, process, event, presence or partitioned quality)
	//            ('with' compresent=SimpleConceptDeclaration)? &
	//            // cause towards self - causant can be anything (?)
	//            ('caused' 'by' causant=SimpleConceptDeclaration)? &
	//            // spatial adjacency (see 'follows' operator for temporal adjacency in events) - Only for countables
	//            ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? &
	//            // being contained - Countables only
	//            ('contained' 'in' container=SimpleConceptDeclaration)? &
	//            // containing - Countables only
	//            ('containing' contained=SimpleConceptDeclaration)? &
	//            // cause towards events, processes, quality partitions
	//            ('causing'   caused=SimpleConceptDeclaration)? &
	//            // concomitant with any occurrent
	//            ('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))? &
	//            // observational inherency: specifies context for observations, either as part of semantics or to
	//            // subclass the use of a model to a specified context. Applies to any observable, only countables as argument
	//            ('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))? &
	//            // for relationships: specialize source and target types, both subjects
	//            ('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
	//        )?
	//;
	public ConceptDeclarationElements getConceptDeclarationAccess() {
		return pConceptDeclaration;
	}
	
	public ParserRule getConceptDeclarationRule() {
		return getConceptDeclarationAccess().getRule();
	}
	
	//ConceptReference:
	//    name=AuthorityId |
	//    name=CAMELCASE_ID |
	//    name=NamespaceId  |
	//    templateType=('${' | '#{') (
	//            // identifiers for target of semantic ops; also used to connect to UO with 'model' statements
	//            extends=Concept ':' name='context'     |
	//            extends=Concept ':' name='inherent'    |
	//            extends=Concept ':' name='compresent'  |
	//            extends=Concept ':' name='adjacent'    |
	//            extends=Concept ':' name='container'   |
	//            extends=Concept ':' name='contained'   |
	//            extends=Concept ':' name='purpose'     |
	//            extends=Concept ':' name='causant'     |
	//            extends=Concept ':' name='caused'      |
	//            extends=Concept ':' name='cooccurrent'
	//        ) template?='}'
	//;
	public ConceptReferenceElements getConceptReferenceAccess() {
		return pConceptReference;
	}
	
	public ParserRule getConceptReferenceRule() {
		return getConceptReferenceAccess().getRule();
	}
	
	//OPERATOR_TARGET:
	//    'context'|
	//    'inherent'   |
	//    'compresent' |
	//    'adjacent'   |
	//    'container'  |
	//    'contained'  |
	//    'purpose'    |
	//    'causant'    |
	//    'caused'     |
	//    'cooccurrent'
	//;
	public OPERATOR_TARGETElements getOPERATOR_TARGETAccess() {
		return pOPERATOR_TARGET;
	}
	
	public ParserRule getOPERATOR_TARGETRule() {
		return getOPERATOR_TARGETAccess().getRule();
	}
	
	//Concept:
	//    (negated?=('not'|'no'))? name=ConceptReference
	//        // if the following is there, the name becomes an alias for the authority concept
	//        // DEPRECATED - use AUTHORITY:conceptexpr
	//        (authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))? |
	//    // unary operators
	//    presence?='presence' 'of' concept=SimpleConceptDeclaration |
	//    count?='count' 'of' concept=SimpleConceptDeclaration |
	//    distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration |
	//    probability?='probability' 'of' concept=SimpleConceptDeclaration |
	////    assessment?='assessment' 'of' concept=SimpleConceptDeclaration |
	//    'change' (change?='in' | (rate?='rate' 'of')) concept=SimpleConceptDeclaration |
	//    changed?='changed' concept=SimpleConceptDeclaration
	//        (=> 'from' changedFrom=SimpleConceptDeclaration 'to' changedTo=SimpleConceptDeclaration)? |
	//    uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration |
	//    magnitude?='magnitude' 'of' concept=SimpleConceptDeclaration |
	//    level?='level' 'of' concept=SimpleConceptDeclaration |
	//    type?='type' 'of' concept=SimpleConceptDeclaration |
	//    observability?='observability' 'of' concept=SimpleConceptDeclaration |
	//    proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
	//    percentage?='percentage' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
	//    ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration |
	//    (monetary?='monetary')? value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? |
	//    occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration |
	//    '(' declaration=Expression ')';
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//Expression returns ConceptDeclaration:
	//    Term
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Term returns ConceptDeclaration:
	//    Factor (operators+='or' operands+=Factor)*
	//;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor returns ConceptDeclaration:
	//    // semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
	//    ConceptDeclaration (operators+=('and'|'follows') operands+=Term)*
	//;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	///*
	// * Declaration without inherency and context, used in Concept to ensure that
	// * the 'within' and 'of' remain outer-level unless parenthesesized.
	// */
	//SimpleConceptDeclaration returns ConceptDeclaration:
	//    (name=STRING)? main+=Concept+
	//;
	public SimpleConceptDeclarationElements getSimpleConceptDeclarationAccess() {
		return pSimpleConceptDeclaration;
	}
	
	public ParserRule getSimpleConceptDeclarationRule() {
		return getSimpleConceptDeclarationAccess().getRule();
	}
	
	///*
	// * statement to connect specialized type or target of relationship to upper ontology
	// */
	//UpperOntologyDefinition:
	//    'model'
	//    (
	//        (
	//            ((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent') |
	//            (propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)* concept = 'relationship')?)
	//            'using' coreconcept=(NamespaceId|PropertyId)
	//        ) |
	//        (
	//            operand=OPERATOR_TARGET 'using' property=(PropertyId|NamespaceId)
	//        )
	//    )
	//;
	public UpperOntologyDefinitionElements getUpperOntologyDefinitionAccess() {
		return pUpperOntologyDefinition;
	}
	
	public ParserRule getUpperOntologyDefinitionRule() {
		return getUpperOntologyDefinitionAccess().getRule();
	}
	
	//ConceptStatement:
	//    annotations += Annotation*
	//    ((abstract?='abstract')? &
	//     (deniable?='deniable')? &
	//     (subjective?='subjective')? &
	//     (agentSpecifier=('deliberative' | 'interactive' | 'reactive') |
	//        (propertySpecifiers+=PROPERTY_TYPE (propertySpecifiers+=PROPERTY_TYPE)*) |
	//        attributeSpecifier='rescaling')?)
	//    concept=CONCEPT_TYPE body=ConceptStatementBody
	//    // this is tautological and not meant to be used, just putting the
	//    // name field in the model so that it can be filled for cross-referencing
	//    // TODO is there a better way?
	//    ('named' name=NamespaceId)?;
	public ConceptStatementElements getConceptStatementAccess() {
		return pConceptStatement;
	}
	
	public ParserRule getConceptStatementRule() {
		return getConceptStatementAccess().getRule();
	}
	
	///*
	// * ------------------------------------------------------------------------------------------
	// * Ontology language - basically a more intuitive and imperative OW2L/Manchester syntax. Does not
	// * cover all of OWL2 yet, but should be plenty for modeling.
	// *
	// * deniable is for traits only. If a trait is deniable, 'not Trait' is a trait (of not being Trait).
	// * if not deniable, 'not Trait' means being any of the other concrete traits; if there is only one
	// * concrete trait it's an error. If there are two, it means being the other.
	// *
	// * Many of the verbs like "confers" or "creates" can also qualify actions in k.Actors, so that
	// * attributes and objects can be assigned/created/destroyed (and resolved) as the result of
	// * behavior actions.
	// *
	// * ------------------------------------------------------------------------------------------
	// */
	//ConceptStatementBody:
	//    // FIXME shouldn't have to repeat these two. Mostly to keep the underlying ECore neat at the children.
	//    annotations += Annotation*
	//    (abstract?='abstract')?
	//    (root?='root' | name=CAMELCASE_ID ('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?)
	//    (
	//        (docstring=STRING)? &
	//    /*
	//               * child of. Allows "nothing" as the only root-level parent for very special purposes.
	//               * Using 'extends' allows to reuse the subclasses of the extended concept and prevents
	//               * adding children of its own (a 'foster parent' of sorts). It should only be permitted for
	//               * subjective orderings.
	//               */
	//        ((('is' | alias?='equals') (coreConcept?='core')?) (nothing?='nothing' | parents+=ConceptDeclaration (connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))? &
	////    /*
	////     * traits contextualized. Only applicable to
	////     * classes. Abstract class must declare exposed traits; concrete class must
	////     * provide matching values using 'exposing'
	////     */
	////        (
	////            ('exposes' contextualizedTraits+=ObservableSemantics (','  contextualizedTraits+=ObservableSemantics)*) |
	////            (specific?='exposing' contextualizesTraits+=ConceptDeclaration (','  contextualizesTraits+=ConceptDeclaration)*)
	////        )? &
	//    /*
	//     * identifies main concepts for authority
	//     *
	//     * First-class concepts in the root domain can also rebase the
	//     * foundational concepts in the observation ontology.
	//     */
	//        ('defines' (('authority' definedAuthority=(UPPERCASE_ID|UPPERCASE_PATH)) | upperConcept=Concept))? &
	//    /*
	//               * requires identity, context or realm.
	//               */
	//        ('requires' requirements+=IdentityRequirement (',' requirements+=IdentityRequirement)*)? &
	//        /*
	//         * Various forms of link between an attribute (or quality) and a quality. Describes is the least
	//         * specific: others, such as direct and inverse proportionality, flagging and classifications
	//         * provide more detail and allow more inferences and validation in models.
	//         */
	//        // just establish a link
	//        ('describes' describedQuality=ConceptDeclaration  ('as' descriptionConstraints=DescriptionConstraints)? )? &
	//        // for quantity, direct and inverse proportionalities, use with orderings or qualities
	//        ('increases' 'with' describedProportionality=ConceptDeclaration)? &
	//        ('decreases' 'with' describedInverseProportionalityQuality=ConceptDeclaration)? &
	//        // must be deniable and relate to a quantity
	//        ('marks' describedNonzeroQuality=ConceptDeclaration)? &
	//        // any quality
	//        ('classifies' classifiesQuality=ConceptDeclaration)? &
	//        // only for quantities
	//        ('discretizes' discretizesQuality=ConceptDeclaration)? &
	//    /*
	//               * Traits that ARE inherited by this concept. Long version of <trait> <concept> for
	//               * reading clarity if no 'within' part is given.
	//               *
	//               * If the 'within' part is given, the concept is not given any traits but the specified
	//               * traits are inherited by the observables of any observation of this concept made within
	//               * those contexts. This will add a restriction to the restrictedObservable rather than
	//               * modify this concept.
	//               *
	//               * Not allowed for class (types) which should use 'contextualizes'.
	//               */
	//        ('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)? &
	//    /*
	//               * Roles within a context. The concept is not given any traits but the specified
	//               * traits are inherited by the observables of any observation of this concept made within
	//               * those contexts. This will add a restriction to the restrictedObservable rather than
	//               * modify this concept, and Thinklab will use the restrictions to attribute traits
	//               * after resolution.
	//               *
	//               * 'in' specifies a context (often a process if role is dynamic but can be a subject or event)
	//               * 'for' (optional) specifies a target subject/event type within the context; the context itself
	//               *       is used if not specified.
	//               */
	//        ('has' 'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)*
	//            /* FIXME 'for' here causes unexplained issues when 'for' in concept declarations is used, although there should be
	//             * complete independence between the declarations. */
	//            ('targeting' targetObservables+=ConceptDeclaration (',' targetObservables+=ConceptDeclaration)*)?
	//            ('in' restrictedObservables+=ConceptDeclaration (',' restrictedObservables+=ConceptDeclaration)*))? &
	//    /*
	//               * for processes: confer given trait(s) [or role(s)] to (participant subjects).
	//               */
	//        ('confers' conferredTraits+=ConceptDeclaration (',' conferredTraits+=ConceptDeclaration)*
	//            ('to' conferredTargets+=ConceptDeclaration (',' conferredTargets+=ConceptDeclaration)*)?
	//        )? &
	//        /*
	//         * explicit declaration of triggers for emergent observables (subjects, processes and configuration)
	//         */
	//        ('emerges' 'from' emergenceTriggers+=ConceptDeclaration (',' emergenceTriggers+=ConceptDeclaration)*)? &
	//    /**
	//     * Shorthand for common 'part of' restriction. TODO deprecate? Part-of should be left to the worldview.
	//     */
	////    (('part' | constituent?='constituent' | constitutes?='consists') partOf?='of' whole=ConceptDeclaration)? &
	//    /*
	//     * for processes: creates quality. Also for structural relationships (creates subject) and functional relationships\
	//     * (creates process). Paired with "affects" for process -> quality.
	//     */
	//    ('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)? &
	//    /*
	//     * traits can specify the set of allowed targets here. Also allows qualities and
	//     * processes to specify their inherent target.
	//     *
	//     * If applying concept is a role and it applies to a relationship, this can also restrict the source and destination.
	//     */
	//    ('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)? &
	//    /*
	//     * only for relationships: set domain and range of the associated property.
	//     */
	//    ('links' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration
	//            (',' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration)*)? &
	//    /*
	//     * only for relationships - set the inverse of the associated property (through the
	//     * relationship concept).
	//     */
	////    ('inverse' 'of' inverse=ConceptDeclaration)? &
	//    /*
	//     * for processes; lists qualities affected;
	//     * for deliberative agents: lists the subject types whose states this can
	//     * modify.
	//     */
	//    ('affects' qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)? &
	//    ('has' (disjoint?='disjoint')? 'children' children+=ChildConcept (',' children+=ChildConcept)*)? &
	//    ('implies' implications+=Implication (',' implications+=Implication)*)? &
	//    ('uses' 'authority' authorities+=(UPPERCASE_ID|UPPERCASE_PATH))? &
	//    ('metadata' metadata=Map)? &
	//    // properties are only object properties and are declared on appearance. This makes typos
	//    // problematic, of course, but the alternative is a load of ugly syntax.
	//    (properties+=PropertyStatement*)
	//    )
	//;
	public ConceptStatementBodyElements getConceptStatementBodyAccess() {
		return pConceptStatementBody;
	}
	
	public ParserRule getConceptStatementBodyRule() {
		return getConceptStatementBodyAccess().getRule();
	}
	
	//DescriptionConstraints:
	//    lower=Number ('to' higher=Number)? ('in' (currency=Currency | unit=Unit))? |
	//    concept=SimpleConceptDeclaration
	//;
	public DescriptionConstraintsElements getDescriptionConstraintsAccess() {
		return pDescriptionConstraints;
	}
	
	public ParserRule getDescriptionConstraintsRule() {
		return getDescriptionConstraintsAccess().getRule();
	}
	
	//Implication:
	//    (quantifier=Quantification)? concept=ConceptDeclaration
	//         /*(*/('as' target=ConceptDeclaration)? /* & ('within' context=ConceptDeclaration)?)?  */
	//;
	public ImplicationElements getImplicationAccess() {
		return pImplication;
	}
	
	public ParserRule getImplicationRule() {
		return getImplicationAccess().getRule();
	}
	
	//Quantification: {Quantification}
	//    (only?='only' | (exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')? )?
	//;
	public QuantificationElements getQuantificationAccess() {
		return pQuantification;
	}
	
	public ParserRule getQuantificationRule() {
		return getQuantificationAccess().getRule();
	}
	
	//PropertyStatement:
	//    (property=(PropertyId|BACKCASE_ID) | has?='has' | contains?='contains' | uses?='uses')
	//        (only?='only' | (exactly?='exactly' | 'at' (atLeast?='least' | atMost?='most'))? cardinality=INT ('or' orMore?='more')? )?
	//        propertyTarget=SimpleConceptDeclaration
	//;
	public PropertyStatementElements getPropertyStatementAccess() {
		return pPropertyStatement;
	}
	
	public ParserRule getPropertyStatementRule() {
		return getPropertyStatementAccess().getRule();
	}
	
	//ApplicableTarget:
	//    target=ConceptDeclaration ('between' linkFrom=ConceptDeclaration 'and' linkTo=ConceptDeclaration)?
	//;
	public ApplicableTargetElements getApplicableTargetAccess() {
		return pApplicableTarget;
	}
	
	public ParserRule getApplicableTargetRule() {
		return getApplicableTargetAccess().getRule();
	}
	
	//ChildConcept returns ConceptStatementBody:
	//    (abstract?='abstract')? name=CAMELCASE_ID |
	//    '(' ConceptStatementBody ')';
	public ChildConceptElements getChildConceptAccess() {
		return pChildConcept;
	}
	
	public ParserRule getChildConceptRule() {
		return getChildConceptAccess().getRule();
	}
	
	//IdentityRequirement:
	//    type=('identity' | 'attribute' | 'realm' | 'extent') identities+=ConceptDeclaration (',' identities+=ConceptDeclaration)* |
	//     'authority' authority=(UPPERCASE_ID|UPPERCASE_PATH)
	//    ;
	public IdentityRequirementElements getIdentityRequirementAccess() {
		return pIdentityRequirement;
	}
	
	public ParserRule getIdentityRequirementRule() {
		return getIdentityRequirementAccess().getRule();
	}
	
	///*
	// * Ultra-simple restriction statements:
	// *
	// * uses [only] CCC [for PPP]; // PPP can be a property or a concept
	// * uses at [least|most] 1 CCC [for PPP]
	// * uses exactly 1 CCC [for PPP]
	// * uses 120 for PPP // data property
	// *
	// * uses = has; requires = functional has; contains = part-of (contextually resolved). implies is only for roles.
	// *
	// * if PPP is a concept (much more intuitive), must be restricting a known one and hasPPP is created (or used).
	// *
	// * Also hosts the 'uses authority' restriction which is only accepted by domains.
	// *
	// */
	////RestrictionStatement:
	////    relType=('uses' | 'has' | 'contains' | 'implies') definitions+=RestrictionDefinition (',' definitions+=RestrictionDefinition)* |
	////    'uses' 'authority' authorities+=(UPPERCASE_ID|UPPERCASE_PATH) (=> ',' authorities+=(UPPERCASE_ID|UPPERCASE_PATH))* |
	////    'uses' value=Literal literal?='for' subject=(CAMELCASE_ID | NamespaceId);
	////
	////RestrictionDefinition:
	////    // concept restriction: the 'for' should introduce a concept, for a property defined by k.LAB
	////    (only?='only' | none?='no' | ((exactly?='exactly' | ('at' atLeast?='least') | ('at' atMost?='most')) howmany=INT))?
	////    (source=ConceptDeclaration | dataType=DataType) ('inheriting' traitType=ConceptDeclaration)?
	////    ('as' (subject=ConceptDeclaration))? /*|
	////    // data restriction, only for special cases in worldview namespaces; 'for' introduces a data property from core ontologies
	////    value=Literal ('to' maxValue=Number)? 'for' property=PropertyId */
	////;
	//Annotation:
	//    name=ANNOTATION_ID (=> '(' parameters=ParameterList? ')')?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//List:
	//    {List} '(' contents+=ValueWithIdAndConcept? ((',')? contents+=ValueWithIdAndConcept)* ')';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Literal:
	//     from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false');
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//LiteralOrID returns Literal:
	//    number=Number | string=STRING | boolean=('true' | 'false') | id=ID;
	public LiteralOrIDElements getLiteralOrIDAccess() {
		return pLiteralOrID;
	}
	
	public ParserRule getLiteralOrIDRule() {
		return getLiteralOrIDAccess().getRule();
	}
	
	//LiteralOrIdOrComma returns Literal:
	//     from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=',';
	public LiteralOrIdOrCommaElements getLiteralOrIdOrCommaAccess() {
		return pLiteralOrIdOrComma;
	}
	
	public ParserRule getLiteralOrIdOrCommaRule() {
		return getLiteralOrIdOrCommaAccess().getRule();
	}
	
	//Map:
	//    {Map} '{' (entries+=MapEntry (=> (',')? entries+=MapEntry)*)? '}'
	//;
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	//MapEntry:
	//    // must remove 'in (...)' from classifiers to avoid conflict with observable units, which are more necessary.
	//    classifier=ClassifierRHSWithIdNoSet ':' value=ValueWithIdAndConcept
	//;
	public MapEntryElements getMapEntryAccess() {
		return pMapEntry;
	}
	
	public ParserRule getMapEntryRule() {
		return getMapEntryAccess().getRule();
	}
	
	//DocSelector:
	//    id=PropertyId |
	//    'on' (
	//        definition?='definition' |
	//        initialization?='initialization' |
	//        termination?='termination' |
	//        transition?='transition'
	//    )
	//;
	public DocSelectorElements getDocSelectorAccess() {
		return pDocSelector;
	}
	
	public ParserRule getDocSelectorRule() {
		return getDocSelectorAccess().getRule();
	}
	
	//KeyValuePair:
	//    name=(PathName | LOWERCASE_ID | 'value') (interactive?='?=' | '=') value=ValueWithIdAndConcept;
	public KeyValuePairElements getKeyValuePairAccess() {
		return pKeyValuePair;
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	//ParameterList:
	//    pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)* |
	//    singleValue+=ValueWithIdAndConcept (=> ',' (singleValue+=ValueWithIdAndConcept | pairs+=KeyValuePair))*
	//;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ValueWithIdAndConcept returns Value:
	//    map=Map |
	//    concept=SimpleObservableSemantics |
	//    function=Function |
	//    date=Date |
	//    literal=Literal |
	//    expr=EXPR |
	//    templatevar=TEMPLATE_VAR |
	//    id=(PathName|LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
	//    table=LookupTable |
	//    list=List |
	//    quantity=Quantity |
	//    op=REL_OPERATOR expression=Number |
	//    null?='unknown';
	public ValueWithIdAndConceptElements getValueWithIdAndConceptAccess() {
		return pValueWithIdAndConcept;
	}
	
	public ParserRule getValueWithIdAndConceptRule() {
		return getValueWithIdAndConceptAccess().getRule();
	}
	
	//Value:
	//    literal=LiteralOrIdOrComma |
	//    function=Function |
	//    expr=EXPR ('in' language=UPPERCASE_ID)? |
	//    id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) |
	//    list=List |
	//    table=LookupTable |
	//    quantity=Quantity |
	//    date=Date |
	//    map=Map |
	//    null?='unknown';
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//// value for 'value as observable' idioms
	//LiteralValueWithConcept returns Value:
	//    literal=Literal |
	//    concept=ConceptDeclaration |
	//    function=Function |
	//    expr=EXPR |
	//    quantity=Quantity |
	//    date=Date |
	//    id=(LOWERCASE_ID|UPPERCASE_ID|CAMELCASE_ID) /* |
	//    list=List |
	//    table=LookupTable |
	//    map=Map */;
	public LiteralValueWithConceptElements getLiteralValueWithConceptAccess() {
		return pLiteralValueWithConcept;
	}
	
	public ParserRule getLiteralValueWithConceptRule() {
		return getLiteralValueWithConceptAccess().getRule();
	}
	
	//Function:
	//    name=PathName '(' parameters=ParameterList? ')';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//// expression starting with # forces scalar evaluation
	//terminal EXPR:
	//    ('['|'#[') ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | ']' | '\\') | !('\\' | ']'))* ']';
	public TerminalRule getEXPRRule() {
		return tEXPR;
	}
	
	////enum DataType:
	////    TEXT='text' |
	////    INTEGER='integer' |
	////    FLOAT='float' |
	////    BOOLEAN='boolean' |
	////    DATE='date';
	//Option:
	//    key=OPTION_KEY value=ValueWithIdAndConcept
	//;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//terminal OPTION_KEY:
	//    '?'('a'..'z') ('a'..'z' | '0'..'9')*;
	public TerminalRule getOPTION_KEYRule() {
		return tOPTION_KEY;
	}
	
	////RESOLUTION_EXCEPTION:
	////    'error' |
	////    'nodata' |
	////    'missing'
	////;
	///**
	// * Carefully selected keywords to define a concept, which enable automatic definition of
	// * fairly complex semantics and validation against upper ontologies. For now implement
	// * physical properties, value concepts and basic agent types re: DOLCE types.
	// *
	// * A similar thing could be done for properties
	// *
	// * This is a lot of keywords, although it's probably good to protect these names from
	// * being used as identifiers in anything.
	// */
	//CONCEPT_TYPE:
	//    'quality' |
	//    DECLARABLE_TYPE
	//;
	public CONCEPT_TYPEElements getCONCEPT_TYPEAccess() {
		return pCONCEPT_TYPE;
	}
	
	public ParserRule getCONCEPT_TYPERule() {
		return getCONCEPT_TYPEAccess().getRule();
	}
	
	//DECLARABLE_TYPE:
	//    'class' |
	//    'quantity' |
	//    'configuration' |
	//    'relationship' |
	//    'bond' |
	//    'extent' |
	//    EXTENSIVE_PROPERTY |
	//    INTENSIVE_PROPERTY |
	//    AGENT_TYPE |
	//    TRAIT
	//;
	public DECLARABLE_TYPEElements getDECLARABLE_TYPEAccess() {
		return pDECLARABLE_TYPE;
	}
	
	public ParserRule getDECLARABLE_TYPERule() {
		return getDECLARABLE_TYPEAccess().getRule();
	}
	
	//TRAIT:
	//    'ordering' |
	//    'attribute' |
	//    'identity' |
	//    'role' |
	//    'realm' |
	//    'domain';
	public TRAITElements getTRAITAccess() {
		return pTRAIT;
	}
	
	public ParserRule getTRAITRule() {
		return getTRAITAccess().getRule();
	}
	
	//EXTENSIVE_PROPERTY:
	//    'amount' |
	//    'length' |
	//    'mass' |
	//    'volume' |
	//    'weight' |
	//    'money' |
	//    'duration' |
	//    'area';
	public EXTENSIVE_PROPERTYElements getEXTENSIVE_PROPERTYAccess() {
		return pEXTENSIVE_PROPERTY;
	}
	
	public ParserRule getEXTENSIVE_PROPERTYRule() {
		return getEXTENSIVE_PROPERTYAccess().getRule();
	}
	
	//INTENSIVE_PROPERTY:
	//    'acceleration' |
	//    'energy' |
	//    'entropy' |
	//    'priority' |
	//    'electric-potential' |
	//    'charge' |
	//    'resistance' |
	//    'resistivity' |
	//    'pressure' |
	//    'angle' |
	//    'velocity' |
	//    'temperature' |
	//    'viscosity';
	public INTENSIVE_PROPERTYElements getINTENSIVE_PROPERTYAccess() {
		return pINTENSIVE_PROPERTY;
	}
	
	public ParserRule getINTENSIVE_PROPERTYRule() {
		return getINTENSIVE_PROPERTYAccess().getRule();
	}
	
	//AGENT_TYPE:
	//    'thing' |
	//    'process' |
	//    'agent' |
	//    'event';
	public AGENT_TYPEElements getAGENT_TYPEAccess() {
		return pAGENT_TYPE;
	}
	
	public ParserRule getAGENT_TYPERule() {
		return getAGENT_TYPEAccess().getRule();
	}
	
	//PROPERTY_TYPE:
	//    'functional' |
	//    'structural';
	public PROPERTY_TYPEElements getPROPERTY_TYPEAccess() {
		return pPROPERTY_TYPE;
	}
	
	public ParserRule getPROPERTY_TYPERule() {
		return getPROPERTY_TYPEAccess().getRule();
	}
	
	//terminal ANNOTATION_ID:
	//    '@' LOWERCASE_ID;
	public TerminalRule getANNOTATION_IDRule() {
		return tANNOTATION_ID;
	}
	
	///*
	// * Full observable without the 'as <role>' but with 'optional'
	// */
	//DependencyObservableSemantics returns ObservableSemantics:
	//    (value=LiteralValueWithConcept 'as')?
	//    (generic?='any')?
	//    declaration=ConceptDeclaration
	//    (
	//        ('according' 'to' accordingTo=PropertyId)? &
	//        (
	//            ('in' (unit=Unit | currency=Currency)) |
	//            ('per' unit=Unit)
	//        )? &
	//        (from=Number 'to' to=Number)? &
	//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
	//        (optional?='optional'| 'required')? &
	////        (default?='default' 'to' (defaultLiteral=Literal | defaultConcept=ConceptDeclaration) ('when' causes+=RESOLUTION_EXCEPTION (',' causes+=RESOLUTION_EXCEPTION)*)? )? &
	//        ('named' name=(LOWERCASE_ID|STRING))?
	//    );
	public DependencyObservableSemanticsElements getDependencyObservableSemanticsAccess() {
		return pDependencyObservableSemantics;
	}
	
	public ParserRule getDependencyObservableSemanticsRule() {
		return getDependencyObservableSemanticsAccess().getRule();
	}
	
	///*
	// * As above but meant for groups, so without name (supplied outside the group) and optional, but with
	// * an optional condition for switching
	// */
	//AlternativeDependencyObservableSemantics returns ObservableSemantics:
	//    (value=LiteralValueWithConcept 'as')?
	//    (generic?='any')?
	//    declaration=ConceptDeclaration
	//    (
	//        ('according' 'to' accordingTo=PropertyId)? &
	//        (
	//            ('in' (unit=Unit | currency=Currency)) |
	//            ('per' unit=Unit)
	//        )? &
	//        (from=Number 'to' to=Number)? &
	//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
	//    )
	//    ('if' condition=EXPR)?;
	public AlternativeDependencyObservableSemanticsElements getAlternativeDependencyObservableSemanticsAccess() {
		return pAlternativeDependencyObservableSemantics;
	}
	
	public ParserRule getAlternativeDependencyObservableSemanticsRule() {
		return getAlternativeDependencyObservableSemanticsAccess().getRule();
	}
	
	///*
	// * Observable with no quality semantics and mandatory name, for observations. Allows
	// * dashes in name.
	// */
	//NamedObservableSemantics returns ObservableSemantics:
	//    declaration=ConceptDeclaration 'named' name=(LOWERCASE_ID|LOWERCASE_DASHID|STRING);
	public NamedObservableSemanticsElements getNamedObservableSemanticsAccess() {
		return pNamedObservableSemantics;
	}
	
	public ParserRule getNamedObservableSemanticsRule() {
		return getNamedObservableSemanticsAccess().getRule();
	}
	
	///**
	// * ---------------------------------------
	// * Unit of measurement re: jsr-108, parseable by Java
	// * ---------------------------------------
	// */
	//REL_OPERATOR:
	//    (gt?='>' |
	//    lt?='<' |
	//    eq?='=' |
	//    ne?='!=' |
	//    le?='<=' |
	//    ge?='>=');
	public REL_OPERATORElements getREL_OPERATORAccess() {
		return pREL_OPERATOR;
	}
	
	public ParserRule getREL_OPERATORRule() {
		return getREL_OPERATORAccess().getRule();
	}
	
	//enum UnitOp:
	//    OVER='/' | CARET='^' | STAR='*';
	public UnitOpElements getUnitOpAccess() {
		return eUnitOp;
	}
	
	public EnumRule getUnitOpRule() {
		return getUnitOpAccess().getRule();
	}
	
	//UnitElement:
	//    id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID) |
	//    '(' unit=Unit ')';
	public UnitElementElements getUnitElementAccess() {
		return pUnitElement;
	}
	
	public ParserRule getUnitElementRule() {
		return getUnitElementAccess().getRule();
	}
	
	//Unit:
	//    {Unit} (root=UnitElement)? (=> (connectors+=UnitOp) (units+=UnitElement))*;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Currency:
	//    id=UPPERCASE_ID ('@' year=INT) (=> '/' (units+=UnitElement))*;
	public CurrencyElements getCurrencyAccess() {
		return pCurrency;
	}
	
	public ParserRule getCurrencyRule() {
		return getCurrencyAccess().getRule();
	}
	
	//Number:
	//    ('+' | negative?='-')? => real=INT (=> long?='l')? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Quantity:
	//    value=Number (over?='/' | '.') (unit=Unit | currency=Currency)
	//;
	public QuantityElements getQuantityAccess() {
		return pQuantity;
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}
	
	//Date:
	//    year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
	//;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	////terminal UNIT_ID:
	////    '℃' | '°' | 'Ω' | 'm²' | '㎥' | '°F' | '°C'
	////;
	////
	////terminal UNIT_NAME:
	////    (\u03bc)? (CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID|UNIT_ID)
	////;
	//terminal TEMPLATE_VAR:
	//    '%' ('a'..'z') ('a'..'z' | '0'..'9'| '_')* '%'
	//;
	public TerminalRule getTEMPLATE_VARRule() {
		return tTEMPLATE_VAR;
	}
	
	//terminal LOWERCASE_ID:
	//    ('a'..'z') ('a'..'z' | '0'..'9'| '_')*;
	public TerminalRule getLOWERCASE_IDRule() {
		return tLOWERCASE_ID;
	}
	
	//terminal LOWERCASE_DASHID:
	//    ('a'..'z') ('a'..'z' | '0'..'9'| '-')*;
	public TerminalRule getLOWERCASE_DASHIDRule() {
		return tLOWERCASE_DASHID;
	}
	
	//PathName:
	//    (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID) ('.' (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID))*
	//;
	public PathNameElements getPathNameAccess() {
		return pPathName;
	}
	
	public ParserRule getPathNameRule() {
		return getPathNameAccess().getRule();
	}
	
	//Path:
	//    (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID) (('.' | '/') (LOWERCASE_ID|UPPERCASE_ID|LOWERCASE_DASHID))*
	//;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//terminal SEPARATOR:
	//    '---' ('-')*
	//;
	public TerminalRule getSEPARATORRule() {
		return tSEPARATOR;
	}
	
	//terminal UPPERCASE_ID:
	//    ('A'..'Z') ('A'..'Z' | '0'..'9' | '_')+;
	public TerminalRule getUPPERCASE_IDRule() {
		return tUPPERCASE_ID;
	}
	
	////// number with a prefix, for versions and the like
	////terminal UPPERCASE_ID_NUM:
	////    ('A'..'Z')+ ('0'..'9')('A'..'Z'|'0'..'9')+;
	//terminal UPPERCASE_PATH:
	//    UPPERCASE_ID ('.' (UPPERCASE_ID|INT))*;
	public TerminalRule getUPPERCASE_PATHRule() {
		return tUPPERCASE_PATH;
	}
	
	//terminal CAMELCASE_ID:
	//    ('A'..'Z') ('A'..'z'|'0'..'9')*;
	public TerminalRule getCAMELCASE_IDRule() {
		return tCAMELCASE_ID;
	}
	
	//terminal BACKCASE_ID:
	//    ('a'..'z') ('A'..'z'|'0'..'9')*;
	public TerminalRule getBACKCASE_IDRule() {
		return tBACKCASE_ID;
	}
	
	//NamespaceId:
	//    PathName ':' CAMELCASE_ID;
	public NamespaceIdElements getNamespaceIdAccess() {
		return pNamespaceId;
	}
	
	public ParserRule getNamespaceIdRule() {
		return getNamespaceIdAccess().getRule();
	}
	
	//AuthorityId:
	//    (UPPERCASE_PATH|UPPERCASE_ID) ':' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING) ('.' (LOWERCASE_ID|UPPERCASE_ID|INT|STRING))* |
	//    WellFormedUrnIdWithFragment
	//;
	public AuthorityIdElements getAuthorityIdAccess() {
		return pAuthorityId;
	}
	
	public ParserRule getAuthorityIdRule() {
		return getAuthorityIdAccess().getRule();
	}
	
	//PropertyId:
	//    (PathName | LOWERCASE_ID) ':' (LOWERCASE_ID|BACKCASE_ID|LOWERCASE_DASHID);
	public PropertyIdElements getPropertyIdAccess() {
		return pPropertyId;
	}
	
	public ParserRule getPropertyIdRule() {
		return getPropertyIdAccess().getRule();
	}
	
	//VersionNumber:
	//    INT ('.' INT ('.' INT)?)? ('-')? ((LOWERCASE_ID|UPPERCASE_ID))?
	//;
	public VersionNumberElements getVersionNumberAccess() {
		return pVersionNumber;
	}
	
	public ParserRule getVersionNumberRule() {
		return getVersionNumberAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
