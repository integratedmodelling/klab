/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kim.kim.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kim.kim.ConceptDeclaration;
import org.integratedmodelling.kim.kim.Currency;
import org.integratedmodelling.kim.kim.DescriptionConstraints;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.Unit;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Description Constraints</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.DescriptionConstraintsImpl#getLower <em>Lower</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.DescriptionConstraintsImpl#getHigher <em>Higher</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.DescriptionConstraintsImpl#getCurrency <em>Currency</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.DescriptionConstraintsImpl#getUnit <em>Unit</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.DescriptionConstraintsImpl#getConcept <em>Concept</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DescriptionConstraintsImpl extends MinimalEObjectImpl.Container implements DescriptionConstraints
{
  /**
   * The cached value of the '{@link #getLower() <em>Lower</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLower()
   * @generated
   * @ordered
   */
  protected org.integratedmodelling.kim.kim.Number lower;

  /**
   * The cached value of the '{@link #getHigher() <em>Higher</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHigher()
   * @generated
   * @ordered
   */
  protected org.integratedmodelling.kim.kim.Number higher;

  /**
   * The cached value of the '{@link #getCurrency() <em>Currency</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCurrency()
   * @generated
   * @ordered
   */
  protected Currency currency;

  /**
   * The cached value of the '{@link #getUnit() <em>Unit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected Unit unit;

  /**
   * The cached value of the '{@link #getConcept() <em>Concept</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration concept;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DescriptionConstraintsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.DESCRIPTION_CONSTRAINTS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.integratedmodelling.kim.kim.Number getLower()
  {
    return lower;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLower(org.integratedmodelling.kim.kim.Number newLower, NotificationChain msgs)
  {
    org.integratedmodelling.kim.kim.Number oldLower = lower;
    lower = newLower;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.DESCRIPTION_CONSTRAINTS__LOWER, oldLower, newLower);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLower(org.integratedmodelling.kim.kim.Number newLower)
  {
    if (newLower != lower)
    {
      NotificationChain msgs = null;
      if (lower != null)
        msgs = ((InternalEObject)lower).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.DESCRIPTION_CONSTRAINTS__LOWER, null, msgs);
      if (newLower != null)
        msgs = ((InternalEObject)newLower).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.DESCRIPTION_CONSTRAINTS__LOWER, null, msgs);
      msgs = basicSetLower(newLower, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.DESCRIPTION_CONSTRAINTS__LOWER, newLower, newLower));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.integratedmodelling.kim.kim.Number getHigher()
  {
    return higher;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHigher(org.integratedmodelling.kim.kim.Number newHigher, NotificationChain msgs)
  {
    org.integratedmodelling.kim.kim.Number oldHigher = higher;
    higher = newHigher;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.DESCRIPTION_CONSTRAINTS__HIGHER, oldHigher, newHigher);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHigher(org.integratedmodelling.kim.kim.Number newHigher)
  {
    if (newHigher != higher)
    {
      NotificationChain msgs = null;
      if (higher != null)
        msgs = ((InternalEObject)higher).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.DESCRIPTION_CONSTRAINTS__HIGHER, null, msgs);
      if (newHigher != null)
        msgs = ((InternalEObject)newHigher).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.DESCRIPTION_CONSTRAINTS__HIGHER, null, msgs);
      msgs = basicSetHigher(newHigher, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.DESCRIPTION_CONSTRAINTS__HIGHER, newHigher, newHigher));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Currency getCurrency()
  {
    return currency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCurrency(Currency newCurrency, NotificationChain msgs)
  {
    Currency oldCurrency = currency;
    currency = newCurrency;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.DESCRIPTION_CONSTRAINTS__CURRENCY, oldCurrency, newCurrency);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCurrency(Currency newCurrency)
  {
    if (newCurrency != currency)
    {
      NotificationChain msgs = null;
      if (currency != null)
        msgs = ((InternalEObject)currency).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.DESCRIPTION_CONSTRAINTS__CURRENCY, null, msgs);
      if (newCurrency != null)
        msgs = ((InternalEObject)newCurrency).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.DESCRIPTION_CONSTRAINTS__CURRENCY, null, msgs);
      msgs = basicSetCurrency(newCurrency, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.DESCRIPTION_CONSTRAINTS__CURRENCY, newCurrency, newCurrency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unit getUnit()
  {
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnit(Unit newUnit, NotificationChain msgs)
  {
    Unit oldUnit = unit;
    unit = newUnit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.DESCRIPTION_CONSTRAINTS__UNIT, oldUnit, newUnit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnit(Unit newUnit)
  {
    if (newUnit != unit)
    {
      NotificationChain msgs = null;
      if (unit != null)
        msgs = ((InternalEObject)unit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.DESCRIPTION_CONSTRAINTS__UNIT, null, msgs);
      if (newUnit != null)
        msgs = ((InternalEObject)newUnit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.DESCRIPTION_CONSTRAINTS__UNIT, null, msgs);
      msgs = basicSetUnit(newUnit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.DESCRIPTION_CONSTRAINTS__UNIT, newUnit, newUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getConcept()
  {
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConcept(ConceptDeclaration newConcept, NotificationChain msgs)
  {
    ConceptDeclaration oldConcept = concept;
    concept = newConcept;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.DESCRIPTION_CONSTRAINTS__CONCEPT, oldConcept, newConcept);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConcept(ConceptDeclaration newConcept)
  {
    if (newConcept != concept)
    {
      NotificationChain msgs = null;
      if (concept != null)
        msgs = ((InternalEObject)concept).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.DESCRIPTION_CONSTRAINTS__CONCEPT, null, msgs);
      if (newConcept != null)
        msgs = ((InternalEObject)newConcept).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.DESCRIPTION_CONSTRAINTS__CONCEPT, null, msgs);
      msgs = basicSetConcept(newConcept, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.DESCRIPTION_CONSTRAINTS__CONCEPT, newConcept, newConcept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.DESCRIPTION_CONSTRAINTS__LOWER:
        return basicSetLower(null, msgs);
      case KimPackage.DESCRIPTION_CONSTRAINTS__HIGHER:
        return basicSetHigher(null, msgs);
      case KimPackage.DESCRIPTION_CONSTRAINTS__CURRENCY:
        return basicSetCurrency(null, msgs);
      case KimPackage.DESCRIPTION_CONSTRAINTS__UNIT:
        return basicSetUnit(null, msgs);
      case KimPackage.DESCRIPTION_CONSTRAINTS__CONCEPT:
        return basicSetConcept(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.DESCRIPTION_CONSTRAINTS__LOWER:
        return getLower();
      case KimPackage.DESCRIPTION_CONSTRAINTS__HIGHER:
        return getHigher();
      case KimPackage.DESCRIPTION_CONSTRAINTS__CURRENCY:
        return getCurrency();
      case KimPackage.DESCRIPTION_CONSTRAINTS__UNIT:
        return getUnit();
      case KimPackage.DESCRIPTION_CONSTRAINTS__CONCEPT:
        return getConcept();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.DESCRIPTION_CONSTRAINTS__LOWER:
        setLower((org.integratedmodelling.kim.kim.Number)newValue);
        return;
      case KimPackage.DESCRIPTION_CONSTRAINTS__HIGHER:
        setHigher((org.integratedmodelling.kim.kim.Number)newValue);
        return;
      case KimPackage.DESCRIPTION_CONSTRAINTS__CURRENCY:
        setCurrency((Currency)newValue);
        return;
      case KimPackage.DESCRIPTION_CONSTRAINTS__UNIT:
        setUnit((Unit)newValue);
        return;
      case KimPackage.DESCRIPTION_CONSTRAINTS__CONCEPT:
        setConcept((ConceptDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.DESCRIPTION_CONSTRAINTS__LOWER:
        setLower((org.integratedmodelling.kim.kim.Number)null);
        return;
      case KimPackage.DESCRIPTION_CONSTRAINTS__HIGHER:
        setHigher((org.integratedmodelling.kim.kim.Number)null);
        return;
      case KimPackage.DESCRIPTION_CONSTRAINTS__CURRENCY:
        setCurrency((Currency)null);
        return;
      case KimPackage.DESCRIPTION_CONSTRAINTS__UNIT:
        setUnit((Unit)null);
        return;
      case KimPackage.DESCRIPTION_CONSTRAINTS__CONCEPT:
        setConcept((ConceptDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.DESCRIPTION_CONSTRAINTS__LOWER:
        return lower != null;
      case KimPackage.DESCRIPTION_CONSTRAINTS__HIGHER:
        return higher != null;
      case KimPackage.DESCRIPTION_CONSTRAINTS__CURRENCY:
        return currency != null;
      case KimPackage.DESCRIPTION_CONSTRAINTS__UNIT:
        return unit != null;
      case KimPackage.DESCRIPTION_CONSTRAINTS__CONCEPT:
        return concept != null;
    }
    return super.eIsSet(featureID);
  }

} //DescriptionConstraintsImpl
