/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kim.kim.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.UpperOntologyDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Upper Ontology Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.UpperOntologyDefinitionImpl#getAgentSpecifier <em>Agent Specifier</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.UpperOntologyDefinitionImpl#getConcept <em>Concept</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.UpperOntologyDefinitionImpl#getPropertySpecifiers <em>Property Specifiers</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.UpperOntologyDefinitionImpl#getCoreconcept <em>Coreconcept</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.UpperOntologyDefinitionImpl#getOperand <em>Operand</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.UpperOntologyDefinitionImpl#getProperty <em>Property</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UpperOntologyDefinitionImpl extends MinimalEObjectImpl.Container implements UpperOntologyDefinition
{
  /**
   * The default value of the '{@link #getAgentSpecifier() <em>Agent Specifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAgentSpecifier()
   * @generated
   * @ordered
   */
  protected static final String AGENT_SPECIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAgentSpecifier() <em>Agent Specifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAgentSpecifier()
   * @generated
   * @ordered
   */
  protected String agentSpecifier = AGENT_SPECIFIER_EDEFAULT;

  /**
   * The default value of the '{@link #getConcept() <em>Concept</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected static final String CONCEPT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConcept() <em>Concept</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected String concept = CONCEPT_EDEFAULT;

  /**
   * The cached value of the '{@link #getPropertySpecifiers() <em>Property Specifiers</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertySpecifiers()
   * @generated
   * @ordered
   */
  protected EList<String> propertySpecifiers;

  /**
   * The default value of the '{@link #getCoreconcept() <em>Coreconcept</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCoreconcept()
   * @generated
   * @ordered
   */
  protected static final String CORECONCEPT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCoreconcept() <em>Coreconcept</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCoreconcept()
   * @generated
   * @ordered
   */
  protected String coreconcept = CORECONCEPT_EDEFAULT;

  /**
   * The default value of the '{@link #getOperand() <em>Operand</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperand()
   * @generated
   * @ordered
   */
  protected static final String OPERAND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperand() <em>Operand</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperand()
   * @generated
   * @ordered
   */
  protected String operand = OPERAND_EDEFAULT;

  /**
   * The default value of the '{@link #getProperty() <em>Property</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperty()
   * @generated
   * @ordered
   */
  protected static final String PROPERTY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProperty() <em>Property</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperty()
   * @generated
   * @ordered
   */
  protected String property = PROPERTY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UpperOntologyDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.UPPER_ONTOLOGY_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAgentSpecifier()
  {
    return agentSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAgentSpecifier(String newAgentSpecifier)
  {
    String oldAgentSpecifier = agentSpecifier;
    agentSpecifier = newAgentSpecifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.UPPER_ONTOLOGY_DEFINITION__AGENT_SPECIFIER, oldAgentSpecifier, agentSpecifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConcept()
  {
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConcept(String newConcept)
  {
    String oldConcept = concept;
    concept = newConcept;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.UPPER_ONTOLOGY_DEFINITION__CONCEPT, oldConcept, concept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getPropertySpecifiers()
  {
    if (propertySpecifiers == null)
    {
      propertySpecifiers = new EDataTypeEList<String>(String.class, this, KimPackage.UPPER_ONTOLOGY_DEFINITION__PROPERTY_SPECIFIERS);
    }
    return propertySpecifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCoreconcept()
  {
    return coreconcept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCoreconcept(String newCoreconcept)
  {
    String oldCoreconcept = coreconcept;
    coreconcept = newCoreconcept;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.UPPER_ONTOLOGY_DEFINITION__CORECONCEPT, oldCoreconcept, coreconcept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOperand()
  {
    return operand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperand(String newOperand)
  {
    String oldOperand = operand;
    operand = newOperand;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.UPPER_ONTOLOGY_DEFINITION__OPERAND, oldOperand, operand));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProperty()
  {
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProperty(String newProperty)
  {
    String oldProperty = property;
    property = newProperty;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.UPPER_ONTOLOGY_DEFINITION__PROPERTY, oldProperty, property));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__AGENT_SPECIFIER:
        return getAgentSpecifier();
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__CONCEPT:
        return getConcept();
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__PROPERTY_SPECIFIERS:
        return getPropertySpecifiers();
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__CORECONCEPT:
        return getCoreconcept();
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__OPERAND:
        return getOperand();
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__PROPERTY:
        return getProperty();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__AGENT_SPECIFIER:
        setAgentSpecifier((String)newValue);
        return;
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__CONCEPT:
        setConcept((String)newValue);
        return;
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__PROPERTY_SPECIFIERS:
        getPropertySpecifiers().clear();
        getPropertySpecifiers().addAll((Collection<? extends String>)newValue);
        return;
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__CORECONCEPT:
        setCoreconcept((String)newValue);
        return;
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__OPERAND:
        setOperand((String)newValue);
        return;
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__PROPERTY:
        setProperty((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__AGENT_SPECIFIER:
        setAgentSpecifier(AGENT_SPECIFIER_EDEFAULT);
        return;
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__CONCEPT:
        setConcept(CONCEPT_EDEFAULT);
        return;
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__PROPERTY_SPECIFIERS:
        getPropertySpecifiers().clear();
        return;
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__CORECONCEPT:
        setCoreconcept(CORECONCEPT_EDEFAULT);
        return;
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__OPERAND:
        setOperand(OPERAND_EDEFAULT);
        return;
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__PROPERTY:
        setProperty(PROPERTY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__AGENT_SPECIFIER:
        return AGENT_SPECIFIER_EDEFAULT == null ? agentSpecifier != null : !AGENT_SPECIFIER_EDEFAULT.equals(agentSpecifier);
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__CONCEPT:
        return CONCEPT_EDEFAULT == null ? concept != null : !CONCEPT_EDEFAULT.equals(concept);
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__PROPERTY_SPECIFIERS:
        return propertySpecifiers != null && !propertySpecifiers.isEmpty();
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__CORECONCEPT:
        return CORECONCEPT_EDEFAULT == null ? coreconcept != null : !CORECONCEPT_EDEFAULT.equals(coreconcept);
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__OPERAND:
        return OPERAND_EDEFAULT == null ? operand != null : !OPERAND_EDEFAULT.equals(operand);
      case KimPackage.UPPER_ONTOLOGY_DEFINITION__PROPERTY:
        return PROPERTY_EDEFAULT == null ? property != null : !PROPERTY_EDEFAULT.equals(property);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (agentSpecifier: ");
    result.append(agentSpecifier);
    result.append(", concept: ");
    result.append(concept);
    result.append(", propertySpecifiers: ");
    result.append(propertySpecifiers);
    result.append(", coreconcept: ");
    result.append(coreconcept);
    result.append(", operand: ");
    result.append(operand);
    result.append(", property: ");
    result.append(property);
    result.append(')');
    return result.toString();
  }

} //UpperOntologyDefinitionImpl
