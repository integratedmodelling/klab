/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.26.0
 */
package org.integratedmodelling.kim.kim.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kim.kim.Action;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.Value;
import org.integratedmodelling.kim.kim.ValueAssignment;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ActionImpl#isSet <em>Set</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ActionImpl#getAssignments <em>Assignments</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ActionImpl#isConditionNegative <em>Condition Negative</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ActionImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ActionImpl#isIntegrate <em>Integrate</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ActionImpl#isDo <em>Do</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ActionImpl#getExecuted <em>Executed</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ActionImpl#isMove <em>Move</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ActionImpl#getWhere <em>Where</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ActionImpl#isAway <em>Away</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActionImpl extends MinimalEObjectImpl.Container implements Action
{
  /**
   * The default value of the '{@link #isSet() <em>Set</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSet()
   * @generated
   * @ordered
   */
  protected static final boolean SET_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSet() <em>Set</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSet()
   * @generated
   * @ordered
   */
  protected boolean set = SET_EDEFAULT;

  /**
   * The cached value of the '{@link #getAssignments() <em>Assignments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignments()
   * @generated
   * @ordered
   */
  protected EList<ValueAssignment> assignments;

  /**
   * The default value of the '{@link #isConditionNegative() <em>Condition Negative</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConditionNegative()
   * @generated
   * @ordered
   */
  protected static final boolean CONDITION_NEGATIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isConditionNegative() <em>Condition Negative</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConditionNegative()
   * @generated
   * @ordered
   */
  protected boolean conditionNegative = CONDITION_NEGATIVE_EDEFAULT;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Value condition;

  /**
   * The default value of the '{@link #isIntegrate() <em>Integrate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIntegrate()
   * @generated
   * @ordered
   */
  protected static final boolean INTEGRATE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIntegrate() <em>Integrate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIntegrate()
   * @generated
   * @ordered
   */
  protected boolean integrate = INTEGRATE_EDEFAULT;

  /**
   * The default value of the '{@link #isDo() <em>Do</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDo()
   * @generated
   * @ordered
   */
  protected static final boolean DO_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDo() <em>Do</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDo()
   * @generated
   * @ordered
   */
  protected boolean do_ = DO_EDEFAULT;

  /**
   * The cached value of the '{@link #getExecuted() <em>Executed</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExecuted()
   * @generated
   * @ordered
   */
  protected EList<ValueAssignment> executed;

  /**
   * The default value of the '{@link #isMove() <em>Move</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMove()
   * @generated
   * @ordered
   */
  protected static final boolean MOVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMove() <em>Move</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMove()
   * @generated
   * @ordered
   */
  protected boolean move = MOVE_EDEFAULT;

  /**
   * The cached value of the '{@link #getWhere() <em>Where</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhere()
   * @generated
   * @ordered
   */
  protected Value where;

  /**
   * The default value of the '{@link #isAway() <em>Away</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAway()
   * @generated
   * @ordered
   */
  protected static final boolean AWAY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAway() <em>Away</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAway()
   * @generated
   * @ordered
   */
  protected boolean away = AWAY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSet()
  {
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSet(boolean newSet)
  {
    boolean oldSet = set;
    set = newSet;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.ACTION__SET, oldSet, set));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ValueAssignment> getAssignments()
  {
    if (assignments == null)
    {
      assignments = new EObjectContainmentEList<ValueAssignment>(ValueAssignment.class, this, KimPackage.ACTION__ASSIGNMENTS);
    }
    return assignments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isConditionNegative()
  {
    return conditionNegative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionNegative(boolean newConditionNegative)
  {
    boolean oldConditionNegative = conditionNegative;
    conditionNegative = newConditionNegative;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.ACTION__CONDITION_NEGATIVE, oldConditionNegative, conditionNegative));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Value newCondition, NotificationChain msgs)
  {
    Value oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.ACTION__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(Value newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.ACTION__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.ACTION__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.ACTION__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIntegrate()
  {
    return integrate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIntegrate(boolean newIntegrate)
  {
    boolean oldIntegrate = integrate;
    integrate = newIntegrate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.ACTION__INTEGRATE, oldIntegrate, integrate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDo()
  {
    return do_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDo(boolean newDo)
  {
    boolean oldDo = do_;
    do_ = newDo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.ACTION__DO, oldDo, do_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ValueAssignment> getExecuted()
  {
    if (executed == null)
    {
      executed = new EObjectContainmentEList<ValueAssignment>(ValueAssignment.class, this, KimPackage.ACTION__EXECUTED);
    }
    return executed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMove()
  {
    return move;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMove(boolean newMove)
  {
    boolean oldMove = move;
    move = newMove;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.ACTION__MOVE, oldMove, move));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value getWhere()
  {
    return where;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhere(Value newWhere, NotificationChain msgs)
  {
    Value oldWhere = where;
    where = newWhere;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.ACTION__WHERE, oldWhere, newWhere);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWhere(Value newWhere)
  {
    if (newWhere != where)
    {
      NotificationChain msgs = null;
      if (where != null)
        msgs = ((InternalEObject)where).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.ACTION__WHERE, null, msgs);
      if (newWhere != null)
        msgs = ((InternalEObject)newWhere).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.ACTION__WHERE, null, msgs);
      msgs = basicSetWhere(newWhere, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.ACTION__WHERE, newWhere, newWhere));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAway()
  {
    return away;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAway(boolean newAway)
  {
    boolean oldAway = away;
    away = newAway;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.ACTION__AWAY, oldAway, away));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.ACTION__ASSIGNMENTS:
        return ((InternalEList<?>)getAssignments()).basicRemove(otherEnd, msgs);
      case KimPackage.ACTION__CONDITION:
        return basicSetCondition(null, msgs);
      case KimPackage.ACTION__EXECUTED:
        return ((InternalEList<?>)getExecuted()).basicRemove(otherEnd, msgs);
      case KimPackage.ACTION__WHERE:
        return basicSetWhere(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.ACTION__SET:
        return isSet();
      case KimPackage.ACTION__ASSIGNMENTS:
        return getAssignments();
      case KimPackage.ACTION__CONDITION_NEGATIVE:
        return isConditionNegative();
      case KimPackage.ACTION__CONDITION:
        return getCondition();
      case KimPackage.ACTION__INTEGRATE:
        return isIntegrate();
      case KimPackage.ACTION__DO:
        return isDo();
      case KimPackage.ACTION__EXECUTED:
        return getExecuted();
      case KimPackage.ACTION__MOVE:
        return isMove();
      case KimPackage.ACTION__WHERE:
        return getWhere();
      case KimPackage.ACTION__AWAY:
        return isAway();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.ACTION__SET:
        setSet((Boolean)newValue);
        return;
      case KimPackage.ACTION__ASSIGNMENTS:
        getAssignments().clear();
        getAssignments().addAll((Collection<? extends ValueAssignment>)newValue);
        return;
      case KimPackage.ACTION__CONDITION_NEGATIVE:
        setConditionNegative((Boolean)newValue);
        return;
      case KimPackage.ACTION__CONDITION:
        setCondition((Value)newValue);
        return;
      case KimPackage.ACTION__INTEGRATE:
        setIntegrate((Boolean)newValue);
        return;
      case KimPackage.ACTION__DO:
        setDo((Boolean)newValue);
        return;
      case KimPackage.ACTION__EXECUTED:
        getExecuted().clear();
        getExecuted().addAll((Collection<? extends ValueAssignment>)newValue);
        return;
      case KimPackage.ACTION__MOVE:
        setMove((Boolean)newValue);
        return;
      case KimPackage.ACTION__WHERE:
        setWhere((Value)newValue);
        return;
      case KimPackage.ACTION__AWAY:
        setAway((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.ACTION__SET:
        setSet(SET_EDEFAULT);
        return;
      case KimPackage.ACTION__ASSIGNMENTS:
        getAssignments().clear();
        return;
      case KimPackage.ACTION__CONDITION_NEGATIVE:
        setConditionNegative(CONDITION_NEGATIVE_EDEFAULT);
        return;
      case KimPackage.ACTION__CONDITION:
        setCondition((Value)null);
        return;
      case KimPackage.ACTION__INTEGRATE:
        setIntegrate(INTEGRATE_EDEFAULT);
        return;
      case KimPackage.ACTION__DO:
        setDo(DO_EDEFAULT);
        return;
      case KimPackage.ACTION__EXECUTED:
        getExecuted().clear();
        return;
      case KimPackage.ACTION__MOVE:
        setMove(MOVE_EDEFAULT);
        return;
      case KimPackage.ACTION__WHERE:
        setWhere((Value)null);
        return;
      case KimPackage.ACTION__AWAY:
        setAway(AWAY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.ACTION__SET:
        return set != SET_EDEFAULT;
      case KimPackage.ACTION__ASSIGNMENTS:
        return assignments != null && !assignments.isEmpty();
      case KimPackage.ACTION__CONDITION_NEGATIVE:
        return conditionNegative != CONDITION_NEGATIVE_EDEFAULT;
      case KimPackage.ACTION__CONDITION:
        return condition != null;
      case KimPackage.ACTION__INTEGRATE:
        return integrate != INTEGRATE_EDEFAULT;
      case KimPackage.ACTION__DO:
        return do_ != DO_EDEFAULT;
      case KimPackage.ACTION__EXECUTED:
        return executed != null && !executed.isEmpty();
      case KimPackage.ACTION__MOVE:
        return move != MOVE_EDEFAULT;
      case KimPackage.ACTION__WHERE:
        return where != null;
      case KimPackage.ACTION__AWAY:
        return away != AWAY_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (set: ");
    result.append(set);
    result.append(", conditionNegative: ");
    result.append(conditionNegative);
    result.append(", integrate: ");
    result.append(integrate);
    result.append(", do: ");
    result.append(do_);
    result.append(", move: ");
    result.append(move);
    result.append(", away: ");
    result.append(away);
    result.append(')');
    return result.toString();
  }

} //ActionImpl
