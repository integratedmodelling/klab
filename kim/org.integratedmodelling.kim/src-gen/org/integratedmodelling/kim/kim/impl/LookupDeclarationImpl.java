/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.26.0
 */
package org.integratedmodelling.kim.kim.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.LookupDeclaration;
import org.integratedmodelling.kim.kim.LookupTableArgument;
import org.integratedmodelling.kim.kim.Table;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Lookup Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.LookupDeclarationImpl#getLookupTableArgs <em>Lookup Table Args</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.LookupDeclarationImpl#getLookupTable <em>Lookup Table</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.LookupDeclarationImpl#getLookupTableId <em>Lookup Table Id</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LookupDeclarationImpl extends MinimalEObjectImpl.Container implements LookupDeclaration
{
  /**
   * The cached value of the '{@link #getLookupTableArgs() <em>Lookup Table Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLookupTableArgs()
   * @generated
   * @ordered
   */
  protected EList<LookupTableArgument> lookupTableArgs;

  /**
   * The cached value of the '{@link #getLookupTable() <em>Lookup Table</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLookupTable()
   * @generated
   * @ordered
   */
  protected Table lookupTable;

  /**
   * The default value of the '{@link #getLookupTableId() <em>Lookup Table Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLookupTableId()
   * @generated
   * @ordered
   */
  protected static final String LOOKUP_TABLE_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLookupTableId() <em>Lookup Table Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLookupTableId()
   * @generated
   * @ordered
   */
  protected String lookupTableId = LOOKUP_TABLE_ID_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LookupDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.LOOKUP_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LookupTableArgument> getLookupTableArgs()
  {
    if (lookupTableArgs == null)
    {
      lookupTableArgs = new EObjectContainmentEList<LookupTableArgument>(LookupTableArgument.class, this, KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ARGS);
    }
    return lookupTableArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table getLookupTable()
  {
    return lookupTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLookupTable(Table newLookupTable, NotificationChain msgs)
  {
    Table oldLookupTable = lookupTable;
    lookupTable = newLookupTable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE, oldLookupTable, newLookupTable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLookupTable(Table newLookupTable)
  {
    if (newLookupTable != lookupTable)
    {
      NotificationChain msgs = null;
      if (lookupTable != null)
        msgs = ((InternalEObject)lookupTable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE, null, msgs);
      if (newLookupTable != null)
        msgs = ((InternalEObject)newLookupTable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE, null, msgs);
      msgs = basicSetLookupTable(newLookupTable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE, newLookupTable, newLookupTable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLookupTableId()
  {
    return lookupTableId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLookupTableId(String newLookupTableId)
  {
    String oldLookupTableId = lookupTableId;
    lookupTableId = newLookupTableId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ID, oldLookupTableId, lookupTableId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ARGS:
        return ((InternalEList<?>)getLookupTableArgs()).basicRemove(otherEnd, msgs);
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE:
        return basicSetLookupTable(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ARGS:
        return getLookupTableArgs();
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE:
        return getLookupTable();
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ID:
        return getLookupTableId();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ARGS:
        getLookupTableArgs().clear();
        getLookupTableArgs().addAll((Collection<? extends LookupTableArgument>)newValue);
        return;
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE:
        setLookupTable((Table)newValue);
        return;
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ID:
        setLookupTableId((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ARGS:
        getLookupTableArgs().clear();
        return;
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE:
        setLookupTable((Table)null);
        return;
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ID:
        setLookupTableId(LOOKUP_TABLE_ID_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ARGS:
        return lookupTableArgs != null && !lookupTableArgs.isEmpty();
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE:
        return lookupTable != null;
      case KimPackage.LOOKUP_DECLARATION__LOOKUP_TABLE_ID:
        return LOOKUP_TABLE_ID_EDEFAULT == null ? lookupTableId != null : !LOOKUP_TABLE_ID_EDEFAULT.equals(lookupTableId);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (lookupTableId: ");
    result.append(lookupTableId);
    result.append(')');
    return result.toString();
  }

} //LookupDeclarationImpl
