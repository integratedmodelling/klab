/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.26.0
 */
package org.integratedmodelling.kim.kim.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kim.kim.Concept;
import org.integratedmodelling.kim.kim.ConceptReference;
import org.integratedmodelling.kim.kim.KimPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concept Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptReferenceImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptReferenceImpl#getTemplateType <em>Template Type</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptReferenceImpl#getExtends <em>Extends</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptReferenceImpl#isTemplate <em>Template</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConceptReferenceImpl extends MinimalEObjectImpl.Container implements ConceptReference
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getTemplateType() <em>Template Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemplateType()
   * @generated
   * @ordered
   */
  protected static final String TEMPLATE_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTemplateType() <em>Template Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemplateType()
   * @generated
   * @ordered
   */
  protected String templateType = TEMPLATE_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getExtends() <em>Extends</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtends()
   * @generated
   * @ordered
   */
  protected Concept extends_;

  /**
   * The default value of the '{@link #isTemplate() <em>Template</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTemplate()
   * @generated
   * @ordered
   */
  protected static final boolean TEMPLATE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTemplate() <em>Template</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTemplate()
   * @generated
   * @ordered
   */
  protected boolean template = TEMPLATE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConceptReferenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.CONCEPT_REFERENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_REFERENCE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTemplateType()
  {
    return templateType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTemplateType(String newTemplateType)
  {
    String oldTemplateType = templateType;
    templateType = newTemplateType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_REFERENCE__TEMPLATE_TYPE, oldTemplateType, templateType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept getExtends()
  {
    return extends_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExtends(Concept newExtends, NotificationChain msgs)
  {
    Concept oldExtends = extends_;
    extends_ = newExtends;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_REFERENCE__EXTENDS, oldExtends, newExtends);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExtends(Concept newExtends)
  {
    if (newExtends != extends_)
    {
      NotificationChain msgs = null;
      if (extends_ != null)
        msgs = ((InternalEObject)extends_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_REFERENCE__EXTENDS, null, msgs);
      if (newExtends != null)
        msgs = ((InternalEObject)newExtends).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_REFERENCE__EXTENDS, null, msgs);
      msgs = basicSetExtends(newExtends, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_REFERENCE__EXTENDS, newExtends, newExtends));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isTemplate()
  {
    return template;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTemplate(boolean newTemplate)
  {
    boolean oldTemplate = template;
    template = newTemplate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_REFERENCE__TEMPLATE, oldTemplate, template));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_REFERENCE__EXTENDS:
        return basicSetExtends(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_REFERENCE__NAME:
        return getName();
      case KimPackage.CONCEPT_REFERENCE__TEMPLATE_TYPE:
        return getTemplateType();
      case KimPackage.CONCEPT_REFERENCE__EXTENDS:
        return getExtends();
      case KimPackage.CONCEPT_REFERENCE__TEMPLATE:
        return isTemplate();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_REFERENCE__NAME:
        setName((String)newValue);
        return;
      case KimPackage.CONCEPT_REFERENCE__TEMPLATE_TYPE:
        setTemplateType((String)newValue);
        return;
      case KimPackage.CONCEPT_REFERENCE__EXTENDS:
        setExtends((Concept)newValue);
        return;
      case KimPackage.CONCEPT_REFERENCE__TEMPLATE:
        setTemplate((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_REFERENCE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case KimPackage.CONCEPT_REFERENCE__TEMPLATE_TYPE:
        setTemplateType(TEMPLATE_TYPE_EDEFAULT);
        return;
      case KimPackage.CONCEPT_REFERENCE__EXTENDS:
        setExtends((Concept)null);
        return;
      case KimPackage.CONCEPT_REFERENCE__TEMPLATE:
        setTemplate(TEMPLATE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_REFERENCE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case KimPackage.CONCEPT_REFERENCE__TEMPLATE_TYPE:
        return TEMPLATE_TYPE_EDEFAULT == null ? templateType != null : !TEMPLATE_TYPE_EDEFAULT.equals(templateType);
      case KimPackage.CONCEPT_REFERENCE__EXTENDS:
        return extends_ != null;
      case KimPackage.CONCEPT_REFERENCE__TEMPLATE:
        return template != TEMPLATE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", templateType: ");
    result.append(templateType);
    result.append(", template: ");
    result.append(template);
    result.append(')');
    return result.toString();
  }

} //ConceptReferenceImpl
