/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.26.0
 */
package org.integratedmodelling.kim.kim.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kim.kim.Annotation;
import org.integratedmodelling.kim.kim.Concept;
import org.integratedmodelling.kim.kim.ConceptDeclaration;
import org.integratedmodelling.kim.kim.Function;
import org.integratedmodelling.kim.kim.Import;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.Map;
import org.integratedmodelling.kim.kim.Namespace;
import org.integratedmodelling.kim.kim.OwlImport;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Namespace</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getAnnotations <em>Annotations</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#isProjectPrivate <em>Project Private</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#isPrivate <em>Private</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#isInactive <em>Inactive</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#isScenario <em>Scenario</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#isWorldviewBound <em>Worldview Bound</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getDocstring <em>Docstring</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getLanguage <em>Language</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getImported <em>Imported</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getOwlImports <em>Owl Imports</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getCoverage <em>Coverage</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#isRootDomain <em>Root Domain</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getDomainConcept <em>Domain Concept</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getDisjointNamespaces <em>Disjoint Namespaces</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getLookupNamespace <em>Lookup Namespace</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getBlacklistNamespace <em>Blacklist Namespace</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getWeights <em>Weights</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getObserver <em>Observer</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.NamespaceImpl#getMetadata <em>Metadata</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NamespaceImpl extends MinimalEObjectImpl.Container implements Namespace
{
  /**
   * The cached value of the '{@link #getAnnotations() <em>Annotations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotations()
   * @generated
   * @ordered
   */
  protected EList<Annotation> annotations;

  /**
   * The default value of the '{@link #isProjectPrivate() <em>Project Private</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProjectPrivate()
   * @generated
   * @ordered
   */
  protected static final boolean PROJECT_PRIVATE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isProjectPrivate() <em>Project Private</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProjectPrivate()
   * @generated
   * @ordered
   */
  protected boolean projectPrivate = PROJECT_PRIVATE_EDEFAULT;

  /**
   * The default value of the '{@link #isPrivate() <em>Private</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPrivate()
   * @generated
   * @ordered
   */
  protected static final boolean PRIVATE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPrivate() <em>Private</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPrivate()
   * @generated
   * @ordered
   */
  protected boolean private_ = PRIVATE_EDEFAULT;

  /**
   * The default value of the '{@link #isInactive() <em>Inactive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInactive()
   * @generated
   * @ordered
   */
  protected static final boolean INACTIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInactive() <em>Inactive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInactive()
   * @generated
   * @ordered
   */
  protected boolean inactive = INACTIVE_EDEFAULT;

  /**
   * The default value of the '{@link #isScenario() <em>Scenario</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isScenario()
   * @generated
   * @ordered
   */
  protected static final boolean SCENARIO_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isScenario() <em>Scenario</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isScenario()
   * @generated
   * @ordered
   */
  protected boolean scenario = SCENARIO_EDEFAULT;

  /**
   * The default value of the '{@link #isWorldviewBound() <em>Worldview Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWorldviewBound()
   * @generated
   * @ordered
   */
  protected static final boolean WORLDVIEW_BOUND_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isWorldviewBound() <em>Worldview Bound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWorldviewBound()
   * @generated
   * @ordered
   */
  protected boolean worldviewBound = WORLDVIEW_BOUND_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDocstring() <em>Docstring</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocstring()
   * @generated
   * @ordered
   */
  protected static final String DOCSTRING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDocstring() <em>Docstring</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocstring()
   * @generated
   * @ordered
   */
  protected String docstring = DOCSTRING_EDEFAULT;

  /**
   * The default value of the '{@link #getLanguage() <em>Language</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLanguage()
   * @generated
   * @ordered
   */
  protected static final String LANGUAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLanguage() <em>Language</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLanguage()
   * @generated
   * @ordered
   */
  protected String language = LANGUAGE_EDEFAULT;

  /**
   * The cached value of the '{@link #getImported() <em>Imported</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImported()
   * @generated
   * @ordered
   */
  protected EList<Import> imported;

  /**
   * The cached value of the '{@link #getOwlImports() <em>Owl Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwlImports()
   * @generated
   * @ordered
   */
  protected EList<OwlImport> owlImports;

  /**
   * The cached value of the '{@link #getCoverage() <em>Coverage</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCoverage()
   * @generated
   * @ordered
   */
  protected EList<Function> coverage;

  /**
   * The default value of the '{@link #isRootDomain() <em>Root Domain</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRootDomain()
   * @generated
   * @ordered
   */
  protected static final boolean ROOT_DOMAIN_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRootDomain() <em>Root Domain</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRootDomain()
   * @generated
   * @ordered
   */
  protected boolean rootDomain = ROOT_DOMAIN_EDEFAULT;

  /**
   * The cached value of the '{@link #getDomainConcept() <em>Domain Concept</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainConcept()
   * @generated
   * @ordered
   */
  protected Concept domainConcept;

  /**
   * The cached value of the '{@link #getDisjointNamespaces() <em>Disjoint Namespaces</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisjointNamespaces()
   * @generated
   * @ordered
   */
  protected EList<String> disjointNamespaces;

  /**
   * The default value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected static final String VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected String version = VERSION_EDEFAULT;

  /**
   * The cached value of the '{@link #getLookupNamespace() <em>Lookup Namespace</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLookupNamespace()
   * @generated
   * @ordered
   */
  protected EList<String> lookupNamespace;

  /**
   * The cached value of the '{@link #getBlacklistNamespace() <em>Blacklist Namespace</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlacklistNamespace()
   * @generated
   * @ordered
   */
  protected EList<String> blacklistNamespace;

  /**
   * The cached value of the '{@link #getWeights() <em>Weights</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWeights()
   * @generated
   * @ordered
   */
  protected Map weights;

  /**
   * The cached value of the '{@link #getObserver() <em>Observer</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObserver()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration observer;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected Map parameters;

  /**
   * The cached value of the '{@link #getMetadata() <em>Metadata</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetadata()
   * @generated
   * @ordered
   */
  protected Map metadata;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NamespaceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.NAMESPACE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Annotation> getAnnotations()
  {
    if (annotations == null)
    {
      annotations = new EObjectContainmentEList<Annotation>(Annotation.class, this, KimPackage.NAMESPACE__ANNOTATIONS);
    }
    return annotations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isProjectPrivate()
  {
    return projectPrivate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProjectPrivate(boolean newProjectPrivate)
  {
    boolean oldProjectPrivate = projectPrivate;
    projectPrivate = newProjectPrivate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__PROJECT_PRIVATE, oldProjectPrivate, projectPrivate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPrivate()
  {
    return private_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrivate(boolean newPrivate)
  {
    boolean oldPrivate = private_;
    private_ = newPrivate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__PRIVATE, oldPrivate, private_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isInactive()
  {
    return inactive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInactive(boolean newInactive)
  {
    boolean oldInactive = inactive;
    inactive = newInactive;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__INACTIVE, oldInactive, inactive));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isScenario()
  {
    return scenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScenario(boolean newScenario)
  {
    boolean oldScenario = scenario;
    scenario = newScenario;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__SCENARIO, oldScenario, scenario));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isWorldviewBound()
  {
    return worldviewBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWorldviewBound(boolean newWorldviewBound)
  {
    boolean oldWorldviewBound = worldviewBound;
    worldviewBound = newWorldviewBound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__WORLDVIEW_BOUND, oldWorldviewBound, worldviewBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDocstring()
  {
    return docstring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDocstring(String newDocstring)
  {
    String oldDocstring = docstring;
    docstring = newDocstring;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__DOCSTRING, oldDocstring, docstring));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLanguage()
  {
    return language;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLanguage(String newLanguage)
  {
    String oldLanguage = language;
    language = newLanguage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__LANGUAGE, oldLanguage, language));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Import> getImported()
  {
    if (imported == null)
    {
      imported = new EObjectContainmentEList<Import>(Import.class, this, KimPackage.NAMESPACE__IMPORTED);
    }
    return imported;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OwlImport> getOwlImports()
  {
    if (owlImports == null)
    {
      owlImports = new EObjectContainmentEList<OwlImport>(OwlImport.class, this, KimPackage.NAMESPACE__OWL_IMPORTS);
    }
    return owlImports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Function> getCoverage()
  {
    if (coverage == null)
    {
      coverage = new EObjectContainmentEList<Function>(Function.class, this, KimPackage.NAMESPACE__COVERAGE);
    }
    return coverage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRootDomain()
  {
    return rootDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRootDomain(boolean newRootDomain)
  {
    boolean oldRootDomain = rootDomain;
    rootDomain = newRootDomain;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__ROOT_DOMAIN, oldRootDomain, rootDomain));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept getDomainConcept()
  {
    return domainConcept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDomainConcept(Concept newDomainConcept, NotificationChain msgs)
  {
    Concept oldDomainConcept = domainConcept;
    domainConcept = newDomainConcept;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__DOMAIN_CONCEPT, oldDomainConcept, newDomainConcept);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDomainConcept(Concept newDomainConcept)
  {
    if (newDomainConcept != domainConcept)
    {
      NotificationChain msgs = null;
      if (domainConcept != null)
        msgs = ((InternalEObject)domainConcept).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.NAMESPACE__DOMAIN_CONCEPT, null, msgs);
      if (newDomainConcept != null)
        msgs = ((InternalEObject)newDomainConcept).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.NAMESPACE__DOMAIN_CONCEPT, null, msgs);
      msgs = basicSetDomainConcept(newDomainConcept, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__DOMAIN_CONCEPT, newDomainConcept, newDomainConcept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getDisjointNamespaces()
  {
    if (disjointNamespaces == null)
    {
      disjointNamespaces = new EDataTypeEList<String>(String.class, this, KimPackage.NAMESPACE__DISJOINT_NAMESPACES);
    }
    return disjointNamespaces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(String newVersion)
  {
    String oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__VERSION, oldVersion, version));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getLookupNamespace()
  {
    if (lookupNamespace == null)
    {
      lookupNamespace = new EDataTypeEList<String>(String.class, this, KimPackage.NAMESPACE__LOOKUP_NAMESPACE);
    }
    return lookupNamespace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getBlacklistNamespace()
  {
    if (blacklistNamespace == null)
    {
      blacklistNamespace = new EDataTypeEList<String>(String.class, this, KimPackage.NAMESPACE__BLACKLIST_NAMESPACE);
    }
    return blacklistNamespace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map getWeights()
  {
    return weights;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWeights(Map newWeights, NotificationChain msgs)
  {
    Map oldWeights = weights;
    weights = newWeights;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__WEIGHTS, oldWeights, newWeights);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWeights(Map newWeights)
  {
    if (newWeights != weights)
    {
      NotificationChain msgs = null;
      if (weights != null)
        msgs = ((InternalEObject)weights).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.NAMESPACE__WEIGHTS, null, msgs);
      if (newWeights != null)
        msgs = ((InternalEObject)newWeights).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.NAMESPACE__WEIGHTS, null, msgs);
      msgs = basicSetWeights(newWeights, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__WEIGHTS, newWeights, newWeights));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getObserver()
  {
    return observer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObserver(ConceptDeclaration newObserver, NotificationChain msgs)
  {
    ConceptDeclaration oldObserver = observer;
    observer = newObserver;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__OBSERVER, oldObserver, newObserver);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObserver(ConceptDeclaration newObserver)
  {
    if (newObserver != observer)
    {
      NotificationChain msgs = null;
      if (observer != null)
        msgs = ((InternalEObject)observer).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.NAMESPACE__OBSERVER, null, msgs);
      if (newObserver != null)
        msgs = ((InternalEObject)newObserver).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.NAMESPACE__OBSERVER, null, msgs);
      msgs = basicSetObserver(newObserver, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__OBSERVER, newObserver, newObserver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map getParameters()
  {
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParameters(Map newParameters, NotificationChain msgs)
  {
    Map oldParameters = parameters;
    parameters = newParameters;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__PARAMETERS, oldParameters, newParameters);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParameters(Map newParameters)
  {
    if (newParameters != parameters)
    {
      NotificationChain msgs = null;
      if (parameters != null)
        msgs = ((InternalEObject)parameters).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.NAMESPACE__PARAMETERS, null, msgs);
      if (newParameters != null)
        msgs = ((InternalEObject)newParameters).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.NAMESPACE__PARAMETERS, null, msgs);
      msgs = basicSetParameters(newParameters, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__PARAMETERS, newParameters, newParameters));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map getMetadata()
  {
    return metadata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMetadata(Map newMetadata, NotificationChain msgs)
  {
    Map oldMetadata = metadata;
    metadata = newMetadata;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__METADATA, oldMetadata, newMetadata);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMetadata(Map newMetadata)
  {
    if (newMetadata != metadata)
    {
      NotificationChain msgs = null;
      if (metadata != null)
        msgs = ((InternalEObject)metadata).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.NAMESPACE__METADATA, null, msgs);
      if (newMetadata != null)
        msgs = ((InternalEObject)newMetadata).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.NAMESPACE__METADATA, null, msgs);
      msgs = basicSetMetadata(newMetadata, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.NAMESPACE__METADATA, newMetadata, newMetadata));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.NAMESPACE__ANNOTATIONS:
        return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd, msgs);
      case KimPackage.NAMESPACE__IMPORTED:
        return ((InternalEList<?>)getImported()).basicRemove(otherEnd, msgs);
      case KimPackage.NAMESPACE__OWL_IMPORTS:
        return ((InternalEList<?>)getOwlImports()).basicRemove(otherEnd, msgs);
      case KimPackage.NAMESPACE__COVERAGE:
        return ((InternalEList<?>)getCoverage()).basicRemove(otherEnd, msgs);
      case KimPackage.NAMESPACE__DOMAIN_CONCEPT:
        return basicSetDomainConcept(null, msgs);
      case KimPackage.NAMESPACE__WEIGHTS:
        return basicSetWeights(null, msgs);
      case KimPackage.NAMESPACE__OBSERVER:
        return basicSetObserver(null, msgs);
      case KimPackage.NAMESPACE__PARAMETERS:
        return basicSetParameters(null, msgs);
      case KimPackage.NAMESPACE__METADATA:
        return basicSetMetadata(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.NAMESPACE__ANNOTATIONS:
        return getAnnotations();
      case KimPackage.NAMESPACE__PROJECT_PRIVATE:
        return isProjectPrivate();
      case KimPackage.NAMESPACE__PRIVATE:
        return isPrivate();
      case KimPackage.NAMESPACE__INACTIVE:
        return isInactive();
      case KimPackage.NAMESPACE__SCENARIO:
        return isScenario();
      case KimPackage.NAMESPACE__WORLDVIEW_BOUND:
        return isWorldviewBound();
      case KimPackage.NAMESPACE__NAME:
        return getName();
      case KimPackage.NAMESPACE__DOCSTRING:
        return getDocstring();
      case KimPackage.NAMESPACE__LANGUAGE:
        return getLanguage();
      case KimPackage.NAMESPACE__IMPORTED:
        return getImported();
      case KimPackage.NAMESPACE__OWL_IMPORTS:
        return getOwlImports();
      case KimPackage.NAMESPACE__COVERAGE:
        return getCoverage();
      case KimPackage.NAMESPACE__ROOT_DOMAIN:
        return isRootDomain();
      case KimPackage.NAMESPACE__DOMAIN_CONCEPT:
        return getDomainConcept();
      case KimPackage.NAMESPACE__DISJOINT_NAMESPACES:
        return getDisjointNamespaces();
      case KimPackage.NAMESPACE__VERSION:
        return getVersion();
      case KimPackage.NAMESPACE__LOOKUP_NAMESPACE:
        return getLookupNamespace();
      case KimPackage.NAMESPACE__BLACKLIST_NAMESPACE:
        return getBlacklistNamespace();
      case KimPackage.NAMESPACE__WEIGHTS:
        return getWeights();
      case KimPackage.NAMESPACE__OBSERVER:
        return getObserver();
      case KimPackage.NAMESPACE__PARAMETERS:
        return getParameters();
      case KimPackage.NAMESPACE__METADATA:
        return getMetadata();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.NAMESPACE__ANNOTATIONS:
        getAnnotations().clear();
        getAnnotations().addAll((Collection<? extends Annotation>)newValue);
        return;
      case KimPackage.NAMESPACE__PROJECT_PRIVATE:
        setProjectPrivate((Boolean)newValue);
        return;
      case KimPackage.NAMESPACE__PRIVATE:
        setPrivate((Boolean)newValue);
        return;
      case KimPackage.NAMESPACE__INACTIVE:
        setInactive((Boolean)newValue);
        return;
      case KimPackage.NAMESPACE__SCENARIO:
        setScenario((Boolean)newValue);
        return;
      case KimPackage.NAMESPACE__WORLDVIEW_BOUND:
        setWorldviewBound((Boolean)newValue);
        return;
      case KimPackage.NAMESPACE__NAME:
        setName((String)newValue);
        return;
      case KimPackage.NAMESPACE__DOCSTRING:
        setDocstring((String)newValue);
        return;
      case KimPackage.NAMESPACE__LANGUAGE:
        setLanguage((String)newValue);
        return;
      case KimPackage.NAMESPACE__IMPORTED:
        getImported().clear();
        getImported().addAll((Collection<? extends Import>)newValue);
        return;
      case KimPackage.NAMESPACE__OWL_IMPORTS:
        getOwlImports().clear();
        getOwlImports().addAll((Collection<? extends OwlImport>)newValue);
        return;
      case KimPackage.NAMESPACE__COVERAGE:
        getCoverage().clear();
        getCoverage().addAll((Collection<? extends Function>)newValue);
        return;
      case KimPackage.NAMESPACE__ROOT_DOMAIN:
        setRootDomain((Boolean)newValue);
        return;
      case KimPackage.NAMESPACE__DOMAIN_CONCEPT:
        setDomainConcept((Concept)newValue);
        return;
      case KimPackage.NAMESPACE__DISJOINT_NAMESPACES:
        getDisjointNamespaces().clear();
        getDisjointNamespaces().addAll((Collection<? extends String>)newValue);
        return;
      case KimPackage.NAMESPACE__VERSION:
        setVersion((String)newValue);
        return;
      case KimPackage.NAMESPACE__LOOKUP_NAMESPACE:
        getLookupNamespace().clear();
        getLookupNamespace().addAll((Collection<? extends String>)newValue);
        return;
      case KimPackage.NAMESPACE__BLACKLIST_NAMESPACE:
        getBlacklistNamespace().clear();
        getBlacklistNamespace().addAll((Collection<? extends String>)newValue);
        return;
      case KimPackage.NAMESPACE__WEIGHTS:
        setWeights((Map)newValue);
        return;
      case KimPackage.NAMESPACE__OBSERVER:
        setObserver((ConceptDeclaration)newValue);
        return;
      case KimPackage.NAMESPACE__PARAMETERS:
        setParameters((Map)newValue);
        return;
      case KimPackage.NAMESPACE__METADATA:
        setMetadata((Map)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.NAMESPACE__ANNOTATIONS:
        getAnnotations().clear();
        return;
      case KimPackage.NAMESPACE__PROJECT_PRIVATE:
        setProjectPrivate(PROJECT_PRIVATE_EDEFAULT);
        return;
      case KimPackage.NAMESPACE__PRIVATE:
        setPrivate(PRIVATE_EDEFAULT);
        return;
      case KimPackage.NAMESPACE__INACTIVE:
        setInactive(INACTIVE_EDEFAULT);
        return;
      case KimPackage.NAMESPACE__SCENARIO:
        setScenario(SCENARIO_EDEFAULT);
        return;
      case KimPackage.NAMESPACE__WORLDVIEW_BOUND:
        setWorldviewBound(WORLDVIEW_BOUND_EDEFAULT);
        return;
      case KimPackage.NAMESPACE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case KimPackage.NAMESPACE__DOCSTRING:
        setDocstring(DOCSTRING_EDEFAULT);
        return;
      case KimPackage.NAMESPACE__LANGUAGE:
        setLanguage(LANGUAGE_EDEFAULT);
        return;
      case KimPackage.NAMESPACE__IMPORTED:
        getImported().clear();
        return;
      case KimPackage.NAMESPACE__OWL_IMPORTS:
        getOwlImports().clear();
        return;
      case KimPackage.NAMESPACE__COVERAGE:
        getCoverage().clear();
        return;
      case KimPackage.NAMESPACE__ROOT_DOMAIN:
        setRootDomain(ROOT_DOMAIN_EDEFAULT);
        return;
      case KimPackage.NAMESPACE__DOMAIN_CONCEPT:
        setDomainConcept((Concept)null);
        return;
      case KimPackage.NAMESPACE__DISJOINT_NAMESPACES:
        getDisjointNamespaces().clear();
        return;
      case KimPackage.NAMESPACE__VERSION:
        setVersion(VERSION_EDEFAULT);
        return;
      case KimPackage.NAMESPACE__LOOKUP_NAMESPACE:
        getLookupNamespace().clear();
        return;
      case KimPackage.NAMESPACE__BLACKLIST_NAMESPACE:
        getBlacklistNamespace().clear();
        return;
      case KimPackage.NAMESPACE__WEIGHTS:
        setWeights((Map)null);
        return;
      case KimPackage.NAMESPACE__OBSERVER:
        setObserver((ConceptDeclaration)null);
        return;
      case KimPackage.NAMESPACE__PARAMETERS:
        setParameters((Map)null);
        return;
      case KimPackage.NAMESPACE__METADATA:
        setMetadata((Map)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.NAMESPACE__ANNOTATIONS:
        return annotations != null && !annotations.isEmpty();
      case KimPackage.NAMESPACE__PROJECT_PRIVATE:
        return projectPrivate != PROJECT_PRIVATE_EDEFAULT;
      case KimPackage.NAMESPACE__PRIVATE:
        return private_ != PRIVATE_EDEFAULT;
      case KimPackage.NAMESPACE__INACTIVE:
        return inactive != INACTIVE_EDEFAULT;
      case KimPackage.NAMESPACE__SCENARIO:
        return scenario != SCENARIO_EDEFAULT;
      case KimPackage.NAMESPACE__WORLDVIEW_BOUND:
        return worldviewBound != WORLDVIEW_BOUND_EDEFAULT;
      case KimPackage.NAMESPACE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case KimPackage.NAMESPACE__DOCSTRING:
        return DOCSTRING_EDEFAULT == null ? docstring != null : !DOCSTRING_EDEFAULT.equals(docstring);
      case KimPackage.NAMESPACE__LANGUAGE:
        return LANGUAGE_EDEFAULT == null ? language != null : !LANGUAGE_EDEFAULT.equals(language);
      case KimPackage.NAMESPACE__IMPORTED:
        return imported != null && !imported.isEmpty();
      case KimPackage.NAMESPACE__OWL_IMPORTS:
        return owlImports != null && !owlImports.isEmpty();
      case KimPackage.NAMESPACE__COVERAGE:
        return coverage != null && !coverage.isEmpty();
      case KimPackage.NAMESPACE__ROOT_DOMAIN:
        return rootDomain != ROOT_DOMAIN_EDEFAULT;
      case KimPackage.NAMESPACE__DOMAIN_CONCEPT:
        return domainConcept != null;
      case KimPackage.NAMESPACE__DISJOINT_NAMESPACES:
        return disjointNamespaces != null && !disjointNamespaces.isEmpty();
      case KimPackage.NAMESPACE__VERSION:
        return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);
      case KimPackage.NAMESPACE__LOOKUP_NAMESPACE:
        return lookupNamespace != null && !lookupNamespace.isEmpty();
      case KimPackage.NAMESPACE__BLACKLIST_NAMESPACE:
        return blacklistNamespace != null && !blacklistNamespace.isEmpty();
      case KimPackage.NAMESPACE__WEIGHTS:
        return weights != null;
      case KimPackage.NAMESPACE__OBSERVER:
        return observer != null;
      case KimPackage.NAMESPACE__PARAMETERS:
        return parameters != null;
      case KimPackage.NAMESPACE__METADATA:
        return metadata != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (projectPrivate: ");
    result.append(projectPrivate);
    result.append(", private: ");
    result.append(private_);
    result.append(", inactive: ");
    result.append(inactive);
    result.append(", scenario: ");
    result.append(scenario);
    result.append(", worldviewBound: ");
    result.append(worldviewBound);
    result.append(", name: ");
    result.append(name);
    result.append(", docstring: ");
    result.append(docstring);
    result.append(", language: ");
    result.append(language);
    result.append(", rootDomain: ");
    result.append(rootDomain);
    result.append(", disjointNamespaces: ");
    result.append(disjointNamespaces);
    result.append(", version: ");
    result.append(version);
    result.append(", lookupNamespace: ");
    result.append(lookupNamespace);
    result.append(", blacklistNamespace: ");
    result.append(blacklistNamespace);
    result.append(')');
    return result.toString();
  }

} //NamespaceImpl
