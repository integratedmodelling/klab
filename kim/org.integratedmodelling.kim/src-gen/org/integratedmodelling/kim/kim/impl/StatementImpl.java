/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.33.0
 */
package org.integratedmodelling.kim.kim.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kim.kim.ConceptStatement;
import org.integratedmodelling.kim.kim.DefineStatement;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.ModelStatement;
import org.integratedmodelling.kim.kim.ObserveStatement;
import org.integratedmodelling.kim.kim.Statement;
import org.integratedmodelling.kim.kim.UpperOntologyDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.StatementImpl#getConceptStatement <em>Concept Statement</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.StatementImpl#getModelStatement <em>Model Statement</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.StatementImpl#getUpperOntologyStatement <em>Upper Ontology Statement</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.StatementImpl#getDefineStatement <em>Define Statement</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.StatementImpl#getObserveStatement <em>Observe Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatementImpl extends MinimalEObjectImpl.Container implements Statement
{
  /**
   * The cached value of the '{@link #getConceptStatement() <em>Concept Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConceptStatement()
   * @generated
   * @ordered
   */
  protected ConceptStatement conceptStatement;

  /**
   * The cached value of the '{@link #getModelStatement() <em>Model Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelStatement()
   * @generated
   * @ordered
   */
  protected ModelStatement modelStatement;

  /**
   * The cached value of the '{@link #getUpperOntologyStatement() <em>Upper Ontology Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpperOntologyStatement()
   * @generated
   * @ordered
   */
  protected UpperOntologyDefinition upperOntologyStatement;

  /**
   * The cached value of the '{@link #getDefineStatement() <em>Define Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefineStatement()
   * @generated
   * @ordered
   */
  protected DefineStatement defineStatement;

  /**
   * The cached value of the '{@link #getObserveStatement() <em>Observe Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObserveStatement()
   * @generated
   * @ordered
   */
  protected ObserveStatement observeStatement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptStatement getConceptStatement()
  {
    return conceptStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConceptStatement(ConceptStatement newConceptStatement, NotificationChain msgs)
  {
    ConceptStatement oldConceptStatement = conceptStatement;
    conceptStatement = newConceptStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.STATEMENT__CONCEPT_STATEMENT, oldConceptStatement, newConceptStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConceptStatement(ConceptStatement newConceptStatement)
  {
    if (newConceptStatement != conceptStatement)
    {
      NotificationChain msgs = null;
      if (conceptStatement != null)
        msgs = ((InternalEObject)conceptStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.STATEMENT__CONCEPT_STATEMENT, null, msgs);
      if (newConceptStatement != null)
        msgs = ((InternalEObject)newConceptStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.STATEMENT__CONCEPT_STATEMENT, null, msgs);
      msgs = basicSetConceptStatement(newConceptStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.STATEMENT__CONCEPT_STATEMENT, newConceptStatement, newConceptStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelStatement getModelStatement()
  {
    return modelStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModelStatement(ModelStatement newModelStatement, NotificationChain msgs)
  {
    ModelStatement oldModelStatement = modelStatement;
    modelStatement = newModelStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.STATEMENT__MODEL_STATEMENT, oldModelStatement, newModelStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModelStatement(ModelStatement newModelStatement)
  {
    if (newModelStatement != modelStatement)
    {
      NotificationChain msgs = null;
      if (modelStatement != null)
        msgs = ((InternalEObject)modelStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.STATEMENT__MODEL_STATEMENT, null, msgs);
      if (newModelStatement != null)
        msgs = ((InternalEObject)newModelStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.STATEMENT__MODEL_STATEMENT, null, msgs);
      msgs = basicSetModelStatement(newModelStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.STATEMENT__MODEL_STATEMENT, newModelStatement, newModelStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpperOntologyDefinition getUpperOntologyStatement()
  {
    return upperOntologyStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpperOntologyStatement(UpperOntologyDefinition newUpperOntologyStatement, NotificationChain msgs)
  {
    UpperOntologyDefinition oldUpperOntologyStatement = upperOntologyStatement;
    upperOntologyStatement = newUpperOntologyStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.STATEMENT__UPPER_ONTOLOGY_STATEMENT, oldUpperOntologyStatement, newUpperOntologyStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUpperOntologyStatement(UpperOntologyDefinition newUpperOntologyStatement)
  {
    if (newUpperOntologyStatement != upperOntologyStatement)
    {
      NotificationChain msgs = null;
      if (upperOntologyStatement != null)
        msgs = ((InternalEObject)upperOntologyStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.STATEMENT__UPPER_ONTOLOGY_STATEMENT, null, msgs);
      if (newUpperOntologyStatement != null)
        msgs = ((InternalEObject)newUpperOntologyStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.STATEMENT__UPPER_ONTOLOGY_STATEMENT, null, msgs);
      msgs = basicSetUpperOntologyStatement(newUpperOntologyStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.STATEMENT__UPPER_ONTOLOGY_STATEMENT, newUpperOntologyStatement, newUpperOntologyStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefineStatement getDefineStatement()
  {
    return defineStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefineStatement(DefineStatement newDefineStatement, NotificationChain msgs)
  {
    DefineStatement oldDefineStatement = defineStatement;
    defineStatement = newDefineStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.STATEMENT__DEFINE_STATEMENT, oldDefineStatement, newDefineStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefineStatement(DefineStatement newDefineStatement)
  {
    if (newDefineStatement != defineStatement)
    {
      NotificationChain msgs = null;
      if (defineStatement != null)
        msgs = ((InternalEObject)defineStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.STATEMENT__DEFINE_STATEMENT, null, msgs);
      if (newDefineStatement != null)
        msgs = ((InternalEObject)newDefineStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.STATEMENT__DEFINE_STATEMENT, null, msgs);
      msgs = basicSetDefineStatement(newDefineStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.STATEMENT__DEFINE_STATEMENT, newDefineStatement, newDefineStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObserveStatement getObserveStatement()
  {
    return observeStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObserveStatement(ObserveStatement newObserveStatement, NotificationChain msgs)
  {
    ObserveStatement oldObserveStatement = observeStatement;
    observeStatement = newObserveStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.STATEMENT__OBSERVE_STATEMENT, oldObserveStatement, newObserveStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObserveStatement(ObserveStatement newObserveStatement)
  {
    if (newObserveStatement != observeStatement)
    {
      NotificationChain msgs = null;
      if (observeStatement != null)
        msgs = ((InternalEObject)observeStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.STATEMENT__OBSERVE_STATEMENT, null, msgs);
      if (newObserveStatement != null)
        msgs = ((InternalEObject)newObserveStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.STATEMENT__OBSERVE_STATEMENT, null, msgs);
      msgs = basicSetObserveStatement(newObserveStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.STATEMENT__OBSERVE_STATEMENT, newObserveStatement, newObserveStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.STATEMENT__CONCEPT_STATEMENT:
        return basicSetConceptStatement(null, msgs);
      case KimPackage.STATEMENT__MODEL_STATEMENT:
        return basicSetModelStatement(null, msgs);
      case KimPackage.STATEMENT__UPPER_ONTOLOGY_STATEMENT:
        return basicSetUpperOntologyStatement(null, msgs);
      case KimPackage.STATEMENT__DEFINE_STATEMENT:
        return basicSetDefineStatement(null, msgs);
      case KimPackage.STATEMENT__OBSERVE_STATEMENT:
        return basicSetObserveStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.STATEMENT__CONCEPT_STATEMENT:
        return getConceptStatement();
      case KimPackage.STATEMENT__MODEL_STATEMENT:
        return getModelStatement();
      case KimPackage.STATEMENT__UPPER_ONTOLOGY_STATEMENT:
        return getUpperOntologyStatement();
      case KimPackage.STATEMENT__DEFINE_STATEMENT:
        return getDefineStatement();
      case KimPackage.STATEMENT__OBSERVE_STATEMENT:
        return getObserveStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.STATEMENT__CONCEPT_STATEMENT:
        setConceptStatement((ConceptStatement)newValue);
        return;
      case KimPackage.STATEMENT__MODEL_STATEMENT:
        setModelStatement((ModelStatement)newValue);
        return;
      case KimPackage.STATEMENT__UPPER_ONTOLOGY_STATEMENT:
        setUpperOntologyStatement((UpperOntologyDefinition)newValue);
        return;
      case KimPackage.STATEMENT__DEFINE_STATEMENT:
        setDefineStatement((DefineStatement)newValue);
        return;
      case KimPackage.STATEMENT__OBSERVE_STATEMENT:
        setObserveStatement((ObserveStatement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.STATEMENT__CONCEPT_STATEMENT:
        setConceptStatement((ConceptStatement)null);
        return;
      case KimPackage.STATEMENT__MODEL_STATEMENT:
        setModelStatement((ModelStatement)null);
        return;
      case KimPackage.STATEMENT__UPPER_ONTOLOGY_STATEMENT:
        setUpperOntologyStatement((UpperOntologyDefinition)null);
        return;
      case KimPackage.STATEMENT__DEFINE_STATEMENT:
        setDefineStatement((DefineStatement)null);
        return;
      case KimPackage.STATEMENT__OBSERVE_STATEMENT:
        setObserveStatement((ObserveStatement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.STATEMENT__CONCEPT_STATEMENT:
        return conceptStatement != null;
      case KimPackage.STATEMENT__MODEL_STATEMENT:
        return modelStatement != null;
      case KimPackage.STATEMENT__UPPER_ONTOLOGY_STATEMENT:
        return upperOntologyStatement != null;
      case KimPackage.STATEMENT__DEFINE_STATEMENT:
        return defineStatement != null;
      case KimPackage.STATEMENT__OBSERVE_STATEMENT:
        return observeStatement != null;
    }
    return super.eIsSet(featureID);
  }

} //StatementImpl
