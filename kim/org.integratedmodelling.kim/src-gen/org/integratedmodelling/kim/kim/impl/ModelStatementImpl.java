/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.26.0
 */
package org.integratedmodelling.kim.kim.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kim.kim.Annotation;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.ModelBodyStatement;
import org.integratedmodelling.kim.kim.ModelStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ModelStatementImpl#getAnnotations <em>Annotations</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ModelStatementImpl#isInactive <em>Inactive</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ModelStatementImpl#isProjectPrivate <em>Project Private</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ModelStatementImpl#isPrivate <em>Private</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ModelStatementImpl#getModel <em>Model</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ModelStatementImpl#getBody <em>Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelStatementImpl extends MinimalEObjectImpl.Container implements ModelStatement
{
  /**
   * The cached value of the '{@link #getAnnotations() <em>Annotations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotations()
   * @generated
   * @ordered
   */
  protected EList<Annotation> annotations;

  /**
   * The default value of the '{@link #isInactive() <em>Inactive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInactive()
   * @generated
   * @ordered
   */
  protected static final boolean INACTIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInactive() <em>Inactive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInactive()
   * @generated
   * @ordered
   */
  protected boolean inactive = INACTIVE_EDEFAULT;

  /**
   * The default value of the '{@link #isProjectPrivate() <em>Project Private</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProjectPrivate()
   * @generated
   * @ordered
   */
  protected static final boolean PROJECT_PRIVATE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isProjectPrivate() <em>Project Private</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProjectPrivate()
   * @generated
   * @ordered
   */
  protected boolean projectPrivate = PROJECT_PRIVATE_EDEFAULT;

  /**
   * The default value of the '{@link #isPrivate() <em>Private</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPrivate()
   * @generated
   * @ordered
   */
  protected static final boolean PRIVATE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPrivate() <em>Private</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPrivate()
   * @generated
   * @ordered
   */
  protected boolean private_ = PRIVATE_EDEFAULT;

  /**
   * The default value of the '{@link #getModel() <em>Model</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModel()
   * @generated
   * @ordered
   */
  protected static final String MODEL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getModel() <em>Model</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModel()
   * @generated
   * @ordered
   */
  protected String model = MODEL_EDEFAULT;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected ModelBodyStatement body;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.MODEL_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Annotation> getAnnotations()
  {
    if (annotations == null)
    {
      annotations = new EObjectContainmentEList<Annotation>(Annotation.class, this, KimPackage.MODEL_STATEMENT__ANNOTATIONS);
    }
    return annotations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isInactive()
  {
    return inactive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInactive(boolean newInactive)
  {
    boolean oldInactive = inactive;
    inactive = newInactive;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.MODEL_STATEMENT__INACTIVE, oldInactive, inactive));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isProjectPrivate()
  {
    return projectPrivate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProjectPrivate(boolean newProjectPrivate)
  {
    boolean oldProjectPrivate = projectPrivate;
    projectPrivate = newProjectPrivate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.MODEL_STATEMENT__PROJECT_PRIVATE, oldProjectPrivate, projectPrivate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPrivate()
  {
    return private_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrivate(boolean newPrivate)
  {
    boolean oldPrivate = private_;
    private_ = newPrivate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.MODEL_STATEMENT__PRIVATE, oldPrivate, private_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getModel()
  {
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModel(String newModel)
  {
    String oldModel = model;
    model = newModel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.MODEL_STATEMENT__MODEL, oldModel, model));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelBodyStatement getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(ModelBodyStatement newBody, NotificationChain msgs)
  {
    ModelBodyStatement oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.MODEL_STATEMENT__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBody(ModelBodyStatement newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.MODEL_STATEMENT__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.MODEL_STATEMENT__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.MODEL_STATEMENT__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.MODEL_STATEMENT__ANNOTATIONS:
        return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd, msgs);
      case KimPackage.MODEL_STATEMENT__BODY:
        return basicSetBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.MODEL_STATEMENT__ANNOTATIONS:
        return getAnnotations();
      case KimPackage.MODEL_STATEMENT__INACTIVE:
        return isInactive();
      case KimPackage.MODEL_STATEMENT__PROJECT_PRIVATE:
        return isProjectPrivate();
      case KimPackage.MODEL_STATEMENT__PRIVATE:
        return isPrivate();
      case KimPackage.MODEL_STATEMENT__MODEL:
        return getModel();
      case KimPackage.MODEL_STATEMENT__BODY:
        return getBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.MODEL_STATEMENT__ANNOTATIONS:
        getAnnotations().clear();
        getAnnotations().addAll((Collection<? extends Annotation>)newValue);
        return;
      case KimPackage.MODEL_STATEMENT__INACTIVE:
        setInactive((Boolean)newValue);
        return;
      case KimPackage.MODEL_STATEMENT__PROJECT_PRIVATE:
        setProjectPrivate((Boolean)newValue);
        return;
      case KimPackage.MODEL_STATEMENT__PRIVATE:
        setPrivate((Boolean)newValue);
        return;
      case KimPackage.MODEL_STATEMENT__MODEL:
        setModel((String)newValue);
        return;
      case KimPackage.MODEL_STATEMENT__BODY:
        setBody((ModelBodyStatement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.MODEL_STATEMENT__ANNOTATIONS:
        getAnnotations().clear();
        return;
      case KimPackage.MODEL_STATEMENT__INACTIVE:
        setInactive(INACTIVE_EDEFAULT);
        return;
      case KimPackage.MODEL_STATEMENT__PROJECT_PRIVATE:
        setProjectPrivate(PROJECT_PRIVATE_EDEFAULT);
        return;
      case KimPackage.MODEL_STATEMENT__PRIVATE:
        setPrivate(PRIVATE_EDEFAULT);
        return;
      case KimPackage.MODEL_STATEMENT__MODEL:
        setModel(MODEL_EDEFAULT);
        return;
      case KimPackage.MODEL_STATEMENT__BODY:
        setBody((ModelBodyStatement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.MODEL_STATEMENT__ANNOTATIONS:
        return annotations != null && !annotations.isEmpty();
      case KimPackage.MODEL_STATEMENT__INACTIVE:
        return inactive != INACTIVE_EDEFAULT;
      case KimPackage.MODEL_STATEMENT__PROJECT_PRIVATE:
        return projectPrivate != PROJECT_PRIVATE_EDEFAULT;
      case KimPackage.MODEL_STATEMENT__PRIVATE:
        return private_ != PRIVATE_EDEFAULT;
      case KimPackage.MODEL_STATEMENT__MODEL:
        return MODEL_EDEFAULT == null ? model != null : !MODEL_EDEFAULT.equals(model);
      case KimPackage.MODEL_STATEMENT__BODY:
        return body != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (inactive: ");
    result.append(inactive);
    result.append(", projectPrivate: ");
    result.append(projectPrivate);
    result.append(", private: ");
    result.append(private_);
    result.append(", model: ");
    result.append(model);
    result.append(')');
    return result.toString();
  }

} //ModelStatementImpl
