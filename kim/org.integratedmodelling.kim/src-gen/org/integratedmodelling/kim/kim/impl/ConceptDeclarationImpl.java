/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kim.kim.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kim.kim.Concept;
import org.integratedmodelling.kim.kim.ConceptDeclaration;
import org.integratedmodelling.kim.kim.KimPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concept Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getMain <em>Main</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#isDistributedOfInherency <em>Distributed Of Inherency</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getInherency <em>Inherency</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#isDistributedForInherency <em>Distributed For Inherency</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getMotivation <em>Motivation</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getCompresent <em>Compresent</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getCausant <em>Causant</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getAdjacent <em>Adjacent</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getContainer <em>Container</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getContained <em>Contained</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getCaused <em>Caused</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#isDistributedTemporalInherency <em>Distributed Temporal Inherency</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getDuring <em>During</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#isDistributedWithinInherency <em>Distributed Within Inherency</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getContext <em>Context</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getRelationshipSource <em>Relationship Source</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getRelationshipTarget <em>Relationship Target</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getOperators <em>Operators</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getOperands <em>Operands</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptDeclarationImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConceptDeclarationImpl extends MinimalEObjectImpl.Container implements ConceptDeclaration
{
  /**
   * The cached value of the '{@link #getMain() <em>Main</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMain()
   * @generated
   * @ordered
   */
  protected EList<Concept> main;

  /**
   * The default value of the '{@link #isDistributedOfInherency() <em>Distributed Of Inherency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistributedOfInherency()
   * @generated
   * @ordered
   */
  protected static final boolean DISTRIBUTED_OF_INHERENCY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDistributedOfInherency() <em>Distributed Of Inherency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistributedOfInherency()
   * @generated
   * @ordered
   */
  protected boolean distributedOfInherency = DISTRIBUTED_OF_INHERENCY_EDEFAULT;

  /**
   * The cached value of the '{@link #getInherency() <em>Inherency</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInherency()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration inherency;

  /**
   * The default value of the '{@link #isDistributedForInherency() <em>Distributed For Inherency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistributedForInherency()
   * @generated
   * @ordered
   */
  protected static final boolean DISTRIBUTED_FOR_INHERENCY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDistributedForInherency() <em>Distributed For Inherency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistributedForInherency()
   * @generated
   * @ordered
   */
  protected boolean distributedForInherency = DISTRIBUTED_FOR_INHERENCY_EDEFAULT;

  /**
   * The cached value of the '{@link #getMotivation() <em>Motivation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMotivation()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration motivation;

  /**
   * The cached value of the '{@link #getCompresent() <em>Compresent</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompresent()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration compresent;

  /**
   * The cached value of the '{@link #getCausant() <em>Causant</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCausant()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration causant;

  /**
   * The cached value of the '{@link #getAdjacent() <em>Adjacent</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdjacent()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration adjacent;

  /**
   * The cached value of the '{@link #getContainer() <em>Container</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContainer()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration container;

  /**
   * The cached value of the '{@link #getContained() <em>Contained</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContained()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration contained;

  /**
   * The cached value of the '{@link #getCaused() <em>Caused</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCaused()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration caused;

  /**
   * The default value of the '{@link #isDistributedTemporalInherency() <em>Distributed Temporal Inherency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistributedTemporalInherency()
   * @generated
   * @ordered
   */
  protected static final boolean DISTRIBUTED_TEMPORAL_INHERENCY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDistributedTemporalInherency() <em>Distributed Temporal Inherency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistributedTemporalInherency()
   * @generated
   * @ordered
   */
  protected boolean distributedTemporalInherency = DISTRIBUTED_TEMPORAL_INHERENCY_EDEFAULT;

  /**
   * The cached value of the '{@link #getDuring() <em>During</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuring()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration during;

  /**
   * The default value of the '{@link #isDistributedWithinInherency() <em>Distributed Within Inherency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistributedWithinInherency()
   * @generated
   * @ordered
   */
  protected static final boolean DISTRIBUTED_WITHIN_INHERENCY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDistributedWithinInherency() <em>Distributed Within Inherency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistributedWithinInherency()
   * @generated
   * @ordered
   */
  protected boolean distributedWithinInherency = DISTRIBUTED_WITHIN_INHERENCY_EDEFAULT;

  /**
   * The cached value of the '{@link #getContext() <em>Context</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContext()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration context;

  /**
   * The cached value of the '{@link #getRelationshipSource() <em>Relationship Source</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelationshipSource()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration relationshipSource;

  /**
   * The cached value of the '{@link #getRelationshipTarget() <em>Relationship Target</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelationshipTarget()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration relationshipTarget;

  /**
   * The cached value of the '{@link #getOperators() <em>Operators</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperators()
   * @generated
   * @ordered
   */
  protected EList<String> operators;

  /**
   * The cached value of the '{@link #getOperands() <em>Operands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperands()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> operands;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConceptDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.CONCEPT_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Concept> getMain()
  {
    if (main == null)
    {
      main = new EObjectContainmentEList<Concept>(Concept.class, this, KimPackage.CONCEPT_DECLARATION__MAIN);
    }
    return main;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDistributedOfInherency()
  {
    return distributedOfInherency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDistributedOfInherency(boolean newDistributedOfInherency)
  {
    boolean oldDistributedOfInherency = distributedOfInherency;
    distributedOfInherency = newDistributedOfInherency;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_OF_INHERENCY, oldDistributedOfInherency, distributedOfInherency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getInherency()
  {
    return inherency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInherency(ConceptDeclaration newInherency, NotificationChain msgs)
  {
    ConceptDeclaration oldInherency = inherency;
    inherency = newInherency;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__INHERENCY, oldInherency, newInherency);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInherency(ConceptDeclaration newInherency)
  {
    if (newInherency != inherency)
    {
      NotificationChain msgs = null;
      if (inherency != null)
        msgs = ((InternalEObject)inherency).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__INHERENCY, null, msgs);
      if (newInherency != null)
        msgs = ((InternalEObject)newInherency).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__INHERENCY, null, msgs);
      msgs = basicSetInherency(newInherency, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__INHERENCY, newInherency, newInherency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDistributedForInherency()
  {
    return distributedForInherency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDistributedForInherency(boolean newDistributedForInherency)
  {
    boolean oldDistributedForInherency = distributedForInherency;
    distributedForInherency = newDistributedForInherency;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_FOR_INHERENCY, oldDistributedForInherency, distributedForInherency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getMotivation()
  {
    return motivation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMotivation(ConceptDeclaration newMotivation, NotificationChain msgs)
  {
    ConceptDeclaration oldMotivation = motivation;
    motivation = newMotivation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__MOTIVATION, oldMotivation, newMotivation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMotivation(ConceptDeclaration newMotivation)
  {
    if (newMotivation != motivation)
    {
      NotificationChain msgs = null;
      if (motivation != null)
        msgs = ((InternalEObject)motivation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__MOTIVATION, null, msgs);
      if (newMotivation != null)
        msgs = ((InternalEObject)newMotivation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__MOTIVATION, null, msgs);
      msgs = basicSetMotivation(newMotivation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__MOTIVATION, newMotivation, newMotivation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getCompresent()
  {
    return compresent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompresent(ConceptDeclaration newCompresent, NotificationChain msgs)
  {
    ConceptDeclaration oldCompresent = compresent;
    compresent = newCompresent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__COMPRESENT, oldCompresent, newCompresent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompresent(ConceptDeclaration newCompresent)
  {
    if (newCompresent != compresent)
    {
      NotificationChain msgs = null;
      if (compresent != null)
        msgs = ((InternalEObject)compresent).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__COMPRESENT, null, msgs);
      if (newCompresent != null)
        msgs = ((InternalEObject)newCompresent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__COMPRESENT, null, msgs);
      msgs = basicSetCompresent(newCompresent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__COMPRESENT, newCompresent, newCompresent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getCausant()
  {
    return causant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCausant(ConceptDeclaration newCausant, NotificationChain msgs)
  {
    ConceptDeclaration oldCausant = causant;
    causant = newCausant;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__CAUSANT, oldCausant, newCausant);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCausant(ConceptDeclaration newCausant)
  {
    if (newCausant != causant)
    {
      NotificationChain msgs = null;
      if (causant != null)
        msgs = ((InternalEObject)causant).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__CAUSANT, null, msgs);
      if (newCausant != null)
        msgs = ((InternalEObject)newCausant).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__CAUSANT, null, msgs);
      msgs = basicSetCausant(newCausant, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__CAUSANT, newCausant, newCausant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getAdjacent()
  {
    return adjacent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAdjacent(ConceptDeclaration newAdjacent, NotificationChain msgs)
  {
    ConceptDeclaration oldAdjacent = adjacent;
    adjacent = newAdjacent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__ADJACENT, oldAdjacent, newAdjacent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAdjacent(ConceptDeclaration newAdjacent)
  {
    if (newAdjacent != adjacent)
    {
      NotificationChain msgs = null;
      if (adjacent != null)
        msgs = ((InternalEObject)adjacent).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__ADJACENT, null, msgs);
      if (newAdjacent != null)
        msgs = ((InternalEObject)newAdjacent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__ADJACENT, null, msgs);
      msgs = basicSetAdjacent(newAdjacent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__ADJACENT, newAdjacent, newAdjacent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getContainer()
  {
    return container;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContainer(ConceptDeclaration newContainer, NotificationChain msgs)
  {
    ConceptDeclaration oldContainer = container;
    container = newContainer;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__CONTAINER, oldContainer, newContainer);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContainer(ConceptDeclaration newContainer)
  {
    if (newContainer != container)
    {
      NotificationChain msgs = null;
      if (container != null)
        msgs = ((InternalEObject)container).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__CONTAINER, null, msgs);
      if (newContainer != null)
        msgs = ((InternalEObject)newContainer).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__CONTAINER, null, msgs);
      msgs = basicSetContainer(newContainer, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__CONTAINER, newContainer, newContainer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getContained()
  {
    return contained;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContained(ConceptDeclaration newContained, NotificationChain msgs)
  {
    ConceptDeclaration oldContained = contained;
    contained = newContained;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__CONTAINED, oldContained, newContained);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContained(ConceptDeclaration newContained)
  {
    if (newContained != contained)
    {
      NotificationChain msgs = null;
      if (contained != null)
        msgs = ((InternalEObject)contained).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__CONTAINED, null, msgs);
      if (newContained != null)
        msgs = ((InternalEObject)newContained).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__CONTAINED, null, msgs);
      msgs = basicSetContained(newContained, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__CONTAINED, newContained, newContained));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getCaused()
  {
    return caused;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCaused(ConceptDeclaration newCaused, NotificationChain msgs)
  {
    ConceptDeclaration oldCaused = caused;
    caused = newCaused;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__CAUSED, oldCaused, newCaused);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCaused(ConceptDeclaration newCaused)
  {
    if (newCaused != caused)
    {
      NotificationChain msgs = null;
      if (caused != null)
        msgs = ((InternalEObject)caused).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__CAUSED, null, msgs);
      if (newCaused != null)
        msgs = ((InternalEObject)newCaused).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__CAUSED, null, msgs);
      msgs = basicSetCaused(newCaused, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__CAUSED, newCaused, newCaused));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDistributedTemporalInherency()
  {
    return distributedTemporalInherency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDistributedTemporalInherency(boolean newDistributedTemporalInherency)
  {
    boolean oldDistributedTemporalInherency = distributedTemporalInherency;
    distributedTemporalInherency = newDistributedTemporalInherency;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_TEMPORAL_INHERENCY, oldDistributedTemporalInherency, distributedTemporalInherency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getDuring()
  {
    return during;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDuring(ConceptDeclaration newDuring, NotificationChain msgs)
  {
    ConceptDeclaration oldDuring = during;
    during = newDuring;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__DURING, oldDuring, newDuring);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDuring(ConceptDeclaration newDuring)
  {
    if (newDuring != during)
    {
      NotificationChain msgs = null;
      if (during != null)
        msgs = ((InternalEObject)during).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__DURING, null, msgs);
      if (newDuring != null)
        msgs = ((InternalEObject)newDuring).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__DURING, null, msgs);
      msgs = basicSetDuring(newDuring, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__DURING, newDuring, newDuring));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDistributedWithinInherency()
  {
    return distributedWithinInherency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDistributedWithinInherency(boolean newDistributedWithinInherency)
  {
    boolean oldDistributedWithinInherency = distributedWithinInherency;
    distributedWithinInherency = newDistributedWithinInherency;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_WITHIN_INHERENCY, oldDistributedWithinInherency, distributedWithinInherency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getContext()
  {
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContext(ConceptDeclaration newContext, NotificationChain msgs)
  {
    ConceptDeclaration oldContext = context;
    context = newContext;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__CONTEXT, oldContext, newContext);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContext(ConceptDeclaration newContext)
  {
    if (newContext != context)
    {
      NotificationChain msgs = null;
      if (context != null)
        msgs = ((InternalEObject)context).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__CONTEXT, null, msgs);
      if (newContext != null)
        msgs = ((InternalEObject)newContext).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__CONTEXT, null, msgs);
      msgs = basicSetContext(newContext, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__CONTEXT, newContext, newContext));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getRelationshipSource()
  {
    return relationshipSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRelationshipSource(ConceptDeclaration newRelationshipSource, NotificationChain msgs)
  {
    ConceptDeclaration oldRelationshipSource = relationshipSource;
    relationshipSource = newRelationshipSource;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_SOURCE, oldRelationshipSource, newRelationshipSource);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRelationshipSource(ConceptDeclaration newRelationshipSource)
  {
    if (newRelationshipSource != relationshipSource)
    {
      NotificationChain msgs = null;
      if (relationshipSource != null)
        msgs = ((InternalEObject)relationshipSource).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_SOURCE, null, msgs);
      if (newRelationshipSource != null)
        msgs = ((InternalEObject)newRelationshipSource).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_SOURCE, null, msgs);
      msgs = basicSetRelationshipSource(newRelationshipSource, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_SOURCE, newRelationshipSource, newRelationshipSource));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getRelationshipTarget()
  {
    return relationshipTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRelationshipTarget(ConceptDeclaration newRelationshipTarget, NotificationChain msgs)
  {
    ConceptDeclaration oldRelationshipTarget = relationshipTarget;
    relationshipTarget = newRelationshipTarget;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_TARGET, oldRelationshipTarget, newRelationshipTarget);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRelationshipTarget(ConceptDeclaration newRelationshipTarget)
  {
    if (newRelationshipTarget != relationshipTarget)
    {
      NotificationChain msgs = null;
      if (relationshipTarget != null)
        msgs = ((InternalEObject)relationshipTarget).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_TARGET, null, msgs);
      if (newRelationshipTarget != null)
        msgs = ((InternalEObject)newRelationshipTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_TARGET, null, msgs);
      msgs = basicSetRelationshipTarget(newRelationshipTarget, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_TARGET, newRelationshipTarget, newRelationshipTarget));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getOperators()
  {
    if (operators == null)
    {
      operators = new EDataTypeEList<String>(String.class, this, KimPackage.CONCEPT_DECLARATION__OPERATORS);
    }
    return operators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getOperands()
  {
    if (operands == null)
    {
      operands = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_DECLARATION__OPERANDS);
    }
    return operands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_DECLARATION__MAIN:
        return ((InternalEList<?>)getMain()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_DECLARATION__INHERENCY:
        return basicSetInherency(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__MOTIVATION:
        return basicSetMotivation(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__COMPRESENT:
        return basicSetCompresent(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__CAUSANT:
        return basicSetCausant(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__ADJACENT:
        return basicSetAdjacent(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__CONTAINER:
        return basicSetContainer(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__CONTAINED:
        return basicSetContained(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__CAUSED:
        return basicSetCaused(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__DURING:
        return basicSetDuring(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__CONTEXT:
        return basicSetContext(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_SOURCE:
        return basicSetRelationshipSource(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_TARGET:
        return basicSetRelationshipTarget(null, msgs);
      case KimPackage.CONCEPT_DECLARATION__OPERANDS:
        return ((InternalEList<?>)getOperands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_DECLARATION__MAIN:
        return getMain();
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_OF_INHERENCY:
        return isDistributedOfInherency();
      case KimPackage.CONCEPT_DECLARATION__INHERENCY:
        return getInherency();
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_FOR_INHERENCY:
        return isDistributedForInherency();
      case KimPackage.CONCEPT_DECLARATION__MOTIVATION:
        return getMotivation();
      case KimPackage.CONCEPT_DECLARATION__COMPRESENT:
        return getCompresent();
      case KimPackage.CONCEPT_DECLARATION__CAUSANT:
        return getCausant();
      case KimPackage.CONCEPT_DECLARATION__ADJACENT:
        return getAdjacent();
      case KimPackage.CONCEPT_DECLARATION__CONTAINER:
        return getContainer();
      case KimPackage.CONCEPT_DECLARATION__CONTAINED:
        return getContained();
      case KimPackage.CONCEPT_DECLARATION__CAUSED:
        return getCaused();
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_TEMPORAL_INHERENCY:
        return isDistributedTemporalInherency();
      case KimPackage.CONCEPT_DECLARATION__DURING:
        return getDuring();
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_WITHIN_INHERENCY:
        return isDistributedWithinInherency();
      case KimPackage.CONCEPT_DECLARATION__CONTEXT:
        return getContext();
      case KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_SOURCE:
        return getRelationshipSource();
      case KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_TARGET:
        return getRelationshipTarget();
      case KimPackage.CONCEPT_DECLARATION__OPERATORS:
        return getOperators();
      case KimPackage.CONCEPT_DECLARATION__OPERANDS:
        return getOperands();
      case KimPackage.CONCEPT_DECLARATION__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_DECLARATION__MAIN:
        getMain().clear();
        getMain().addAll((Collection<? extends Concept>)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_OF_INHERENCY:
        setDistributedOfInherency((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__INHERENCY:
        setInherency((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_FOR_INHERENCY:
        setDistributedForInherency((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__MOTIVATION:
        setMotivation((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__COMPRESENT:
        setCompresent((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__CAUSANT:
        setCausant((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__ADJACENT:
        setAdjacent((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__CONTAINER:
        setContainer((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__CONTAINED:
        setContained((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__CAUSED:
        setCaused((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_TEMPORAL_INHERENCY:
        setDistributedTemporalInherency((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__DURING:
        setDuring((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_WITHIN_INHERENCY:
        setDistributedWithinInherency((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__CONTEXT:
        setContext((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_SOURCE:
        setRelationshipSource((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_TARGET:
        setRelationshipTarget((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__OPERATORS:
        getOperators().clear();
        getOperators().addAll((Collection<? extends String>)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__OPERANDS:
        getOperands().clear();
        getOperands().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_DECLARATION__NAME:
        setName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_DECLARATION__MAIN:
        getMain().clear();
        return;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_OF_INHERENCY:
        setDistributedOfInherency(DISTRIBUTED_OF_INHERENCY_EDEFAULT);
        return;
      case KimPackage.CONCEPT_DECLARATION__INHERENCY:
        setInherency((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_FOR_INHERENCY:
        setDistributedForInherency(DISTRIBUTED_FOR_INHERENCY_EDEFAULT);
        return;
      case KimPackage.CONCEPT_DECLARATION__MOTIVATION:
        setMotivation((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__COMPRESENT:
        setCompresent((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__CAUSANT:
        setCausant((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__ADJACENT:
        setAdjacent((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__CONTAINER:
        setContainer((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__CONTAINED:
        setContained((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__CAUSED:
        setCaused((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_TEMPORAL_INHERENCY:
        setDistributedTemporalInherency(DISTRIBUTED_TEMPORAL_INHERENCY_EDEFAULT);
        return;
      case KimPackage.CONCEPT_DECLARATION__DURING:
        setDuring((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_WITHIN_INHERENCY:
        setDistributedWithinInherency(DISTRIBUTED_WITHIN_INHERENCY_EDEFAULT);
        return;
      case KimPackage.CONCEPT_DECLARATION__CONTEXT:
        setContext((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_SOURCE:
        setRelationshipSource((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_TARGET:
        setRelationshipTarget((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_DECLARATION__OPERATORS:
        getOperators().clear();
        return;
      case KimPackage.CONCEPT_DECLARATION__OPERANDS:
        getOperands().clear();
        return;
      case KimPackage.CONCEPT_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_DECLARATION__MAIN:
        return main != null && !main.isEmpty();
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_OF_INHERENCY:
        return distributedOfInherency != DISTRIBUTED_OF_INHERENCY_EDEFAULT;
      case KimPackage.CONCEPT_DECLARATION__INHERENCY:
        return inherency != null;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_FOR_INHERENCY:
        return distributedForInherency != DISTRIBUTED_FOR_INHERENCY_EDEFAULT;
      case KimPackage.CONCEPT_DECLARATION__MOTIVATION:
        return motivation != null;
      case KimPackage.CONCEPT_DECLARATION__COMPRESENT:
        return compresent != null;
      case KimPackage.CONCEPT_DECLARATION__CAUSANT:
        return causant != null;
      case KimPackage.CONCEPT_DECLARATION__ADJACENT:
        return adjacent != null;
      case KimPackage.CONCEPT_DECLARATION__CONTAINER:
        return container != null;
      case KimPackage.CONCEPT_DECLARATION__CONTAINED:
        return contained != null;
      case KimPackage.CONCEPT_DECLARATION__CAUSED:
        return caused != null;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_TEMPORAL_INHERENCY:
        return distributedTemporalInherency != DISTRIBUTED_TEMPORAL_INHERENCY_EDEFAULT;
      case KimPackage.CONCEPT_DECLARATION__DURING:
        return during != null;
      case KimPackage.CONCEPT_DECLARATION__DISTRIBUTED_WITHIN_INHERENCY:
        return distributedWithinInherency != DISTRIBUTED_WITHIN_INHERENCY_EDEFAULT;
      case KimPackage.CONCEPT_DECLARATION__CONTEXT:
        return context != null;
      case KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_SOURCE:
        return relationshipSource != null;
      case KimPackage.CONCEPT_DECLARATION__RELATIONSHIP_TARGET:
        return relationshipTarget != null;
      case KimPackage.CONCEPT_DECLARATION__OPERATORS:
        return operators != null && !operators.isEmpty();
      case KimPackage.CONCEPT_DECLARATION__OPERANDS:
        return operands != null && !operands.isEmpty();
      case KimPackage.CONCEPT_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (distributedOfInherency: ");
    result.append(distributedOfInherency);
    result.append(", distributedForInherency: ");
    result.append(distributedForInherency);
    result.append(", distributedTemporalInherency: ");
    result.append(distributedTemporalInherency);
    result.append(", distributedWithinInherency: ");
    result.append(distributedWithinInherency);
    result.append(", operators: ");
    result.append(operators);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ConceptDeclarationImpl
