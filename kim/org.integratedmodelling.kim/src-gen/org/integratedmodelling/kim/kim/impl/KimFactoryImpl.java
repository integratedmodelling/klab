/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kim.kim.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.integratedmodelling.kim.kim.Action;
import org.integratedmodelling.kim.kim.ActionSpecification;
import org.integratedmodelling.kim.kim.Annotation;
import org.integratedmodelling.kim.kim.ApplicableTarget;
import org.integratedmodelling.kim.kim.Classification;
import org.integratedmodelling.kim.kim.Classifier;
import org.integratedmodelling.kim.kim.ClassifierRHS;
import org.integratedmodelling.kim.kim.ComputableValue;
import org.integratedmodelling.kim.kim.Concept;
import org.integratedmodelling.kim.kim.ConceptDeclaration;
import org.integratedmodelling.kim.kim.ConceptReference;
import org.integratedmodelling.kim.kim.ConceptStatement;
import org.integratedmodelling.kim.kim.ConceptStatementBody;
import org.integratedmodelling.kim.kim.Currency;
import org.integratedmodelling.kim.kim.Date;
import org.integratedmodelling.kim.kim.DefineStatement;
import org.integratedmodelling.kim.kim.DefinitionBody;
import org.integratedmodelling.kim.kim.Dependency;
import org.integratedmodelling.kim.kim.DescriptionConstraints;
import org.integratedmodelling.kim.kim.DocSelector;
import org.integratedmodelling.kim.kim.Function;
import org.integratedmodelling.kim.kim.FunctionOrID;
import org.integratedmodelling.kim.kim.HeaderRow;
import org.integratedmodelling.kim.kim.IdentityRequirement;
import org.integratedmodelling.kim.kim.Implication;
import org.integratedmodelling.kim.kim.Import;
import org.integratedmodelling.kim.kim.KeyValuePair;
import org.integratedmodelling.kim.kim.KimFactory;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.List;
import org.integratedmodelling.kim.kim.Literal;
import org.integratedmodelling.kim.kim.LookupTable;
import org.integratedmodelling.kim.kim.LookupTableArgument;
import org.integratedmodelling.kim.kim.Map;
import org.integratedmodelling.kim.kim.MapEntry;
import org.integratedmodelling.kim.kim.Model;
import org.integratedmodelling.kim.kim.ModelBodyStatement;
import org.integratedmodelling.kim.kim.ModelStatement;
import org.integratedmodelling.kim.kim.Namespace;
import org.integratedmodelling.kim.kim.ObservableSemantics;
import org.integratedmodelling.kim.kim.ObserveStatement;
import org.integratedmodelling.kim.kim.ObserveStatementBody;
import org.integratedmodelling.kim.kim.Option;
import org.integratedmodelling.kim.kim.OwlImport;
import org.integratedmodelling.kim.kim.ParameterList;
import org.integratedmodelling.kim.kim.PropertyStatement;
import org.integratedmodelling.kim.kim.Quantification;
import org.integratedmodelling.kim.kim.Quantity;
import org.integratedmodelling.kim.kim.REL_OPERATOR;
import org.integratedmodelling.kim.kim.Statement;
import org.integratedmodelling.kim.kim.Table;
import org.integratedmodelling.kim.kim.TableRow;
import org.integratedmodelling.kim.kim.Unit;
import org.integratedmodelling.kim.kim.UnitElement;
import org.integratedmodelling.kim.kim.UnitOp;
import org.integratedmodelling.kim.kim.UpperOntologyDefinition;
import org.integratedmodelling.kim.kim.Urn;
import org.integratedmodelling.kim.kim.Value;
import org.integratedmodelling.kim.kim.ValueAssignment;
import org.integratedmodelling.kim.kim.ValueOperator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class KimFactoryImpl extends EFactoryImpl implements KimFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static KimFactory init()
  {
    try
    {
      KimFactory theKimFactory = (KimFactory)EPackage.Registry.INSTANCE.getEFactory(KimPackage.eNS_URI);
      if (theKimFactory != null)
      {
        return theKimFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new KimFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KimFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case KimPackage.MODEL: return createModel();
      case KimPackage.STATEMENT: return createStatement();
      case KimPackage.MODEL_STATEMENT: return createModelStatement();
      case KimPackage.DEFINE_STATEMENT: return createDefineStatement();
      case KimPackage.DEFINITION_BODY: return createDefinitionBody();
      case KimPackage.MODEL_BODY_STATEMENT: return createModelBodyStatement();
      case KimPackage.LOOKUP_TABLE_ARGUMENT: return createLookupTableArgument();
      case KimPackage.CLASSIFICATION: return createClassification();
      case KimPackage.CLASSIFIER: return createClassifier();
      case KimPackage.CLASSIFIER_RHS: return createClassifierRHS();
      case KimPackage.URN: return createUrn();
      case KimPackage.LOOKUP_TABLE: return createLookupTable();
      case KimPackage.TABLE: return createTable();
      case KimPackage.HEADER_ROW: return createHeaderRow();
      case KimPackage.TABLE_ROW: return createTableRow();
      case KimPackage.ACTION_SPECIFICATION: return createActionSpecification();
      case KimPackage.FUNCTION_OR_ID: return createFunctionOrID();
      case KimPackage.ACTION: return createAction();
      case KimPackage.VALUE_ASSIGNMENT: return createValueAssignment();
      case KimPackage.COMPUTABLE_VALUE: return createComputableValue();
      case KimPackage.NAMESPACE: return createNamespace();
      case KimPackage.OWL_IMPORT: return createOwlImport();
      case KimPackage.IMPORT: return createImport();
      case KimPackage.OBSERVE_STATEMENT: return createObserveStatement();
      case KimPackage.OBSERVE_STATEMENT_BODY: return createObserveStatementBody();
      case KimPackage.OBSERVABLE_SEMANTICS: return createObservableSemantics();
      case KimPackage.VALUE_OPERATOR: return createValueOperator();
      case KimPackage.DEPENDENCY: return createDependency();
      case KimPackage.CONCEPT_DECLARATION: return createConceptDeclaration();
      case KimPackage.CONCEPT_REFERENCE: return createConceptReference();
      case KimPackage.CONCEPT: return createConcept();
      case KimPackage.UPPER_ONTOLOGY_DEFINITION: return createUpperOntologyDefinition();
      case KimPackage.CONCEPT_STATEMENT: return createConceptStatement();
      case KimPackage.CONCEPT_STATEMENT_BODY: return createConceptStatementBody();
      case KimPackage.DESCRIPTION_CONSTRAINTS: return createDescriptionConstraints();
      case KimPackage.IMPLICATION: return createImplication();
      case KimPackage.QUANTIFICATION: return createQuantification();
      case KimPackage.PROPERTY_STATEMENT: return createPropertyStatement();
      case KimPackage.APPLICABLE_TARGET: return createApplicableTarget();
      case KimPackage.IDENTITY_REQUIREMENT: return createIdentityRequirement();
      case KimPackage.ANNOTATION: return createAnnotation();
      case KimPackage.LIST: return createList();
      case KimPackage.LITERAL: return createLiteral();
      case KimPackage.MAP: return createMap();
      case KimPackage.MAP_ENTRY: return createMapEntry();
      case KimPackage.DOC_SELECTOR: return createDocSelector();
      case KimPackage.KEY_VALUE_PAIR: return createKeyValuePair();
      case KimPackage.PARAMETER_LIST: return createParameterList();
      case KimPackage.VALUE: return createValue();
      case KimPackage.FUNCTION: return createFunction();
      case KimPackage.OPTION: return createOption();
      case KimPackage.REL_OPERATOR: return createREL_OPERATOR();
      case KimPackage.UNIT_ELEMENT: return createUnitElement();
      case KimPackage.UNIT: return createUnit();
      case KimPackage.CURRENCY: return createCurrency();
      case KimPackage.NUMBER: return createNumber();
      case KimPackage.QUANTITY: return createQuantity();
      case KimPackage.DATE: return createDate();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case KimPackage.UNIT_OP:
        return createUnitOpFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case KimPackage.UNIT_OP:
        return convertUnitOpToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelStatement createModelStatement()
  {
    ModelStatementImpl modelStatement = new ModelStatementImpl();
    return modelStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefineStatement createDefineStatement()
  {
    DefineStatementImpl defineStatement = new DefineStatementImpl();
    return defineStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefinitionBody createDefinitionBody()
  {
    DefinitionBodyImpl definitionBody = new DefinitionBodyImpl();
    return definitionBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelBodyStatement createModelBodyStatement()
  {
    ModelBodyStatementImpl modelBodyStatement = new ModelBodyStatementImpl();
    return modelBodyStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LookupTableArgument createLookupTableArgument()
  {
    LookupTableArgumentImpl lookupTableArgument = new LookupTableArgumentImpl();
    return lookupTableArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Classification createClassification()
  {
    ClassificationImpl classification = new ClassificationImpl();
    return classification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Classifier createClassifier()
  {
    ClassifierImpl classifier = new ClassifierImpl();
    return classifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassifierRHS createClassifierRHS()
  {
    ClassifierRHSImpl classifierRHS = new ClassifierRHSImpl();
    return classifierRHS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Urn createUrn()
  {
    UrnImpl urn = new UrnImpl();
    return urn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LookupTable createLookupTable()
  {
    LookupTableImpl lookupTable = new LookupTableImpl();
    return lookupTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HeaderRow createHeaderRow()
  {
    HeaderRowImpl headerRow = new HeaderRowImpl();
    return headerRow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableRow createTableRow()
  {
    TableRowImpl tableRow = new TableRowImpl();
    return tableRow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionSpecification createActionSpecification()
  {
    ActionSpecificationImpl actionSpecification = new ActionSpecificationImpl();
    return actionSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionOrID createFunctionOrID()
  {
    FunctionOrIDImpl functionOrID = new FunctionOrIDImpl();
    return functionOrID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueAssignment createValueAssignment()
  {
    ValueAssignmentImpl valueAssignment = new ValueAssignmentImpl();
    return valueAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComputableValue createComputableValue()
  {
    ComputableValueImpl computableValue = new ComputableValueImpl();
    return computableValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Namespace createNamespace()
  {
    NamespaceImpl namespace = new NamespaceImpl();
    return namespace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OwlImport createOwlImport()
  {
    OwlImportImpl owlImport = new OwlImportImpl();
    return owlImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObserveStatement createObserveStatement()
  {
    ObserveStatementImpl observeStatement = new ObserveStatementImpl();
    return observeStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObserveStatementBody createObserveStatementBody()
  {
    ObserveStatementBodyImpl observeStatementBody = new ObserveStatementBodyImpl();
    return observeStatementBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObservableSemantics createObservableSemantics()
  {
    ObservableSemanticsImpl observableSemantics = new ObservableSemanticsImpl();
    return observableSemantics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueOperator createValueOperator()
  {
    ValueOperatorImpl valueOperator = new ValueOperatorImpl();
    return valueOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dependency createDependency()
  {
    DependencyImpl dependency = new DependencyImpl();
    return dependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration createConceptDeclaration()
  {
    ConceptDeclarationImpl conceptDeclaration = new ConceptDeclarationImpl();
    return conceptDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptReference createConceptReference()
  {
    ConceptReferenceImpl conceptReference = new ConceptReferenceImpl();
    return conceptReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept createConcept()
  {
    ConceptImpl concept = new ConceptImpl();
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpperOntologyDefinition createUpperOntologyDefinition()
  {
    UpperOntologyDefinitionImpl upperOntologyDefinition = new UpperOntologyDefinitionImpl();
    return upperOntologyDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptStatement createConceptStatement()
  {
    ConceptStatementImpl conceptStatement = new ConceptStatementImpl();
    return conceptStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptStatementBody createConceptStatementBody()
  {
    ConceptStatementBodyImpl conceptStatementBody = new ConceptStatementBodyImpl();
    return conceptStatementBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DescriptionConstraints createDescriptionConstraints()
  {
    DescriptionConstraintsImpl descriptionConstraints = new DescriptionConstraintsImpl();
    return descriptionConstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Implication createImplication()
  {
    ImplicationImpl implication = new ImplicationImpl();
    return implication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quantification createQuantification()
  {
    QuantificationImpl quantification = new QuantificationImpl();
    return quantification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyStatement createPropertyStatement()
  {
    PropertyStatementImpl propertyStatement = new PropertyStatementImpl();
    return propertyStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplicableTarget createApplicableTarget()
  {
    ApplicableTargetImpl applicableTarget = new ApplicableTargetImpl();
    return applicableTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IdentityRequirement createIdentityRequirement()
  {
    IdentityRequirementImpl identityRequirement = new IdentityRequirementImpl();
    return identityRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Annotation createAnnotation()
  {
    AnnotationImpl annotation = new AnnotationImpl();
    return annotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map createMap()
  {
    MapImpl map = new MapImpl();
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MapEntry createMapEntry()
  {
    MapEntryImpl mapEntry = new MapEntryImpl();
    return mapEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DocSelector createDocSelector()
  {
    DocSelectorImpl docSelector = new DocSelectorImpl();
    return docSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KeyValuePair createKeyValuePair()
  {
    KeyValuePairImpl keyValuePair = new KeyValuePairImpl();
    return keyValuePair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterList createParameterList()
  {
    ParameterListImpl parameterList = new ParameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Option createOption()
  {
    OptionImpl option = new OptionImpl();
    return option;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public REL_OPERATOR createREL_OPERATOR()
  {
    REL_OPERATORImpl reL_OPERATOR = new REL_OPERATORImpl();
    return reL_OPERATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitElement createUnitElement()
  {
    UnitElementImpl unitElement = new UnitElementImpl();
    return unitElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unit createUnit()
  {
    UnitImpl unit = new UnitImpl();
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Currency createCurrency()
  {
    CurrencyImpl currency = new CurrencyImpl();
    return currency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.integratedmodelling.kim.kim.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quantity createQuantity()
  {
    QuantityImpl quantity = new QuantityImpl();
    return quantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Date createDate()
  {
    DateImpl date = new DateImpl();
    return date;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnitOp createUnitOpFromString(EDataType eDataType, String initialValue)
  {
    UnitOp result = UnitOp.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnitOpToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KimPackage getKimPackage()
  {
    return (KimPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static KimPackage getPackage()
  {
    return KimPackage.eINSTANCE;
  }

} //KimFactoryImpl
