/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kim.kim.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kim.kim.ApplicableTarget;
import org.integratedmodelling.kim.kim.ConceptDeclaration;
import org.integratedmodelling.kim.kim.KimPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Applicable Target</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ApplicableTargetImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ApplicableTargetImpl#getLinkFrom <em>Link From</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ApplicableTargetImpl#getLinkTo <em>Link To</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ApplicableTargetImpl extends MinimalEObjectImpl.Container implements ApplicableTarget
{
  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration target;

  /**
   * The cached value of the '{@link #getLinkFrom() <em>Link From</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinkFrom()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration linkFrom;

  /**
   * The cached value of the '{@link #getLinkTo() <em>Link To</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLinkTo()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration linkTo;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicableTargetImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.APPLICABLE_TARGET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTarget(ConceptDeclaration newTarget, NotificationChain msgs)
  {
    ConceptDeclaration oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.APPLICABLE_TARGET__TARGET, oldTarget, newTarget);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(ConceptDeclaration newTarget)
  {
    if (newTarget != target)
    {
      NotificationChain msgs = null;
      if (target != null)
        msgs = ((InternalEObject)target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.APPLICABLE_TARGET__TARGET, null, msgs);
      if (newTarget != null)
        msgs = ((InternalEObject)newTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.APPLICABLE_TARGET__TARGET, null, msgs);
      msgs = basicSetTarget(newTarget, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.APPLICABLE_TARGET__TARGET, newTarget, newTarget));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getLinkFrom()
  {
    return linkFrom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLinkFrom(ConceptDeclaration newLinkFrom, NotificationChain msgs)
  {
    ConceptDeclaration oldLinkFrom = linkFrom;
    linkFrom = newLinkFrom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.APPLICABLE_TARGET__LINK_FROM, oldLinkFrom, newLinkFrom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLinkFrom(ConceptDeclaration newLinkFrom)
  {
    if (newLinkFrom != linkFrom)
    {
      NotificationChain msgs = null;
      if (linkFrom != null)
        msgs = ((InternalEObject)linkFrom).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.APPLICABLE_TARGET__LINK_FROM, null, msgs);
      if (newLinkFrom != null)
        msgs = ((InternalEObject)newLinkFrom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.APPLICABLE_TARGET__LINK_FROM, null, msgs);
      msgs = basicSetLinkFrom(newLinkFrom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.APPLICABLE_TARGET__LINK_FROM, newLinkFrom, newLinkFrom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getLinkTo()
  {
    return linkTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLinkTo(ConceptDeclaration newLinkTo, NotificationChain msgs)
  {
    ConceptDeclaration oldLinkTo = linkTo;
    linkTo = newLinkTo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.APPLICABLE_TARGET__LINK_TO, oldLinkTo, newLinkTo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLinkTo(ConceptDeclaration newLinkTo)
  {
    if (newLinkTo != linkTo)
    {
      NotificationChain msgs = null;
      if (linkTo != null)
        msgs = ((InternalEObject)linkTo).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.APPLICABLE_TARGET__LINK_TO, null, msgs);
      if (newLinkTo != null)
        msgs = ((InternalEObject)newLinkTo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.APPLICABLE_TARGET__LINK_TO, null, msgs);
      msgs = basicSetLinkTo(newLinkTo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.APPLICABLE_TARGET__LINK_TO, newLinkTo, newLinkTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.APPLICABLE_TARGET__TARGET:
        return basicSetTarget(null, msgs);
      case KimPackage.APPLICABLE_TARGET__LINK_FROM:
        return basicSetLinkFrom(null, msgs);
      case KimPackage.APPLICABLE_TARGET__LINK_TO:
        return basicSetLinkTo(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.APPLICABLE_TARGET__TARGET:
        return getTarget();
      case KimPackage.APPLICABLE_TARGET__LINK_FROM:
        return getLinkFrom();
      case KimPackage.APPLICABLE_TARGET__LINK_TO:
        return getLinkTo();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.APPLICABLE_TARGET__TARGET:
        setTarget((ConceptDeclaration)newValue);
        return;
      case KimPackage.APPLICABLE_TARGET__LINK_FROM:
        setLinkFrom((ConceptDeclaration)newValue);
        return;
      case KimPackage.APPLICABLE_TARGET__LINK_TO:
        setLinkTo((ConceptDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.APPLICABLE_TARGET__TARGET:
        setTarget((ConceptDeclaration)null);
        return;
      case KimPackage.APPLICABLE_TARGET__LINK_FROM:
        setLinkFrom((ConceptDeclaration)null);
        return;
      case KimPackage.APPLICABLE_TARGET__LINK_TO:
        setLinkTo((ConceptDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.APPLICABLE_TARGET__TARGET:
        return target != null;
      case KimPackage.APPLICABLE_TARGET__LINK_FROM:
        return linkFrom != null;
      case KimPackage.APPLICABLE_TARGET__LINK_TO:
        return linkTo != null;
    }
    return super.eIsSet(featureID);
  }

} //ApplicableTargetImpl
