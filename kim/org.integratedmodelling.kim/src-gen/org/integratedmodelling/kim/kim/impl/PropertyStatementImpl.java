/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kim.kim.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kim.kim.ConceptDeclaration;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.PropertyStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#getProperty <em>Property</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#isHas <em>Has</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#isContains <em>Contains</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#isUses <em>Uses</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#isOnly <em>Only</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#isExactly <em>Exactly</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#isAtLeast <em>At Least</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#isAtMost <em>At Most</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#getCardinality <em>Cardinality</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#isOrMore <em>Or More</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.PropertyStatementImpl#getPropertyTarget <em>Property Target</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyStatementImpl extends MinimalEObjectImpl.Container implements PropertyStatement
{
  /**
   * The default value of the '{@link #getProperty() <em>Property</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperty()
   * @generated
   * @ordered
   */
  protected static final String PROPERTY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProperty() <em>Property</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperty()
   * @generated
   * @ordered
   */
  protected String property = PROPERTY_EDEFAULT;

  /**
   * The default value of the '{@link #isHas() <em>Has</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHas()
   * @generated
   * @ordered
   */
  protected static final boolean HAS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHas() <em>Has</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHas()
   * @generated
   * @ordered
   */
  protected boolean has = HAS_EDEFAULT;

  /**
   * The default value of the '{@link #isContains() <em>Contains</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isContains()
   * @generated
   * @ordered
   */
  protected static final boolean CONTAINS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isContains() <em>Contains</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isContains()
   * @generated
   * @ordered
   */
  protected boolean contains = CONTAINS_EDEFAULT;

  /**
   * The default value of the '{@link #isUses() <em>Uses</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUses()
   * @generated
   * @ordered
   */
  protected static final boolean USES_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isUses() <em>Uses</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUses()
   * @generated
   * @ordered
   */
  protected boolean uses = USES_EDEFAULT;

  /**
   * The default value of the '{@link #isOnly() <em>Only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOnly()
   * @generated
   * @ordered
   */
  protected static final boolean ONLY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOnly() <em>Only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOnly()
   * @generated
   * @ordered
   */
  protected boolean only = ONLY_EDEFAULT;

  /**
   * The default value of the '{@link #isExactly() <em>Exactly</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExactly()
   * @generated
   * @ordered
   */
  protected static final boolean EXACTLY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isExactly() <em>Exactly</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExactly()
   * @generated
   * @ordered
   */
  protected boolean exactly = EXACTLY_EDEFAULT;

  /**
   * The default value of the '{@link #isAtLeast() <em>At Least</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAtLeast()
   * @generated
   * @ordered
   */
  protected static final boolean AT_LEAST_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAtLeast() <em>At Least</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAtLeast()
   * @generated
   * @ordered
   */
  protected boolean atLeast = AT_LEAST_EDEFAULT;

  /**
   * The default value of the '{@link #isAtMost() <em>At Most</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAtMost()
   * @generated
   * @ordered
   */
  protected static final boolean AT_MOST_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAtMost() <em>At Most</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAtMost()
   * @generated
   * @ordered
   */
  protected boolean atMost = AT_MOST_EDEFAULT;

  /**
   * The default value of the '{@link #getCardinality() <em>Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCardinality()
   * @generated
   * @ordered
   */
  protected static final int CARDINALITY_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getCardinality() <em>Cardinality</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCardinality()
   * @generated
   * @ordered
   */
  protected int cardinality = CARDINALITY_EDEFAULT;

  /**
   * The default value of the '{@link #isOrMore() <em>Or More</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOrMore()
   * @generated
   * @ordered
   */
  protected static final boolean OR_MORE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOrMore() <em>Or More</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOrMore()
   * @generated
   * @ordered
   */
  protected boolean orMore = OR_MORE_EDEFAULT;

  /**
   * The cached value of the '{@link #getPropertyTarget() <em>Property Target</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyTarget()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration propertyTarget;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.PROPERTY_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProperty()
  {
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProperty(String newProperty)
  {
    String oldProperty = property;
    property = newProperty;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__PROPERTY, oldProperty, property));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isHas()
  {
    return has;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHas(boolean newHas)
  {
    boolean oldHas = has;
    has = newHas;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__HAS, oldHas, has));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isContains()
  {
    return contains;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContains(boolean newContains)
  {
    boolean oldContains = contains;
    contains = newContains;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__CONTAINS, oldContains, contains));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isUses()
  {
    return uses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUses(boolean newUses)
  {
    boolean oldUses = uses;
    uses = newUses;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__USES, oldUses, uses));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOnly()
  {
    return only;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOnly(boolean newOnly)
  {
    boolean oldOnly = only;
    only = newOnly;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__ONLY, oldOnly, only));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isExactly()
  {
    return exactly;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExactly(boolean newExactly)
  {
    boolean oldExactly = exactly;
    exactly = newExactly;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__EXACTLY, oldExactly, exactly));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAtLeast()
  {
    return atLeast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAtLeast(boolean newAtLeast)
  {
    boolean oldAtLeast = atLeast;
    atLeast = newAtLeast;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__AT_LEAST, oldAtLeast, atLeast));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAtMost()
  {
    return atMost;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAtMost(boolean newAtMost)
  {
    boolean oldAtMost = atMost;
    atMost = newAtMost;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__AT_MOST, oldAtMost, atMost));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getCardinality()
  {
    return cardinality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCardinality(int newCardinality)
  {
    int oldCardinality = cardinality;
    cardinality = newCardinality;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__CARDINALITY, oldCardinality, cardinality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOrMore()
  {
    return orMore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrMore(boolean newOrMore)
  {
    boolean oldOrMore = orMore;
    orMore = newOrMore;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__OR_MORE, oldOrMore, orMore));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getPropertyTarget()
  {
    return propertyTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPropertyTarget(ConceptDeclaration newPropertyTarget, NotificationChain msgs)
  {
    ConceptDeclaration oldPropertyTarget = propertyTarget;
    propertyTarget = newPropertyTarget;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__PROPERTY_TARGET, oldPropertyTarget, newPropertyTarget);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPropertyTarget(ConceptDeclaration newPropertyTarget)
  {
    if (newPropertyTarget != propertyTarget)
    {
      NotificationChain msgs = null;
      if (propertyTarget != null)
        msgs = ((InternalEObject)propertyTarget).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.PROPERTY_STATEMENT__PROPERTY_TARGET, null, msgs);
      if (newPropertyTarget != null)
        msgs = ((InternalEObject)newPropertyTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.PROPERTY_STATEMENT__PROPERTY_TARGET, null, msgs);
      msgs = basicSetPropertyTarget(newPropertyTarget, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.PROPERTY_STATEMENT__PROPERTY_TARGET, newPropertyTarget, newPropertyTarget));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.PROPERTY_STATEMENT__PROPERTY_TARGET:
        return basicSetPropertyTarget(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.PROPERTY_STATEMENT__PROPERTY:
        return getProperty();
      case KimPackage.PROPERTY_STATEMENT__HAS:
        return isHas();
      case KimPackage.PROPERTY_STATEMENT__CONTAINS:
        return isContains();
      case KimPackage.PROPERTY_STATEMENT__USES:
        return isUses();
      case KimPackage.PROPERTY_STATEMENT__ONLY:
        return isOnly();
      case KimPackage.PROPERTY_STATEMENT__EXACTLY:
        return isExactly();
      case KimPackage.PROPERTY_STATEMENT__AT_LEAST:
        return isAtLeast();
      case KimPackage.PROPERTY_STATEMENT__AT_MOST:
        return isAtMost();
      case KimPackage.PROPERTY_STATEMENT__CARDINALITY:
        return getCardinality();
      case KimPackage.PROPERTY_STATEMENT__OR_MORE:
        return isOrMore();
      case KimPackage.PROPERTY_STATEMENT__PROPERTY_TARGET:
        return getPropertyTarget();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.PROPERTY_STATEMENT__PROPERTY:
        setProperty((String)newValue);
        return;
      case KimPackage.PROPERTY_STATEMENT__HAS:
        setHas((Boolean)newValue);
        return;
      case KimPackage.PROPERTY_STATEMENT__CONTAINS:
        setContains((Boolean)newValue);
        return;
      case KimPackage.PROPERTY_STATEMENT__USES:
        setUses((Boolean)newValue);
        return;
      case KimPackage.PROPERTY_STATEMENT__ONLY:
        setOnly((Boolean)newValue);
        return;
      case KimPackage.PROPERTY_STATEMENT__EXACTLY:
        setExactly((Boolean)newValue);
        return;
      case KimPackage.PROPERTY_STATEMENT__AT_LEAST:
        setAtLeast((Boolean)newValue);
        return;
      case KimPackage.PROPERTY_STATEMENT__AT_MOST:
        setAtMost((Boolean)newValue);
        return;
      case KimPackage.PROPERTY_STATEMENT__CARDINALITY:
        setCardinality((Integer)newValue);
        return;
      case KimPackage.PROPERTY_STATEMENT__OR_MORE:
        setOrMore((Boolean)newValue);
        return;
      case KimPackage.PROPERTY_STATEMENT__PROPERTY_TARGET:
        setPropertyTarget((ConceptDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.PROPERTY_STATEMENT__PROPERTY:
        setProperty(PROPERTY_EDEFAULT);
        return;
      case KimPackage.PROPERTY_STATEMENT__HAS:
        setHas(HAS_EDEFAULT);
        return;
      case KimPackage.PROPERTY_STATEMENT__CONTAINS:
        setContains(CONTAINS_EDEFAULT);
        return;
      case KimPackage.PROPERTY_STATEMENT__USES:
        setUses(USES_EDEFAULT);
        return;
      case KimPackage.PROPERTY_STATEMENT__ONLY:
        setOnly(ONLY_EDEFAULT);
        return;
      case KimPackage.PROPERTY_STATEMENT__EXACTLY:
        setExactly(EXACTLY_EDEFAULT);
        return;
      case KimPackage.PROPERTY_STATEMENT__AT_LEAST:
        setAtLeast(AT_LEAST_EDEFAULT);
        return;
      case KimPackage.PROPERTY_STATEMENT__AT_MOST:
        setAtMost(AT_MOST_EDEFAULT);
        return;
      case KimPackage.PROPERTY_STATEMENT__CARDINALITY:
        setCardinality(CARDINALITY_EDEFAULT);
        return;
      case KimPackage.PROPERTY_STATEMENT__OR_MORE:
        setOrMore(OR_MORE_EDEFAULT);
        return;
      case KimPackage.PROPERTY_STATEMENT__PROPERTY_TARGET:
        setPropertyTarget((ConceptDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.PROPERTY_STATEMENT__PROPERTY:
        return PROPERTY_EDEFAULT == null ? property != null : !PROPERTY_EDEFAULT.equals(property);
      case KimPackage.PROPERTY_STATEMENT__HAS:
        return has != HAS_EDEFAULT;
      case KimPackage.PROPERTY_STATEMENT__CONTAINS:
        return contains != CONTAINS_EDEFAULT;
      case KimPackage.PROPERTY_STATEMENT__USES:
        return uses != USES_EDEFAULT;
      case KimPackage.PROPERTY_STATEMENT__ONLY:
        return only != ONLY_EDEFAULT;
      case KimPackage.PROPERTY_STATEMENT__EXACTLY:
        return exactly != EXACTLY_EDEFAULT;
      case KimPackage.PROPERTY_STATEMENT__AT_LEAST:
        return atLeast != AT_LEAST_EDEFAULT;
      case KimPackage.PROPERTY_STATEMENT__AT_MOST:
        return atMost != AT_MOST_EDEFAULT;
      case KimPackage.PROPERTY_STATEMENT__CARDINALITY:
        return cardinality != CARDINALITY_EDEFAULT;
      case KimPackage.PROPERTY_STATEMENT__OR_MORE:
        return orMore != OR_MORE_EDEFAULT;
      case KimPackage.PROPERTY_STATEMENT__PROPERTY_TARGET:
        return propertyTarget != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (property: ");
    result.append(property);
    result.append(", has: ");
    result.append(has);
    result.append(", contains: ");
    result.append(contains);
    result.append(", uses: ");
    result.append(uses);
    result.append(", only: ");
    result.append(only);
    result.append(", exactly: ");
    result.append(exactly);
    result.append(", atLeast: ");
    result.append(atLeast);
    result.append(", atMost: ");
    result.append(atMost);
    result.append(", cardinality: ");
    result.append(cardinality);
    result.append(", orMore: ");
    result.append(orMore);
    result.append(')');
    return result.toString();
  }

} //PropertyStatementImpl
