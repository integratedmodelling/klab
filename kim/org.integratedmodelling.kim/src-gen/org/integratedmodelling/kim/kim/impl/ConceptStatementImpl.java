/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kim.kim.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kim.kim.Annotation;
import org.integratedmodelling.kim.kim.ConceptStatement;
import org.integratedmodelling.kim.kim.ConceptStatementBody;
import org.integratedmodelling.kim.kim.KimPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concept Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementImpl#getAnnotations <em>Annotations</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementImpl#isAbstract <em>Abstract</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementImpl#isDeniable <em>Deniable</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementImpl#isSubjective <em>Subjective</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementImpl#getAgentSpecifier <em>Agent Specifier</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementImpl#getPropertySpecifiers <em>Property Specifiers</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementImpl#getAttributeSpecifier <em>Attribute Specifier</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementImpl#getConcept <em>Concept</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementImpl#getBody <em>Body</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConceptStatementImpl extends MinimalEObjectImpl.Container implements ConceptStatement
{
  /**
   * The cached value of the '{@link #getAnnotations() <em>Annotations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotations()
   * @generated
   * @ordered
   */
  protected EList<Annotation> annotations;

  /**
   * The default value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected static final boolean ABSTRACT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected boolean abstract_ = ABSTRACT_EDEFAULT;

  /**
   * The default value of the '{@link #isDeniable() <em>Deniable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDeniable()
   * @generated
   * @ordered
   */
  protected static final boolean DENIABLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDeniable() <em>Deniable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDeniable()
   * @generated
   * @ordered
   */
  protected boolean deniable = DENIABLE_EDEFAULT;

  /**
   * The default value of the '{@link #isSubjective() <em>Subjective</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSubjective()
   * @generated
   * @ordered
   */
  protected static final boolean SUBJECTIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSubjective() <em>Subjective</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSubjective()
   * @generated
   * @ordered
   */
  protected boolean subjective = SUBJECTIVE_EDEFAULT;

  /**
   * The default value of the '{@link #getAgentSpecifier() <em>Agent Specifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAgentSpecifier()
   * @generated
   * @ordered
   */
  protected static final String AGENT_SPECIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAgentSpecifier() <em>Agent Specifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAgentSpecifier()
   * @generated
   * @ordered
   */
  protected String agentSpecifier = AGENT_SPECIFIER_EDEFAULT;

  /**
   * The cached value of the '{@link #getPropertySpecifiers() <em>Property Specifiers</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertySpecifiers()
   * @generated
   * @ordered
   */
  protected EList<String> propertySpecifiers;

  /**
   * The default value of the '{@link #getAttributeSpecifier() <em>Attribute Specifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributeSpecifier()
   * @generated
   * @ordered
   */
  protected static final String ATTRIBUTE_SPECIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAttributeSpecifier() <em>Attribute Specifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributeSpecifier()
   * @generated
   * @ordered
   */
  protected String attributeSpecifier = ATTRIBUTE_SPECIFIER_EDEFAULT;

  /**
   * The default value of the '{@link #getConcept() <em>Concept</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected static final String CONCEPT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConcept() <em>Concept</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected String concept = CONCEPT_EDEFAULT;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected ConceptStatementBody body;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConceptStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.CONCEPT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Annotation> getAnnotations()
  {
    if (annotations == null)
    {
      annotations = new EObjectContainmentEList<Annotation>(Annotation.class, this, KimPackage.CONCEPT_STATEMENT__ANNOTATIONS);
    }
    return annotations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAbstract()
  {
    return abstract_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbstract(boolean newAbstract)
  {
    boolean oldAbstract = abstract_;
    abstract_ = newAbstract;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT__ABSTRACT, oldAbstract, abstract_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDeniable()
  {
    return deniable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeniable(boolean newDeniable)
  {
    boolean oldDeniable = deniable;
    deniable = newDeniable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT__DENIABLE, oldDeniable, deniable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSubjective()
  {
    return subjective;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubjective(boolean newSubjective)
  {
    boolean oldSubjective = subjective;
    subjective = newSubjective;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT__SUBJECTIVE, oldSubjective, subjective));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAgentSpecifier()
  {
    return agentSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAgentSpecifier(String newAgentSpecifier)
  {
    String oldAgentSpecifier = agentSpecifier;
    agentSpecifier = newAgentSpecifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT__AGENT_SPECIFIER, oldAgentSpecifier, agentSpecifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getPropertySpecifiers()
  {
    if (propertySpecifiers == null)
    {
      propertySpecifiers = new EDataTypeEList<String>(String.class, this, KimPackage.CONCEPT_STATEMENT__PROPERTY_SPECIFIERS);
    }
    return propertySpecifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAttributeSpecifier()
  {
    return attributeSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttributeSpecifier(String newAttributeSpecifier)
  {
    String oldAttributeSpecifier = attributeSpecifier;
    attributeSpecifier = newAttributeSpecifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT__ATTRIBUTE_SPECIFIER, oldAttributeSpecifier, attributeSpecifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConcept()
  {
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConcept(String newConcept)
  {
    String oldConcept = concept;
    concept = newConcept;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT__CONCEPT, oldConcept, concept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptStatementBody getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(ConceptStatementBody newBody, NotificationChain msgs)
  {
    ConceptStatementBody oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBody(ConceptStatementBody newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_STATEMENT__ANNOTATIONS:
        return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT__BODY:
        return basicSetBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_STATEMENT__ANNOTATIONS:
        return getAnnotations();
      case KimPackage.CONCEPT_STATEMENT__ABSTRACT:
        return isAbstract();
      case KimPackage.CONCEPT_STATEMENT__DENIABLE:
        return isDeniable();
      case KimPackage.CONCEPT_STATEMENT__SUBJECTIVE:
        return isSubjective();
      case KimPackage.CONCEPT_STATEMENT__AGENT_SPECIFIER:
        return getAgentSpecifier();
      case KimPackage.CONCEPT_STATEMENT__PROPERTY_SPECIFIERS:
        return getPropertySpecifiers();
      case KimPackage.CONCEPT_STATEMENT__ATTRIBUTE_SPECIFIER:
        return getAttributeSpecifier();
      case KimPackage.CONCEPT_STATEMENT__CONCEPT:
        return getConcept();
      case KimPackage.CONCEPT_STATEMENT__BODY:
        return getBody();
      case KimPackage.CONCEPT_STATEMENT__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_STATEMENT__ANNOTATIONS:
        getAnnotations().clear();
        getAnnotations().addAll((Collection<? extends Annotation>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT__ABSTRACT:
        setAbstract((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT__DENIABLE:
        setDeniable((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT__SUBJECTIVE:
        setSubjective((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT__AGENT_SPECIFIER:
        setAgentSpecifier((String)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT__PROPERTY_SPECIFIERS:
        getPropertySpecifiers().clear();
        getPropertySpecifiers().addAll((Collection<? extends String>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT__ATTRIBUTE_SPECIFIER:
        setAttributeSpecifier((String)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT__CONCEPT:
        setConcept((String)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT__BODY:
        setBody((ConceptStatementBody)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT__NAME:
        setName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_STATEMENT__ANNOTATIONS:
        getAnnotations().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT__ABSTRACT:
        setAbstract(ABSTRACT_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT__DENIABLE:
        setDeniable(DENIABLE_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT__SUBJECTIVE:
        setSubjective(SUBJECTIVE_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT__AGENT_SPECIFIER:
        setAgentSpecifier(AGENT_SPECIFIER_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT__PROPERTY_SPECIFIERS:
        getPropertySpecifiers().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT__ATTRIBUTE_SPECIFIER:
        setAttributeSpecifier(ATTRIBUTE_SPECIFIER_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT__CONCEPT:
        setConcept(CONCEPT_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT__BODY:
        setBody((ConceptStatementBody)null);
        return;
      case KimPackage.CONCEPT_STATEMENT__NAME:
        setName(NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_STATEMENT__ANNOTATIONS:
        return annotations != null && !annotations.isEmpty();
      case KimPackage.CONCEPT_STATEMENT__ABSTRACT:
        return abstract_ != ABSTRACT_EDEFAULT;
      case KimPackage.CONCEPT_STATEMENT__DENIABLE:
        return deniable != DENIABLE_EDEFAULT;
      case KimPackage.CONCEPT_STATEMENT__SUBJECTIVE:
        return subjective != SUBJECTIVE_EDEFAULT;
      case KimPackage.CONCEPT_STATEMENT__AGENT_SPECIFIER:
        return AGENT_SPECIFIER_EDEFAULT == null ? agentSpecifier != null : !AGENT_SPECIFIER_EDEFAULT.equals(agentSpecifier);
      case KimPackage.CONCEPT_STATEMENT__PROPERTY_SPECIFIERS:
        return propertySpecifiers != null && !propertySpecifiers.isEmpty();
      case KimPackage.CONCEPT_STATEMENT__ATTRIBUTE_SPECIFIER:
        return ATTRIBUTE_SPECIFIER_EDEFAULT == null ? attributeSpecifier != null : !ATTRIBUTE_SPECIFIER_EDEFAULT.equals(attributeSpecifier);
      case KimPackage.CONCEPT_STATEMENT__CONCEPT:
        return CONCEPT_EDEFAULT == null ? concept != null : !CONCEPT_EDEFAULT.equals(concept);
      case KimPackage.CONCEPT_STATEMENT__BODY:
        return body != null;
      case KimPackage.CONCEPT_STATEMENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (abstract: ");
    result.append(abstract_);
    result.append(", deniable: ");
    result.append(deniable);
    result.append(", subjective: ");
    result.append(subjective);
    result.append(", agentSpecifier: ");
    result.append(agentSpecifier);
    result.append(", propertySpecifiers: ");
    result.append(propertySpecifiers);
    result.append(", attributeSpecifier: ");
    result.append(attributeSpecifier);
    result.append(", concept: ");
    result.append(concept);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ConceptStatementImpl
