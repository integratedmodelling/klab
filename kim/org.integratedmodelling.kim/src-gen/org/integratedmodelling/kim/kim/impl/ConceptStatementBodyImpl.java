/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kim.kim.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kim.kim.Annotation;
import org.integratedmodelling.kim.kim.ApplicableTarget;
import org.integratedmodelling.kim.kim.Concept;
import org.integratedmodelling.kim.kim.ConceptDeclaration;
import org.integratedmodelling.kim.kim.ConceptStatementBody;
import org.integratedmodelling.kim.kim.DescriptionConstraints;
import org.integratedmodelling.kim.kim.IdentityRequirement;
import org.integratedmodelling.kim.kim.Implication;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.Map;
import org.integratedmodelling.kim.kim.PropertyStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concept Statement Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getAnnotations <em>Annotations</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#isAbstract <em>Abstract</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#isRoot <em>Root</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getStringIdentifier <em>String Identifier</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getIntIdentifier <em>Int Identifier</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getAuthority <em>Authority</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getDocstring <em>Docstring</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#isAlias <em>Alias</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#isCoreConcept <em>Core Concept</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#isNothing <em>Nothing</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getParents <em>Parents</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getConnectors <em>Connectors</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getDefinedAuthority <em>Defined Authority</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getUpperConcept <em>Upper Concept</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getRequirements <em>Requirements</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getDescribedQuality <em>Described Quality</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getDescriptionConstraints <em>Description Constraints</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getDescribedProportionality <em>Described Proportionality</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getDescribedInverseProportionalityQuality <em>Described Inverse Proportionality Quality</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getDescribedNonzeroQuality <em>Described Nonzero Quality</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getClassifiesQuality <em>Classifies Quality</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getDiscretizesQuality <em>Discretizes Quality</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getActuallyInheritedTraits <em>Actually Inherited Traits</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getRoles <em>Roles</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getTargetObservables <em>Target Observables</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getRestrictedObservables <em>Restricted Observables</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getConferredTraits <em>Conferred Traits</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getConferredTargets <em>Conferred Targets</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getEmergenceTriggers <em>Emergence Triggers</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getCreates <em>Creates</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getTraitTargets <em>Trait Targets</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getDomains <em>Domains</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getRanges <em>Ranges</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getQualitiesAffected <em>Qualities Affected</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#isDisjoint <em>Disjoint</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getChildren <em>Children</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getImplications <em>Implications</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getAuthorities <em>Authorities</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getMetadata <em>Metadata</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ConceptStatementBodyImpl#getProperties <em>Properties</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConceptStatementBodyImpl extends MinimalEObjectImpl.Container implements ConceptStatementBody
{
  /**
   * The cached value of the '{@link #getAnnotations() <em>Annotations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotations()
   * @generated
   * @ordered
   */
  protected EList<Annotation> annotations;

  /**
   * The default value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected static final boolean ABSTRACT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAbstract()
   * @generated
   * @ordered
   */
  protected boolean abstract_ = ABSTRACT_EDEFAULT;

  /**
   * The default value of the '{@link #isRoot() <em>Root</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRoot()
   * @generated
   * @ordered
   */
  protected static final boolean ROOT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRoot() <em>Root</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRoot()
   * @generated
   * @ordered
   */
  protected boolean root = ROOT_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getStringIdentifier() <em>String Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStringIdentifier()
   * @generated
   * @ordered
   */
  protected static final String STRING_IDENTIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStringIdentifier() <em>String Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStringIdentifier()
   * @generated
   * @ordered
   */
  protected String stringIdentifier = STRING_IDENTIFIER_EDEFAULT;

  /**
   * The default value of the '{@link #getIntIdentifier() <em>Int Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIntIdentifier()
   * @generated
   * @ordered
   */
  protected static final int INT_IDENTIFIER_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getIntIdentifier() <em>Int Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIntIdentifier()
   * @generated
   * @ordered
   */
  protected int intIdentifier = INT_IDENTIFIER_EDEFAULT;

  /**
   * The default value of the '{@link #getAuthority() <em>Authority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuthority()
   * @generated
   * @ordered
   */
  protected static final String AUTHORITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAuthority() <em>Authority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuthority()
   * @generated
   * @ordered
   */
  protected String authority = AUTHORITY_EDEFAULT;

  /**
   * The default value of the '{@link #getDocstring() <em>Docstring</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocstring()
   * @generated
   * @ordered
   */
  protected static final String DOCSTRING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDocstring() <em>Docstring</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocstring()
   * @generated
   * @ordered
   */
  protected String docstring = DOCSTRING_EDEFAULT;

  /**
   * The default value of the '{@link #isAlias() <em>Alias</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAlias()
   * @generated
   * @ordered
   */
  protected static final boolean ALIAS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAlias() <em>Alias</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAlias()
   * @generated
   * @ordered
   */
  protected boolean alias = ALIAS_EDEFAULT;

  /**
   * The default value of the '{@link #isCoreConcept() <em>Core Concept</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCoreConcept()
   * @generated
   * @ordered
   */
  protected static final boolean CORE_CONCEPT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isCoreConcept() <em>Core Concept</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCoreConcept()
   * @generated
   * @ordered
   */
  protected boolean coreConcept = CORE_CONCEPT_EDEFAULT;

  /**
   * The default value of the '{@link #isNothing() <em>Nothing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNothing()
   * @generated
   * @ordered
   */
  protected static final boolean NOTHING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNothing() <em>Nothing</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNothing()
   * @generated
   * @ordered
   */
  protected boolean nothing = NOTHING_EDEFAULT;

  /**
   * The cached value of the '{@link #getParents() <em>Parents</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParents()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> parents;

  /**
   * The cached value of the '{@link #getConnectors() <em>Connectors</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnectors()
   * @generated
   * @ordered
   */
  protected EList<String> connectors;

  /**
   * The default value of the '{@link #getDefinedAuthority() <em>Defined Authority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinedAuthority()
   * @generated
   * @ordered
   */
  protected static final String DEFINED_AUTHORITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDefinedAuthority() <em>Defined Authority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinedAuthority()
   * @generated
   * @ordered
   */
  protected String definedAuthority = DEFINED_AUTHORITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getUpperConcept() <em>Upper Concept</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpperConcept()
   * @generated
   * @ordered
   */
  protected Concept upperConcept;

  /**
   * The cached value of the '{@link #getRequirements() <em>Requirements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequirements()
   * @generated
   * @ordered
   */
  protected EList<IdentityRequirement> requirements;

  /**
   * The cached value of the '{@link #getDescribedQuality() <em>Described Quality</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescribedQuality()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration describedQuality;

  /**
   * The cached value of the '{@link #getDescriptionConstraints() <em>Description Constraints</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescriptionConstraints()
   * @generated
   * @ordered
   */
  protected DescriptionConstraints descriptionConstraints;

  /**
   * The cached value of the '{@link #getDescribedProportionality() <em>Described Proportionality</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescribedProportionality()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration describedProportionality;

  /**
   * The cached value of the '{@link #getDescribedInverseProportionalityQuality() <em>Described Inverse Proportionality Quality</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescribedInverseProportionalityQuality()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration describedInverseProportionalityQuality;

  /**
   * The cached value of the '{@link #getDescribedNonzeroQuality() <em>Described Nonzero Quality</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescribedNonzeroQuality()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration describedNonzeroQuality;

  /**
   * The cached value of the '{@link #getClassifiesQuality() <em>Classifies Quality</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassifiesQuality()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration classifiesQuality;

  /**
   * The cached value of the '{@link #getDiscretizesQuality() <em>Discretizes Quality</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiscretizesQuality()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration discretizesQuality;

  /**
   * The cached value of the '{@link #getActuallyInheritedTraits() <em>Actually Inherited Traits</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActuallyInheritedTraits()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> actuallyInheritedTraits;

  /**
   * The cached value of the '{@link #getRoles() <em>Roles</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoles()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> roles;

  /**
   * The cached value of the '{@link #getTargetObservables() <em>Target Observables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargetObservables()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> targetObservables;

  /**
   * The cached value of the '{@link #getRestrictedObservables() <em>Restricted Observables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRestrictedObservables()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> restrictedObservables;

  /**
   * The cached value of the '{@link #getConferredTraits() <em>Conferred Traits</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConferredTraits()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> conferredTraits;

  /**
   * The cached value of the '{@link #getConferredTargets() <em>Conferred Targets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConferredTargets()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> conferredTargets;

  /**
   * The cached value of the '{@link #getEmergenceTriggers() <em>Emergence Triggers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmergenceTriggers()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> emergenceTriggers;

  /**
   * The cached value of the '{@link #getCreates() <em>Creates</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreates()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> creates;

  /**
   * The cached value of the '{@link #getTraitTargets() <em>Trait Targets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTraitTargets()
   * @generated
   * @ordered
   */
  protected EList<ApplicableTarget> traitTargets;

  /**
   * The cached value of the '{@link #getDomains() <em>Domains</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomains()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> domains;

  /**
   * The cached value of the '{@link #getRanges() <em>Ranges</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRanges()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> ranges;

  /**
   * The cached value of the '{@link #getQualitiesAffected() <em>Qualities Affected</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualitiesAffected()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> qualitiesAffected;

  /**
   * The default value of the '{@link #isDisjoint() <em>Disjoint</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDisjoint()
   * @generated
   * @ordered
   */
  protected static final boolean DISJOINT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDisjoint() <em>Disjoint</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDisjoint()
   * @generated
   * @ordered
   */
  protected boolean disjoint = DISJOINT_EDEFAULT;

  /**
   * The cached value of the '{@link #getChildren() <em>Children</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildren()
   * @generated
   * @ordered
   */
  protected EList<ConceptStatementBody> children;

  /**
   * The cached value of the '{@link #getImplications() <em>Implications</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplications()
   * @generated
   * @ordered
   */
  protected EList<Implication> implications;

  /**
   * The cached value of the '{@link #getAuthorities() <em>Authorities</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuthorities()
   * @generated
   * @ordered
   */
  protected EList<String> authorities;

  /**
   * The cached value of the '{@link #getMetadata() <em>Metadata</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetadata()
   * @generated
   * @ordered
   */
  protected Map metadata;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<PropertyStatement> properties;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConceptStatementBodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.CONCEPT_STATEMENT_BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Annotation> getAnnotations()
  {
    if (annotations == null)
    {
      annotations = new EObjectContainmentEList<Annotation>(Annotation.class, this, KimPackage.CONCEPT_STATEMENT_BODY__ANNOTATIONS);
    }
    return annotations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAbstract()
  {
    return abstract_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbstract(boolean newAbstract)
  {
    boolean oldAbstract = abstract_;
    abstract_ = newAbstract;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__ABSTRACT, oldAbstract, abstract_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRoot()
  {
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoot(boolean newRoot)
  {
    boolean oldRoot = root;
    root = newRoot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__ROOT, oldRoot, root));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getStringIdentifier()
  {
    return stringIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStringIdentifier(String newStringIdentifier)
  {
    String oldStringIdentifier = stringIdentifier;
    stringIdentifier = newStringIdentifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__STRING_IDENTIFIER, oldStringIdentifier, stringIdentifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getIntIdentifier()
  {
    return intIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIntIdentifier(int newIntIdentifier)
  {
    int oldIntIdentifier = intIdentifier;
    intIdentifier = newIntIdentifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__INT_IDENTIFIER, oldIntIdentifier, intIdentifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAuthority()
  {
    return authority;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAuthority(String newAuthority)
  {
    String oldAuthority = authority;
    authority = newAuthority;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__AUTHORITY, oldAuthority, authority));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDocstring()
  {
    return docstring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDocstring(String newDocstring)
  {
    String oldDocstring = docstring;
    docstring = newDocstring;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DOCSTRING, oldDocstring, docstring));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAlias()
  {
    return alias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlias(boolean newAlias)
  {
    boolean oldAlias = alias;
    alias = newAlias;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__ALIAS, oldAlias, alias));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isCoreConcept()
  {
    return coreConcept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCoreConcept(boolean newCoreConcept)
  {
    boolean oldCoreConcept = coreConcept;
    coreConcept = newCoreConcept;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__CORE_CONCEPT, oldCoreConcept, coreConcept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNothing()
  {
    return nothing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNothing(boolean newNothing)
  {
    boolean oldNothing = nothing;
    nothing = newNothing;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__NOTHING, oldNothing, nothing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getParents()
  {
    if (parents == null)
    {
      parents = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__PARENTS);
    }
    return parents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getConnectors()
  {
    if (connectors == null)
    {
      connectors = new EDataTypeEList<String>(String.class, this, KimPackage.CONCEPT_STATEMENT_BODY__CONNECTORS);
    }
    return connectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDefinedAuthority()
  {
    return definedAuthority;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefinedAuthority(String newDefinedAuthority)
  {
    String oldDefinedAuthority = definedAuthority;
    definedAuthority = newDefinedAuthority;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DEFINED_AUTHORITY, oldDefinedAuthority, definedAuthority));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept getUpperConcept()
  {
    return upperConcept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpperConcept(Concept newUpperConcept, NotificationChain msgs)
  {
    Concept oldUpperConcept = upperConcept;
    upperConcept = newUpperConcept;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__UPPER_CONCEPT, oldUpperConcept, newUpperConcept);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUpperConcept(Concept newUpperConcept)
  {
    if (newUpperConcept != upperConcept)
    {
      NotificationChain msgs = null;
      if (upperConcept != null)
        msgs = ((InternalEObject)upperConcept).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__UPPER_CONCEPT, null, msgs);
      if (newUpperConcept != null)
        msgs = ((InternalEObject)newUpperConcept).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__UPPER_CONCEPT, null, msgs);
      msgs = basicSetUpperConcept(newUpperConcept, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__UPPER_CONCEPT, newUpperConcept, newUpperConcept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<IdentityRequirement> getRequirements()
  {
    if (requirements == null)
    {
      requirements = new EObjectContainmentEList<IdentityRequirement>(IdentityRequirement.class, this, KimPackage.CONCEPT_STATEMENT_BODY__REQUIREMENTS);
    }
    return requirements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getDescribedQuality()
  {
    return describedQuality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDescribedQuality(ConceptDeclaration newDescribedQuality, NotificationChain msgs)
  {
    ConceptDeclaration oldDescribedQuality = describedQuality;
    describedQuality = newDescribedQuality;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_QUALITY, oldDescribedQuality, newDescribedQuality);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescribedQuality(ConceptDeclaration newDescribedQuality)
  {
    if (newDescribedQuality != describedQuality)
    {
      NotificationChain msgs = null;
      if (describedQuality != null)
        msgs = ((InternalEObject)describedQuality).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_QUALITY, null, msgs);
      if (newDescribedQuality != null)
        msgs = ((InternalEObject)newDescribedQuality).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_QUALITY, null, msgs);
      msgs = basicSetDescribedQuality(newDescribedQuality, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_QUALITY, newDescribedQuality, newDescribedQuality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DescriptionConstraints getDescriptionConstraints()
  {
    return descriptionConstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDescriptionConstraints(DescriptionConstraints newDescriptionConstraints, NotificationChain msgs)
  {
    DescriptionConstraints oldDescriptionConstraints = descriptionConstraints;
    descriptionConstraints = newDescriptionConstraints;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DESCRIPTION_CONSTRAINTS, oldDescriptionConstraints, newDescriptionConstraints);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescriptionConstraints(DescriptionConstraints newDescriptionConstraints)
  {
    if (newDescriptionConstraints != descriptionConstraints)
    {
      NotificationChain msgs = null;
      if (descriptionConstraints != null)
        msgs = ((InternalEObject)descriptionConstraints).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DESCRIPTION_CONSTRAINTS, null, msgs);
      if (newDescriptionConstraints != null)
        msgs = ((InternalEObject)newDescriptionConstraints).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DESCRIPTION_CONSTRAINTS, null, msgs);
      msgs = basicSetDescriptionConstraints(newDescriptionConstraints, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DESCRIPTION_CONSTRAINTS, newDescriptionConstraints, newDescriptionConstraints));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getDescribedProportionality()
  {
    return describedProportionality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDescribedProportionality(ConceptDeclaration newDescribedProportionality, NotificationChain msgs)
  {
    ConceptDeclaration oldDescribedProportionality = describedProportionality;
    describedProportionality = newDescribedProportionality;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_PROPORTIONALITY, oldDescribedProportionality, newDescribedProportionality);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescribedProportionality(ConceptDeclaration newDescribedProportionality)
  {
    if (newDescribedProportionality != describedProportionality)
    {
      NotificationChain msgs = null;
      if (describedProportionality != null)
        msgs = ((InternalEObject)describedProportionality).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_PROPORTIONALITY, null, msgs);
      if (newDescribedProportionality != null)
        msgs = ((InternalEObject)newDescribedProportionality).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_PROPORTIONALITY, null, msgs);
      msgs = basicSetDescribedProportionality(newDescribedProportionality, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_PROPORTIONALITY, newDescribedProportionality, newDescribedProportionality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getDescribedInverseProportionalityQuality()
  {
    return describedInverseProportionalityQuality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDescribedInverseProportionalityQuality(ConceptDeclaration newDescribedInverseProportionalityQuality, NotificationChain msgs)
  {
    ConceptDeclaration oldDescribedInverseProportionalityQuality = describedInverseProportionalityQuality;
    describedInverseProportionalityQuality = newDescribedInverseProportionalityQuality;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_INVERSE_PROPORTIONALITY_QUALITY, oldDescribedInverseProportionalityQuality, newDescribedInverseProportionalityQuality);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescribedInverseProportionalityQuality(ConceptDeclaration newDescribedInverseProportionalityQuality)
  {
    if (newDescribedInverseProportionalityQuality != describedInverseProportionalityQuality)
    {
      NotificationChain msgs = null;
      if (describedInverseProportionalityQuality != null)
        msgs = ((InternalEObject)describedInverseProportionalityQuality).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_INVERSE_PROPORTIONALITY_QUALITY, null, msgs);
      if (newDescribedInverseProportionalityQuality != null)
        msgs = ((InternalEObject)newDescribedInverseProportionalityQuality).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_INVERSE_PROPORTIONALITY_QUALITY, null, msgs);
      msgs = basicSetDescribedInverseProportionalityQuality(newDescribedInverseProportionalityQuality, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_INVERSE_PROPORTIONALITY_QUALITY, newDescribedInverseProportionalityQuality, newDescribedInverseProportionalityQuality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getDescribedNonzeroQuality()
  {
    return describedNonzeroQuality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDescribedNonzeroQuality(ConceptDeclaration newDescribedNonzeroQuality, NotificationChain msgs)
  {
    ConceptDeclaration oldDescribedNonzeroQuality = describedNonzeroQuality;
    describedNonzeroQuality = newDescribedNonzeroQuality;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_NONZERO_QUALITY, oldDescribedNonzeroQuality, newDescribedNonzeroQuality);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescribedNonzeroQuality(ConceptDeclaration newDescribedNonzeroQuality)
  {
    if (newDescribedNonzeroQuality != describedNonzeroQuality)
    {
      NotificationChain msgs = null;
      if (describedNonzeroQuality != null)
        msgs = ((InternalEObject)describedNonzeroQuality).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_NONZERO_QUALITY, null, msgs);
      if (newDescribedNonzeroQuality != null)
        msgs = ((InternalEObject)newDescribedNonzeroQuality).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_NONZERO_QUALITY, null, msgs);
      msgs = basicSetDescribedNonzeroQuality(newDescribedNonzeroQuality, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_NONZERO_QUALITY, newDescribedNonzeroQuality, newDescribedNonzeroQuality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getClassifiesQuality()
  {
    return classifiesQuality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClassifiesQuality(ConceptDeclaration newClassifiesQuality, NotificationChain msgs)
  {
    ConceptDeclaration oldClassifiesQuality = classifiesQuality;
    classifiesQuality = newClassifiesQuality;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__CLASSIFIES_QUALITY, oldClassifiesQuality, newClassifiesQuality);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClassifiesQuality(ConceptDeclaration newClassifiesQuality)
  {
    if (newClassifiesQuality != classifiesQuality)
    {
      NotificationChain msgs = null;
      if (classifiesQuality != null)
        msgs = ((InternalEObject)classifiesQuality).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__CLASSIFIES_QUALITY, null, msgs);
      if (newClassifiesQuality != null)
        msgs = ((InternalEObject)newClassifiesQuality).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__CLASSIFIES_QUALITY, null, msgs);
      msgs = basicSetClassifiesQuality(newClassifiesQuality, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__CLASSIFIES_QUALITY, newClassifiesQuality, newClassifiesQuality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getDiscretizesQuality()
  {
    return discretizesQuality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDiscretizesQuality(ConceptDeclaration newDiscretizesQuality, NotificationChain msgs)
  {
    ConceptDeclaration oldDiscretizesQuality = discretizesQuality;
    discretizesQuality = newDiscretizesQuality;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DISCRETIZES_QUALITY, oldDiscretizesQuality, newDiscretizesQuality);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDiscretizesQuality(ConceptDeclaration newDiscretizesQuality)
  {
    if (newDiscretizesQuality != discretizesQuality)
    {
      NotificationChain msgs = null;
      if (discretizesQuality != null)
        msgs = ((InternalEObject)discretizesQuality).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DISCRETIZES_QUALITY, null, msgs);
      if (newDiscretizesQuality != null)
        msgs = ((InternalEObject)newDiscretizesQuality).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__DISCRETIZES_QUALITY, null, msgs);
      msgs = basicSetDiscretizesQuality(newDiscretizesQuality, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DISCRETIZES_QUALITY, newDiscretizesQuality, newDiscretizesQuality));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getActuallyInheritedTraits()
  {
    if (actuallyInheritedTraits == null)
    {
      actuallyInheritedTraits = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__ACTUALLY_INHERITED_TRAITS);
    }
    return actuallyInheritedTraits;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getRoles()
  {
    if (roles == null)
    {
      roles = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__ROLES);
    }
    return roles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getTargetObservables()
  {
    if (targetObservables == null)
    {
      targetObservables = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__TARGET_OBSERVABLES);
    }
    return targetObservables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getRestrictedObservables()
  {
    if (restrictedObservables == null)
    {
      restrictedObservables = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__RESTRICTED_OBSERVABLES);
    }
    return restrictedObservables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getConferredTraits()
  {
    if (conferredTraits == null)
    {
      conferredTraits = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TRAITS);
    }
    return conferredTraits;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getConferredTargets()
  {
    if (conferredTargets == null)
    {
      conferredTargets = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TARGETS);
    }
    return conferredTargets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getEmergenceTriggers()
  {
    if (emergenceTriggers == null)
    {
      emergenceTriggers = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__EMERGENCE_TRIGGERS);
    }
    return emergenceTriggers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getCreates()
  {
    if (creates == null)
    {
      creates = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__CREATES);
    }
    return creates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ApplicableTarget> getTraitTargets()
  {
    if (traitTargets == null)
    {
      traitTargets = new EObjectContainmentEList<ApplicableTarget>(ApplicableTarget.class, this, KimPackage.CONCEPT_STATEMENT_BODY__TRAIT_TARGETS);
    }
    return traitTargets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getDomains()
  {
    if (domains == null)
    {
      domains = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__DOMAINS);
    }
    return domains;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getRanges()
  {
    if (ranges == null)
    {
      ranges = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__RANGES);
    }
    return ranges;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getQualitiesAffected()
  {
    if (qualitiesAffected == null)
    {
      qualitiesAffected = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KimPackage.CONCEPT_STATEMENT_BODY__QUALITIES_AFFECTED);
    }
    return qualitiesAffected;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDisjoint()
  {
    return disjoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDisjoint(boolean newDisjoint)
  {
    boolean oldDisjoint = disjoint;
    disjoint = newDisjoint;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__DISJOINT, oldDisjoint, disjoint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptStatementBody> getChildren()
  {
    if (children == null)
    {
      children = new EObjectContainmentEList<ConceptStatementBody>(ConceptStatementBody.class, this, KimPackage.CONCEPT_STATEMENT_BODY__CHILDREN);
    }
    return children;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Implication> getImplications()
  {
    if (implications == null)
    {
      implications = new EObjectContainmentEList<Implication>(Implication.class, this, KimPackage.CONCEPT_STATEMENT_BODY__IMPLICATIONS);
    }
    return implications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getAuthorities()
  {
    if (authorities == null)
    {
      authorities = new EDataTypeEList<String>(String.class, this, KimPackage.CONCEPT_STATEMENT_BODY__AUTHORITIES);
    }
    return authorities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map getMetadata()
  {
    return metadata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMetadata(Map newMetadata, NotificationChain msgs)
  {
    Map oldMetadata = metadata;
    metadata = newMetadata;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__METADATA, oldMetadata, newMetadata);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMetadata(Map newMetadata)
  {
    if (newMetadata != metadata)
    {
      NotificationChain msgs = null;
      if (metadata != null)
        msgs = ((InternalEObject)metadata).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__METADATA, null, msgs);
      if (newMetadata != null)
        msgs = ((InternalEObject)newMetadata).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CONCEPT_STATEMENT_BODY__METADATA, null, msgs);
      msgs = basicSetMetadata(newMetadata, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CONCEPT_STATEMENT_BODY__METADATA, newMetadata, newMetadata));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PropertyStatement> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<PropertyStatement>(PropertyStatement.class, this, KimPackage.CONCEPT_STATEMENT_BODY__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_STATEMENT_BODY__ANNOTATIONS:
        return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__PARENTS:
        return ((InternalEList<?>)getParents()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__UPPER_CONCEPT:
        return basicSetUpperConcept(null, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__REQUIREMENTS:
        return ((InternalEList<?>)getRequirements()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_QUALITY:
        return basicSetDescribedQuality(null, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIPTION_CONSTRAINTS:
        return basicSetDescriptionConstraints(null, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_PROPORTIONALITY:
        return basicSetDescribedProportionality(null, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_INVERSE_PROPORTIONALITY_QUALITY:
        return basicSetDescribedInverseProportionalityQuality(null, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_NONZERO_QUALITY:
        return basicSetDescribedNonzeroQuality(null, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__CLASSIFIES_QUALITY:
        return basicSetClassifiesQuality(null, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__DISCRETIZES_QUALITY:
        return basicSetDiscretizesQuality(null, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__ACTUALLY_INHERITED_TRAITS:
        return ((InternalEList<?>)getActuallyInheritedTraits()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__ROLES:
        return ((InternalEList<?>)getRoles()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__TARGET_OBSERVABLES:
        return ((InternalEList<?>)getTargetObservables()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__RESTRICTED_OBSERVABLES:
        return ((InternalEList<?>)getRestrictedObservables()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TRAITS:
        return ((InternalEList<?>)getConferredTraits()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TARGETS:
        return ((InternalEList<?>)getConferredTargets()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__EMERGENCE_TRIGGERS:
        return ((InternalEList<?>)getEmergenceTriggers()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__CREATES:
        return ((InternalEList<?>)getCreates()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__TRAIT_TARGETS:
        return ((InternalEList<?>)getTraitTargets()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__DOMAINS:
        return ((InternalEList<?>)getDomains()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__RANGES:
        return ((InternalEList<?>)getRanges()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__QUALITIES_AFFECTED:
        return ((InternalEList<?>)getQualitiesAffected()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__CHILDREN:
        return ((InternalEList<?>)getChildren()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__IMPLICATIONS:
        return ((InternalEList<?>)getImplications()).basicRemove(otherEnd, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__METADATA:
        return basicSetMetadata(null, msgs);
      case KimPackage.CONCEPT_STATEMENT_BODY__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_STATEMENT_BODY__ANNOTATIONS:
        return getAnnotations();
      case KimPackage.CONCEPT_STATEMENT_BODY__ABSTRACT:
        return isAbstract();
      case KimPackage.CONCEPT_STATEMENT_BODY__ROOT:
        return isRoot();
      case KimPackage.CONCEPT_STATEMENT_BODY__NAME:
        return getName();
      case KimPackage.CONCEPT_STATEMENT_BODY__STRING_IDENTIFIER:
        return getStringIdentifier();
      case KimPackage.CONCEPT_STATEMENT_BODY__INT_IDENTIFIER:
        return getIntIdentifier();
      case KimPackage.CONCEPT_STATEMENT_BODY__AUTHORITY:
        return getAuthority();
      case KimPackage.CONCEPT_STATEMENT_BODY__DOCSTRING:
        return getDocstring();
      case KimPackage.CONCEPT_STATEMENT_BODY__ALIAS:
        return isAlias();
      case KimPackage.CONCEPT_STATEMENT_BODY__CORE_CONCEPT:
        return isCoreConcept();
      case KimPackage.CONCEPT_STATEMENT_BODY__NOTHING:
        return isNothing();
      case KimPackage.CONCEPT_STATEMENT_BODY__PARENTS:
        return getParents();
      case KimPackage.CONCEPT_STATEMENT_BODY__CONNECTORS:
        return getConnectors();
      case KimPackage.CONCEPT_STATEMENT_BODY__DEFINED_AUTHORITY:
        return getDefinedAuthority();
      case KimPackage.CONCEPT_STATEMENT_BODY__UPPER_CONCEPT:
        return getUpperConcept();
      case KimPackage.CONCEPT_STATEMENT_BODY__REQUIREMENTS:
        return getRequirements();
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_QUALITY:
        return getDescribedQuality();
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIPTION_CONSTRAINTS:
        return getDescriptionConstraints();
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_PROPORTIONALITY:
        return getDescribedProportionality();
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_INVERSE_PROPORTIONALITY_QUALITY:
        return getDescribedInverseProportionalityQuality();
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_NONZERO_QUALITY:
        return getDescribedNonzeroQuality();
      case KimPackage.CONCEPT_STATEMENT_BODY__CLASSIFIES_QUALITY:
        return getClassifiesQuality();
      case KimPackage.CONCEPT_STATEMENT_BODY__DISCRETIZES_QUALITY:
        return getDiscretizesQuality();
      case KimPackage.CONCEPT_STATEMENT_BODY__ACTUALLY_INHERITED_TRAITS:
        return getActuallyInheritedTraits();
      case KimPackage.CONCEPT_STATEMENT_BODY__ROLES:
        return getRoles();
      case KimPackage.CONCEPT_STATEMENT_BODY__TARGET_OBSERVABLES:
        return getTargetObservables();
      case KimPackage.CONCEPT_STATEMENT_BODY__RESTRICTED_OBSERVABLES:
        return getRestrictedObservables();
      case KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TRAITS:
        return getConferredTraits();
      case KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TARGETS:
        return getConferredTargets();
      case KimPackage.CONCEPT_STATEMENT_BODY__EMERGENCE_TRIGGERS:
        return getEmergenceTriggers();
      case KimPackage.CONCEPT_STATEMENT_BODY__CREATES:
        return getCreates();
      case KimPackage.CONCEPT_STATEMENT_BODY__TRAIT_TARGETS:
        return getTraitTargets();
      case KimPackage.CONCEPT_STATEMENT_BODY__DOMAINS:
        return getDomains();
      case KimPackage.CONCEPT_STATEMENT_BODY__RANGES:
        return getRanges();
      case KimPackage.CONCEPT_STATEMENT_BODY__QUALITIES_AFFECTED:
        return getQualitiesAffected();
      case KimPackage.CONCEPT_STATEMENT_BODY__DISJOINT:
        return isDisjoint();
      case KimPackage.CONCEPT_STATEMENT_BODY__CHILDREN:
        return getChildren();
      case KimPackage.CONCEPT_STATEMENT_BODY__IMPLICATIONS:
        return getImplications();
      case KimPackage.CONCEPT_STATEMENT_BODY__AUTHORITIES:
        return getAuthorities();
      case KimPackage.CONCEPT_STATEMENT_BODY__METADATA:
        return getMetadata();
      case KimPackage.CONCEPT_STATEMENT_BODY__PROPERTIES:
        return getProperties();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_STATEMENT_BODY__ANNOTATIONS:
        getAnnotations().clear();
        getAnnotations().addAll((Collection<? extends Annotation>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__ABSTRACT:
        setAbstract((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__ROOT:
        setRoot((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__NAME:
        setName((String)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__STRING_IDENTIFIER:
        setStringIdentifier((String)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__INT_IDENTIFIER:
        setIntIdentifier((Integer)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__AUTHORITY:
        setAuthority((String)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DOCSTRING:
        setDocstring((String)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__ALIAS:
        setAlias((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CORE_CONCEPT:
        setCoreConcept((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__NOTHING:
        setNothing((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__PARENTS:
        getParents().clear();
        getParents().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CONNECTORS:
        getConnectors().clear();
        getConnectors().addAll((Collection<? extends String>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DEFINED_AUTHORITY:
        setDefinedAuthority((String)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__UPPER_CONCEPT:
        setUpperConcept((Concept)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__REQUIREMENTS:
        getRequirements().clear();
        getRequirements().addAll((Collection<? extends IdentityRequirement>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_QUALITY:
        setDescribedQuality((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIPTION_CONSTRAINTS:
        setDescriptionConstraints((DescriptionConstraints)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_PROPORTIONALITY:
        setDescribedProportionality((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_INVERSE_PROPORTIONALITY_QUALITY:
        setDescribedInverseProportionalityQuality((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_NONZERO_QUALITY:
        setDescribedNonzeroQuality((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CLASSIFIES_QUALITY:
        setClassifiesQuality((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DISCRETIZES_QUALITY:
        setDiscretizesQuality((ConceptDeclaration)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__ACTUALLY_INHERITED_TRAITS:
        getActuallyInheritedTraits().clear();
        getActuallyInheritedTraits().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__ROLES:
        getRoles().clear();
        getRoles().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__TARGET_OBSERVABLES:
        getTargetObservables().clear();
        getTargetObservables().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__RESTRICTED_OBSERVABLES:
        getRestrictedObservables().clear();
        getRestrictedObservables().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TRAITS:
        getConferredTraits().clear();
        getConferredTraits().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TARGETS:
        getConferredTargets().clear();
        getConferredTargets().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__EMERGENCE_TRIGGERS:
        getEmergenceTriggers().clear();
        getEmergenceTriggers().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CREATES:
        getCreates().clear();
        getCreates().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__TRAIT_TARGETS:
        getTraitTargets().clear();
        getTraitTargets().addAll((Collection<? extends ApplicableTarget>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DOMAINS:
        getDomains().clear();
        getDomains().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__RANGES:
        getRanges().clear();
        getRanges().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__QUALITIES_AFFECTED:
        getQualitiesAffected().clear();
        getQualitiesAffected().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DISJOINT:
        setDisjoint((Boolean)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CHILDREN:
        getChildren().clear();
        getChildren().addAll((Collection<? extends ConceptStatementBody>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__IMPLICATIONS:
        getImplications().clear();
        getImplications().addAll((Collection<? extends Implication>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__AUTHORITIES:
        getAuthorities().clear();
        getAuthorities().addAll((Collection<? extends String>)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__METADATA:
        setMetadata((Map)newValue);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends PropertyStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_STATEMENT_BODY__ANNOTATIONS:
        getAnnotations().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__ABSTRACT:
        setAbstract(ABSTRACT_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__ROOT:
        setRoot(ROOT_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__STRING_IDENTIFIER:
        setStringIdentifier(STRING_IDENTIFIER_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__INT_IDENTIFIER:
        setIntIdentifier(INT_IDENTIFIER_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__AUTHORITY:
        setAuthority(AUTHORITY_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DOCSTRING:
        setDocstring(DOCSTRING_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__ALIAS:
        setAlias(ALIAS_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CORE_CONCEPT:
        setCoreConcept(CORE_CONCEPT_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__NOTHING:
        setNothing(NOTHING_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__PARENTS:
        getParents().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CONNECTORS:
        getConnectors().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DEFINED_AUTHORITY:
        setDefinedAuthority(DEFINED_AUTHORITY_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__UPPER_CONCEPT:
        setUpperConcept((Concept)null);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__REQUIREMENTS:
        getRequirements().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_QUALITY:
        setDescribedQuality((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIPTION_CONSTRAINTS:
        setDescriptionConstraints((DescriptionConstraints)null);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_PROPORTIONALITY:
        setDescribedProportionality((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_INVERSE_PROPORTIONALITY_QUALITY:
        setDescribedInverseProportionalityQuality((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_NONZERO_QUALITY:
        setDescribedNonzeroQuality((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CLASSIFIES_QUALITY:
        setClassifiesQuality((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DISCRETIZES_QUALITY:
        setDiscretizesQuality((ConceptDeclaration)null);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__ACTUALLY_INHERITED_TRAITS:
        getActuallyInheritedTraits().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__ROLES:
        getRoles().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__TARGET_OBSERVABLES:
        getTargetObservables().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__RESTRICTED_OBSERVABLES:
        getRestrictedObservables().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TRAITS:
        getConferredTraits().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TARGETS:
        getConferredTargets().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__EMERGENCE_TRIGGERS:
        getEmergenceTriggers().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CREATES:
        getCreates().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__TRAIT_TARGETS:
        getTraitTargets().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DOMAINS:
        getDomains().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__RANGES:
        getRanges().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__QUALITIES_AFFECTED:
        getQualitiesAffected().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__DISJOINT:
        setDisjoint(DISJOINT_EDEFAULT);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__CHILDREN:
        getChildren().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__IMPLICATIONS:
        getImplications().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__AUTHORITIES:
        getAuthorities().clear();
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__METADATA:
        setMetadata((Map)null);
        return;
      case KimPackage.CONCEPT_STATEMENT_BODY__PROPERTIES:
        getProperties().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.CONCEPT_STATEMENT_BODY__ANNOTATIONS:
        return annotations != null && !annotations.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__ABSTRACT:
        return abstract_ != ABSTRACT_EDEFAULT;
      case KimPackage.CONCEPT_STATEMENT_BODY__ROOT:
        return root != ROOT_EDEFAULT;
      case KimPackage.CONCEPT_STATEMENT_BODY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case KimPackage.CONCEPT_STATEMENT_BODY__STRING_IDENTIFIER:
        return STRING_IDENTIFIER_EDEFAULT == null ? stringIdentifier != null : !STRING_IDENTIFIER_EDEFAULT.equals(stringIdentifier);
      case KimPackage.CONCEPT_STATEMENT_BODY__INT_IDENTIFIER:
        return intIdentifier != INT_IDENTIFIER_EDEFAULT;
      case KimPackage.CONCEPT_STATEMENT_BODY__AUTHORITY:
        return AUTHORITY_EDEFAULT == null ? authority != null : !AUTHORITY_EDEFAULT.equals(authority);
      case KimPackage.CONCEPT_STATEMENT_BODY__DOCSTRING:
        return DOCSTRING_EDEFAULT == null ? docstring != null : !DOCSTRING_EDEFAULT.equals(docstring);
      case KimPackage.CONCEPT_STATEMENT_BODY__ALIAS:
        return alias != ALIAS_EDEFAULT;
      case KimPackage.CONCEPT_STATEMENT_BODY__CORE_CONCEPT:
        return coreConcept != CORE_CONCEPT_EDEFAULT;
      case KimPackage.CONCEPT_STATEMENT_BODY__NOTHING:
        return nothing != NOTHING_EDEFAULT;
      case KimPackage.CONCEPT_STATEMENT_BODY__PARENTS:
        return parents != null && !parents.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__CONNECTORS:
        return connectors != null && !connectors.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__DEFINED_AUTHORITY:
        return DEFINED_AUTHORITY_EDEFAULT == null ? definedAuthority != null : !DEFINED_AUTHORITY_EDEFAULT.equals(definedAuthority);
      case KimPackage.CONCEPT_STATEMENT_BODY__UPPER_CONCEPT:
        return upperConcept != null;
      case KimPackage.CONCEPT_STATEMENT_BODY__REQUIREMENTS:
        return requirements != null && !requirements.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_QUALITY:
        return describedQuality != null;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIPTION_CONSTRAINTS:
        return descriptionConstraints != null;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_PROPORTIONALITY:
        return describedProportionality != null;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_INVERSE_PROPORTIONALITY_QUALITY:
        return describedInverseProportionalityQuality != null;
      case KimPackage.CONCEPT_STATEMENT_BODY__DESCRIBED_NONZERO_QUALITY:
        return describedNonzeroQuality != null;
      case KimPackage.CONCEPT_STATEMENT_BODY__CLASSIFIES_QUALITY:
        return classifiesQuality != null;
      case KimPackage.CONCEPT_STATEMENT_BODY__DISCRETIZES_QUALITY:
        return discretizesQuality != null;
      case KimPackage.CONCEPT_STATEMENT_BODY__ACTUALLY_INHERITED_TRAITS:
        return actuallyInheritedTraits != null && !actuallyInheritedTraits.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__ROLES:
        return roles != null && !roles.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__TARGET_OBSERVABLES:
        return targetObservables != null && !targetObservables.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__RESTRICTED_OBSERVABLES:
        return restrictedObservables != null && !restrictedObservables.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TRAITS:
        return conferredTraits != null && !conferredTraits.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__CONFERRED_TARGETS:
        return conferredTargets != null && !conferredTargets.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__EMERGENCE_TRIGGERS:
        return emergenceTriggers != null && !emergenceTriggers.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__CREATES:
        return creates != null && !creates.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__TRAIT_TARGETS:
        return traitTargets != null && !traitTargets.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__DOMAINS:
        return domains != null && !domains.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__RANGES:
        return ranges != null && !ranges.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__QUALITIES_AFFECTED:
        return qualitiesAffected != null && !qualitiesAffected.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__DISJOINT:
        return disjoint != DISJOINT_EDEFAULT;
      case KimPackage.CONCEPT_STATEMENT_BODY__CHILDREN:
        return children != null && !children.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__IMPLICATIONS:
        return implications != null && !implications.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__AUTHORITIES:
        return authorities != null && !authorities.isEmpty();
      case KimPackage.CONCEPT_STATEMENT_BODY__METADATA:
        return metadata != null;
      case KimPackage.CONCEPT_STATEMENT_BODY__PROPERTIES:
        return properties != null && !properties.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (abstract: ");
    result.append(abstract_);
    result.append(", root: ");
    result.append(root);
    result.append(", name: ");
    result.append(name);
    result.append(", stringIdentifier: ");
    result.append(stringIdentifier);
    result.append(", intIdentifier: ");
    result.append(intIdentifier);
    result.append(", authority: ");
    result.append(authority);
    result.append(", docstring: ");
    result.append(docstring);
    result.append(", alias: ");
    result.append(alias);
    result.append(", coreConcept: ");
    result.append(coreConcept);
    result.append(", nothing: ");
    result.append(nothing);
    result.append(", connectors: ");
    result.append(connectors);
    result.append(", definedAuthority: ");
    result.append(definedAuthority);
    result.append(", disjoint: ");
    result.append(disjoint);
    result.append(", authorities: ");
    result.append(authorities);
    result.append(')');
    return result.toString();
  }

} //ConceptStatementBodyImpl
