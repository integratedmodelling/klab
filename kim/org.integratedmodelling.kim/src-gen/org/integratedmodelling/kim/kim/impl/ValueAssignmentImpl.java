/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.26.0
 */
package org.integratedmodelling.kim.kim.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kim.kim.ComputableValue;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.ValueAssignment;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Value Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ValueAssignmentImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ValueAssignmentImpl#getAssignedValue <em>Assigned Value</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ValueAssignmentImpl#getExecValue <em>Exec Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ValueAssignmentImpl extends MinimalEObjectImpl.Container implements ValueAssignment
{
  /**
   * The default value of the '{@link #getTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected static final String TARGET_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected String target = TARGET_EDEFAULT;

  /**
   * The cached value of the '{@link #getAssignedValue() <em>Assigned Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignedValue()
   * @generated
   * @ordered
   */
  protected ComputableValue assignedValue;

  /**
   * The cached value of the '{@link #getExecValue() <em>Exec Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExecValue()
   * @generated
   * @ordered
   */
  protected ComputableValue execValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ValueAssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.VALUE_ASSIGNMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(String newTarget)
  {
    String oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.VALUE_ASSIGNMENT__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComputableValue getAssignedValue()
  {
    return assignedValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssignedValue(ComputableValue newAssignedValue, NotificationChain msgs)
  {
    ComputableValue oldAssignedValue = assignedValue;
    assignedValue = newAssignedValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.VALUE_ASSIGNMENT__ASSIGNED_VALUE, oldAssignedValue, newAssignedValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssignedValue(ComputableValue newAssignedValue)
  {
    if (newAssignedValue != assignedValue)
    {
      NotificationChain msgs = null;
      if (assignedValue != null)
        msgs = ((InternalEObject)assignedValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.VALUE_ASSIGNMENT__ASSIGNED_VALUE, null, msgs);
      if (newAssignedValue != null)
        msgs = ((InternalEObject)newAssignedValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.VALUE_ASSIGNMENT__ASSIGNED_VALUE, null, msgs);
      msgs = basicSetAssignedValue(newAssignedValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.VALUE_ASSIGNMENT__ASSIGNED_VALUE, newAssignedValue, newAssignedValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComputableValue getExecValue()
  {
    return execValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExecValue(ComputableValue newExecValue, NotificationChain msgs)
  {
    ComputableValue oldExecValue = execValue;
    execValue = newExecValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.VALUE_ASSIGNMENT__EXEC_VALUE, oldExecValue, newExecValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExecValue(ComputableValue newExecValue)
  {
    if (newExecValue != execValue)
    {
      NotificationChain msgs = null;
      if (execValue != null)
        msgs = ((InternalEObject)execValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.VALUE_ASSIGNMENT__EXEC_VALUE, null, msgs);
      if (newExecValue != null)
        msgs = ((InternalEObject)newExecValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.VALUE_ASSIGNMENT__EXEC_VALUE, null, msgs);
      msgs = basicSetExecValue(newExecValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.VALUE_ASSIGNMENT__EXEC_VALUE, newExecValue, newExecValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.VALUE_ASSIGNMENT__ASSIGNED_VALUE:
        return basicSetAssignedValue(null, msgs);
      case KimPackage.VALUE_ASSIGNMENT__EXEC_VALUE:
        return basicSetExecValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.VALUE_ASSIGNMENT__TARGET:
        return getTarget();
      case KimPackage.VALUE_ASSIGNMENT__ASSIGNED_VALUE:
        return getAssignedValue();
      case KimPackage.VALUE_ASSIGNMENT__EXEC_VALUE:
        return getExecValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.VALUE_ASSIGNMENT__TARGET:
        setTarget((String)newValue);
        return;
      case KimPackage.VALUE_ASSIGNMENT__ASSIGNED_VALUE:
        setAssignedValue((ComputableValue)newValue);
        return;
      case KimPackage.VALUE_ASSIGNMENT__EXEC_VALUE:
        setExecValue((ComputableValue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.VALUE_ASSIGNMENT__TARGET:
        setTarget(TARGET_EDEFAULT);
        return;
      case KimPackage.VALUE_ASSIGNMENT__ASSIGNED_VALUE:
        setAssignedValue((ComputableValue)null);
        return;
      case KimPackage.VALUE_ASSIGNMENT__EXEC_VALUE:
        setExecValue((ComputableValue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.VALUE_ASSIGNMENT__TARGET:
        return TARGET_EDEFAULT == null ? target != null : !TARGET_EDEFAULT.equals(target);
      case KimPackage.VALUE_ASSIGNMENT__ASSIGNED_VALUE:
        return assignedValue != null;
      case KimPackage.VALUE_ASSIGNMENT__EXEC_VALUE:
        return execValue != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (target: ");
    result.append(target);
    result.append(')');
    return result.toString();
  }

} //ValueAssignmentImpl
