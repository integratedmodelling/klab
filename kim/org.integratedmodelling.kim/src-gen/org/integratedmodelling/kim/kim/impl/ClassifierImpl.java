/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kim.kim.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kim.kim.Classifier;
import org.integratedmodelling.kim.kim.ClassifierRHS;
import org.integratedmodelling.kim.kim.ConceptDeclaration;
import org.integratedmodelling.kim.kim.KimPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Classifier</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ClassifierImpl#getDeclaration <em>Declaration</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ClassifierImpl#isOtherwise <em>Otherwise</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ClassifierImpl#isNegated <em>Negated</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ClassifierImpl#getClassifier <em>Classifier</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClassifierImpl extends MinimalEObjectImpl.Container implements Classifier
{
  /**
   * The cached value of the '{@link #getDeclaration() <em>Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclaration()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration declaration;

  /**
   * The default value of the '{@link #isOtherwise() <em>Otherwise</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOtherwise()
   * @generated
   * @ordered
   */
  protected static final boolean OTHERWISE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOtherwise() <em>Otherwise</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOtherwise()
   * @generated
   * @ordered
   */
  protected boolean otherwise = OTHERWISE_EDEFAULT;

  /**
   * The default value of the '{@link #isNegated() <em>Negated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegated()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegated() <em>Negated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegated()
   * @generated
   * @ordered
   */
  protected boolean negated = NEGATED_EDEFAULT;

  /**
   * The cached value of the '{@link #getClassifier() <em>Classifier</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassifier()
   * @generated
   * @ordered
   */
  protected ClassifierRHS classifier;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassifierImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.CLASSIFIER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getDeclaration()
  {
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeclaration(ConceptDeclaration newDeclaration, NotificationChain msgs)
  {
    ConceptDeclaration oldDeclaration = declaration;
    declaration = newDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CLASSIFIER__DECLARATION, oldDeclaration, newDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeclaration(ConceptDeclaration newDeclaration)
  {
    if (newDeclaration != declaration)
    {
      NotificationChain msgs = null;
      if (declaration != null)
        msgs = ((InternalEObject)declaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CLASSIFIER__DECLARATION, null, msgs);
      if (newDeclaration != null)
        msgs = ((InternalEObject)newDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CLASSIFIER__DECLARATION, null, msgs);
      msgs = basicSetDeclaration(newDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CLASSIFIER__DECLARATION, newDeclaration, newDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOtherwise()
  {
    return otherwise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOtherwise(boolean newOtherwise)
  {
    boolean oldOtherwise = otherwise;
    otherwise = newOtherwise;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CLASSIFIER__OTHERWISE, oldOtherwise, otherwise));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNegated()
  {
    return negated;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNegated(boolean newNegated)
  {
    boolean oldNegated = negated;
    negated = newNegated;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CLASSIFIER__NEGATED, oldNegated, negated));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassifierRHS getClassifier()
  {
    return classifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClassifier(ClassifierRHS newClassifier, NotificationChain msgs)
  {
    ClassifierRHS oldClassifier = classifier;
    classifier = newClassifier;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.CLASSIFIER__CLASSIFIER, oldClassifier, newClassifier);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClassifier(ClassifierRHS newClassifier)
  {
    if (newClassifier != classifier)
    {
      NotificationChain msgs = null;
      if (classifier != null)
        msgs = ((InternalEObject)classifier).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.CLASSIFIER__CLASSIFIER, null, msgs);
      if (newClassifier != null)
        msgs = ((InternalEObject)newClassifier).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.CLASSIFIER__CLASSIFIER, null, msgs);
      msgs = basicSetClassifier(newClassifier, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.CLASSIFIER__CLASSIFIER, newClassifier, newClassifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.CLASSIFIER__DECLARATION:
        return basicSetDeclaration(null, msgs);
      case KimPackage.CLASSIFIER__CLASSIFIER:
        return basicSetClassifier(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.CLASSIFIER__DECLARATION:
        return getDeclaration();
      case KimPackage.CLASSIFIER__OTHERWISE:
        return isOtherwise();
      case KimPackage.CLASSIFIER__NEGATED:
        return isNegated();
      case KimPackage.CLASSIFIER__CLASSIFIER:
        return getClassifier();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.CLASSIFIER__DECLARATION:
        setDeclaration((ConceptDeclaration)newValue);
        return;
      case KimPackage.CLASSIFIER__OTHERWISE:
        setOtherwise((Boolean)newValue);
        return;
      case KimPackage.CLASSIFIER__NEGATED:
        setNegated((Boolean)newValue);
        return;
      case KimPackage.CLASSIFIER__CLASSIFIER:
        setClassifier((ClassifierRHS)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.CLASSIFIER__DECLARATION:
        setDeclaration((ConceptDeclaration)null);
        return;
      case KimPackage.CLASSIFIER__OTHERWISE:
        setOtherwise(OTHERWISE_EDEFAULT);
        return;
      case KimPackage.CLASSIFIER__NEGATED:
        setNegated(NEGATED_EDEFAULT);
        return;
      case KimPackage.CLASSIFIER__CLASSIFIER:
        setClassifier((ClassifierRHS)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.CLASSIFIER__DECLARATION:
        return declaration != null;
      case KimPackage.CLASSIFIER__OTHERWISE:
        return otherwise != OTHERWISE_EDEFAULT;
      case KimPackage.CLASSIFIER__NEGATED:
        return negated != NEGATED_EDEFAULT;
      case KimPackage.CLASSIFIER__CLASSIFIER:
        return classifier != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (otherwise: ");
    result.append(otherwise);
    result.append(", negated: ");
    result.append(negated);
    result.append(')');
    return result.toString();
  }

} //ClassifierImpl
