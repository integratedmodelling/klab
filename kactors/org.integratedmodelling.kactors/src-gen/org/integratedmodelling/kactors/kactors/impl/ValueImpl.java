/**
 * generated by Xtext 2.33.0
 */
package org.integratedmodelling.kactors.kactors.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kactors.kactors.Constructor;
import org.integratedmodelling.kactors.kactors.KactorsPackage;
import org.integratedmodelling.kactors.kactors.List;
import org.integratedmodelling.kactors.kactors.Literal;
import org.integratedmodelling.kactors.kactors.LookupTable;
import org.integratedmodelling.kactors.kactors.Map;
import org.integratedmodelling.kactors.kactors.MessageCall;
import org.integratedmodelling.kactors.kactors.Metadata;
import org.integratedmodelling.kactors.kactors.Observable;
import org.integratedmodelling.kactors.kactors.ParameterList;
import org.integratedmodelling.kactors.kactors.Quantity;
import org.integratedmodelling.kactors.kactors.Tree;
import org.integratedmodelling.kactors.kactors.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Value</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#isDeferred <em>Deferred</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getTree <em>Tree</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#isEmpty <em>Empty</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getArgvalue <em>Argvalue</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getUrn <em>Urn</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getLiteral <em>Literal</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getCast <em>Cast</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getId <em>Id</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getList <em>List</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getMap <em>Map</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getConstant <em>Constant</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getObservable <em>Observable</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getTable <em>Table</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getQuantity <em>Quantity</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getThen <em>Then</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getElse <em>Else</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getConstructor <em>Constructor</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getMethodCalls <em>Method Calls</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#isComponent <em>Component</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getBehavior <em>Behavior</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueImpl#getMetadata <em>Metadata</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ValueImpl extends MinimalEObjectImpl.Container implements Value
{
  /**
   * The default value of the '{@link #isDeferred() <em>Deferred</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDeferred()
   * @generated
   * @ordered
   */
  protected static final boolean DEFERRED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDeferred() <em>Deferred</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDeferred()
   * @generated
   * @ordered
   */
  protected boolean deferred = DEFERRED_EDEFAULT;

  /**
   * The cached value of the '{@link #getTree() <em>Tree</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTree()
   * @generated
   * @ordered
   */
  protected Tree tree;

  /**
   * The default value of the '{@link #isEmpty() <em>Empty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEmpty()
   * @generated
   * @ordered
   */
  protected static final boolean EMPTY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEmpty() <em>Empty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEmpty()
   * @generated
   * @ordered
   */
  protected boolean empty = EMPTY_EDEFAULT;

  /**
   * The default value of the '{@link #getArgvalue() <em>Argvalue</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgvalue()
   * @generated
   * @ordered
   */
  protected static final String ARGVALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getArgvalue() <em>Argvalue</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgvalue()
   * @generated
   * @ordered
   */
  protected String argvalue = ARGVALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getUrn() <em>Urn</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUrn()
   * @generated
   * @ordered
   */
  protected static final String URN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUrn() <em>Urn</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUrn()
   * @generated
   * @ordered
   */
  protected String urn = URN_EDEFAULT;

  /**
   * The cached value of the '{@link #getLiteral() <em>Literal</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLiteral()
   * @generated
   * @ordered
   */
  protected Literal literal;

  /**
   * The default value of the '{@link #getCast() <em>Cast</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCast()
   * @generated
   * @ordered
   */
  protected static final String CAST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCast() <em>Cast</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCast()
   * @generated
   * @ordered
   */
  protected String cast = CAST_EDEFAULT;

  /**
   * The default value of the '{@link #getId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected static final String ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected String id = ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getList() <em>List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getList()
   * @generated
   * @ordered
   */
  protected List list;

  /**
   * The cached value of the '{@link #getMap() <em>Map</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMap()
   * @generated
   * @ordered
   */
  protected Map map;

  /**
   * The default value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected static final String CONSTANT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected String constant = CONSTANT_EDEFAULT;

  /**
   * The cached value of the '{@link #getObservable() <em>Observable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObservable()
   * @generated
   * @ordered
   */
  protected Observable observable;

  /**
   * The default value of the '{@link #getExpression() <em>Expression</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected static final String EXPRESSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected String expression = EXPRESSION_EDEFAULT;

  /**
   * The cached value of the '{@link #getTable() <em>Table</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTable()
   * @generated
   * @ordered
   */
  protected LookupTable table;

  /**
   * The cached value of the '{@link #getQuantity() <em>Quantity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantity()
   * @generated
   * @ordered
   */
  protected Quantity quantity;

  /**
   * The cached value of the '{@link #getThen() <em>Then</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThen()
   * @generated
   * @ordered
   */
  protected Value then;

  /**
   * The cached value of the '{@link #getElse() <em>Else</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElse()
   * @generated
   * @ordered
   */
  protected Value else_;

  /**
   * The cached value of the '{@link #getConstructor() <em>Constructor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstructor()
   * @generated
   * @ordered
   */
  protected Constructor constructor;

  /**
   * The cached value of the '{@link #getMethodCalls() <em>Method Calls</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethodCalls()
   * @generated
   * @ordered
   */
  protected EList<MessageCall> methodCalls;

  /**
   * The default value of the '{@link #isComponent() <em>Component</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isComponent()
   * @generated
   * @ordered
   */
  protected static final boolean COMPONENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isComponent() <em>Component</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isComponent()
   * @generated
   * @ordered
   */
  protected boolean component = COMPONENT_EDEFAULT;

  /**
   * The default value of the '{@link #getBehavior() <em>Behavior</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehavior()
   * @generated
   * @ordered
   */
  protected static final String BEHAVIOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBehavior() <em>Behavior</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehavior()
   * @generated
   * @ordered
   */
  protected String behavior = BEHAVIOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected ParameterList parameters;

  /**
   * The cached value of the '{@link #getMetadata() <em>Metadata</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetadata()
   * @generated
   * @ordered
   */
  protected Metadata metadata;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ValueImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KactorsPackage.Literals.VALUE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDeferred()
  {
    return deferred;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeferred(boolean newDeferred)
  {
    boolean oldDeferred = deferred;
    deferred = newDeferred;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__DEFERRED, oldDeferred, deferred));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tree getTree()
  {
    return tree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTree(Tree newTree, NotificationChain msgs)
  {
    Tree oldTree = tree;
    tree = newTree;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__TREE, oldTree, newTree);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTree(Tree newTree)
  {
    if (newTree != tree)
    {
      NotificationChain msgs = null;
      if (tree != null)
        msgs = ((InternalEObject)tree).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__TREE, null, msgs);
      if (newTree != null)
        msgs = ((InternalEObject)newTree).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__TREE, null, msgs);
      msgs = basicSetTree(newTree, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__TREE, newTree, newTree));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEmpty()
  {
    return empty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEmpty(boolean newEmpty)
  {
    boolean oldEmpty = empty;
    empty = newEmpty;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__EMPTY, oldEmpty, empty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getArgvalue()
  {
    return argvalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArgvalue(String newArgvalue)
  {
    String oldArgvalue = argvalue;
    argvalue = newArgvalue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__ARGVALUE, oldArgvalue, argvalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getUrn()
  {
    return urn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUrn(String newUrn)
  {
    String oldUrn = urn;
    urn = newUrn;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__URN, oldUrn, urn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal getLiteral()
  {
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLiteral(Literal newLiteral, NotificationChain msgs)
  {
    Literal oldLiteral = literal;
    literal = newLiteral;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__LITERAL, oldLiteral, newLiteral);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLiteral(Literal newLiteral)
  {
    if (newLiteral != literal)
    {
      NotificationChain msgs = null;
      if (literal != null)
        msgs = ((InternalEObject)literal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__LITERAL, null, msgs);
      if (newLiteral != null)
        msgs = ((InternalEObject)newLiteral).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__LITERAL, null, msgs);
      msgs = basicSetLiteral(newLiteral, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__LITERAL, newLiteral, newLiteral));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCast()
  {
    return cast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCast(String newCast)
  {
    String oldCast = cast;
    cast = newCast;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__CAST, oldCast, cast));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setId(String newId)
  {
    String oldId = id;
    id = newId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__ID, oldId, id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public List getList()
  {
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetList(List newList, NotificationChain msgs)
  {
    List oldList = list;
    list = newList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__LIST, oldList, newList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setList(List newList)
  {
    if (newList != list)
    {
      NotificationChain msgs = null;
      if (list != null)
        msgs = ((InternalEObject)list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__LIST, null, msgs);
      if (newList != null)
        msgs = ((InternalEObject)newList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__LIST, null, msgs);
      msgs = basicSetList(newList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__LIST, newList, newList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map getMap()
  {
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMap(Map newMap, NotificationChain msgs)
  {
    Map oldMap = map;
    map = newMap;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__MAP, oldMap, newMap);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMap(Map newMap)
  {
    if (newMap != map)
    {
      NotificationChain msgs = null;
      if (map != null)
        msgs = ((InternalEObject)map).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__MAP, null, msgs);
      if (newMap != null)
        msgs = ((InternalEObject)newMap).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__MAP, null, msgs);
      msgs = basicSetMap(newMap, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__MAP, newMap, newMap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConstant()
  {
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstant(String newConstant)
  {
    String oldConstant = constant;
    constant = newConstant;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__CONSTANT, oldConstant, constant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Observable getObservable()
  {
    return observable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObservable(Observable newObservable, NotificationChain msgs)
  {
    Observable oldObservable = observable;
    observable = newObservable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__OBSERVABLE, oldObservable, newObservable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObservable(Observable newObservable)
  {
    if (newObservable != observable)
    {
      NotificationChain msgs = null;
      if (observable != null)
        msgs = ((InternalEObject)observable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__OBSERVABLE, null, msgs);
      if (newObservable != null)
        msgs = ((InternalEObject)newObservable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__OBSERVABLE, null, msgs);
      msgs = basicSetObservable(newObservable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__OBSERVABLE, newObservable, newObservable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression(String newExpression)
  {
    String oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__EXPRESSION, oldExpression, expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LookupTable getTable()
  {
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTable(LookupTable newTable, NotificationChain msgs)
  {
    LookupTable oldTable = table;
    table = newTable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__TABLE, oldTable, newTable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTable(LookupTable newTable)
  {
    if (newTable != table)
    {
      NotificationChain msgs = null;
      if (table != null)
        msgs = ((InternalEObject)table).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__TABLE, null, msgs);
      if (newTable != null)
        msgs = ((InternalEObject)newTable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__TABLE, null, msgs);
      msgs = basicSetTable(newTable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__TABLE, newTable, newTable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quantity getQuantity()
  {
    return quantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQuantity(Quantity newQuantity, NotificationChain msgs)
  {
    Quantity oldQuantity = quantity;
    quantity = newQuantity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__QUANTITY, oldQuantity, newQuantity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQuantity(Quantity newQuantity)
  {
    if (newQuantity != quantity)
    {
      NotificationChain msgs = null;
      if (quantity != null)
        msgs = ((InternalEObject)quantity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__QUANTITY, null, msgs);
      if (newQuantity != null)
        msgs = ((InternalEObject)newQuantity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__QUANTITY, null, msgs);
      msgs = basicSetQuantity(newQuantity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__QUANTITY, newQuantity, newQuantity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value getThen()
  {
    return then;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThen(Value newThen, NotificationChain msgs)
  {
    Value oldThen = then;
    then = newThen;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__THEN, oldThen, newThen);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThen(Value newThen)
  {
    if (newThen != then)
    {
      NotificationChain msgs = null;
      if (then != null)
        msgs = ((InternalEObject)then).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__THEN, null, msgs);
      if (newThen != null)
        msgs = ((InternalEObject)newThen).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__THEN, null, msgs);
      msgs = basicSetThen(newThen, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__THEN, newThen, newThen));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value getElse()
  {
    return else_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElse(Value newElse, NotificationChain msgs)
  {
    Value oldElse = else_;
    else_ = newElse;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__ELSE, oldElse, newElse);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElse(Value newElse)
  {
    if (newElse != else_)
    {
      NotificationChain msgs = null;
      if (else_ != null)
        msgs = ((InternalEObject)else_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__ELSE, null, msgs);
      if (newElse != null)
        msgs = ((InternalEObject)newElse).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__ELSE, null, msgs);
      msgs = basicSetElse(newElse, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__ELSE, newElse, newElse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constructor getConstructor()
  {
    return constructor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstructor(Constructor newConstructor, NotificationChain msgs)
  {
    Constructor oldConstructor = constructor;
    constructor = newConstructor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__CONSTRUCTOR, oldConstructor, newConstructor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstructor(Constructor newConstructor)
  {
    if (newConstructor != constructor)
    {
      NotificationChain msgs = null;
      if (constructor != null)
        msgs = ((InternalEObject)constructor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__CONSTRUCTOR, null, msgs);
      if (newConstructor != null)
        msgs = ((InternalEObject)newConstructor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__CONSTRUCTOR, null, msgs);
      msgs = basicSetConstructor(newConstructor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__CONSTRUCTOR, newConstructor, newConstructor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MessageCall> getMethodCalls()
  {
    if (methodCalls == null)
    {
      methodCalls = new EObjectContainmentEList<MessageCall>(MessageCall.class, this, KactorsPackage.VALUE__METHOD_CALLS);
    }
    return methodCalls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isComponent()
  {
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComponent(boolean newComponent)
  {
    boolean oldComponent = component;
    component = newComponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__COMPONENT, oldComponent, component));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBehavior()
  {
    return behavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBehavior(String newBehavior)
  {
    String oldBehavior = behavior;
    behavior = newBehavior;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__BEHAVIOR, oldBehavior, behavior));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterList getParameters()
  {
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParameters(ParameterList newParameters, NotificationChain msgs)
  {
    ParameterList oldParameters = parameters;
    parameters = newParameters;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__PARAMETERS, oldParameters, newParameters);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParameters(ParameterList newParameters)
  {
    if (newParameters != parameters)
    {
      NotificationChain msgs = null;
      if (parameters != null)
        msgs = ((InternalEObject)parameters).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__PARAMETERS, null, msgs);
      if (newParameters != null)
        msgs = ((InternalEObject)newParameters).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__PARAMETERS, null, msgs);
      msgs = basicSetParameters(newParameters, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__PARAMETERS, newParameters, newParameters));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Metadata getMetadata()
  {
    return metadata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMetadata(Metadata newMetadata, NotificationChain msgs)
  {
    Metadata oldMetadata = metadata;
    metadata = newMetadata;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__METADATA, oldMetadata, newMetadata);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMetadata(Metadata newMetadata)
  {
    if (newMetadata != metadata)
    {
      NotificationChain msgs = null;
      if (metadata != null)
        msgs = ((InternalEObject)metadata).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__METADATA, null, msgs);
      if (newMetadata != null)
        msgs = ((InternalEObject)newMetadata).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE__METADATA, null, msgs);
      msgs = basicSetMetadata(newMetadata, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE__METADATA, newMetadata, newMetadata));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KactorsPackage.VALUE__TREE:
        return basicSetTree(null, msgs);
      case KactorsPackage.VALUE__LITERAL:
        return basicSetLiteral(null, msgs);
      case KactorsPackage.VALUE__LIST:
        return basicSetList(null, msgs);
      case KactorsPackage.VALUE__MAP:
        return basicSetMap(null, msgs);
      case KactorsPackage.VALUE__OBSERVABLE:
        return basicSetObservable(null, msgs);
      case KactorsPackage.VALUE__TABLE:
        return basicSetTable(null, msgs);
      case KactorsPackage.VALUE__QUANTITY:
        return basicSetQuantity(null, msgs);
      case KactorsPackage.VALUE__THEN:
        return basicSetThen(null, msgs);
      case KactorsPackage.VALUE__ELSE:
        return basicSetElse(null, msgs);
      case KactorsPackage.VALUE__CONSTRUCTOR:
        return basicSetConstructor(null, msgs);
      case KactorsPackage.VALUE__METHOD_CALLS:
        return ((InternalEList<?>)getMethodCalls()).basicRemove(otherEnd, msgs);
      case KactorsPackage.VALUE__PARAMETERS:
        return basicSetParameters(null, msgs);
      case KactorsPackage.VALUE__METADATA:
        return basicSetMetadata(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KactorsPackage.VALUE__DEFERRED:
        return isDeferred();
      case KactorsPackage.VALUE__TREE:
        return getTree();
      case KactorsPackage.VALUE__EMPTY:
        return isEmpty();
      case KactorsPackage.VALUE__ARGVALUE:
        return getArgvalue();
      case KactorsPackage.VALUE__URN:
        return getUrn();
      case KactorsPackage.VALUE__LITERAL:
        return getLiteral();
      case KactorsPackage.VALUE__CAST:
        return getCast();
      case KactorsPackage.VALUE__ID:
        return getId();
      case KactorsPackage.VALUE__LIST:
        return getList();
      case KactorsPackage.VALUE__MAP:
        return getMap();
      case KactorsPackage.VALUE__CONSTANT:
        return getConstant();
      case KactorsPackage.VALUE__OBSERVABLE:
        return getObservable();
      case KactorsPackage.VALUE__EXPRESSION:
        return getExpression();
      case KactorsPackage.VALUE__TABLE:
        return getTable();
      case KactorsPackage.VALUE__QUANTITY:
        return getQuantity();
      case KactorsPackage.VALUE__THEN:
        return getThen();
      case KactorsPackage.VALUE__ELSE:
        return getElse();
      case KactorsPackage.VALUE__CONSTRUCTOR:
        return getConstructor();
      case KactorsPackage.VALUE__METHOD_CALLS:
        return getMethodCalls();
      case KactorsPackage.VALUE__COMPONENT:
        return isComponent();
      case KactorsPackage.VALUE__BEHAVIOR:
        return getBehavior();
      case KactorsPackage.VALUE__PARAMETERS:
        return getParameters();
      case KactorsPackage.VALUE__METADATA:
        return getMetadata();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KactorsPackage.VALUE__DEFERRED:
        setDeferred((Boolean)newValue);
        return;
      case KactorsPackage.VALUE__TREE:
        setTree((Tree)newValue);
        return;
      case KactorsPackage.VALUE__EMPTY:
        setEmpty((Boolean)newValue);
        return;
      case KactorsPackage.VALUE__ARGVALUE:
        setArgvalue((String)newValue);
        return;
      case KactorsPackage.VALUE__URN:
        setUrn((String)newValue);
        return;
      case KactorsPackage.VALUE__LITERAL:
        setLiteral((Literal)newValue);
        return;
      case KactorsPackage.VALUE__CAST:
        setCast((String)newValue);
        return;
      case KactorsPackage.VALUE__ID:
        setId((String)newValue);
        return;
      case KactorsPackage.VALUE__LIST:
        setList((List)newValue);
        return;
      case KactorsPackage.VALUE__MAP:
        setMap((Map)newValue);
        return;
      case KactorsPackage.VALUE__CONSTANT:
        setConstant((String)newValue);
        return;
      case KactorsPackage.VALUE__OBSERVABLE:
        setObservable((Observable)newValue);
        return;
      case KactorsPackage.VALUE__EXPRESSION:
        setExpression((String)newValue);
        return;
      case KactorsPackage.VALUE__TABLE:
        setTable((LookupTable)newValue);
        return;
      case KactorsPackage.VALUE__QUANTITY:
        setQuantity((Quantity)newValue);
        return;
      case KactorsPackage.VALUE__THEN:
        setThen((Value)newValue);
        return;
      case KactorsPackage.VALUE__ELSE:
        setElse((Value)newValue);
        return;
      case KactorsPackage.VALUE__CONSTRUCTOR:
        setConstructor((Constructor)newValue);
        return;
      case KactorsPackage.VALUE__METHOD_CALLS:
        getMethodCalls().clear();
        getMethodCalls().addAll((Collection<? extends MessageCall>)newValue);
        return;
      case KactorsPackage.VALUE__COMPONENT:
        setComponent((Boolean)newValue);
        return;
      case KactorsPackage.VALUE__BEHAVIOR:
        setBehavior((String)newValue);
        return;
      case KactorsPackage.VALUE__PARAMETERS:
        setParameters((ParameterList)newValue);
        return;
      case KactorsPackage.VALUE__METADATA:
        setMetadata((Metadata)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.VALUE__DEFERRED:
        setDeferred(DEFERRED_EDEFAULT);
        return;
      case KactorsPackage.VALUE__TREE:
        setTree((Tree)null);
        return;
      case KactorsPackage.VALUE__EMPTY:
        setEmpty(EMPTY_EDEFAULT);
        return;
      case KactorsPackage.VALUE__ARGVALUE:
        setArgvalue(ARGVALUE_EDEFAULT);
        return;
      case KactorsPackage.VALUE__URN:
        setUrn(URN_EDEFAULT);
        return;
      case KactorsPackage.VALUE__LITERAL:
        setLiteral((Literal)null);
        return;
      case KactorsPackage.VALUE__CAST:
        setCast(CAST_EDEFAULT);
        return;
      case KactorsPackage.VALUE__ID:
        setId(ID_EDEFAULT);
        return;
      case KactorsPackage.VALUE__LIST:
        setList((List)null);
        return;
      case KactorsPackage.VALUE__MAP:
        setMap((Map)null);
        return;
      case KactorsPackage.VALUE__CONSTANT:
        setConstant(CONSTANT_EDEFAULT);
        return;
      case KactorsPackage.VALUE__OBSERVABLE:
        setObservable((Observable)null);
        return;
      case KactorsPackage.VALUE__EXPRESSION:
        setExpression(EXPRESSION_EDEFAULT);
        return;
      case KactorsPackage.VALUE__TABLE:
        setTable((LookupTable)null);
        return;
      case KactorsPackage.VALUE__QUANTITY:
        setQuantity((Quantity)null);
        return;
      case KactorsPackage.VALUE__THEN:
        setThen((Value)null);
        return;
      case KactorsPackage.VALUE__ELSE:
        setElse((Value)null);
        return;
      case KactorsPackage.VALUE__CONSTRUCTOR:
        setConstructor((Constructor)null);
        return;
      case KactorsPackage.VALUE__METHOD_CALLS:
        getMethodCalls().clear();
        return;
      case KactorsPackage.VALUE__COMPONENT:
        setComponent(COMPONENT_EDEFAULT);
        return;
      case KactorsPackage.VALUE__BEHAVIOR:
        setBehavior(BEHAVIOR_EDEFAULT);
        return;
      case KactorsPackage.VALUE__PARAMETERS:
        setParameters((ParameterList)null);
        return;
      case KactorsPackage.VALUE__METADATA:
        setMetadata((Metadata)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.VALUE__DEFERRED:
        return deferred != DEFERRED_EDEFAULT;
      case KactorsPackage.VALUE__TREE:
        return tree != null;
      case KactorsPackage.VALUE__EMPTY:
        return empty != EMPTY_EDEFAULT;
      case KactorsPackage.VALUE__ARGVALUE:
        return ARGVALUE_EDEFAULT == null ? argvalue != null : !ARGVALUE_EDEFAULT.equals(argvalue);
      case KactorsPackage.VALUE__URN:
        return URN_EDEFAULT == null ? urn != null : !URN_EDEFAULT.equals(urn);
      case KactorsPackage.VALUE__LITERAL:
        return literal != null;
      case KactorsPackage.VALUE__CAST:
        return CAST_EDEFAULT == null ? cast != null : !CAST_EDEFAULT.equals(cast);
      case KactorsPackage.VALUE__ID:
        return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);
      case KactorsPackage.VALUE__LIST:
        return list != null;
      case KactorsPackage.VALUE__MAP:
        return map != null;
      case KactorsPackage.VALUE__CONSTANT:
        return CONSTANT_EDEFAULT == null ? constant != null : !CONSTANT_EDEFAULT.equals(constant);
      case KactorsPackage.VALUE__OBSERVABLE:
        return observable != null;
      case KactorsPackage.VALUE__EXPRESSION:
        return EXPRESSION_EDEFAULT == null ? expression != null : !EXPRESSION_EDEFAULT.equals(expression);
      case KactorsPackage.VALUE__TABLE:
        return table != null;
      case KactorsPackage.VALUE__QUANTITY:
        return quantity != null;
      case KactorsPackage.VALUE__THEN:
        return then != null;
      case KactorsPackage.VALUE__ELSE:
        return else_ != null;
      case KactorsPackage.VALUE__CONSTRUCTOR:
        return constructor != null;
      case KactorsPackage.VALUE__METHOD_CALLS:
        return methodCalls != null && !methodCalls.isEmpty();
      case KactorsPackage.VALUE__COMPONENT:
        return component != COMPONENT_EDEFAULT;
      case KactorsPackage.VALUE__BEHAVIOR:
        return BEHAVIOR_EDEFAULT == null ? behavior != null : !BEHAVIOR_EDEFAULT.equals(behavior);
      case KactorsPackage.VALUE__PARAMETERS:
        return parameters != null;
      case KactorsPackage.VALUE__METADATA:
        return metadata != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (deferred: ");
    result.append(deferred);
    result.append(", empty: ");
    result.append(empty);
    result.append(", argvalue: ");
    result.append(argvalue);
    result.append(", urn: ");
    result.append(urn);
    result.append(", cast: ");
    result.append(cast);
    result.append(", id: ");
    result.append(id);
    result.append(", constant: ");
    result.append(constant);
    result.append(", expression: ");
    result.append(expression);
    result.append(", component: ");
    result.append(component);
    result.append(", behavior: ");
    result.append(behavior);
    result.append(')');
    return result.toString();
  }

} //ValueImpl
