/**
 * generated by Xtext 2.33.0
 */
package org.integratedmodelling.kactors.kactors.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kactors.kactors.KactorsPackage;
import org.integratedmodelling.kactors.kactors.List;
import org.integratedmodelling.kactors.kactors.Literal;
import org.integratedmodelling.kactors.kactors.Match;
import org.integratedmodelling.kactors.kactors.Observable;
import org.integratedmodelling.kactors.kactors.Quantity;
import org.integratedmodelling.kactors.kactors.StatementList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Match</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getId <em>Id</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getBody <em>Body</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getAnnotation <em>Annotation</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getFormalName <em>Formal Name</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getConstant <em>Constant</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getBoolean <em>Boolean</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getRegexp <em>Regexp</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getObservable <em>Observable</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getLiteral <em>Literal</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getList <em>List</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getSet <em>Set</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getQuantity <em>Quantity</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getNodata <em>Nodata</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#isStar <em>Star</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#isAnything <em>Anything</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#isEmpty <em>Empty</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#isException <em>Exception</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MatchImpl extends MinimalEObjectImpl.Container implements Match
{
  /**
   * The default value of the '{@link #getId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected static final String ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected String id = ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected StatementList body;

  /**
   * The default value of the '{@link #getAnnotation() <em>Annotation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotation()
   * @generated
   * @ordered
   */
  protected static final String ANNOTATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAnnotation() <em>Annotation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotation()
   * @generated
   * @ordered
   */
  protected String annotation = ANNOTATION_EDEFAULT;

  /**
   * The default value of the '{@link #getFormalName() <em>Formal Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFormalName()
   * @generated
   * @ordered
   */
  protected static final String FORMAL_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFormalName() <em>Formal Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFormalName()
   * @generated
   * @ordered
   */
  protected String formalName = FORMAL_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected static final String CONSTANT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected String constant = CONSTANT_EDEFAULT;

  /**
   * The default value of the '{@link #getBoolean() <em>Boolean</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoolean()
   * @generated
   * @ordered
   */
  protected static final String BOOLEAN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBoolean() <em>Boolean</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoolean()
   * @generated
   * @ordered
   */
  protected String boolean_ = BOOLEAN_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getRegexp() <em>Regexp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegexp()
   * @generated
   * @ordered
   */
  protected static final String REGEXP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRegexp() <em>Regexp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegexp()
   * @generated
   * @ordered
   */
  protected String regexp = REGEXP_EDEFAULT;

  /**
   * The cached value of the '{@link #getObservable() <em>Observable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObservable()
   * @generated
   * @ordered
   */
  protected Observable observable;

  /**
   * The cached value of the '{@link #getLiteral() <em>Literal</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLiteral()
   * @generated
   * @ordered
   */
  protected Literal literal;

  /**
   * The cached value of the '{@link #getList() <em>List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getList()
   * @generated
   * @ordered
   */
  protected List list;

  /**
   * The cached value of the '{@link #getSet() <em>Set</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSet()
   * @generated
   * @ordered
   */
  protected List set;

  /**
   * The cached value of the '{@link #getQuantity() <em>Quantity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantity()
   * @generated
   * @ordered
   */
  protected Quantity quantity;

  /**
   * The default value of the '{@link #getExpr() <em>Expr</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected static final String EXPR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected String expr = EXPR_EDEFAULT;

  /**
   * The default value of the '{@link #getNodata() <em>Nodata</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodata()
   * @generated
   * @ordered
   */
  protected static final String NODATA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNodata() <em>Nodata</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodata()
   * @generated
   * @ordered
   */
  protected String nodata = NODATA_EDEFAULT;

  /**
   * The default value of the '{@link #isStar() <em>Star</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStar()
   * @generated
   * @ordered
   */
  protected static final boolean STAR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isStar() <em>Star</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isStar()
   * @generated
   * @ordered
   */
  protected boolean star = STAR_EDEFAULT;

  /**
   * The default value of the '{@link #isAnything() <em>Anything</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAnything()
   * @generated
   * @ordered
   */
  protected static final boolean ANYTHING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAnything() <em>Anything</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAnything()
   * @generated
   * @ordered
   */
  protected boolean anything = ANYTHING_EDEFAULT;

  /**
   * The default value of the '{@link #isEmpty() <em>Empty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEmpty()
   * @generated
   * @ordered
   */
  protected static final boolean EMPTY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEmpty() <em>Empty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEmpty()
   * @generated
   * @ordered
   */
  protected boolean empty = EMPTY_EDEFAULT;

  /**
   * The default value of the '{@link #isException() <em>Exception</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isException()
   * @generated
   * @ordered
   */
  protected static final boolean EXCEPTION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isException() <em>Exception</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isException()
   * @generated
   * @ordered
   */
  protected boolean exception = EXCEPTION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MatchImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KactorsPackage.Literals.MATCH;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setId(String newId)
  {
    String oldId = id;
    id = newId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__ID, oldId, id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementList getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(StatementList newBody, NotificationChain msgs)
  {
    StatementList oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBody(StatementList newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAnnotation()
  {
    return annotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAnnotation(String newAnnotation)
  {
    String oldAnnotation = annotation;
    annotation = newAnnotation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__ANNOTATION, oldAnnotation, annotation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFormalName()
  {
    return formalName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFormalName(String newFormalName)
  {
    String oldFormalName = formalName;
    formalName = newFormalName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__FORMAL_NAME, oldFormalName, formalName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConstant()
  {
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstant(String newConstant)
  {
    String oldConstant = constant;
    constant = newConstant;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__CONSTANT, oldConstant, constant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBoolean()
  {
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBoolean(String newBoolean)
  {
    String oldBoolean = boolean_;
    boolean_ = newBoolean;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__BOOLEAN, oldBoolean, boolean_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRegexp()
  {
    return regexp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRegexp(String newRegexp)
  {
    String oldRegexp = regexp;
    regexp = newRegexp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__REGEXP, oldRegexp, regexp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Observable getObservable()
  {
    return observable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObservable(Observable newObservable, NotificationChain msgs)
  {
    Observable oldObservable = observable;
    observable = newObservable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__OBSERVABLE, oldObservable, newObservable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObservable(Observable newObservable)
  {
    if (newObservable != observable)
    {
      NotificationChain msgs = null;
      if (observable != null)
        msgs = ((InternalEObject)observable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__OBSERVABLE, null, msgs);
      if (newObservable != null)
        msgs = ((InternalEObject)newObservable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__OBSERVABLE, null, msgs);
      msgs = basicSetObservable(newObservable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__OBSERVABLE, newObservable, newObservable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal getLiteral()
  {
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLiteral(Literal newLiteral, NotificationChain msgs)
  {
    Literal oldLiteral = literal;
    literal = newLiteral;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__LITERAL, oldLiteral, newLiteral);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLiteral(Literal newLiteral)
  {
    if (newLiteral != literal)
    {
      NotificationChain msgs = null;
      if (literal != null)
        msgs = ((InternalEObject)literal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__LITERAL, null, msgs);
      if (newLiteral != null)
        msgs = ((InternalEObject)newLiteral).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__LITERAL, null, msgs);
      msgs = basicSetLiteral(newLiteral, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__LITERAL, newLiteral, newLiteral));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public List getList()
  {
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetList(List newList, NotificationChain msgs)
  {
    List oldList = list;
    list = newList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__LIST, oldList, newList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setList(List newList)
  {
    if (newList != list)
    {
      NotificationChain msgs = null;
      if (list != null)
        msgs = ((InternalEObject)list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__LIST, null, msgs);
      if (newList != null)
        msgs = ((InternalEObject)newList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__LIST, null, msgs);
      msgs = basicSetList(newList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__LIST, newList, newList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public List getSet()
  {
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSet(List newSet, NotificationChain msgs)
  {
    List oldSet = set;
    set = newSet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__SET, oldSet, newSet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSet(List newSet)
  {
    if (newSet != set)
    {
      NotificationChain msgs = null;
      if (set != null)
        msgs = ((InternalEObject)set).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__SET, null, msgs);
      if (newSet != null)
        msgs = ((InternalEObject)newSet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__SET, null, msgs);
      msgs = basicSetSet(newSet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__SET, newSet, newSet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quantity getQuantity()
  {
    return quantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQuantity(Quantity newQuantity, NotificationChain msgs)
  {
    Quantity oldQuantity = quantity;
    quantity = newQuantity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__QUANTITY, oldQuantity, newQuantity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQuantity(Quantity newQuantity)
  {
    if (newQuantity != quantity)
    {
      NotificationChain msgs = null;
      if (quantity != null)
        msgs = ((InternalEObject)quantity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__QUANTITY, null, msgs);
      if (newQuantity != null)
        msgs = ((InternalEObject)newQuantity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__QUANTITY, null, msgs);
      msgs = basicSetQuantity(newQuantity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__QUANTITY, newQuantity, newQuantity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpr(String newExpr)
  {
    String oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__EXPR, oldExpr, expr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNodata()
  {
    return nodata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodata(String newNodata)
  {
    String oldNodata = nodata;
    nodata = newNodata;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__NODATA, oldNodata, nodata));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isStar()
  {
    return star;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStar(boolean newStar)
  {
    boolean oldStar = star;
    star = newStar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__STAR, oldStar, star));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAnything()
  {
    return anything;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAnything(boolean newAnything)
  {
    boolean oldAnything = anything;
    anything = newAnything;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__ANYTHING, oldAnything, anything));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEmpty()
  {
    return empty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEmpty(boolean newEmpty)
  {
    boolean oldEmpty = empty;
    empty = newEmpty;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__EMPTY, oldEmpty, empty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isException()
  {
    return exception;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setException(boolean newException)
  {
    boolean oldException = exception;
    exception = newException;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__EXCEPTION, oldException, exception));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KactorsPackage.MATCH__BODY:
        return basicSetBody(null, msgs);
      case KactorsPackage.MATCH__OBSERVABLE:
        return basicSetObservable(null, msgs);
      case KactorsPackage.MATCH__LITERAL:
        return basicSetLiteral(null, msgs);
      case KactorsPackage.MATCH__LIST:
        return basicSetList(null, msgs);
      case KactorsPackage.MATCH__SET:
        return basicSetSet(null, msgs);
      case KactorsPackage.MATCH__QUANTITY:
        return basicSetQuantity(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KactorsPackage.MATCH__ID:
        return getId();
      case KactorsPackage.MATCH__BODY:
        return getBody();
      case KactorsPackage.MATCH__ANNOTATION:
        return getAnnotation();
      case KactorsPackage.MATCH__FORMAL_NAME:
        return getFormalName();
      case KactorsPackage.MATCH__CONSTANT:
        return getConstant();
      case KactorsPackage.MATCH__BOOLEAN:
        return getBoolean();
      case KactorsPackage.MATCH__TYPE:
        return getType();
      case KactorsPackage.MATCH__REGEXP:
        return getRegexp();
      case KactorsPackage.MATCH__OBSERVABLE:
        return getObservable();
      case KactorsPackage.MATCH__LITERAL:
        return getLiteral();
      case KactorsPackage.MATCH__LIST:
        return getList();
      case KactorsPackage.MATCH__SET:
        return getSet();
      case KactorsPackage.MATCH__QUANTITY:
        return getQuantity();
      case KactorsPackage.MATCH__EXPR:
        return getExpr();
      case KactorsPackage.MATCH__NODATA:
        return getNodata();
      case KactorsPackage.MATCH__STAR:
        return isStar();
      case KactorsPackage.MATCH__ANYTHING:
        return isAnything();
      case KactorsPackage.MATCH__EMPTY:
        return isEmpty();
      case KactorsPackage.MATCH__EXCEPTION:
        return isException();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KactorsPackage.MATCH__ID:
        setId((String)newValue);
        return;
      case KactorsPackage.MATCH__BODY:
        setBody((StatementList)newValue);
        return;
      case KactorsPackage.MATCH__ANNOTATION:
        setAnnotation((String)newValue);
        return;
      case KactorsPackage.MATCH__FORMAL_NAME:
        setFormalName((String)newValue);
        return;
      case KactorsPackage.MATCH__CONSTANT:
        setConstant((String)newValue);
        return;
      case KactorsPackage.MATCH__BOOLEAN:
        setBoolean((String)newValue);
        return;
      case KactorsPackage.MATCH__TYPE:
        setType((String)newValue);
        return;
      case KactorsPackage.MATCH__REGEXP:
        setRegexp((String)newValue);
        return;
      case KactorsPackage.MATCH__OBSERVABLE:
        setObservable((Observable)newValue);
        return;
      case KactorsPackage.MATCH__LITERAL:
        setLiteral((Literal)newValue);
        return;
      case KactorsPackage.MATCH__LIST:
        setList((List)newValue);
        return;
      case KactorsPackage.MATCH__SET:
        setSet((List)newValue);
        return;
      case KactorsPackage.MATCH__QUANTITY:
        setQuantity((Quantity)newValue);
        return;
      case KactorsPackage.MATCH__EXPR:
        setExpr((String)newValue);
        return;
      case KactorsPackage.MATCH__NODATA:
        setNodata((String)newValue);
        return;
      case KactorsPackage.MATCH__STAR:
        setStar((Boolean)newValue);
        return;
      case KactorsPackage.MATCH__ANYTHING:
        setAnything((Boolean)newValue);
        return;
      case KactorsPackage.MATCH__EMPTY:
        setEmpty((Boolean)newValue);
        return;
      case KactorsPackage.MATCH__EXCEPTION:
        setException((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.MATCH__ID:
        setId(ID_EDEFAULT);
        return;
      case KactorsPackage.MATCH__BODY:
        setBody((StatementList)null);
        return;
      case KactorsPackage.MATCH__ANNOTATION:
        setAnnotation(ANNOTATION_EDEFAULT);
        return;
      case KactorsPackage.MATCH__FORMAL_NAME:
        setFormalName(FORMAL_NAME_EDEFAULT);
        return;
      case KactorsPackage.MATCH__CONSTANT:
        setConstant(CONSTANT_EDEFAULT);
        return;
      case KactorsPackage.MATCH__BOOLEAN:
        setBoolean(BOOLEAN_EDEFAULT);
        return;
      case KactorsPackage.MATCH__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case KactorsPackage.MATCH__REGEXP:
        setRegexp(REGEXP_EDEFAULT);
        return;
      case KactorsPackage.MATCH__OBSERVABLE:
        setObservable((Observable)null);
        return;
      case KactorsPackage.MATCH__LITERAL:
        setLiteral((Literal)null);
        return;
      case KactorsPackage.MATCH__LIST:
        setList((List)null);
        return;
      case KactorsPackage.MATCH__SET:
        setSet((List)null);
        return;
      case KactorsPackage.MATCH__QUANTITY:
        setQuantity((Quantity)null);
        return;
      case KactorsPackage.MATCH__EXPR:
        setExpr(EXPR_EDEFAULT);
        return;
      case KactorsPackage.MATCH__NODATA:
        setNodata(NODATA_EDEFAULT);
        return;
      case KactorsPackage.MATCH__STAR:
        setStar(STAR_EDEFAULT);
        return;
      case KactorsPackage.MATCH__ANYTHING:
        setAnything(ANYTHING_EDEFAULT);
        return;
      case KactorsPackage.MATCH__EMPTY:
        setEmpty(EMPTY_EDEFAULT);
        return;
      case KactorsPackage.MATCH__EXCEPTION:
        setException(EXCEPTION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.MATCH__ID:
        return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);
      case KactorsPackage.MATCH__BODY:
        return body != null;
      case KactorsPackage.MATCH__ANNOTATION:
        return ANNOTATION_EDEFAULT == null ? annotation != null : !ANNOTATION_EDEFAULT.equals(annotation);
      case KactorsPackage.MATCH__FORMAL_NAME:
        return FORMAL_NAME_EDEFAULT == null ? formalName != null : !FORMAL_NAME_EDEFAULT.equals(formalName);
      case KactorsPackage.MATCH__CONSTANT:
        return CONSTANT_EDEFAULT == null ? constant != null : !CONSTANT_EDEFAULT.equals(constant);
      case KactorsPackage.MATCH__BOOLEAN:
        return BOOLEAN_EDEFAULT == null ? boolean_ != null : !BOOLEAN_EDEFAULT.equals(boolean_);
      case KactorsPackage.MATCH__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case KactorsPackage.MATCH__REGEXP:
        return REGEXP_EDEFAULT == null ? regexp != null : !REGEXP_EDEFAULT.equals(regexp);
      case KactorsPackage.MATCH__OBSERVABLE:
        return observable != null;
      case KactorsPackage.MATCH__LITERAL:
        return literal != null;
      case KactorsPackage.MATCH__LIST:
        return list != null;
      case KactorsPackage.MATCH__SET:
        return set != null;
      case KactorsPackage.MATCH__QUANTITY:
        return quantity != null;
      case KactorsPackage.MATCH__EXPR:
        return EXPR_EDEFAULT == null ? expr != null : !EXPR_EDEFAULT.equals(expr);
      case KactorsPackage.MATCH__NODATA:
        return NODATA_EDEFAULT == null ? nodata != null : !NODATA_EDEFAULT.equals(nodata);
      case KactorsPackage.MATCH__STAR:
        return star != STAR_EDEFAULT;
      case KactorsPackage.MATCH__ANYTHING:
        return anything != ANYTHING_EDEFAULT;
      case KactorsPackage.MATCH__EMPTY:
        return empty != EMPTY_EDEFAULT;
      case KactorsPackage.MATCH__EXCEPTION:
        return exception != EXCEPTION_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (id: ");
    result.append(id);
    result.append(", annotation: ");
    result.append(annotation);
    result.append(", formalName: ");
    result.append(formalName);
    result.append(", constant: ");
    result.append(constant);
    result.append(", boolean: ");
    result.append(boolean_);
    result.append(", type: ");
    result.append(type);
    result.append(", regexp: ");
    result.append(regexp);
    result.append(", expr: ");
    result.append(expr);
    result.append(", nodata: ");
    result.append(nodata);
    result.append(", star: ");
    result.append(star);
    result.append(", anything: ");
    result.append(anything);
    result.append(", empty: ");
    result.append(empty);
    result.append(", exception: ");
    result.append(exception);
    result.append(')');
    return result.toString();
  }

} //MatchImpl
