/**
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kactors.kactors.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kactors.kactors.ConceptDeclaration;
import org.integratedmodelling.kactors.kactors.KactorsPackage;
import org.integratedmodelling.kactors.kactors.ObservableSemantics;
import org.integratedmodelling.kactors.kactors.Quantity;
import org.integratedmodelling.kactors.kactors.ValueOperator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Value Operator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueOperatorImpl#getModifier <em>Modifier</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueOperatorImpl#getDownTo <em>Down To</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueOperatorImpl#getComparisonValue <em>Comparison Value</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueOperatorImpl#getComparisonQuantity <em>Comparison Quantity</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueOperatorImpl#getComparisonConcept <em>Comparison Concept</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueOperatorImpl#getComparisonObservable <em>Comparison Observable</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueOperatorImpl#getTotal <em>Total</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueOperatorImpl#getAveraged <em>Averaged</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ValueOperatorImpl#getSummed <em>Summed</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ValueOperatorImpl extends MinimalEObjectImpl.Container implements ValueOperator
{
  /**
   * The default value of the '{@link #getModifier() <em>Modifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifier()
   * @generated
   * @ordered
   */
  protected static final String MODIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getModifier() <em>Modifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifier()
   * @generated
   * @ordered
   */
  protected String modifier = MODIFIER_EDEFAULT;

  /**
   * The default value of the '{@link #getDownTo() <em>Down To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDownTo()
   * @generated
   * @ordered
   */
  protected static final String DOWN_TO_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDownTo() <em>Down To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDownTo()
   * @generated
   * @ordered
   */
  protected String downTo = DOWN_TO_EDEFAULT;

  /**
   * The cached value of the '{@link #getComparisonValue() <em>Comparison Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisonValue()
   * @generated
   * @ordered
   */
  protected org.integratedmodelling.kactors.kactors.Number comparisonValue;

  /**
   * The cached value of the '{@link #getComparisonQuantity() <em>Comparison Quantity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisonQuantity()
   * @generated
   * @ordered
   */
  protected Quantity comparisonQuantity;

  /**
   * The cached value of the '{@link #getComparisonConcept() <em>Comparison Concept</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisonConcept()
   * @generated
   * @ordered
   */
  protected EList<ConceptDeclaration> comparisonConcept;

  /**
   * The cached value of the '{@link #getComparisonObservable() <em>Comparison Observable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisonObservable()
   * @generated
   * @ordered
   */
  protected ObservableSemantics comparisonObservable;

  /**
   * The default value of the '{@link #getTotal() <em>Total</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTotal()
   * @generated
   * @ordered
   */
  protected static final String TOTAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTotal() <em>Total</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTotal()
   * @generated
   * @ordered
   */
  protected String total = TOTAL_EDEFAULT;

  /**
   * The default value of the '{@link #getAveraged() <em>Averaged</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAveraged()
   * @generated
   * @ordered
   */
  protected static final String AVERAGED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAveraged() <em>Averaged</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAveraged()
   * @generated
   * @ordered
   */
  protected String averaged = AVERAGED_EDEFAULT;

  /**
   * The default value of the '{@link #getSummed() <em>Summed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSummed()
   * @generated
   * @ordered
   */
  protected static final String SUMMED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSummed() <em>Summed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSummed()
   * @generated
   * @ordered
   */
  protected String summed = SUMMED_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ValueOperatorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KactorsPackage.Literals.VALUE_OPERATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getModifier()
  {
    return modifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModifier(String newModifier)
  {
    String oldModifier = modifier;
    modifier = newModifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__MODIFIER, oldModifier, modifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDownTo()
  {
    return downTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDownTo(String newDownTo)
  {
    String oldDownTo = downTo;
    downTo = newDownTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__DOWN_TO, oldDownTo, downTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.integratedmodelling.kactors.kactors.Number getComparisonValue()
  {
    return comparisonValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComparisonValue(org.integratedmodelling.kactors.kactors.Number newComparisonValue, NotificationChain msgs)
  {
    org.integratedmodelling.kactors.kactors.Number oldComparisonValue = comparisonValue;
    comparisonValue = newComparisonValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__COMPARISON_VALUE, oldComparisonValue, newComparisonValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparisonValue(org.integratedmodelling.kactors.kactors.Number newComparisonValue)
  {
    if (newComparisonValue != comparisonValue)
    {
      NotificationChain msgs = null;
      if (comparisonValue != null)
        msgs = ((InternalEObject)comparisonValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE_OPERATOR__COMPARISON_VALUE, null, msgs);
      if (newComparisonValue != null)
        msgs = ((InternalEObject)newComparisonValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE_OPERATOR__COMPARISON_VALUE, null, msgs);
      msgs = basicSetComparisonValue(newComparisonValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__COMPARISON_VALUE, newComparisonValue, newComparisonValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quantity getComparisonQuantity()
  {
    return comparisonQuantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComparisonQuantity(Quantity newComparisonQuantity, NotificationChain msgs)
  {
    Quantity oldComparisonQuantity = comparisonQuantity;
    comparisonQuantity = newComparisonQuantity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__COMPARISON_QUANTITY, oldComparisonQuantity, newComparisonQuantity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparisonQuantity(Quantity newComparisonQuantity)
  {
    if (newComparisonQuantity != comparisonQuantity)
    {
      NotificationChain msgs = null;
      if (comparisonQuantity != null)
        msgs = ((InternalEObject)comparisonQuantity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE_OPERATOR__COMPARISON_QUANTITY, null, msgs);
      if (newComparisonQuantity != null)
        msgs = ((InternalEObject)newComparisonQuantity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE_OPERATOR__COMPARISON_QUANTITY, null, msgs);
      msgs = basicSetComparisonQuantity(newComparisonQuantity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__COMPARISON_QUANTITY, newComparisonQuantity, newComparisonQuantity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConceptDeclaration> getComparisonConcept()
  {
    if (comparisonConcept == null)
    {
      comparisonConcept = new EObjectContainmentEList<ConceptDeclaration>(ConceptDeclaration.class, this, KactorsPackage.VALUE_OPERATOR__COMPARISON_CONCEPT);
    }
    return comparisonConcept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObservableSemantics getComparisonObservable()
  {
    return comparisonObservable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComparisonObservable(ObservableSemantics newComparisonObservable, NotificationChain msgs)
  {
    ObservableSemantics oldComparisonObservable = comparisonObservable;
    comparisonObservable = newComparisonObservable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__COMPARISON_OBSERVABLE, oldComparisonObservable, newComparisonObservable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparisonObservable(ObservableSemantics newComparisonObservable)
  {
    if (newComparisonObservable != comparisonObservable)
    {
      NotificationChain msgs = null;
      if (comparisonObservable != null)
        msgs = ((InternalEObject)comparisonObservable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE_OPERATOR__COMPARISON_OBSERVABLE, null, msgs);
      if (newComparisonObservable != null)
        msgs = ((InternalEObject)newComparisonObservable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.VALUE_OPERATOR__COMPARISON_OBSERVABLE, null, msgs);
      msgs = basicSetComparisonObservable(newComparisonObservable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__COMPARISON_OBSERVABLE, newComparisonObservable, newComparisonObservable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTotal()
  {
    return total;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTotal(String newTotal)
  {
    String oldTotal = total;
    total = newTotal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__TOTAL, oldTotal, total));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAveraged()
  {
    return averaged;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAveraged(String newAveraged)
  {
    String oldAveraged = averaged;
    averaged = newAveraged;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__AVERAGED, oldAveraged, averaged));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSummed()
  {
    return summed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSummed(String newSummed)
  {
    String oldSummed = summed;
    summed = newSummed;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.VALUE_OPERATOR__SUMMED, oldSummed, summed));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_VALUE:
        return basicSetComparisonValue(null, msgs);
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_QUANTITY:
        return basicSetComparisonQuantity(null, msgs);
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_CONCEPT:
        return ((InternalEList<?>)getComparisonConcept()).basicRemove(otherEnd, msgs);
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_OBSERVABLE:
        return basicSetComparisonObservable(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KactorsPackage.VALUE_OPERATOR__MODIFIER:
        return getModifier();
      case KactorsPackage.VALUE_OPERATOR__DOWN_TO:
        return getDownTo();
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_VALUE:
        return getComparisonValue();
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_QUANTITY:
        return getComparisonQuantity();
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_CONCEPT:
        return getComparisonConcept();
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_OBSERVABLE:
        return getComparisonObservable();
      case KactorsPackage.VALUE_OPERATOR__TOTAL:
        return getTotal();
      case KactorsPackage.VALUE_OPERATOR__AVERAGED:
        return getAveraged();
      case KactorsPackage.VALUE_OPERATOR__SUMMED:
        return getSummed();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KactorsPackage.VALUE_OPERATOR__MODIFIER:
        setModifier((String)newValue);
        return;
      case KactorsPackage.VALUE_OPERATOR__DOWN_TO:
        setDownTo((String)newValue);
        return;
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_VALUE:
        setComparisonValue((org.integratedmodelling.kactors.kactors.Number)newValue);
        return;
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_QUANTITY:
        setComparisonQuantity((Quantity)newValue);
        return;
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_CONCEPT:
        getComparisonConcept().clear();
        getComparisonConcept().addAll((Collection<? extends ConceptDeclaration>)newValue);
        return;
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_OBSERVABLE:
        setComparisonObservable((ObservableSemantics)newValue);
        return;
      case KactorsPackage.VALUE_OPERATOR__TOTAL:
        setTotal((String)newValue);
        return;
      case KactorsPackage.VALUE_OPERATOR__AVERAGED:
        setAveraged((String)newValue);
        return;
      case KactorsPackage.VALUE_OPERATOR__SUMMED:
        setSummed((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.VALUE_OPERATOR__MODIFIER:
        setModifier(MODIFIER_EDEFAULT);
        return;
      case KactorsPackage.VALUE_OPERATOR__DOWN_TO:
        setDownTo(DOWN_TO_EDEFAULT);
        return;
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_VALUE:
        setComparisonValue((org.integratedmodelling.kactors.kactors.Number)null);
        return;
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_QUANTITY:
        setComparisonQuantity((Quantity)null);
        return;
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_CONCEPT:
        getComparisonConcept().clear();
        return;
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_OBSERVABLE:
        setComparisonObservable((ObservableSemantics)null);
        return;
      case KactorsPackage.VALUE_OPERATOR__TOTAL:
        setTotal(TOTAL_EDEFAULT);
        return;
      case KactorsPackage.VALUE_OPERATOR__AVERAGED:
        setAveraged(AVERAGED_EDEFAULT);
        return;
      case KactorsPackage.VALUE_OPERATOR__SUMMED:
        setSummed(SUMMED_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.VALUE_OPERATOR__MODIFIER:
        return MODIFIER_EDEFAULT == null ? modifier != null : !MODIFIER_EDEFAULT.equals(modifier);
      case KactorsPackage.VALUE_OPERATOR__DOWN_TO:
        return DOWN_TO_EDEFAULT == null ? downTo != null : !DOWN_TO_EDEFAULT.equals(downTo);
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_VALUE:
        return comparisonValue != null;
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_QUANTITY:
        return comparisonQuantity != null;
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_CONCEPT:
        return comparisonConcept != null && !comparisonConcept.isEmpty();
      case KactorsPackage.VALUE_OPERATOR__COMPARISON_OBSERVABLE:
        return comparisonObservable != null;
      case KactorsPackage.VALUE_OPERATOR__TOTAL:
        return TOTAL_EDEFAULT == null ? total != null : !TOTAL_EDEFAULT.equals(total);
      case KactorsPackage.VALUE_OPERATOR__AVERAGED:
        return AVERAGED_EDEFAULT == null ? averaged != null : !AVERAGED_EDEFAULT.equals(averaged);
      case KactorsPackage.VALUE_OPERATOR__SUMMED:
        return SUMMED_EDEFAULT == null ? summed != null : !SUMMED_EDEFAULT.equals(summed);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (modifier: ");
    result.append(modifier);
    result.append(", downTo: ");
    result.append(downTo);
    result.append(", total: ");
    result.append(total);
    result.append(", averaged: ");
    result.append(averaged);
    result.append(", summed: ");
    result.append(summed);
    result.append(')');
    return result.toString();
  }

} //ValueOperatorImpl
