/**
 * generated by Xtext 2.33.0
 */
package org.integratedmodelling.kactors.kactors.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kactors.kactors.Currency;
import org.integratedmodelling.kactors.kactors.KactorsPackage;
import org.integratedmodelling.kactors.kactors.Quantity;
import org.integratedmodelling.kactors.kactors.Unit;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Quantity</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.QuantityImpl#getValue <em>Value</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.QuantityImpl#isOver <em>Over</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.QuantityImpl#getUnit <em>Unit</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.QuantityImpl#getCurrency <em>Currency</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QuantityImpl extends MinimalEObjectImpl.Container implements Quantity
{
  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected org.integratedmodelling.kactors.kactors.Number value;

  /**
   * The default value of the '{@link #isOver() <em>Over</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOver()
   * @generated
   * @ordered
   */
  protected static final boolean OVER_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOver() <em>Over</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOver()
   * @generated
   * @ordered
   */
  protected boolean over = OVER_EDEFAULT;

  /**
   * The cached value of the '{@link #getUnit() <em>Unit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected Unit unit;

  /**
   * The cached value of the '{@link #getCurrency() <em>Currency</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCurrency()
   * @generated
   * @ordered
   */
  protected Currency currency;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QuantityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KactorsPackage.Literals.QUANTITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.integratedmodelling.kactors.kactors.Number getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValue(org.integratedmodelling.kactors.kactors.Number newValue, NotificationChain msgs)
  {
    org.integratedmodelling.kactors.kactors.Number oldValue = value;
    value = newValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.QUANTITY__VALUE, oldValue, newValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(org.integratedmodelling.kactors.kactors.Number newValue)
  {
    if (newValue != value)
    {
      NotificationChain msgs = null;
      if (value != null)
        msgs = ((InternalEObject)value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.QUANTITY__VALUE, null, msgs);
      if (newValue != null)
        msgs = ((InternalEObject)newValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.QUANTITY__VALUE, null, msgs);
      msgs = basicSetValue(newValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.QUANTITY__VALUE, newValue, newValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOver()
  {
    return over;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOver(boolean newOver)
  {
    boolean oldOver = over;
    over = newOver;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.QUANTITY__OVER, oldOver, over));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unit getUnit()
  {
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnit(Unit newUnit, NotificationChain msgs)
  {
    Unit oldUnit = unit;
    unit = newUnit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.QUANTITY__UNIT, oldUnit, newUnit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnit(Unit newUnit)
  {
    if (newUnit != unit)
    {
      NotificationChain msgs = null;
      if (unit != null)
        msgs = ((InternalEObject)unit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.QUANTITY__UNIT, null, msgs);
      if (newUnit != null)
        msgs = ((InternalEObject)newUnit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.QUANTITY__UNIT, null, msgs);
      msgs = basicSetUnit(newUnit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.QUANTITY__UNIT, newUnit, newUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Currency getCurrency()
  {
    return currency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCurrency(Currency newCurrency, NotificationChain msgs)
  {
    Currency oldCurrency = currency;
    currency = newCurrency;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.QUANTITY__CURRENCY, oldCurrency, newCurrency);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCurrency(Currency newCurrency)
  {
    if (newCurrency != currency)
    {
      NotificationChain msgs = null;
      if (currency != null)
        msgs = ((InternalEObject)currency).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.QUANTITY__CURRENCY, null, msgs);
      if (newCurrency != null)
        msgs = ((InternalEObject)newCurrency).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.QUANTITY__CURRENCY, null, msgs);
      msgs = basicSetCurrency(newCurrency, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.QUANTITY__CURRENCY, newCurrency, newCurrency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KactorsPackage.QUANTITY__VALUE:
        return basicSetValue(null, msgs);
      case KactorsPackage.QUANTITY__UNIT:
        return basicSetUnit(null, msgs);
      case KactorsPackage.QUANTITY__CURRENCY:
        return basicSetCurrency(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KactorsPackage.QUANTITY__VALUE:
        return getValue();
      case KactorsPackage.QUANTITY__OVER:
        return isOver();
      case KactorsPackage.QUANTITY__UNIT:
        return getUnit();
      case KactorsPackage.QUANTITY__CURRENCY:
        return getCurrency();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KactorsPackage.QUANTITY__VALUE:
        setValue((org.integratedmodelling.kactors.kactors.Number)newValue);
        return;
      case KactorsPackage.QUANTITY__OVER:
        setOver((Boolean)newValue);
        return;
      case KactorsPackage.QUANTITY__UNIT:
        setUnit((Unit)newValue);
        return;
      case KactorsPackage.QUANTITY__CURRENCY:
        setCurrency((Currency)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.QUANTITY__VALUE:
        setValue((org.integratedmodelling.kactors.kactors.Number)null);
        return;
      case KactorsPackage.QUANTITY__OVER:
        setOver(OVER_EDEFAULT);
        return;
      case KactorsPackage.QUANTITY__UNIT:
        setUnit((Unit)null);
        return;
      case KactorsPackage.QUANTITY__CURRENCY:
        setCurrency((Currency)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.QUANTITY__VALUE:
        return value != null;
      case KactorsPackage.QUANTITY__OVER:
        return over != OVER_EDEFAULT;
      case KactorsPackage.QUANTITY__UNIT:
        return unit != null;
      case KactorsPackage.QUANTITY__CURRENCY:
        return currency != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (over: ");
    result.append(over);
    result.append(')');
    return result.toString();
  }

} //QuantityImpl
