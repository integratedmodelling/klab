/**
 * generated by Xtext 2.33.0
 */
package org.integratedmodelling.kactors.kactors.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kactors.kactors.ConceptDeclaration;
import org.integratedmodelling.kactors.kactors.Currency;
import org.integratedmodelling.kactors.kactors.KactorsPackage;
import org.integratedmodelling.kactors.kactors.ObservableSemantics;
import org.integratedmodelling.kactors.kactors.Unit;
import org.integratedmodelling.kactors.kactors.ValueOperator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Observable Semantics</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ObservableSemanticsImpl#getDeclaration <em>Declaration</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ObservableSemanticsImpl#getUnit <em>Unit</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ObservableSemanticsImpl#getCurrency <em>Currency</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ObservableSemanticsImpl#getValueOperators <em>Value Operators</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ObservableSemanticsImpl#isOptional <em>Optional</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ObservableSemanticsImpl#getFrom <em>From</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ObservableSemanticsImpl#getTo <em>To</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.ObservableSemanticsImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ObservableSemanticsImpl extends MinimalEObjectImpl.Container implements ObservableSemantics
{
  /**
   * The cached value of the '{@link #getDeclaration() <em>Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclaration()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration declaration;

  /**
   * The cached value of the '{@link #getUnit() <em>Unit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected Unit unit;

  /**
   * The cached value of the '{@link #getCurrency() <em>Currency</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCurrency()
   * @generated
   * @ordered
   */
  protected Currency currency;

  /**
   * The cached value of the '{@link #getValueOperators() <em>Value Operators</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueOperators()
   * @generated
   * @ordered
   */
  protected EList<ValueOperator> valueOperators;

  /**
   * The default value of the '{@link #isOptional() <em>Optional</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOptional()
   * @generated
   * @ordered
   */
  protected static final boolean OPTIONAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOptional() <em>Optional</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOptional()
   * @generated
   * @ordered
   */
  protected boolean optional = OPTIONAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getFrom() <em>From</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrom()
   * @generated
   * @ordered
   */
  protected org.integratedmodelling.kactors.kactors.Number from;

  /**
   * The cached value of the '{@link #getTo() <em>To</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTo()
   * @generated
   * @ordered
   */
  protected org.integratedmodelling.kactors.kactors.Number to;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObservableSemanticsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KactorsPackage.Literals.OBSERVABLE_SEMANTICS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptDeclaration getDeclaration()
  {
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeclaration(ConceptDeclaration newDeclaration, NotificationChain msgs)
  {
    ConceptDeclaration oldDeclaration = declaration;
    declaration = newDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__DECLARATION, oldDeclaration, newDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeclaration(ConceptDeclaration newDeclaration)
  {
    if (newDeclaration != declaration)
    {
      NotificationChain msgs = null;
      if (declaration != null)
        msgs = ((InternalEObject)declaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.OBSERVABLE_SEMANTICS__DECLARATION, null, msgs);
      if (newDeclaration != null)
        msgs = ((InternalEObject)newDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.OBSERVABLE_SEMANTICS__DECLARATION, null, msgs);
      msgs = basicSetDeclaration(newDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__DECLARATION, newDeclaration, newDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unit getUnit()
  {
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnit(Unit newUnit, NotificationChain msgs)
  {
    Unit oldUnit = unit;
    unit = newUnit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__UNIT, oldUnit, newUnit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnit(Unit newUnit)
  {
    if (newUnit != unit)
    {
      NotificationChain msgs = null;
      if (unit != null)
        msgs = ((InternalEObject)unit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.OBSERVABLE_SEMANTICS__UNIT, null, msgs);
      if (newUnit != null)
        msgs = ((InternalEObject)newUnit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.OBSERVABLE_SEMANTICS__UNIT, null, msgs);
      msgs = basicSetUnit(newUnit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__UNIT, newUnit, newUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Currency getCurrency()
  {
    return currency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCurrency(Currency newCurrency, NotificationChain msgs)
  {
    Currency oldCurrency = currency;
    currency = newCurrency;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__CURRENCY, oldCurrency, newCurrency);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCurrency(Currency newCurrency)
  {
    if (newCurrency != currency)
    {
      NotificationChain msgs = null;
      if (currency != null)
        msgs = ((InternalEObject)currency).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.OBSERVABLE_SEMANTICS__CURRENCY, null, msgs);
      if (newCurrency != null)
        msgs = ((InternalEObject)newCurrency).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.OBSERVABLE_SEMANTICS__CURRENCY, null, msgs);
      msgs = basicSetCurrency(newCurrency, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__CURRENCY, newCurrency, newCurrency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ValueOperator> getValueOperators()
  {
    if (valueOperators == null)
    {
      valueOperators = new EObjectContainmentEList<ValueOperator>(ValueOperator.class, this, KactorsPackage.OBSERVABLE_SEMANTICS__VALUE_OPERATORS);
    }
    return valueOperators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOptional()
  {
    return optional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOptional(boolean newOptional)
  {
    boolean oldOptional = optional;
    optional = newOptional;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__OPTIONAL, oldOptional, optional));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.integratedmodelling.kactors.kactors.Number getFrom()
  {
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFrom(org.integratedmodelling.kactors.kactors.Number newFrom, NotificationChain msgs)
  {
    org.integratedmodelling.kactors.kactors.Number oldFrom = from;
    from = newFrom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__FROM, oldFrom, newFrom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFrom(org.integratedmodelling.kactors.kactors.Number newFrom)
  {
    if (newFrom != from)
    {
      NotificationChain msgs = null;
      if (from != null)
        msgs = ((InternalEObject)from).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.OBSERVABLE_SEMANTICS__FROM, null, msgs);
      if (newFrom != null)
        msgs = ((InternalEObject)newFrom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.OBSERVABLE_SEMANTICS__FROM, null, msgs);
      msgs = basicSetFrom(newFrom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__FROM, newFrom, newFrom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.integratedmodelling.kactors.kactors.Number getTo()
  {
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTo(org.integratedmodelling.kactors.kactors.Number newTo, NotificationChain msgs)
  {
    org.integratedmodelling.kactors.kactors.Number oldTo = to;
    to = newTo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__TO, oldTo, newTo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTo(org.integratedmodelling.kactors.kactors.Number newTo)
  {
    if (newTo != to)
    {
      NotificationChain msgs = null;
      if (to != null)
        msgs = ((InternalEObject)to).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.OBSERVABLE_SEMANTICS__TO, null, msgs);
      if (newTo != null)
        msgs = ((InternalEObject)newTo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.OBSERVABLE_SEMANTICS__TO, null, msgs);
      msgs = basicSetTo(newTo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__TO, newTo, newTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.OBSERVABLE_SEMANTICS__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KactorsPackage.OBSERVABLE_SEMANTICS__DECLARATION:
        return basicSetDeclaration(null, msgs);
      case KactorsPackage.OBSERVABLE_SEMANTICS__UNIT:
        return basicSetUnit(null, msgs);
      case KactorsPackage.OBSERVABLE_SEMANTICS__CURRENCY:
        return basicSetCurrency(null, msgs);
      case KactorsPackage.OBSERVABLE_SEMANTICS__VALUE_OPERATORS:
        return ((InternalEList<?>)getValueOperators()).basicRemove(otherEnd, msgs);
      case KactorsPackage.OBSERVABLE_SEMANTICS__FROM:
        return basicSetFrom(null, msgs);
      case KactorsPackage.OBSERVABLE_SEMANTICS__TO:
        return basicSetTo(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KactorsPackage.OBSERVABLE_SEMANTICS__DECLARATION:
        return getDeclaration();
      case KactorsPackage.OBSERVABLE_SEMANTICS__UNIT:
        return getUnit();
      case KactorsPackage.OBSERVABLE_SEMANTICS__CURRENCY:
        return getCurrency();
      case KactorsPackage.OBSERVABLE_SEMANTICS__VALUE_OPERATORS:
        return getValueOperators();
      case KactorsPackage.OBSERVABLE_SEMANTICS__OPTIONAL:
        return isOptional();
      case KactorsPackage.OBSERVABLE_SEMANTICS__FROM:
        return getFrom();
      case KactorsPackage.OBSERVABLE_SEMANTICS__TO:
        return getTo();
      case KactorsPackage.OBSERVABLE_SEMANTICS__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KactorsPackage.OBSERVABLE_SEMANTICS__DECLARATION:
        setDeclaration((ConceptDeclaration)newValue);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__UNIT:
        setUnit((Unit)newValue);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__CURRENCY:
        setCurrency((Currency)newValue);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__VALUE_OPERATORS:
        getValueOperators().clear();
        getValueOperators().addAll((Collection<? extends ValueOperator>)newValue);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__OPTIONAL:
        setOptional((Boolean)newValue);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__FROM:
        setFrom((org.integratedmodelling.kactors.kactors.Number)newValue);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__TO:
        setTo((org.integratedmodelling.kactors.kactors.Number)newValue);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__NAME:
        setName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.OBSERVABLE_SEMANTICS__DECLARATION:
        setDeclaration((ConceptDeclaration)null);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__UNIT:
        setUnit((Unit)null);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__CURRENCY:
        setCurrency((Currency)null);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__VALUE_OPERATORS:
        getValueOperators().clear();
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__OPTIONAL:
        setOptional(OPTIONAL_EDEFAULT);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__FROM:
        setFrom((org.integratedmodelling.kactors.kactors.Number)null);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__TO:
        setTo((org.integratedmodelling.kactors.kactors.Number)null);
        return;
      case KactorsPackage.OBSERVABLE_SEMANTICS__NAME:
        setName(NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.OBSERVABLE_SEMANTICS__DECLARATION:
        return declaration != null;
      case KactorsPackage.OBSERVABLE_SEMANTICS__UNIT:
        return unit != null;
      case KactorsPackage.OBSERVABLE_SEMANTICS__CURRENCY:
        return currency != null;
      case KactorsPackage.OBSERVABLE_SEMANTICS__VALUE_OPERATORS:
        return valueOperators != null && !valueOperators.isEmpty();
      case KactorsPackage.OBSERVABLE_SEMANTICS__OPTIONAL:
        return optional != OPTIONAL_EDEFAULT;
      case KactorsPackage.OBSERVABLE_SEMANTICS__FROM:
        return from != null;
      case KactorsPackage.OBSERVABLE_SEMANTICS__TO:
        return to != null;
      case KactorsPackage.OBSERVABLE_SEMANTICS__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (optional: ");
    result.append(optional);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ObservableSemanticsImpl
