/*
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kactors.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KactorsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPreambleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPreamblePreambleParserRuleCall_1_0 = (RuleCall)cPreambleAssignment_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionsAssignment_2.eContents().get(0);
		
		//Model: {Model}
		//    (preamble=Preamble)?
		//    definitions+=Definition*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model}
		//   (preamble=Preamble)?
		//   definitions+=Definition*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//(preamble=Preamble)?
		public Assignment getPreambleAssignment_1() { return cPreambleAssignment_1; }
		
		//Preamble
		public RuleCall getPreamblePreambleParserRuleCall_1_0() { return cPreamblePreambleParserRuleCall_1_0; }
		
		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_2_0() { return cDefinitionsDefinitionParserRuleCall_2_0; }
	}
	public class PreambleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Preamble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreambleAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Assignment cPublicAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPublicPublicKeyword_1_0_0_0_0 = (Keyword)cPublicAssignment_1_0_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Assignment cMobileAssignment_1_0_0_1_0 = (Assignment)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cMobileMobileKeyword_1_0_0_1_0_0 = (Keyword)cMobileAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cDesktopAssignment_1_0_0_1_1 = (Assignment)cAlternatives_1_0_0_1.eContents().get(1);
		private final Keyword cDesktopDesktopKeyword_1_0_0_1_1_0 = (Keyword)cDesktopAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cWebAssignment_1_0_0_1_2 = (Assignment)cAlternatives_1_0_0_1.eContents().get(2);
		private final Keyword cWebWebKeyword_1_0_0_1_2_0 = (Keyword)cWebAssignment_1_0_0_1_2.eContents().get(0);
		private final Assignment cAppAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final Keyword cAppAppKeyword_1_0_0_2_0 = (Keyword)cAppAssignment_1_0_0_2.eContents().get(0);
		private final Assignment cTestAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cTestTestcaseKeyword_1_0_1_0 = (Keyword)cTestAssignment_1_0_1.eContents().get(0);
		private final Assignment cScriptAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final Keyword cScriptScriptKeyword_1_0_2_0 = (Keyword)cScriptAssignment_1_0_2.eContents().get(0);
		private final Assignment cTaskAssignment_1_0_3 = (Assignment)cAlternatives_1_0.eContents().get(3);
		private final Keyword cTaskTaskKeyword_1_0_3_0 = (Keyword)cTaskAssignment_1_0_3.eContents().get(0);
		private final Assignment cComponentAssignment_1_0_4 = (Assignment)cAlternatives_1_0.eContents().get(4);
		private final Keyword cComponentComponentKeyword_1_0_4_0 = (Keyword)cComponentAssignment_1_0_4.eContents().get(0);
		private final Assignment cUserAssignment_1_0_5 = (Assignment)cAlternatives_1_0.eContents().get(5);
		private final Keyword cUserUserKeyword_1_0_5_0 = (Keyword)cUserAssignment_1_0_5.eContents().get(0);
		private final Assignment cLibraryAssignment_1_0_6 = (Assignment)cAlternatives_1_0.eContents().get(6);
		private final Alternatives cLibraryAlternatives_1_0_6_0 = (Alternatives)cLibraryAssignment_1_0_6.eContents().get(0);
		private final Keyword cLibraryTraitKeyword_1_0_6_0_0 = (Keyword)cLibraryAlternatives_1_0_6_0.eContents().get(0);
		private final Keyword cLibraryLibraryKeyword_1_0_6_0_1 = (Keyword)cLibraryAlternatives_1_0_6_0.eContents().get(1);
		private final Assignment cBehaviorAssignment_1_0_7 = (Assignment)cAlternatives_1_0.eContents().get(7);
		private final Alternatives cBehaviorAlternatives_1_0_7_0 = (Alternatives)cBehaviorAssignment_1_0_7.eContents().get(0);
		private final Keyword cBehaviorBehaviorKeyword_1_0_7_0_0 = (Keyword)cBehaviorAlternatives_1_0_7_0.eContents().get(0);
		private final Keyword cBehaviorBehaviourKeyword_1_0_7_0_1 = (Keyword)cBehaviorAlternatives_1_0_7_0.eContents().get(1);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamePathNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cLabelAlternatives_2_0 = (Alternatives)cLabelAssignment_2.eContents().get(0);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cLabelAlternatives_2_0.eContents().get(0);
		private final RuleCall cLabelLOCALIZED_STRING_REFERENCETerminalRuleCall_2_0_1 = (RuleCall)cLabelAlternatives_2_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cImportKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cImportsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cImportsPathNameParserRuleCall_3_0_1_0 = (RuleCall)cImportsAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_0_2 = (Group)cGroup_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Assignment cImportsAssignment_3_0_2_1 = (Assignment)cGroup_3_0_2.eContents().get(1);
		private final RuleCall cImportsPathNameParserRuleCall_3_0_2_1_0 = (RuleCall)cImportsAssignment_3_0_2_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cWorldviewKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cWorldviewAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cWorldviewPathNameParserRuleCall_3_1_1_0 = (RuleCall)cWorldviewAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cObservableKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final Assignment cObservableAssignment_3_2_1_0 = (Assignment)cAlternatives_3_2_1.eContents().get(0);
		private final RuleCall cObservableObservableParserRuleCall_3_2_1_0_0 = (RuleCall)cObservableAssignment_3_2_1_0.eContents().get(0);
		private final Assignment cObservablesAssignment_3_2_1_1 = (Assignment)cAlternatives_3_2_1.eContents().get(1);
		private final RuleCall cObservablesListParserRuleCall_3_2_1_1_0 = (RuleCall)cObservablesAssignment_3_2_1_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cDescriptionKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final Alternatives cDescriptionAlternatives_3_3_1_0 = (Alternatives)cDescriptionAssignment_3_3_1.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_3_1_0_0 = (RuleCall)cDescriptionAlternatives_3_3_1_0.eContents().get(0);
		private final RuleCall cDescriptionLOCALIZED_STRING_REFERENCETerminalRuleCall_3_3_1_0_1 = (RuleCall)cDescriptionAlternatives_3_3_1_0.eContents().get(1);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cPermissionsKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cPermissionsAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final Alternatives cPermissionsAlternatives_3_4_1_0 = (Alternatives)cPermissionsAssignment_3_4_1.eContents().get(0);
		private final RuleCall cPermissionsSTRINGTerminalRuleCall_3_4_1_0_0 = (RuleCall)cPermissionsAlternatives_3_4_1_0.eContents().get(0);
		private final RuleCall cPermissionsLOCALIZED_STRING_REFERENCETerminalRuleCall_3_4_1_0_1 = (RuleCall)cPermissionsAlternatives_3_4_1_0.eContents().get(1);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cAuthorKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cAuthorsAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final Alternatives cAuthorsAlternatives_3_5_1_0 = (Alternatives)cAuthorsAssignment_3_5_1.eContents().get(0);
		private final RuleCall cAuthorsSTRINGTerminalRuleCall_3_5_1_0_0 = (RuleCall)cAuthorsAlternatives_3_5_1_0.eContents().get(0);
		private final RuleCall cAuthorsLOCALIZED_STRING_REFERENCETerminalRuleCall_3_5_1_0_1 = (RuleCall)cAuthorsAlternatives_3_5_1_0.eContents().get(1);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Keyword cStyleKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Alternatives cAlternatives_3_6_1 = (Alternatives)cGroup_3_6.eContents().get(1);
		private final Group cGroup_3_6_1_0 = (Group)cAlternatives_3_6_1.eContents().get(0);
		private final Assignment cStyleAssignment_3_6_1_0_0 = (Assignment)cGroup_3_6_1_0.eContents().get(0);
		private final RuleCall cStylePathNameParserRuleCall_3_6_1_0_0_0 = (RuleCall)cStyleAssignment_3_6_1_0_0.eContents().get(0);
		private final Group cGroup_3_6_1_0_1 = (Group)cGroup_3_6_1_0.eContents().get(1);
		private final Keyword cWithKeyword_3_6_1_0_1_0 = (Keyword)cGroup_3_6_1_0_1.eContents().get(0);
		private final Assignment cInlineStyleAssignment_3_6_1_0_1_1 = (Assignment)cGroup_3_6_1_0_1.eContents().get(1);
		private final RuleCall cInlineStyleMapParserRuleCall_3_6_1_0_1_1_0 = (RuleCall)cInlineStyleAssignment_3_6_1_0_1_1.eContents().get(0);
		private final Assignment cInlineStyleAssignment_3_6_1_1 = (Assignment)cAlternatives_3_6_1.eContents().get(1);
		private final RuleCall cInlineStyleMapParserRuleCall_3_6_1_1_0 = (RuleCall)cInlineStyleAssignment_3_6_1_1.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final Keyword cLogoKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cLogoAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final Alternatives cLogoAlternatives_3_7_1_0 = (Alternatives)cLogoAssignment_3_7_1.eContents().get(0);
		private final RuleCall cLogoPathParserRuleCall_3_7_1_0_0 = (RuleCall)cLogoAlternatives_3_7_1_0.eContents().get(0);
		private final Alternatives cLogoAlternatives_3_7_1_0_1 = (Alternatives)cLogoAlternatives_3_7_1_0.eContents().get(1);
		private final RuleCall cLogoSTRINGTerminalRuleCall_3_7_1_0_1_0 = (RuleCall)cLogoAlternatives_3_7_1_0_1.eContents().get(0);
		private final RuleCall cLogoLOCALIZED_STRING_REFERENCETerminalRuleCall_3_7_1_0_1_1 = (RuleCall)cLogoAlternatives_3_7_1_0_1.eContents().get(1);
		private final Group cGroup_3_8 = (Group)cUnorderedGroup_3.eContents().get(8);
		private final Keyword cVersionKeyword_3_8_0 = (Keyword)cGroup_3_8.eContents().get(0);
		private final Assignment cVersionAssignment_3_8_1 = (Assignment)cGroup_3_8.eContents().get(1);
		private final RuleCall cVersionVersionNumberParserRuleCall_3_8_1_0 = (RuleCall)cVersionAssignment_3_8_1.eContents().get(0);
		private final Group cGroup_3_9 = (Group)cUnorderedGroup_3.eContents().get(9);
		private final Keyword cVersionstringKeyword_3_9_0 = (Keyword)cGroup_3_9.eContents().get(0);
		private final Assignment cVersionStringAssignment_3_9_1 = (Assignment)cGroup_3_9.eContents().get(1);
		private final RuleCall cVersionStringSTRINGTerminalRuleCall_3_9_1_0 = (RuleCall)cVersionStringAssignment_3_9_1.eContents().get(0);
		private final Group cGroup_3_10 = (Group)cUnorderedGroup_3.eContents().get(10);
		private final Keyword cLocaleKeyword_3_10_0 = (Keyword)cGroup_3_10.eContents().get(0);
		private final Alternatives cAlternatives_3_10_1 = (Alternatives)cGroup_3_10.eContents().get(1);
		private final Assignment cLocaleAssignment_3_10_1_0 = (Assignment)cAlternatives_3_10_1.eContents().get(0);
		private final RuleCall cLocaleLOCALETerminalRuleCall_3_10_1_0_0 = (RuleCall)cLocaleAssignment_3_10_1_0.eContents().get(0);
		private final Assignment cLocalesAssignment_3_10_1_1 = (Assignment)cAlternatives_3_10_1.eContents().get(1);
		private final RuleCall cLocalesListParserRuleCall_3_10_1_1_0 = (RuleCall)cLocalesAssignment_3_10_1_1.eContents().get(0);
		private final Group cGroup_3_11 = (Group)cUnorderedGroup_3.eContents().get(11);
		private final Keyword cOutputKeyword_3_11_0 = (Keyword)cGroup_3_11.eContents().get(0);
		private final Assignment cOutputAssignment_3_11_1 = (Assignment)cGroup_3_11.eContents().get(1);
		private final RuleCall cOutputSTRINGTerminalRuleCall_3_11_1_0 = (RuleCall)cOutputAssignment_3_11_1.eContents().get(0);
		private final Group cGroup_3_12 = (Group)cUnorderedGroup_3.eContents().get(12);
		private final Keyword cCreatedKeyword_3_12_0 = (Keyword)cGroup_3_12.eContents().get(0);
		private final Assignment cCreatedAssignment_3_12_1 = (Assignment)cGroup_3_12.eContents().get(1);
		private final RuleCall cCreatedDateParserRuleCall_3_12_1_0 = (RuleCall)cCreatedAssignment_3_12_1.eContents().get(0);
		private final Assignment cCreatecommentAssignment_3_12_2 = (Assignment)cGroup_3_12.eContents().get(2);
		private final RuleCall cCreatecommentSTRINGTerminalRuleCall_3_12_2_0 = (RuleCall)cCreatecommentAssignment_3_12_2.eContents().get(0);
		private final Group cGroup_3_13 = (Group)cUnorderedGroup_3.eContents().get(13);
		private final Keyword cModifiedKeyword_3_13_0 = (Keyword)cGroup_3_13.eContents().get(0);
		private final Assignment cModifiedAssignment_3_13_1 = (Assignment)cGroup_3_13.eContents().get(1);
		private final RuleCall cModifiedDateParserRuleCall_3_13_1_0 = (RuleCall)cModifiedAssignment_3_13_1.eContents().get(0);
		private final Assignment cModcommentAssignment_3_13_2 = (Assignment)cGroup_3_13.eContents().get(2);
		private final RuleCall cModcommentSTRINGTerminalRuleCall_3_13_2_0 = (RuleCall)cModcommentAssignment_3_13_2.eContents().get(0);
		
		//Preamble: {Preamble}
		//    // name, if there, must be first. Can be an actor (which may select an observable),
		//    // or a message library that may be imported by other actors, as long as the type
		//    // is compatible or not given. An app is an actor that represents a
		//    // session, a user represents the user and gets any messages we don't recognize. Apps
		//    // can be called jobs (for automation w/o a view) or testcases (same for testing, in which case they will
		//    // identify test actions with @test and execute them with assertions enabled).
		//    (
		//        (
		//            ((public?='public')? (mobile?='mobile' |  desktop?='desktop' | web?='web')? app?='app') |
		//            // scripts and test cases run in synchronous mode
		//            test?='testcase' |
		//            script?='script' |
		//            // ? syn with script? remove?
		//            task?='task' |
		//            component?='component' |
		//            user?='user' |
		//            library?=('trait'|'library') |
		//            behavior?=('behavior'|'behaviour')
		//        ) name=PathName
		//    )?
		//    label=(STRING|LOCALIZED_STRING_REFERENCE)?
		//    (
		//        ('import' imports+=PathName (',' imports+=PathName)*)? &
		//        ('worldview' worldview=PathName)? &
		//        ('observable' (observable=Observable | observables=List))? &
		//        ('description' description=(STRING|LOCALIZED_STRING_REFERENCE))? &
		//        ('permissions' permissions=(STRING|LOCALIZED_STRING_REFERENCE))? &
		//        ('author' authors+=(STRING|LOCALIZED_STRING_REFERENCE))* &
		//        ('style' (style=PathName ('with' inlineStyle=Map)? | inlineStyle=Map)?)? &
		//        ('logo' logo=(Path|(STRING|LOCALIZED_STRING_REFERENCE)))? &
		//        ('version' version=VersionNumber)? &
		//        ('versionstring' versionString=STRING)? &
		//        ('locale' (locale=LOCALE | locales=List))? &
		//        ('output' output=STRING)? &
		//        ('created' created=Date (createcomment=STRING)?)? &
		//        ('modified' modified=Date (modcomment=STRING)?)?
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Preamble}
		//   // name, if there, must be first. Can be an actor (which may select an observable),
		//   // or a message library that may be imported by other actors, as long as the type
		//   // is compatible or not given. An app is an actor that represents a
		//   // session, a user represents the user and gets any messages we don't recognize. Apps
		//   // can be called jobs (for automation w/o a view) or testcases (same for testing, in which case they will
		//   // identify test actions with @test and execute them with assertions enabled).
		//   (
		//       (
		//           ((public?='public')? (mobile?='mobile' |  desktop?='desktop' | web?='web')? app?='app') |
		//           // scripts and test cases run in synchronous mode
		//           test?='testcase' |
		//           script?='script' |
		//           // ? syn with script? remove?
		//           task?='task' |
		//           component?='component' |
		//           user?='user' |
		//           library?=('trait'|'library') |
		//           behavior?=('behavior'|'behaviour')
		//       ) name=PathName
		//   )?
		//   label=(STRING|LOCALIZED_STRING_REFERENCE)?
		//   (
		//       ('import' imports+=PathName (',' imports+=PathName)*)? &
		//       ('worldview' worldview=PathName)? &
		//       ('observable' (observable=Observable | observables=List))? &
		//       ('description' description=(STRING|LOCALIZED_STRING_REFERENCE))? &
		//       ('permissions' permissions=(STRING|LOCALIZED_STRING_REFERENCE))? &
		//       ('author' authors+=(STRING|LOCALIZED_STRING_REFERENCE))* &
		//       ('style' (style=PathName ('with' inlineStyle=Map)? | inlineStyle=Map)?)? &
		//       ('logo' logo=(Path|(STRING|LOCALIZED_STRING_REFERENCE)))? &
		//       ('version' version=VersionNumber)? &
		//       ('versionstring' versionString=STRING)? &
		//       ('locale' (locale=LOCALE | locales=List))? &
		//       ('output' output=STRING)? &
		//       ('created' created=Date (createcomment=STRING)?)? &
		//       ('modified' modified=Date (modcomment=STRING)?)?
		//   )
		public Group getGroup() { return cGroup; }
		
		//{Preamble}
		public Action getPreambleAction_0() { return cPreambleAction_0; }
		
		//// name, if there, must be first. Can be an actor (which may select an observable),
		//// or a message library that may be imported by other actors, as long as the type
		//// is compatible or not given. An app is an actor that represents a
		//// session, a user represents the user and gets any messages we don't recognize. Apps
		//// can be called jobs (for automation w/o a view) or testcases (same for testing, in which case they will
		//// identify test actions with @test and execute them with assertions enabled).
		//(
		//    (
		//        ((public?='public')? (mobile?='mobile' |  desktop?='desktop' | web?='web')? app?='app') |
		//        // scripts and test cases run in synchronous mode
		//        test?='testcase' |
		//        script?='script' |
		//        // ? syn with script? remove?
		//        task?='task' |
		//        component?='component' |
		//        user?='user' |
		//        library?=('trait'|'library') |
		//        behavior?=('behavior'|'behaviour')
		//    ) name=PathName
		//)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(
		//    ((public?='public')? (mobile?='mobile' |  desktop?='desktop' | web?='web')? app?='app') |
		//    // scripts and test cases run in synchronous mode
		//    test?='testcase' |
		//    script?='script' |
		//    // ? syn with script? remove?
		//    task?='task' |
		//    component?='component' |
		//    user?='user' |
		//    library?=('trait'|'library') |
		//    behavior?=('behavior'|'behaviour')
		//)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//((public?='public')? (mobile?='mobile' |  desktop?='desktop' | web?='web')? app?='app')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//(public?='public')?
		public Assignment getPublicAssignment_1_0_0_0() { return cPublicAssignment_1_0_0_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_1_0_0_0_0() { return cPublicPublicKeyword_1_0_0_0_0; }
		
		//(mobile?='mobile' |  desktop?='desktop' | web?='web')?
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }
		
		//mobile?='mobile'
		public Assignment getMobileAssignment_1_0_0_1_0() { return cMobileAssignment_1_0_0_1_0; }
		
		//'mobile'
		public Keyword getMobileMobileKeyword_1_0_0_1_0_0() { return cMobileMobileKeyword_1_0_0_1_0_0; }
		
		//desktop?='desktop'
		public Assignment getDesktopAssignment_1_0_0_1_1() { return cDesktopAssignment_1_0_0_1_1; }
		
		//'desktop'
		public Keyword getDesktopDesktopKeyword_1_0_0_1_1_0() { return cDesktopDesktopKeyword_1_0_0_1_1_0; }
		
		//web?='web'
		public Assignment getWebAssignment_1_0_0_1_2() { return cWebAssignment_1_0_0_1_2; }
		
		//'web'
		public Keyword getWebWebKeyword_1_0_0_1_2_0() { return cWebWebKeyword_1_0_0_1_2_0; }
		
		//app?='app'
		public Assignment getAppAssignment_1_0_0_2() { return cAppAssignment_1_0_0_2; }
		
		//'app'
		public Keyword getAppAppKeyword_1_0_0_2_0() { return cAppAppKeyword_1_0_0_2_0; }
		
		//// scripts and test cases run in synchronous mode
		//test?='testcase'
		public Assignment getTestAssignment_1_0_1() { return cTestAssignment_1_0_1; }
		
		//'testcase'
		public Keyword getTestTestcaseKeyword_1_0_1_0() { return cTestTestcaseKeyword_1_0_1_0; }
		
		//script?='script'
		public Assignment getScriptAssignment_1_0_2() { return cScriptAssignment_1_0_2; }
		
		//'script'
		public Keyword getScriptScriptKeyword_1_0_2_0() { return cScriptScriptKeyword_1_0_2_0; }
		
		//// ? syn with script? remove?
		//task?='task'
		public Assignment getTaskAssignment_1_0_3() { return cTaskAssignment_1_0_3; }
		
		//'task'
		public Keyword getTaskTaskKeyword_1_0_3_0() { return cTaskTaskKeyword_1_0_3_0; }
		
		//component?='component'
		public Assignment getComponentAssignment_1_0_4() { return cComponentAssignment_1_0_4; }
		
		//'component'
		public Keyword getComponentComponentKeyword_1_0_4_0() { return cComponentComponentKeyword_1_0_4_0; }
		
		//user?='user'
		public Assignment getUserAssignment_1_0_5() { return cUserAssignment_1_0_5; }
		
		//'user'
		public Keyword getUserUserKeyword_1_0_5_0() { return cUserUserKeyword_1_0_5_0; }
		
		//library?=('trait'|'library')
		public Assignment getLibraryAssignment_1_0_6() { return cLibraryAssignment_1_0_6; }
		
		//('trait'|'library')
		public Alternatives getLibraryAlternatives_1_0_6_0() { return cLibraryAlternatives_1_0_6_0; }
		
		//'trait'
		public Keyword getLibraryTraitKeyword_1_0_6_0_0() { return cLibraryTraitKeyword_1_0_6_0_0; }
		
		//'library'
		public Keyword getLibraryLibraryKeyword_1_0_6_0_1() { return cLibraryLibraryKeyword_1_0_6_0_1; }
		
		//behavior?=('behavior'|'behaviour')
		public Assignment getBehaviorAssignment_1_0_7() { return cBehaviorAssignment_1_0_7; }
		
		//('behavior'|'behaviour')
		public Alternatives getBehaviorAlternatives_1_0_7_0() { return cBehaviorAlternatives_1_0_7_0; }
		
		//'behavior'
		public Keyword getBehaviorBehaviorKeyword_1_0_7_0_0() { return cBehaviorBehaviorKeyword_1_0_7_0_0; }
		
		//'behaviour'
		public Keyword getBehaviorBehaviourKeyword_1_0_7_0_1() { return cBehaviorBehaviourKeyword_1_0_7_0_1; }
		
		//name=PathName
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_1_1_0() { return cNamePathNameParserRuleCall_1_1_0; }
		
		//label=(STRING|LOCALIZED_STRING_REFERENCE)?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//(STRING|LOCALIZED_STRING_REFERENCE)
		public Alternatives getLabelAlternatives_2_0() { return cLabelAlternatives_2_0; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0_0() { return cLabelSTRINGTerminalRuleCall_2_0_0; }
		
		//LOCALIZED_STRING_REFERENCE
		public RuleCall getLabelLOCALIZED_STRING_REFERENCETerminalRuleCall_2_0_1() { return cLabelLOCALIZED_STRING_REFERENCETerminalRuleCall_2_0_1; }
		
		//(
		//    ('import' imports+=PathName (',' imports+=PathName)*)? &
		//    ('worldview' worldview=PathName)? &
		//    ('observable' (observable=Observable | observables=List))? &
		//    ('description' description=(STRING|LOCALIZED_STRING_REFERENCE))? &
		//    ('permissions' permissions=(STRING|LOCALIZED_STRING_REFERENCE))? &
		//    ('author' authors+=(STRING|LOCALIZED_STRING_REFERENCE))* &
		//    ('style' (style=PathName ('with' inlineStyle=Map)? | inlineStyle=Map)?)? &
		//    ('logo' logo=(Path|(STRING|LOCALIZED_STRING_REFERENCE)))? &
		//    ('version' version=VersionNumber)? &
		//    ('versionstring' versionString=STRING)? &
		//    ('locale' (locale=LOCALE | locales=List))? &
		//    ('output' output=STRING)? &
		//    ('created' created=Date (createcomment=STRING)?)? &
		//    ('modified' modified=Date (modcomment=STRING)?)?
		//)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('import' imports+=PathName (',' imports+=PathName)*)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'import'
		public Keyword getImportKeyword_3_0_0() { return cImportKeyword_3_0_0; }
		
		//imports+=PathName
		public Assignment getImportsAssignment_3_0_1() { return cImportsAssignment_3_0_1; }
		
		//PathName
		public RuleCall getImportsPathNameParserRuleCall_3_0_1_0() { return cImportsPathNameParserRuleCall_3_0_1_0; }
		
		//(',' imports+=PathName)*
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }
		
		//','
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }
		
		//imports+=PathName
		public Assignment getImportsAssignment_3_0_2_1() { return cImportsAssignment_3_0_2_1; }
		
		//PathName
		public RuleCall getImportsPathNameParserRuleCall_3_0_2_1_0() { return cImportsPathNameParserRuleCall_3_0_2_1_0; }
		
		//('worldview' worldview=PathName)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'worldview'
		public Keyword getWorldviewKeyword_3_1_0() { return cWorldviewKeyword_3_1_0; }
		
		//worldview=PathName
		public Assignment getWorldviewAssignment_3_1_1() { return cWorldviewAssignment_3_1_1; }
		
		//PathName
		public RuleCall getWorldviewPathNameParserRuleCall_3_1_1_0() { return cWorldviewPathNameParserRuleCall_3_1_1_0; }
		
		//('observable' (observable=Observable | observables=List))?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'observable'
		public Keyword getObservableKeyword_3_2_0() { return cObservableKeyword_3_2_0; }
		
		//(observable=Observable | observables=List)
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }
		
		//observable=Observable
		public Assignment getObservableAssignment_3_2_1_0() { return cObservableAssignment_3_2_1_0; }
		
		//Observable
		public RuleCall getObservableObservableParserRuleCall_3_2_1_0_0() { return cObservableObservableParserRuleCall_3_2_1_0_0; }
		
		//observables=List
		public Assignment getObservablesAssignment_3_2_1_1() { return cObservablesAssignment_3_2_1_1; }
		
		//List
		public RuleCall getObservablesListParserRuleCall_3_2_1_1_0() { return cObservablesListParserRuleCall_3_2_1_1_0; }
		
		//('description' description=(STRING|LOCALIZED_STRING_REFERENCE))?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'description'
		public Keyword getDescriptionKeyword_3_3_0() { return cDescriptionKeyword_3_3_0; }
		
		//description=(STRING|LOCALIZED_STRING_REFERENCE)
		public Assignment getDescriptionAssignment_3_3_1() { return cDescriptionAssignment_3_3_1; }
		
		//(STRING|LOCALIZED_STRING_REFERENCE)
		public Alternatives getDescriptionAlternatives_3_3_1_0() { return cDescriptionAlternatives_3_3_1_0; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_3_1_0_0() { return cDescriptionSTRINGTerminalRuleCall_3_3_1_0_0; }
		
		//LOCALIZED_STRING_REFERENCE
		public RuleCall getDescriptionLOCALIZED_STRING_REFERENCETerminalRuleCall_3_3_1_0_1() { return cDescriptionLOCALIZED_STRING_REFERENCETerminalRuleCall_3_3_1_0_1; }
		
		//('permissions' permissions=(STRING|LOCALIZED_STRING_REFERENCE))?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'permissions'
		public Keyword getPermissionsKeyword_3_4_0() { return cPermissionsKeyword_3_4_0; }
		
		//permissions=(STRING|LOCALIZED_STRING_REFERENCE)
		public Assignment getPermissionsAssignment_3_4_1() { return cPermissionsAssignment_3_4_1; }
		
		//(STRING|LOCALIZED_STRING_REFERENCE)
		public Alternatives getPermissionsAlternatives_3_4_1_0() { return cPermissionsAlternatives_3_4_1_0; }
		
		//STRING
		public RuleCall getPermissionsSTRINGTerminalRuleCall_3_4_1_0_0() { return cPermissionsSTRINGTerminalRuleCall_3_4_1_0_0; }
		
		//LOCALIZED_STRING_REFERENCE
		public RuleCall getPermissionsLOCALIZED_STRING_REFERENCETerminalRuleCall_3_4_1_0_1() { return cPermissionsLOCALIZED_STRING_REFERENCETerminalRuleCall_3_4_1_0_1; }
		
		//('author' authors+=(STRING|LOCALIZED_STRING_REFERENCE))*
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'author'
		public Keyword getAuthorKeyword_3_5_0() { return cAuthorKeyword_3_5_0; }
		
		//authors+=(STRING|LOCALIZED_STRING_REFERENCE)
		public Assignment getAuthorsAssignment_3_5_1() { return cAuthorsAssignment_3_5_1; }
		
		//(STRING|LOCALIZED_STRING_REFERENCE)
		public Alternatives getAuthorsAlternatives_3_5_1_0() { return cAuthorsAlternatives_3_5_1_0; }
		
		//STRING
		public RuleCall getAuthorsSTRINGTerminalRuleCall_3_5_1_0_0() { return cAuthorsSTRINGTerminalRuleCall_3_5_1_0_0; }
		
		//LOCALIZED_STRING_REFERENCE
		public RuleCall getAuthorsLOCALIZED_STRING_REFERENCETerminalRuleCall_3_5_1_0_1() { return cAuthorsLOCALIZED_STRING_REFERENCETerminalRuleCall_3_5_1_0_1; }
		
		//('style' (style=PathName ('with' inlineStyle=Map)? | inlineStyle=Map)?)?
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//'style'
		public Keyword getStyleKeyword_3_6_0() { return cStyleKeyword_3_6_0; }
		
		//(style=PathName ('with' inlineStyle=Map)? | inlineStyle=Map)?
		public Alternatives getAlternatives_3_6_1() { return cAlternatives_3_6_1; }
		
		//style=PathName ('with' inlineStyle=Map)?
		public Group getGroup_3_6_1_0() { return cGroup_3_6_1_0; }
		
		//style=PathName
		public Assignment getStyleAssignment_3_6_1_0_0() { return cStyleAssignment_3_6_1_0_0; }
		
		//PathName
		public RuleCall getStylePathNameParserRuleCall_3_6_1_0_0_0() { return cStylePathNameParserRuleCall_3_6_1_0_0_0; }
		
		//('with' inlineStyle=Map)?
		public Group getGroup_3_6_1_0_1() { return cGroup_3_6_1_0_1; }
		
		//'with'
		public Keyword getWithKeyword_3_6_1_0_1_0() { return cWithKeyword_3_6_1_0_1_0; }
		
		//inlineStyle=Map
		public Assignment getInlineStyleAssignment_3_6_1_0_1_1() { return cInlineStyleAssignment_3_6_1_0_1_1; }
		
		//Map
		public RuleCall getInlineStyleMapParserRuleCall_3_6_1_0_1_1_0() { return cInlineStyleMapParserRuleCall_3_6_1_0_1_1_0; }
		
		//inlineStyle=Map
		public Assignment getInlineStyleAssignment_3_6_1_1() { return cInlineStyleAssignment_3_6_1_1; }
		
		//Map
		public RuleCall getInlineStyleMapParserRuleCall_3_6_1_1_0() { return cInlineStyleMapParserRuleCall_3_6_1_1_0; }
		
		//('logo' logo=(Path|(STRING|LOCALIZED_STRING_REFERENCE)))?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'logo'
		public Keyword getLogoKeyword_3_7_0() { return cLogoKeyword_3_7_0; }
		
		//logo=(Path|(STRING|LOCALIZED_STRING_REFERENCE))
		public Assignment getLogoAssignment_3_7_1() { return cLogoAssignment_3_7_1; }
		
		//(Path|(STRING|LOCALIZED_STRING_REFERENCE))
		public Alternatives getLogoAlternatives_3_7_1_0() { return cLogoAlternatives_3_7_1_0; }
		
		//Path
		public RuleCall getLogoPathParserRuleCall_3_7_1_0_0() { return cLogoPathParserRuleCall_3_7_1_0_0; }
		
		//(STRING|LOCALIZED_STRING_REFERENCE)
		public Alternatives getLogoAlternatives_3_7_1_0_1() { return cLogoAlternatives_3_7_1_0_1; }
		
		//STRING
		public RuleCall getLogoSTRINGTerminalRuleCall_3_7_1_0_1_0() { return cLogoSTRINGTerminalRuleCall_3_7_1_0_1_0; }
		
		//LOCALIZED_STRING_REFERENCE
		public RuleCall getLogoLOCALIZED_STRING_REFERENCETerminalRuleCall_3_7_1_0_1_1() { return cLogoLOCALIZED_STRING_REFERENCETerminalRuleCall_3_7_1_0_1_1; }
		
		//('version' version=VersionNumber)?
		public Group getGroup_3_8() { return cGroup_3_8; }
		
		//'version'
		public Keyword getVersionKeyword_3_8_0() { return cVersionKeyword_3_8_0; }
		
		//version=VersionNumber
		public Assignment getVersionAssignment_3_8_1() { return cVersionAssignment_3_8_1; }
		
		//VersionNumber
		public RuleCall getVersionVersionNumberParserRuleCall_3_8_1_0() { return cVersionVersionNumberParserRuleCall_3_8_1_0; }
		
		//('versionstring' versionString=STRING)?
		public Group getGroup_3_9() { return cGroup_3_9; }
		
		//'versionstring'
		public Keyword getVersionstringKeyword_3_9_0() { return cVersionstringKeyword_3_9_0; }
		
		//versionString=STRING
		public Assignment getVersionStringAssignment_3_9_1() { return cVersionStringAssignment_3_9_1; }
		
		//STRING
		public RuleCall getVersionStringSTRINGTerminalRuleCall_3_9_1_0() { return cVersionStringSTRINGTerminalRuleCall_3_9_1_0; }
		
		//('locale' (locale=LOCALE | locales=List))?
		public Group getGroup_3_10() { return cGroup_3_10; }
		
		//'locale'
		public Keyword getLocaleKeyword_3_10_0() { return cLocaleKeyword_3_10_0; }
		
		//(locale=LOCALE | locales=List)
		public Alternatives getAlternatives_3_10_1() { return cAlternatives_3_10_1; }
		
		//locale=LOCALE
		public Assignment getLocaleAssignment_3_10_1_0() { return cLocaleAssignment_3_10_1_0; }
		
		//LOCALE
		public RuleCall getLocaleLOCALETerminalRuleCall_3_10_1_0_0() { return cLocaleLOCALETerminalRuleCall_3_10_1_0_0; }
		
		//locales=List
		public Assignment getLocalesAssignment_3_10_1_1() { return cLocalesAssignment_3_10_1_1; }
		
		//List
		public RuleCall getLocalesListParserRuleCall_3_10_1_1_0() { return cLocalesListParserRuleCall_3_10_1_1_0; }
		
		//('output' output=STRING)?
		public Group getGroup_3_11() { return cGroup_3_11; }
		
		//'output'
		public Keyword getOutputKeyword_3_11_0() { return cOutputKeyword_3_11_0; }
		
		//output=STRING
		public Assignment getOutputAssignment_3_11_1() { return cOutputAssignment_3_11_1; }
		
		//STRING
		public RuleCall getOutputSTRINGTerminalRuleCall_3_11_1_0() { return cOutputSTRINGTerminalRuleCall_3_11_1_0; }
		
		//('created' created=Date (createcomment=STRING)?)?
		public Group getGroup_3_12() { return cGroup_3_12; }
		
		//'created'
		public Keyword getCreatedKeyword_3_12_0() { return cCreatedKeyword_3_12_0; }
		
		//created=Date
		public Assignment getCreatedAssignment_3_12_1() { return cCreatedAssignment_3_12_1; }
		
		//Date
		public RuleCall getCreatedDateParserRuleCall_3_12_1_0() { return cCreatedDateParserRuleCall_3_12_1_0; }
		
		//(createcomment=STRING)?
		public Assignment getCreatecommentAssignment_3_12_2() { return cCreatecommentAssignment_3_12_2; }
		
		//STRING
		public RuleCall getCreatecommentSTRINGTerminalRuleCall_3_12_2_0() { return cCreatecommentSTRINGTerminalRuleCall_3_12_2_0; }
		
		//('modified' modified=Date (modcomment=STRING)?)?
		public Group getGroup_3_13() { return cGroup_3_13; }
		
		//'modified'
		public Keyword getModifiedKeyword_3_13_0() { return cModifiedKeyword_3_13_0; }
		
		//modified=Date
		public Assignment getModifiedAssignment_3_13_1() { return cModifiedAssignment_3_13_1; }
		
		//Date
		public RuleCall getModifiedDateParserRuleCall_3_13_1_0() { return cModifiedDateParserRuleCall_3_13_1_0; }
		
		//(modcomment=STRING)?
		public Assignment getModcommentAssignment_3_13_2() { return cModcommentAssignment_3_13_2; }
		
		//STRING
		public RuleCall getModcommentSTRINGTerminalRuleCall_3_13_2_0() { return cModcommentSTRINGTerminalRuleCall_3_13_2_0; }
	}
	public class TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cConceptKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cListKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMapKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cNumberKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTextKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBooleanKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//TYPE:
		//    'int' |
		//    'concept' |
		//    'list' |
		//    'map' |
		//    'number' |
		//    'text' |
		//    'boolean'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' |
		//'concept' |
		//'list' |
		//'map' |
		//'number' |
		//'text' |
		//'boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'concept'
		public Keyword getConceptKeyword_1() { return cConceptKeyword_1; }
		
		//'list'
		public Keyword getListKeyword_2() { return cListKeyword_2; }
		
		//'map'
		public Keyword getMapKeyword_3() { return cMapKeyword_3; }
		
		//'number'
		public Keyword getNumberKeyword_4() { return cNumberKeyword_4; }
		
		//'text'
		public Keyword getTextKeyword_5() { return cTextKeyword_5; }
		
		//'boolean'
		public Keyword getBooleanKeyword_6() { return cBooleanKeyword_6; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cActionKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cFunctionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cFunctionFunctionKeyword_1_1_0 = (Keyword)cFunctionAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsArgumentDeclarationParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyMessageBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		///*
		// *  Action defines an action in the behavior;
		// *  Actor is an action that creates a "peer" actor, which remains alive until stopped
		// *  and whose "main" is the action body (equivalent to importing another behavior and creating
		// *  the actor using new(behavior);
		// *  Component is an actor that has a view, i.e. can be considered a "widget" with view and
		// *  reactive behavior.
		// *
		// */
		//Definition:
		//    annotations+=Annotation*
		//     ('action' | function?='function') name=LOWERCASE_ID (arguments=ArgumentDeclaration)? ':' body=MessageBody;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation*
		// ('action' | function?='function') name=LOWERCASE_ID (arguments=ArgumentDeclaration)? ':' body=MessageBody
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//('action' | function?='function')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'action'
		public Keyword getActionKeyword_1_0() { return cActionKeyword_1_0; }
		
		//function?='function'
		public Assignment getFunctionAssignment_1_1() { return cFunctionAssignment_1_1; }
		
		//'function'
		public Keyword getFunctionFunctionKeyword_1_1_0() { return cFunctionFunctionKeyword_1_1_0; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_2_0() { return cNameLOWERCASE_IDTerminalRuleCall_2_0; }
		
		//(arguments=ArgumentDeclaration)?
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }
		
		//ArgumentDeclaration
		public RuleCall getArgumentsArgumentDeclarationParserRuleCall_3_0() { return cArgumentsArgumentDeclarationParserRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//body=MessageBody
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//MessageBody
		public RuleCall getBodyMessageBodyParserRuleCall_5_0() { return cBodyMessageBodyParserRuleCall_5_0; }
	}
	public class ArgumentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ArgumentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdsLOWERCASE_IDTerminalRuleCall_2_0_0 = (RuleCall)cIdsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdsLOWERCASE_IDTerminalRuleCall_2_1_1_0 = (RuleCall)cIdsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArgumentDeclaration: {ArgumentDeclaration}
		//    '(' (ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArgumentDeclaration}
		//   '(' (ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{ArgumentDeclaration}
		public Action getArgumentDeclarationAction_0() { return cArgumentDeclarationAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ids+=LOWERCASE_ID
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdsLOWERCASE_IDTerminalRuleCall_2_0_0() { return cIdsLOWERCASE_IDTerminalRuleCall_2_0_0; }
		
		//(',' ids+=LOWERCASE_ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//ids+=LOWERCASE_ID
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getIdsLOWERCASE_IDTerminalRuleCall_2_1_1_0() { return cIdsLOWERCASE_IDTerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MessageBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.MessageBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMessageBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListsStatementListParserRuleCall_1_0 = (RuleCall)cListsAssignment_1.eContents().get(0);
		
		///**
		// * Message body is as many statements of groups we want, ends at the next message or EOF.
		// */
		//MessageBody: {MessageBody} lists+=StatementList*;
		@Override public ParserRule getRule() { return rule; }
		
		//{MessageBody} lists+=StatementList*
		public Group getGroup() { return cGroup; }
		
		//{MessageBody}
		public Action getMessageBodyAction_0() { return cMessageBodyAction_0; }
		
		//lists+=StatementList*
		public Assignment getListsAssignment_1() { return cListsAssignment_1; }
		
		//StatementList
		public RuleCall getListsStatementListParserRuleCall_1_0() { return cListsStatementListParserRuleCall_1_0; }
	}
	public class ActorInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ActorInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBehaviorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBehaviorPathNameParserRuleCall_1_0 = (RuleCall)cBehaviorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActionsActionsParserRuleCall_3_1_0 = (RuleCall)cActionsAssignment_3_1.eContents().get(0);
		private final Assignment cMetadataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetadataMetadataParserRuleCall_4_0 = (RuleCall)cMetadataAssignment_4.eContents().get(0);
		
		//ActorInstantiation:
		//    'create' behavior=PathName ('(' (parameters=ParameterList)? ')')? (':' actions=Actions)? metadata=Metadata?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' behavior=PathName ('(' (parameters=ParameterList)? ')')? (':' actions=Actions)? metadata=Metadata?
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//behavior=PathName
		public Assignment getBehaviorAssignment_1() { return cBehaviorAssignment_1; }
		
		//PathName
		public RuleCall getBehaviorPathNameParserRuleCall_1_0() { return cBehaviorPathNameParserRuleCall_1_0; }
		
		//('(' (parameters=ParameterList)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameters=ParameterList)?
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_1_0() { return cParametersParameterListParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//(':' actions=Actions)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//actions=Actions
		public Assignment getActionsAssignment_3_1() { return cActionsAssignment_3_1; }
		
		//Actions
		public RuleCall getActionsActionsParserRuleCall_3_1_0() { return cActionsActionsParserRuleCall_3_1_0; }
		
		//metadata=Metadata?
		public Assignment getMetadataAssignment_4() { return cMetadataAssignment_4; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_4_0() { return cMetadataMetadataParserRuleCall_4_0; }
	}
	public class MessageCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.MessageCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cMethodCallsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMethodCallsMethodCallParserRuleCall_0_0_0 = (RuleCall)cMethodCallsAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cNameArgPathNameParserRuleCall_1_0_0_0 = (RuleCall)cNameAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_0_1_1_0 = (RuleCall)cParametersAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Assignment cGroupAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cGroupStatementGroupParserRuleCall_1_1_0 = (RuleCall)cGroupAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionsActionsParserRuleCall_2_1_0 = (RuleCall)cActionsAssignment_2_1.eContents().get(0);
		
		//MessageCall:
		//    (methodCalls+=MethodCall '.')* (name=ArgPathName ('(' (parameters=ParameterList)? ')')? |  group=StatementGroup) (':' actions=Actions)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(methodCalls+=MethodCall '.')* (name=ArgPathName ('(' (parameters=ParameterList)? ')')? |  group=StatementGroup) (':' actions=Actions)?
		public Group getGroup() { return cGroup; }
		
		//(methodCalls+=MethodCall '.')*
		public Group getGroup_0() { return cGroup_0; }
		
		//methodCalls+=MethodCall
		public Assignment getMethodCallsAssignment_0_0() { return cMethodCallsAssignment_0_0; }
		
		//MethodCall
		public RuleCall getMethodCallsMethodCallParserRuleCall_0_0_0() { return cMethodCallsMethodCallParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//(name=ArgPathName ('(' (parameters=ParameterList)? ')')? |  group=StatementGroup)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//name=ArgPathName ('(' (parameters=ParameterList)? ')')?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//name=ArgPathName
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }
		
		//ArgPathName
		public RuleCall getNameArgPathNameParserRuleCall_1_0_0_0() { return cNameArgPathNameParserRuleCall_1_0_0_0; }
		
		//('(' (parameters=ParameterList)? ')')?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_1_0() { return cLeftParenthesisKeyword_1_0_1_0; }
		
		//(parameters=ParameterList)?
		public Assignment getParametersAssignment_1_0_1_1() { return cParametersAssignment_1_0_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_0_1_1_0() { return cParametersParameterListParserRuleCall_1_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_1_2() { return cRightParenthesisKeyword_1_0_1_2; }
		
		//group=StatementGroup
		public Assignment getGroupAssignment_1_1() { return cGroupAssignment_1_1; }
		
		//StatementGroup
		public RuleCall getGroupStatementGroupParserRuleCall_1_1_0() { return cGroupStatementGroupParserRuleCall_1_1_0; }
		
		//(':' actions=Actions)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//actions=Actions
		public Assignment getActionsAssignment_2_1() { return cActionsAssignment_2_1; }
		
		//Actions
		public RuleCall getActionsActionsParserRuleCall_2_1_0() { return cActionsActionsParserRuleCall_2_1_0; }
	}
	public class StatementGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.StatementGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyMessageBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMetadataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetadataMetadataParserRuleCall_4_0 = (RuleCall)cMetadataAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionsActionsParserRuleCall_5_1_0 = (RuleCall)cActionsAssignment_5_1.eContents().get(0);
		
		//StatementGroup: {StatementGroup} '(' body=MessageBody? ')' metadata=Metadata? (':' actions=Actions)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementGroup} '(' body=MessageBody? ')' metadata=Metadata? (':' actions=Actions)?
		public Group getGroup() { return cGroup; }
		
		//{StatementGroup}
		public Action getStatementGroupAction_0() { return cStatementGroupAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//body=MessageBody?
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//MessageBody
		public RuleCall getBodyMessageBodyParserRuleCall_2_0() { return cBodyMessageBodyParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//metadata=Metadata?
		public Assignment getMetadataAssignment_4() { return cMetadataAssignment_4; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_4_0() { return cMetadataMetadataParserRuleCall_4_0; }
		
		//(':' actions=Actions)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//actions=Actions
		public Assignment getActionsAssignment_5_1() { return cActionsAssignment_5_1; }
		
		//Actions
		public RuleCall getActionsActionsParserRuleCall_5_1_0() { return cActionsActionsParserRuleCall_5_1_0; }
	}
	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Metadata");
		private final Assignment cPairsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPairsMetadataPairParserRuleCall_0 = (RuleCall)cPairsAssignment.eContents().get(0);
		
		//Metadata:
		//    pairs+=MetadataPair+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pairs+=MetadataPair+
		public Assignment getPairsAssignment() { return cPairsAssignment; }
		
		//MetadataPair
		public RuleCall getPairsMetadataPairParserRuleCall_0() { return cPairsMetadataPairParserRuleCall_0; }
	}
	public class MetadataPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.MetadataPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyKEYTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//MetadataPair:
		//    key=KEY (value=Literal)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key=KEY (value=Literal)?
		public Group getGroup() { return cGroup; }
		
		//key=KEY
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//KEY
		public RuleCall getKeyKEYTerminalRuleCall_0_0() { return cKeyKEYTerminalRuleCall_0_0; }
		
		//(value=Literal)?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_1_0() { return cValueLiteralParserRuleCall_1_0; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstStatementParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Assignment cNextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNextNextStatementParserRuleCall_1_0 = (RuleCall)cNextAssignment_1.eContents().get(0);
		
		////MetadataWithExpr returns Metadata:
		////    pairs+=MetadataPairWithExpr+
		////;
		////
		////MetadataPairWithExpr returns MetadataPair:
		////    key=KEY (value=LiteralWithExpr)?
		////;
		//StatementList:
		//    first=Statement next+=NextStatement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//first=Statement next+=NextStatement*
		public Group getGroup() { return cGroup; }
		
		//first=Statement
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//Statement
		public RuleCall getFirstStatementParserRuleCall_0_0() { return cFirstStatementParserRuleCall_0_0; }
		
		//next+=NextStatement*
		public Assignment getNextAssignment_1() { return cNextAssignment_1; }
		
		//NextStatement
		public RuleCall getNextNextStatementParserRuleCall_1_0() { return cNextNextStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cAssignmentAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cAssignmentAssignmentParserRuleCall_0_0_0 = (RuleCall)cAssignmentAssignment_0_0.eContents().get(0);
		private final Assignment cGroupAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cGroupStatementGroupParserRuleCall_0_1_0 = (RuleCall)cGroupAssignment_0_1.eContents().get(0);
		private final Assignment cInstantiationAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cInstantiationActorInstantiationParserRuleCall_0_2_0 = (RuleCall)cInstantiationAssignment_0_2.eContents().get(0);
		private final Assignment cVerbAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cVerbMessageCallParserRuleCall_0_3_0 = (RuleCall)cVerbAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Assignment cTextAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final RuleCall cTextEMBEDDEDTEXTTerminalRuleCall_0_4_0_0 = (RuleCall)cTextAssignment_0_4_0.eContents().get(0);
		private final Assignment cMetadataAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cMetadataMetadataParserRuleCall_0_4_1_0 = (RuleCall)cMetadataAssignment_0_4_1.eContents().get(0);
		private final Assignment cIfAssignment_0_5 = (Assignment)cAlternatives_0.eContents().get(5);
		private final RuleCall cIfIfStatementParserRuleCall_0_5_0 = (RuleCall)cIfAssignment_0_5.eContents().get(0);
		private final Assignment cWhileAssignment_0_6 = (Assignment)cAlternatives_0.eContents().get(6);
		private final RuleCall cWhileWhileStatementParserRuleCall_0_6_0 = (RuleCall)cWhileAssignment_0_6.eContents().get(0);
		private final Assignment cAssertAssignment_0_7 = (Assignment)cAlternatives_0.eContents().get(7);
		private final RuleCall cAssertAssertStatementParserRuleCall_0_7_0 = (RuleCall)cAssertAssignment_0_7.eContents().get(0);
		private final Assignment cFailAssignment_0_8 = (Assignment)cAlternatives_0.eContents().get(8);
		private final RuleCall cFailFailStatementParserRuleCall_0_8_0 = (RuleCall)cFailAssignment_0_8.eContents().get(0);
		private final Assignment cDoAssignment_0_9 = (Assignment)cAlternatives_0.eContents().get(9);
		private final RuleCall cDoDoStatementParserRuleCall_0_9_0 = (RuleCall)cDoAssignment_0_9.eContents().get(0);
		private final Assignment cBreakAssignment_0_10 = (Assignment)cAlternatives_0.eContents().get(10);
		private final Keyword cBreakBreakKeyword_0_10_0 = (Keyword)cBreakAssignment_0_10.eContents().get(0);
		private final Assignment cForAssignment_0_11 = (Assignment)cAlternatives_0.eContents().get(11);
		private final RuleCall cForForStatementParserRuleCall_0_11_0 = (RuleCall)cForAssignment_0_11.eContents().get(0);
		private final Assignment cValueAssignment_0_12 = (Assignment)cAlternatives_0.eContents().get(12);
		private final RuleCall cValueValueWithMetadataParserRuleCall_0_12_0 = (RuleCall)cValueAssignment_0_12.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagTAGTerminalRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//Statement:
		//    (assignment=Assignment |
		//     group=StatementGroup |
		//     instantiation=ActorInstantiation |
		//     verb=MessageCall |
		//     text=EMBEDDEDTEXT (metadata=Metadata)? |
		//     if=IfStatement |
		//     while=WhileStatement |
		//     assert=AssertStatement |
		//     fail=FailStatement |
		//     do=DoStatement |
		//     break?='break' |
		//     for=ForStatement |
		//     // this means "fire this" or "return this"
		//     value=ValueWithMetadata)
		//     // all statement may be tagged for reference
		//     (tag=TAG)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(assignment=Assignment |
		// group=StatementGroup |
		// instantiation=ActorInstantiation |
		// verb=MessageCall |
		// text=EMBEDDEDTEXT (metadata=Metadata)? |
		// if=IfStatement |
		// while=WhileStatement |
		// assert=AssertStatement |
		// fail=FailStatement |
		// do=DoStatement |
		// break?='break' |
		// for=ForStatement |
		// // this means "fire this" or "return this"
		// value=ValueWithMetadata)
		// // all statement may be tagged for reference
		// (tag=TAG)?
		public Group getGroup() { return cGroup; }
		
		//(assignment=Assignment |
		// group=StatementGroup |
		// instantiation=ActorInstantiation |
		// verb=MessageCall |
		// text=EMBEDDEDTEXT (metadata=Metadata)? |
		// if=IfStatement |
		// while=WhileStatement |
		// assert=AssertStatement |
		// fail=FailStatement |
		// do=DoStatement |
		// break?='break' |
		// for=ForStatement |
		// // this means "fire this" or "return this"
		// value=ValueWithMetadata)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//assignment=Assignment
		public Assignment getAssignmentAssignment_0_0() { return cAssignmentAssignment_0_0; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_0_0_0() { return cAssignmentAssignmentParserRuleCall_0_0_0; }
		
		//group=StatementGroup
		public Assignment getGroupAssignment_0_1() { return cGroupAssignment_0_1; }
		
		//StatementGroup
		public RuleCall getGroupStatementGroupParserRuleCall_0_1_0() { return cGroupStatementGroupParserRuleCall_0_1_0; }
		
		//instantiation=ActorInstantiation
		public Assignment getInstantiationAssignment_0_2() { return cInstantiationAssignment_0_2; }
		
		//ActorInstantiation
		public RuleCall getInstantiationActorInstantiationParserRuleCall_0_2_0() { return cInstantiationActorInstantiationParserRuleCall_0_2_0; }
		
		//verb=MessageCall
		public Assignment getVerbAssignment_0_3() { return cVerbAssignment_0_3; }
		
		//MessageCall
		public RuleCall getVerbMessageCallParserRuleCall_0_3_0() { return cVerbMessageCallParserRuleCall_0_3_0; }
		
		//text=EMBEDDEDTEXT (metadata=Metadata)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//text=EMBEDDEDTEXT
		public Assignment getTextAssignment_0_4_0() { return cTextAssignment_0_4_0; }
		
		//EMBEDDEDTEXT
		public RuleCall getTextEMBEDDEDTEXTTerminalRuleCall_0_4_0_0() { return cTextEMBEDDEDTEXTTerminalRuleCall_0_4_0_0; }
		
		//(metadata=Metadata)?
		public Assignment getMetadataAssignment_0_4_1() { return cMetadataAssignment_0_4_1; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_4_1_0() { return cMetadataMetadataParserRuleCall_0_4_1_0; }
		
		//if=IfStatement
		public Assignment getIfAssignment_0_5() { return cIfAssignment_0_5; }
		
		//IfStatement
		public RuleCall getIfIfStatementParserRuleCall_0_5_0() { return cIfIfStatementParserRuleCall_0_5_0; }
		
		//while=WhileStatement
		public Assignment getWhileAssignment_0_6() { return cWhileAssignment_0_6; }
		
		//WhileStatement
		public RuleCall getWhileWhileStatementParserRuleCall_0_6_0() { return cWhileWhileStatementParserRuleCall_0_6_0; }
		
		//assert=AssertStatement
		public Assignment getAssertAssignment_0_7() { return cAssertAssignment_0_7; }
		
		//AssertStatement
		public RuleCall getAssertAssertStatementParserRuleCall_0_7_0() { return cAssertAssertStatementParserRuleCall_0_7_0; }
		
		//fail=FailStatement
		public Assignment getFailAssignment_0_8() { return cFailAssignment_0_8; }
		
		//FailStatement
		public RuleCall getFailFailStatementParserRuleCall_0_8_0() { return cFailFailStatementParserRuleCall_0_8_0; }
		
		//do=DoStatement
		public Assignment getDoAssignment_0_9() { return cDoAssignment_0_9; }
		
		//DoStatement
		public RuleCall getDoDoStatementParserRuleCall_0_9_0() { return cDoDoStatementParserRuleCall_0_9_0; }
		
		//break?='break'
		public Assignment getBreakAssignment_0_10() { return cBreakAssignment_0_10; }
		
		//'break'
		public Keyword getBreakBreakKeyword_0_10_0() { return cBreakBreakKeyword_0_10_0; }
		
		//for=ForStatement
		public Assignment getForAssignment_0_11() { return cForAssignment_0_11; }
		
		//ForStatement
		public RuleCall getForForStatementParserRuleCall_0_11_0() { return cForForStatementParserRuleCall_0_11_0; }
		
		//// this means "fire this" or "return this"
		//value=ValueWithMetadata
		public Assignment getValueAssignment_0_12() { return cValueAssignment_0_12; }
		
		//ValueWithMetadata
		public RuleCall getValueValueWithMetadataParserRuleCall_0_12_0() { return cValueValueWithMetadataParserRuleCall_0_12_0; }
		
		//// all statement may be tagged for reference
		//(tag=TAG)?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//TAG
		public RuleCall getTagTAGTerminalRuleCall_1_0() { return cTagTAGTerminalRuleCall_1_0; }
	}
	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameArgPathNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//MethodCall returns MessageCall:
		//    name=ArgPathName ('(' (parameters=ParameterList)? ')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ArgPathName ('(' (parameters=ParameterList)? ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ArgPathName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ArgPathName
		public RuleCall getNameArgPathNameParserRuleCall_0_0() { return cNameArgPathNameParserRuleCall_0_0; }
		
		//('(' (parameters=ParameterList)? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//(parameters=ParameterList)?
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_1_0() { return cParametersParameterListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ParenthesizedMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ParenthesizedMethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameArgPathNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParenthesizedMethodCall returns MessageCall:
		//    name=ArgPathName => '(' (parameters=ParameterList)? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ArgPathName => '(' (parameters=ParameterList)? ')'
		public Group getGroup() { return cGroup; }
		
		//name=ArgPathName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ArgPathName
		public RuleCall getNameArgPathNameParserRuleCall_0_0() { return cNameArgPathNameParserRuleCall_0_0; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters=ParameterList)?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MethodCallWithActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.MethodCallWithActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameArgPathNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionsActionsParserRuleCall_2_1_0 = (RuleCall)cActionsAssignment_2_1.eContents().get(0);
		
		//MethodCallWithActions returns MessageCall:
		//    name=ArgPathName ('(' (parameters=ParameterList)? ')')? (':' actions=Actions)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ArgPathName ('(' (parameters=ParameterList)? ')')? (':' actions=Actions)?
		public Group getGroup() { return cGroup; }
		
		//name=ArgPathName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ArgPathName
		public RuleCall getNameArgPathNameParserRuleCall_0_0() { return cNameArgPathNameParserRuleCall_0_0; }
		
		//('(' (parameters=ParameterList)? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//(parameters=ParameterList)?
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_1_0() { return cParametersParameterListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//(':' actions=Actions)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//actions=Actions
		public Assignment getActionsAssignment_2_1() { return cActionsAssignment_2_1; }
		
		//Actions
		public RuleCall getActionsActionsParserRuleCall_2_1_0() { return cActionsActionsParserRuleCall_2_1_0; }
	}
	public class AssertStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.AssertStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cAssertionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssertionsAssertionParserRuleCall_2_0 = (RuleCall)cAssertionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAssertionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAssertionsAssertionParserRuleCall_3_1_0 = (RuleCall)cAssertionsAssignment_3_1.eContents().get(0);
		
		//AssertStatement:
		//    'assert' ('(' (parameters=ParameterList)? ')')?
		//        assertions+=Assertion (',' assertions+=Assertion)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'assert' ('(' (parameters=ParameterList)? ')')?
		//    assertions+=Assertion (',' assertions+=Assertion)*
		public Group getGroup() { return cGroup; }
		
		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//('(' (parameters=ParameterList)? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//(parameters=ParameterList)?
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_1_0() { return cParametersParameterListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//assertions+=Assertion
		public Assignment getAssertionsAssignment_2() { return cAssertionsAssignment_2; }
		
		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_2_0() { return cAssertionsAssertionParserRuleCall_2_0; }
		
		//(',' assertions+=Assertion)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//assertions+=Assertion
		public Assignment getAssertionsAssignment_3_1() { return cAssertionsAssignment_3_1; }
		
		//Assertion
		public RuleCall getAssertionsAssertionParserRuleCall_3_1_0() { return cAssertionsAssertionParserRuleCall_3_1_0; }
	}
	public class FailStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.FailStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFailStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFailKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSucaKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cReasonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReasonSTRINGTerminalRuleCall_2_0 = (RuleCall)cReasonAssignment_2.eContents().get(0);
		
		///*
		// * 'suca' is a direct response to 'pass' in python. It will make a test fail and exit, or just
		// * log failure and exit in non-test actions. Failure in init or main means the actor is dead.
		// */
		//FailStatement: {FailStatement}
		//    ('fail'|'suca') (=> reason=STRING)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FailStatement}
		//   ('fail'|'suca') (=> reason=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{FailStatement}
		public Action getFailStatementAction_0() { return cFailStatementAction_0; }
		
		//('fail'|'suca')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'fail'
		public Keyword getFailKeyword_1_0() { return cFailKeyword_1_0; }
		
		//'suca'
		public Keyword getSucaKeyword_1_1() { return cSucaKeyword_1_1; }
		
		//(=> reason=STRING)?
		public Assignment getReasonAssignment_2() { return cReasonAssignment_2; }
		
		//STRING
		public RuleCall getReasonSTRINGTerminalRuleCall_2_0() { return cReasonSTRINGTerminalRuleCall_2_0; }
	}
	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionEXPRTerminalRuleCall_0_0_0 = (RuleCall)cExpressionAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Assignment cMethodCallsAssignment_0_1_0_0 = (Assignment)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cMethodCallsMethodCallParserRuleCall_0_1_0_0_0 = (RuleCall)cMethodCallsAssignment_0_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1_0_1 = (Keyword)cGroup_0_1_0.eContents().get(1);
		private final Assignment cMethodCallsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cMethodCallsMethodCallWithActionsParserRuleCall_0_1_1_0 = (RuleCall)cMethodCallsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOkAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cOkOkKeyword_1_1_0_0 = (Keyword)cOkAssignment_1_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Assignment cMetadataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetadataMetadataParserRuleCall_2_0 = (RuleCall)cMetadataAssignment_2.eContents().get(0);
		
		//Assertion:
		//        (expression=EXPR |
		//        (methodCalls+=MethodCall '.')* methodCalls+=MethodCallWithActions)
		//        ('is' (ok='ok' | value=Value))?
		//        (=> metadata=Metadata)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(expression=EXPR |
		//(methodCalls+=MethodCall '.')* methodCalls+=MethodCallWithActions)
		//('is' (ok='ok' | value=Value))?
		//(=> metadata=Metadata)?
		public Group getGroup() { return cGroup; }
		
		//(expression=EXPR |
		//(methodCalls+=MethodCall '.')* methodCalls+=MethodCallWithActions)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_0_0() { return cExpressionAssignment_0_0; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_0_0_0() { return cExpressionEXPRTerminalRuleCall_0_0_0; }
		
		//(methodCalls+=MethodCall '.')* methodCalls+=MethodCallWithActions
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//(methodCalls+=MethodCall '.')*
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//methodCalls+=MethodCall
		public Assignment getMethodCallsAssignment_0_1_0_0() { return cMethodCallsAssignment_0_1_0_0; }
		
		//MethodCall
		public RuleCall getMethodCallsMethodCallParserRuleCall_0_1_0_0_0() { return cMethodCallsMethodCallParserRuleCall_0_1_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1_0_1() { return cFullStopKeyword_0_1_0_1; }
		
		//methodCalls+=MethodCallWithActions
		public Assignment getMethodCallsAssignment_0_1_1() { return cMethodCallsAssignment_0_1_1; }
		
		//MethodCallWithActions
		public RuleCall getMethodCallsMethodCallWithActionsParserRuleCall_0_1_1_0() { return cMethodCallsMethodCallWithActionsParserRuleCall_0_1_1_0; }
		
		//('is' (ok='ok' | value=Value))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//(ok='ok' | value=Value)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ok='ok'
		public Assignment getOkAssignment_1_1_0() { return cOkAssignment_1_1_0; }
		
		//'ok'
		public Keyword getOkOkKeyword_1_1_0_0() { return cOkOkKeyword_1_1_0_0; }
		
		//value=Value
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_1_1_0() { return cValueValueParserRuleCall_1_1_1_0; }
		
		//(=> metadata=Metadata)?
		public Assignment getMetadataAssignment_2() { return cMetadataAssignment_2; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_2_0() { return cMetadataMetadataParserRuleCall_2_0; }
	}
	public class NextStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.NextStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAssignmentAssignmentParserRuleCall_1_0_0 = (RuleCall)cAssignmentAssignment_1_0.eContents().get(0);
		private final Assignment cVerbAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cVerbMessageCallParserRuleCall_1_1_0 = (RuleCall)cVerbAssignment_1_1.eContents().get(0);
		private final Assignment cGroupAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cGroupStatementGroupParserRuleCall_1_2_0 = (RuleCall)cGroupAssignment_1_2.eContents().get(0);
		private final Assignment cTextAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cTextEMBEDDEDTEXTTerminalRuleCall_1_3_0 = (RuleCall)cTextAssignment_1_3.eContents().get(0);
		private final Assignment cIfAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cIfIfStatementParserRuleCall_1_4_0 = (RuleCall)cIfAssignment_1_4.eContents().get(0);
		private final Assignment cWhileAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cWhileWhileStatementParserRuleCall_1_5_0 = (RuleCall)cWhileAssignment_1_5.eContents().get(0);
		private final Assignment cDoAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cDoDoStatementParserRuleCall_1_6_0 = (RuleCall)cDoAssignment_1_6.eContents().get(0);
		private final Assignment cAssertAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cAssertAssertStatementParserRuleCall_1_7_0 = (RuleCall)cAssertAssignment_1_7.eContents().get(0);
		private final Assignment cFailAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cFailFailStatementParserRuleCall_1_8_0 = (RuleCall)cFailAssignment_1_8.eContents().get(0);
		private final Assignment cBreakAssignment_1_9 = (Assignment)cAlternatives_1.eContents().get(9);
		private final Keyword cBreakBreakKeyword_1_9_0 = (Keyword)cBreakAssignment_1_9.eContents().get(0);
		private final Assignment cForAssignment_1_10 = (Assignment)cAlternatives_1.eContents().get(10);
		private final RuleCall cForForStatementParserRuleCall_1_10_0 = (RuleCall)cForAssignment_1_10.eContents().get(0);
		private final Assignment cValueAssignment_1_11 = (Assignment)cAlternatives_1.eContents().get(11);
		private final RuleCall cValueValueWithMetadataParserRuleCall_1_11_0 = (RuleCall)cValueAssignment_1_11.eContents().get(0);
		private final Assignment cTagAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTagTAGTerminalRuleCall_2_0 = (RuleCall)cTagAssignment_2.eContents().get(0);
		
		//NextStatement returns Statement:
		//    ',' (
		//        assignment=Assignment |
		//        verb=MessageCall |
		//        group=StatementGroup |
		//        text=EMBEDDEDTEXT |
		//        if=IfStatement |
		//        while=WhileStatement |
		//        do=DoStatement |
		//        assert=AssertStatement |
		//        fail=FailStatement |
		//        break?='break' |
		//        for=ForStatement |
		//        // this means "fire this"
		//        value=ValueWithMetadata
		//    )
		//    // all statement may be tagged for reference
		//    (tag=TAG)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//',' (
		//    assignment=Assignment |
		//    verb=MessageCall |
		//    group=StatementGroup |
		//    text=EMBEDDEDTEXT |
		//    if=IfStatement |
		//    while=WhileStatement |
		//    do=DoStatement |
		//    assert=AssertStatement |
		//    fail=FailStatement |
		//    break?='break' |
		//    for=ForStatement |
		//    // this means "fire this"
		//    value=ValueWithMetadata
		//)
		//// all statement may be tagged for reference
		//(tag=TAG)?
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//(
		//       assignment=Assignment |
		//       verb=MessageCall |
		//       group=StatementGroup |
		//       text=EMBEDDEDTEXT |
		//       if=IfStatement |
		//       while=WhileStatement |
		//       do=DoStatement |
		//       assert=AssertStatement |
		//       fail=FailStatement |
		//       break?='break' |
		//       for=ForStatement |
		//       // this means "fire this"
		//       value=ValueWithMetadata
		//   )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//assignment=Assignment
		public Assignment getAssignmentAssignment_1_0() { return cAssignmentAssignment_1_0; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_1_0_0() { return cAssignmentAssignmentParserRuleCall_1_0_0; }
		
		//verb=MessageCall
		public Assignment getVerbAssignment_1_1() { return cVerbAssignment_1_1; }
		
		//MessageCall
		public RuleCall getVerbMessageCallParserRuleCall_1_1_0() { return cVerbMessageCallParserRuleCall_1_1_0; }
		
		//group=StatementGroup
		public Assignment getGroupAssignment_1_2() { return cGroupAssignment_1_2; }
		
		//StatementGroup
		public RuleCall getGroupStatementGroupParserRuleCall_1_2_0() { return cGroupStatementGroupParserRuleCall_1_2_0; }
		
		//text=EMBEDDEDTEXT
		public Assignment getTextAssignment_1_3() { return cTextAssignment_1_3; }
		
		//EMBEDDEDTEXT
		public RuleCall getTextEMBEDDEDTEXTTerminalRuleCall_1_3_0() { return cTextEMBEDDEDTEXTTerminalRuleCall_1_3_0; }
		
		//if=IfStatement
		public Assignment getIfAssignment_1_4() { return cIfAssignment_1_4; }
		
		//IfStatement
		public RuleCall getIfIfStatementParserRuleCall_1_4_0() { return cIfIfStatementParserRuleCall_1_4_0; }
		
		//while=WhileStatement
		public Assignment getWhileAssignment_1_5() { return cWhileAssignment_1_5; }
		
		//WhileStatement
		public RuleCall getWhileWhileStatementParserRuleCall_1_5_0() { return cWhileWhileStatementParserRuleCall_1_5_0; }
		
		//do=DoStatement
		public Assignment getDoAssignment_1_6() { return cDoAssignment_1_6; }
		
		//DoStatement
		public RuleCall getDoDoStatementParserRuleCall_1_6_0() { return cDoDoStatementParserRuleCall_1_6_0; }
		
		//assert=AssertStatement
		public Assignment getAssertAssignment_1_7() { return cAssertAssignment_1_7; }
		
		//AssertStatement
		public RuleCall getAssertAssertStatementParserRuleCall_1_7_0() { return cAssertAssertStatementParserRuleCall_1_7_0; }
		
		//fail=FailStatement
		public Assignment getFailAssignment_1_8() { return cFailAssignment_1_8; }
		
		//FailStatement
		public RuleCall getFailFailStatementParserRuleCall_1_8_0() { return cFailFailStatementParserRuleCall_1_8_0; }
		
		//break?='break'
		public Assignment getBreakAssignment_1_9() { return cBreakAssignment_1_9; }
		
		//'break'
		public Keyword getBreakBreakKeyword_1_9_0() { return cBreakBreakKeyword_1_9_0; }
		
		//for=ForStatement
		public Assignment getForAssignment_1_10() { return cForAssignment_1_10; }
		
		//ForStatement
		public RuleCall getForForStatementParserRuleCall_1_10_0() { return cForForStatementParserRuleCall_1_10_0; }
		
		//// this means "fire this"
		//value=ValueWithMetadata
		public Assignment getValueAssignment_1_11() { return cValueAssignment_1_11; }
		
		//ValueWithMetadata
		public RuleCall getValueValueWithMetadataParserRuleCall_1_11_0() { return cValueValueWithMetadataParserRuleCall_1_11_0; }
		
		//// all statement may be tagged for reference
		//(tag=TAG)?
		public Assignment getTagAssignment_2() { return cTagAssignment_2; }
		
		//TAG
		public RuleCall getTagTAGTerminalRuleCall_2_0() { return cTagTAGTerminalRuleCall_2_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cGlobalAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cGlobalSetKeyword_0_0_0_0 = (Keyword)cGlobalAssignment_0_0_0.eContents().get(0);
		private final Assignment cLocalAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cLocalDefKeyword_0_0_1_0 = (Keyword)cLocalAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cRecipientAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cRecipientLOWERCASE_IDTerminalRuleCall_0_1_0_0 = (RuleCall)cRecipientAssignment_0_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cVariableAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cVariableLOWERCASE_IDTerminalRuleCall_0_2_0 = (RuleCall)cVariableAssignment_0_2.eContents().get(0);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueValueWithConstructorParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVariableAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVariableLOWERCASE_IDTerminalRuleCall_1_0_0 = (RuleCall)cVariableAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueValueWithConstructorParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//Assignment:
		//    (global?='set'|local?='def') (recipient=LOWERCASE_ID '.')? variable=LOWERCASE_ID value=ValueWithConstructor |
		//    // block-specific
		//    variable=LOWERCASE_ID '=' value=ValueWithConstructor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(global?='set'|local?='def') (recipient=LOWERCASE_ID '.')? variable=LOWERCASE_ID value=ValueWithConstructor |
		//// block-specific
		//variable=LOWERCASE_ID '=' value=ValueWithConstructor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(global?='set'|local?='def') (recipient=LOWERCASE_ID '.')? variable=LOWERCASE_ID value=ValueWithConstructor
		public Group getGroup_0() { return cGroup_0; }
		
		//(global?='set'|local?='def')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//global?='set'
		public Assignment getGlobalAssignment_0_0_0() { return cGlobalAssignment_0_0_0; }
		
		//'set'
		public Keyword getGlobalSetKeyword_0_0_0_0() { return cGlobalSetKeyword_0_0_0_0; }
		
		//local?='def'
		public Assignment getLocalAssignment_0_0_1() { return cLocalAssignment_0_0_1; }
		
		//'def'
		public Keyword getLocalDefKeyword_0_0_1_0() { return cLocalDefKeyword_0_0_1_0; }
		
		//(recipient=LOWERCASE_ID '.')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//recipient=LOWERCASE_ID
		public Assignment getRecipientAssignment_0_1_0() { return cRecipientAssignment_0_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getRecipientLOWERCASE_IDTerminalRuleCall_0_1_0_0() { return cRecipientLOWERCASE_IDTerminalRuleCall_0_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1_1() { return cFullStopKeyword_0_1_1; }
		
		//variable=LOWERCASE_ID
		public Assignment getVariableAssignment_0_2() { return cVariableAssignment_0_2; }
		
		//LOWERCASE_ID
		public RuleCall getVariableLOWERCASE_IDTerminalRuleCall_0_2_0() { return cVariableLOWERCASE_IDTerminalRuleCall_0_2_0; }
		
		//value=ValueWithConstructor
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }
		
		//ValueWithConstructor
		public RuleCall getValueValueWithConstructorParserRuleCall_0_3_0() { return cValueValueWithConstructorParserRuleCall_0_3_0; }
		
		//// block-specific
		//variable=LOWERCASE_ID '=' value=ValueWithConstructor
		public Group getGroup_1() { return cGroup_1; }
		
		//// block-specific
		//variable=LOWERCASE_ID
		public Assignment getVariableAssignment_1_0() { return cVariableAssignment_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getVariableLOWERCASE_IDTerminalRuleCall_1_0_0() { return cVariableLOWERCASE_IDTerminalRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//value=ValueWithConstructor
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//ValueWithConstructor
		public RuleCall getValueValueWithConstructorParserRuleCall_1_2_0() { return cValueValueWithConstructorParserRuleCall_1_2_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cLiteralAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_1_0_0 = (RuleCall)cLiteralAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExpressionEXPRTerminalRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cVariableLOWERCASE_IDTerminalRuleCall_1_2_0 = (RuleCall)cVariableAssignment_1_2.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cIfKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cElseIfBodyAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cElseIfBodyElseIfStatementBodyParserRuleCall_3_2_0 = (RuleCall)cElseIfBodyAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseCallAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseCallStatementBodyParserRuleCall_4_1_0 = (RuleCall)cElseCallAssignment_4_1.eContents().get(0);
		
		//IfStatement:
		//    'if' (literal=Literal | expression=EXPR | variable=LOWERCASE_ID)
		//        body=StatementBody
		//        ('else' 'if' elseIfBody+=ElseIfStatementBody)*
		//        ('else' elseCall=StatementBody)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' (literal=Literal | expression=EXPR | variable=LOWERCASE_ID)
		//    body=StatementBody
		//    ('else' 'if' elseIfBody+=ElseIfStatementBody)*
		//    ('else' elseCall=StatementBody)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//(literal=Literal | expression=EXPR | variable=LOWERCASE_ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_1_0() { return cLiteralAssignment_1_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_0_0() { return cLiteralLiteralParserRuleCall_1_0_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_1_1_0() { return cExpressionEXPRTerminalRuleCall_1_1_0; }
		
		//variable=LOWERCASE_ID
		public Assignment getVariableAssignment_1_2() { return cVariableAssignment_1_2; }
		
		//LOWERCASE_ID
		public RuleCall getVariableLOWERCASE_IDTerminalRuleCall_1_2_0() { return cVariableLOWERCASE_IDTerminalRuleCall_1_2_0; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_2_0() { return cBodyStatementBodyParserRuleCall_2_0; }
		
		//('else' 'if' elseIfBody+=ElseIfStatementBody)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'else'
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//'if'
		public Keyword getIfKeyword_3_1() { return cIfKeyword_3_1; }
		
		//elseIfBody+=ElseIfStatementBody
		public Assignment getElseIfBodyAssignment_3_2() { return cElseIfBodyAssignment_3_2; }
		
		//ElseIfStatementBody
		public RuleCall getElseIfBodyElseIfStatementBodyParserRuleCall_3_2_0() { return cElseIfBodyElseIfStatementBodyParserRuleCall_3_2_0; }
		
		//('else' elseCall=StatementBody)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//elseCall=StatementBody
		public Assignment getElseCallAssignment_4_1() { return cElseCallAssignment_4_1; }
		
		//StatementBody
		public RuleCall getElseCallStatementBodyParserRuleCall_4_1_0() { return cElseCallStatementBodyParserRuleCall_4_1_0; }
	}
	public class ElseIfStatementBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ElseIfStatementBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cLiteralAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0_0 = (RuleCall)cLiteralAssignment_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cExpressionEXPRTerminalRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Assignment cVariableAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cVariableLOWERCASE_IDTerminalRuleCall_0_2_0 = (RuleCall)cVariableAssignment_0_2.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyStatementBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//ElseIfStatementBody:
		//    (literal=Literal | expression=EXPR | variable=LOWERCASE_ID) body=StatementBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(literal=Literal | expression=EXPR | variable=LOWERCASE_ID) body=StatementBody
		public Group getGroup() { return cGroup; }
		
		//(literal=Literal | expression=EXPR | variable=LOWERCASE_ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_0_0() { return cLiteralAssignment_0_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0_0() { return cLiteralLiteralParserRuleCall_0_0_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_0_1_0() { return cExpressionEXPRTerminalRuleCall_0_1_0; }
		
		//variable=LOWERCASE_ID
		public Assignment getVariableAssignment_0_2() { return cVariableAssignment_0_2; }
		
		//LOWERCASE_ID
		public RuleCall getVariableLOWERCASE_IDTerminalRuleCall_0_2_0() { return cVariableLOWERCASE_IDTerminalRuleCall_0_2_0; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_1_0() { return cBodyStatementBodyParserRuleCall_1_0; }
	}
	public class StatementBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.StatementBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVerbAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVerbMessageCallParserRuleCall_0_0 = (RuleCall)cVerbAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cGroupAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cGroupStatementGroupParserRuleCall_2_0 = (RuleCall)cGroupAssignment_2.eContents().get(0);
		
		///**
		// * Body of a statement is either a single message call (or fired value) or a set thereof in a group.
		// * */
		//StatementBody: verb=MessageCall | value=Value | group=StatementGroup;
		@Override public ParserRule getRule() { return rule; }
		
		//verb=MessageCall | value=Value | group=StatementGroup
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//verb=MessageCall
		public Assignment getVerbAssignment_0() { return cVerbAssignment_0; }
		
		//MessageCall
		public RuleCall getVerbMessageCallParserRuleCall_0_0() { return cVerbMessageCallParserRuleCall_0_0; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
		
		//group=StatementGroup
		public Assignment getGroupAssignment_2() { return cGroupAssignment_2; }
		
		//StatementGroup
		public RuleCall getGroupStatementGroupParserRuleCall_2_0() { return cGroupStatementGroupParserRuleCall_2_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionEXPRTerminalRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//WhileStatement:
		//    'while' expression=EXPR body=StatementBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' expression=EXPR body=StatementBody
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_1_0() { return cExpressionEXPRTerminalRuleCall_1_0; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_2_0() { return cBodyStatementBodyParserRuleCall_2_0; }
	}
	public class DoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.DoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyStatementBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionEXPRTerminalRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//DoStatement:
		//    'do' body=StatementBody 'while' expression=EXPR
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'do' body=StatementBody 'while' expression=EXPR
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_1_0() { return cBodyStatementBodyParserRuleCall_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_3_0() { return cExpressionEXPRTerminalRuleCall_3_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Keyword cInKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyStatementBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//ForStatement:
		//    'for' (id=LOWERCASE_ID 'in')? value=Value body=StatementBody
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' (id=LOWERCASE_ID 'in')? value=Value body=StatementBody
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//(id=LOWERCASE_ID 'in')?
		public Group getGroup_1() { return cGroup_1; }
		
		//id=LOWERCASE_ID
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_1_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_1_0_0; }
		
		//'in'
		public Keyword getInKeyword_1_1() { return cInKeyword_1_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_3_0() { return cBodyStatementBodyParserRuleCall_3_0; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Actions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMatchAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMatchMatchParserRuleCall_0_0 = (RuleCall)cMatchAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMatchesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMatchesMatchParserRuleCall_1_1_0 = (RuleCall)cMatchesAssignment_1_1.eContents().get(0);
		private final Assignment cMatchesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMatchesMatchParserRuleCall_1_2_0 = (RuleCall)cMatchesAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatementsStatementListParserRuleCall_3_1_0 = (RuleCall)cStatementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// a sequence of actions after a verb is sequential only if comma-separated. No match mean
		//// "upon successful firing" (i.e. firing not null, false or error).
		//// Don't switch the order or firing statements will take over the matches and not parse
		//Actions:
		//    match=Match |
		//    '(' matches+=Match (matches+=Match)* ')' |
		//    statement=Statement |
		//    '(' statements=StatementList ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//match=Match |
		//'(' matches+=Match (matches+=Match)* ')' |
		//statement=Statement |
		//'(' statements=StatementList ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//match=Match
		public Assignment getMatchAssignment_0() { return cMatchAssignment_0; }
		
		//Match
		public RuleCall getMatchMatchParserRuleCall_0_0() { return cMatchMatchParserRuleCall_0_0; }
		
		//'(' matches+=Match (matches+=Match)* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//matches+=Match
		public Assignment getMatchesAssignment_1_1() { return cMatchesAssignment_1_1; }
		
		//Match
		public RuleCall getMatchesMatchParserRuleCall_1_1_0() { return cMatchesMatchParserRuleCall_1_1_0; }
		
		//(matches+=Match)*
		public Assignment getMatchesAssignment_1_2() { return cMatchesAssignment_1_2; }
		
		//Match
		public RuleCall getMatchesMatchParserRuleCall_1_2_0() { return cMatchesMatchParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
		
		//'(' statements=StatementList ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//statements=StatementList
		public Assignment getStatementsAssignment_3_1() { return cStatementsAssignment_3_1; }
		
		//StatementList
		public RuleCall getStatementsStatementListParserRuleCall_3_1_0() { return cStatementsStatementListParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeferredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDeferredGraveAccentKeyword_0_0 = (Keyword)cDeferredAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTreeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTreeTreeParserRuleCall_1_0_0 = (RuleCall)cTreeAssignment_1_0.eContents().get(0);
		private final Assignment cEmptyAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cEmptyEmptyKeyword_1_1_0 = (Keyword)cEmptyAssignment_1_1.eContents().get(0);
		private final Assignment cArgvalueAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cArgvalueARGVALUETerminalRuleCall_1_2_0 = (RuleCall)cArgvalueAssignment_1_2.eContents().get(0);
		private final Assignment cUrnAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cUrnUrnIdParserRuleCall_1_3_0 = (RuleCall)cUrnAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cLiteralAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_1_4_0_0 = (RuleCall)cLiteralAssignment_1_4_0.eContents().get(0);
		private final Group cGroup_1_4_1 = (Group)cGroup_1_4.eContents().get(1);
		private final Keyword cAsKeyword_1_4_1_0 = (Keyword)cGroup_1_4_1.eContents().get(0);
		private final Assignment cCastAssignment_1_4_1_1 = (Assignment)cGroup_1_4_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_4_1_1_0 = (RuleCall)cCastAssignment_1_4_1_1.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Assignment cIdAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cIdPathNameParserRuleCall_1_5_0_0 = (RuleCall)cIdAssignment_1_5_0.eContents().get(0);
		private final Group cGroup_1_5_1 = (Group)cGroup_1_5.eContents().get(1);
		private final Keyword cAsKeyword_1_5_1_0 = (Keyword)cGroup_1_5_1.eContents().get(0);
		private final Assignment cCastAssignment_1_5_1_1 = (Assignment)cGroup_1_5_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_5_1_1_0 = (RuleCall)cCastAssignment_1_5_1_1.eContents().get(0);
		private final Assignment cListAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cListListParserRuleCall_1_6_0 = (RuleCall)cListAssignment_1_6.eContents().get(0);
		private final Assignment cMapAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cMapMapParserRuleCall_1_7_0 = (RuleCall)cMapAssignment_1_7.eContents().get(0);
		private final Assignment cConstantAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cConstantUPPERCASE_IDTerminalRuleCall_1_8_0 = (RuleCall)cConstantAssignment_1_8.eContents().get(0);
		private final Assignment cObservableAssignment_1_9 = (Assignment)cAlternatives_1.eContents().get(9);
		private final RuleCall cObservableObservableParserRuleCall_1_9_0 = (RuleCall)cObservableAssignment_1_9.eContents().get(0);
		private final Group cGroup_1_10 = (Group)cAlternatives_1.eContents().get(10);
		private final Assignment cExpressionAssignment_1_10_0 = (Assignment)cGroup_1_10.eContents().get(0);
		private final RuleCall cExpressionEXPRTerminalRuleCall_1_10_0_0 = (RuleCall)cExpressionAssignment_1_10_0.eContents().get(0);
		private final Group cGroup_1_10_1 = (Group)cGroup_1_10.eContents().get(1);
		private final Keyword cAsKeyword_1_10_1_0 = (Keyword)cGroup_1_10_1.eContents().get(0);
		private final Assignment cCastAssignment_1_10_1_1 = (Assignment)cGroup_1_10_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_10_1_1_0 = (RuleCall)cCastAssignment_1_10_1_1.eContents().get(0);
		private final Assignment cTableAssignment_1_11 = (Assignment)cAlternatives_1.eContents().get(11);
		private final RuleCall cTableLookupTableParserRuleCall_1_11_0 = (RuleCall)cTableAssignment_1_11.eContents().get(0);
		private final Assignment cQuantityAssignment_1_12 = (Assignment)cAlternatives_1.eContents().get(12);
		private final RuleCall cQuantityQuantityParserRuleCall_1_12_0 = (RuleCall)cQuantityAssignment_1_12.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cThenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cThenValueParserRuleCall_2_1_0 = (RuleCall)cThenAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cElseAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cElseValueParserRuleCall_2_3_0 = (RuleCall)cElseAssignment_2_3.eContents().get(0);
		
		//Value:
		//    (deferred?='`')? (tree=Tree |
		//    empty?='empty' |
		//    argvalue=ARGVALUE |
		//    urn=UrnId |
		//    literal=Literal ('as' cast=DATA_TYPE)? |
		//    id=PathName ('as' cast=DATA_TYPE)?  |
		//    list=List |
		//    map=Map |
		//    constant=UPPERCASE_ID |
		//    observable=Observable |
		//    expression=EXPR ('as' cast=DATA_TYPE)? |
		//    table=LookupTable |
		//    quantity=Quantity) ('?' then=Value ':' else=Value)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(deferred?='`')? (tree=Tree |
		//empty?='empty' |
		//argvalue=ARGVALUE |
		//urn=UrnId |
		//literal=Literal ('as' cast=DATA_TYPE)? |
		//id=PathName ('as' cast=DATA_TYPE)?  |
		//list=List |
		//map=Map |
		//constant=UPPERCASE_ID |
		//observable=Observable |
		//expression=EXPR ('as' cast=DATA_TYPE)? |
		//table=LookupTable |
		//quantity=Quantity) ('?' then=Value ':' else=Value)?
		public Group getGroup() { return cGroup; }
		
		//(deferred?='`')?
		public Assignment getDeferredAssignment_0() { return cDeferredAssignment_0; }
		
		//'`'
		public Keyword getDeferredGraveAccentKeyword_0_0() { return cDeferredGraveAccentKeyword_0_0; }
		
		//(tree=Tree |
		//   empty?='empty' |
		//   argvalue=ARGVALUE |
		//   urn=UrnId |
		//   literal=Literal ('as' cast=DATA_TYPE)? |
		//   id=PathName ('as' cast=DATA_TYPE)?  |
		//   list=List |
		//   map=Map |
		//   constant=UPPERCASE_ID |
		//   observable=Observable |
		//   expression=EXPR ('as' cast=DATA_TYPE)? |
		//   table=LookupTable |
		//   quantity=Quantity)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//tree=Tree
		public Assignment getTreeAssignment_1_0() { return cTreeAssignment_1_0; }
		
		//Tree
		public RuleCall getTreeTreeParserRuleCall_1_0_0() { return cTreeTreeParserRuleCall_1_0_0; }
		
		//empty?='empty'
		public Assignment getEmptyAssignment_1_1() { return cEmptyAssignment_1_1; }
		
		//'empty'
		public Keyword getEmptyEmptyKeyword_1_1_0() { return cEmptyEmptyKeyword_1_1_0; }
		
		//argvalue=ARGVALUE
		public Assignment getArgvalueAssignment_1_2() { return cArgvalueAssignment_1_2; }
		
		//ARGVALUE
		public RuleCall getArgvalueARGVALUETerminalRuleCall_1_2_0() { return cArgvalueARGVALUETerminalRuleCall_1_2_0; }
		
		//urn=UrnId
		public Assignment getUrnAssignment_1_3() { return cUrnAssignment_1_3; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_1_3_0() { return cUrnUrnIdParserRuleCall_1_3_0; }
		
		//literal=Literal ('as' cast=DATA_TYPE)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_1_4_0() { return cLiteralAssignment_1_4_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_4_0_0() { return cLiteralLiteralParserRuleCall_1_4_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }
		
		//'as'
		public Keyword getAsKeyword_1_4_1_0() { return cAsKeyword_1_4_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_4_1_1() { return cCastAssignment_1_4_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_4_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_4_1_1_0; }
		
		//id=PathName ('as' cast=DATA_TYPE)?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//id=PathName
		public Assignment getIdAssignment_1_5_0() { return cIdAssignment_1_5_0; }
		
		//PathName
		public RuleCall getIdPathNameParserRuleCall_1_5_0_0() { return cIdPathNameParserRuleCall_1_5_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_5_1() { return cGroup_1_5_1; }
		
		//'as'
		public Keyword getAsKeyword_1_5_1_0() { return cAsKeyword_1_5_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_5_1_1() { return cCastAssignment_1_5_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_5_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_5_1_1_0; }
		
		//list=List
		public Assignment getListAssignment_1_6() { return cListAssignment_1_6; }
		
		//List
		public RuleCall getListListParserRuleCall_1_6_0() { return cListListParserRuleCall_1_6_0; }
		
		//map=Map
		public Assignment getMapAssignment_1_7() { return cMapAssignment_1_7; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_1_7_0() { return cMapMapParserRuleCall_1_7_0; }
		
		//constant=UPPERCASE_ID
		public Assignment getConstantAssignment_1_8() { return cConstantAssignment_1_8; }
		
		//UPPERCASE_ID
		public RuleCall getConstantUPPERCASE_IDTerminalRuleCall_1_8_0() { return cConstantUPPERCASE_IDTerminalRuleCall_1_8_0; }
		
		//observable=Observable
		public Assignment getObservableAssignment_1_9() { return cObservableAssignment_1_9; }
		
		//Observable
		public RuleCall getObservableObservableParserRuleCall_1_9_0() { return cObservableObservableParserRuleCall_1_9_0; }
		
		//expression=EXPR ('as' cast=DATA_TYPE)?
		public Group getGroup_1_10() { return cGroup_1_10; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_1_10_0() { return cExpressionAssignment_1_10_0; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_1_10_0_0() { return cExpressionEXPRTerminalRuleCall_1_10_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_10_1() { return cGroup_1_10_1; }
		
		//'as'
		public Keyword getAsKeyword_1_10_1_0() { return cAsKeyword_1_10_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_10_1_1() { return cCastAssignment_1_10_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_10_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_10_1_1_0; }
		
		//table=LookupTable
		public Assignment getTableAssignment_1_11() { return cTableAssignment_1_11; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_1_11_0() { return cTableLookupTableParserRuleCall_1_11_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_1_12() { return cQuantityAssignment_1_12; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_1_12_0() { return cQuantityQuantityParserRuleCall_1_12_0; }
		
		//('?' then=Value ':' else=Value)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2_0() { return cQuestionMarkKeyword_2_0; }
		
		//then=Value
		public Assignment getThenAssignment_2_1() { return cThenAssignment_2_1; }
		
		//Value
		public RuleCall getThenValueParserRuleCall_2_1_0() { return cThenValueParserRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//else=Value
		public Assignment getElseAssignment_2_3() { return cElseAssignment_2_3; }
		
		//Value
		public RuleCall getElseValueParserRuleCall_2_3_0() { return cElseValueParserRuleCall_2_3_0; }
	}
	public class ValueWithConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ValueWithConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeferredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDeferredGraveAccentKeyword_0_0 = (Keyword)cDeferredAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConstructorConstructorParserRuleCall_1_0_0 = (RuleCall)cConstructorAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Assignment cMethodCallsAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cMethodCallsParenthesizedMethodCallParserRuleCall_1_1_0_0_0 = (RuleCall)cMethodCallsAssignment_1_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cMethodCallsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cMethodCallsParenthesizedMethodCallParserRuleCall_1_1_1_0 = (RuleCall)cMethodCallsAssignment_1_1_1.eContents().get(0);
		private final Assignment cTreeAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cTreeTreeParserRuleCall_1_2_0 = (RuleCall)cTreeAssignment_1_2.eContents().get(0);
		private final Assignment cEmptyAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Keyword cEmptyEmptyKeyword_1_3_0 = (Keyword)cEmptyAssignment_1_3.eContents().get(0);
		private final Assignment cArgvalueAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cArgvalueARGVALUETerminalRuleCall_1_4_0 = (RuleCall)cArgvalueAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Assignment cLiteralAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_1_5_0_0 = (RuleCall)cLiteralAssignment_1_5_0.eContents().get(0);
		private final Group cGroup_1_5_1 = (Group)cGroup_1_5.eContents().get(1);
		private final Keyword cAsKeyword_1_5_1_0 = (Keyword)cGroup_1_5_1.eContents().get(0);
		private final Assignment cCastAssignment_1_5_1_1 = (Assignment)cGroup_1_5_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_5_1_1_0 = (RuleCall)cCastAssignment_1_5_1_1.eContents().get(0);
		private final Assignment cUrnAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cUrnUrnIdParserRuleCall_1_6_0 = (RuleCall)cUrnAssignment_1_6.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Assignment cIdAssignment_1_7_0 = (Assignment)cGroup_1_7.eContents().get(0);
		private final RuleCall cIdPathNameParserRuleCall_1_7_0_0 = (RuleCall)cIdAssignment_1_7_0.eContents().get(0);
		private final Group cGroup_1_7_1 = (Group)cGroup_1_7.eContents().get(1);
		private final Keyword cAsKeyword_1_7_1_0 = (Keyword)cGroup_1_7_1.eContents().get(0);
		private final Assignment cCastAssignment_1_7_1_1 = (Assignment)cGroup_1_7_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_7_1_1_0 = (RuleCall)cCastAssignment_1_7_1_1.eContents().get(0);
		private final Assignment cListAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cListListParserRuleCall_1_8_0 = (RuleCall)cListAssignment_1_8.eContents().get(0);
		private final Assignment cMapAssignment_1_9 = (Assignment)cAlternatives_1.eContents().get(9);
		private final RuleCall cMapMapParserRuleCall_1_9_0 = (RuleCall)cMapAssignment_1_9.eContents().get(0);
		private final Assignment cConstantAssignment_1_10 = (Assignment)cAlternatives_1.eContents().get(10);
		private final RuleCall cConstantUPPERCASE_IDTerminalRuleCall_1_10_0 = (RuleCall)cConstantAssignment_1_10.eContents().get(0);
		private final Assignment cObservableAssignment_1_11 = (Assignment)cAlternatives_1.eContents().get(11);
		private final RuleCall cObservableObservableParserRuleCall_1_11_0 = (RuleCall)cObservableAssignment_1_11.eContents().get(0);
		private final Group cGroup_1_12 = (Group)cAlternatives_1.eContents().get(12);
		private final Assignment cExpressionAssignment_1_12_0 = (Assignment)cGroup_1_12.eContents().get(0);
		private final RuleCall cExpressionEXPRTerminalRuleCall_1_12_0_0 = (RuleCall)cExpressionAssignment_1_12_0.eContents().get(0);
		private final Group cGroup_1_12_1 = (Group)cGroup_1_12.eContents().get(1);
		private final Keyword cAsKeyword_1_12_1_0 = (Keyword)cGroup_1_12_1.eContents().get(0);
		private final Assignment cCastAssignment_1_12_1_1 = (Assignment)cGroup_1_12_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_12_1_1_0 = (RuleCall)cCastAssignment_1_12_1_1.eContents().get(0);
		private final Assignment cTableAssignment_1_13 = (Assignment)cAlternatives_1.eContents().get(13);
		private final RuleCall cTableLookupTableParserRuleCall_1_13_0 = (RuleCall)cTableAssignment_1_13.eContents().get(0);
		private final Assignment cQuantityAssignment_1_14 = (Assignment)cAlternatives_1.eContents().get(14);
		private final RuleCall cQuantityQuantityParserRuleCall_1_14_0 = (RuleCall)cQuantityAssignment_1_14.eContents().get(0);
		private final Group cGroup_1_15 = (Group)cAlternatives_1.eContents().get(15);
		private final Assignment cComponentAssignment_1_15_0 = (Assignment)cGroup_1_15.eContents().get(0);
		private final Keyword cComponentNewKeyword_1_15_0_0 = (Keyword)cComponentAssignment_1_15_0.eContents().get(0);
		private final Assignment cBehaviorAssignment_1_15_1 = (Assignment)cGroup_1_15.eContents().get(1);
		private final RuleCall cBehaviorPathNameParserRuleCall_1_15_1_0 = (RuleCall)cBehaviorAssignment_1_15_1.eContents().get(0);
		private final Group cGroup_1_15_2 = (Group)cGroup_1_15.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_15_2_0 = (Keyword)cGroup_1_15_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_15_2_1 = (Assignment)cGroup_1_15_2.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_15_2_1_0 = (RuleCall)cParametersAssignment_1_15_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_15_2_2 = (Keyword)cGroup_1_15_2.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cThenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cThenValueWithConstructorParserRuleCall_2_1_0 = (RuleCall)cThenAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cElseAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cElseValueWithConstructorParserRuleCall_2_3_0 = (RuleCall)cElseAssignment_2_3.eContents().get(0);
		
		//ValueWithConstructor returns Value:
		//    (deferred?='`')? (constructor=Constructor |
		//    (methodCalls+=ParenthesizedMethodCall '.')* methodCalls+=ParenthesizedMethodCall |
		//    tree=Tree |
		//    empty?='empty' |
		//    argvalue=ARGVALUE |
		//    literal=Literal ('as' cast=DATA_TYPE)? |
		//    urn=UrnId |
		//    id=PathName ('as' cast=DATA_TYPE)? |
		//    list=List |
		//    map=Map |
		//    constant=UPPERCASE_ID |
		//    observable=Observable |
		//    expression=EXPR ('as' cast=DATA_TYPE)? |
		//    table=LookupTable |
		//    quantity=Quantity  |
		//    component?='new' behavior=PathName ('(' (parameters=ParameterList)? ')')? )
		//     ('?' then=ValueWithConstructor ':' else=ValueWithConstructor)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(deferred?='`')? (constructor=Constructor |
		//(methodCalls+=ParenthesizedMethodCall '.')* methodCalls+=ParenthesizedMethodCall |
		//tree=Tree |
		//empty?='empty' |
		//argvalue=ARGVALUE |
		//literal=Literal ('as' cast=DATA_TYPE)? |
		//urn=UrnId |
		//id=PathName ('as' cast=DATA_TYPE)? |
		//list=List |
		//map=Map |
		//constant=UPPERCASE_ID |
		//observable=Observable |
		//expression=EXPR ('as' cast=DATA_TYPE)? |
		//table=LookupTable |
		//quantity=Quantity  |
		//component?='new' behavior=PathName ('(' (parameters=ParameterList)? ')')? )
		// ('?' then=ValueWithConstructor ':' else=ValueWithConstructor)?
		public Group getGroup() { return cGroup; }
		
		//(deferred?='`')?
		public Assignment getDeferredAssignment_0() { return cDeferredAssignment_0; }
		
		//'`'
		public Keyword getDeferredGraveAccentKeyword_0_0() { return cDeferredGraveAccentKeyword_0_0; }
		
		//(constructor=Constructor |
		//   (methodCalls+=ParenthesizedMethodCall '.')* methodCalls+=ParenthesizedMethodCall |
		//   tree=Tree |
		//   empty?='empty' |
		//   argvalue=ARGVALUE |
		//   literal=Literal ('as' cast=DATA_TYPE)? |
		//   urn=UrnId |
		//   id=PathName ('as' cast=DATA_TYPE)? |
		//   list=List |
		//   map=Map |
		//   constant=UPPERCASE_ID |
		//   observable=Observable |
		//   expression=EXPR ('as' cast=DATA_TYPE)? |
		//   table=LookupTable |
		//   quantity=Quantity  |
		//   component?='new' behavior=PathName ('(' (parameters=ParameterList)? ')')? )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//constructor=Constructor
		public Assignment getConstructorAssignment_1_0() { return cConstructorAssignment_1_0; }
		
		//Constructor
		public RuleCall getConstructorConstructorParserRuleCall_1_0_0() { return cConstructorConstructorParserRuleCall_1_0_0; }
		
		//(methodCalls+=ParenthesizedMethodCall '.')* methodCalls+=ParenthesizedMethodCall
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(methodCalls+=ParenthesizedMethodCall '.')*
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//methodCalls+=ParenthesizedMethodCall
		public Assignment getMethodCallsAssignment_1_1_0_0() { return cMethodCallsAssignment_1_1_0_0; }
		
		//ParenthesizedMethodCall
		public RuleCall getMethodCallsParenthesizedMethodCallParserRuleCall_1_1_0_0_0() { return cMethodCallsParenthesizedMethodCallParserRuleCall_1_1_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0_1() { return cFullStopKeyword_1_1_0_1; }
		
		//methodCalls+=ParenthesizedMethodCall
		public Assignment getMethodCallsAssignment_1_1_1() { return cMethodCallsAssignment_1_1_1; }
		
		//ParenthesizedMethodCall
		public RuleCall getMethodCallsParenthesizedMethodCallParserRuleCall_1_1_1_0() { return cMethodCallsParenthesizedMethodCallParserRuleCall_1_1_1_0; }
		
		//tree=Tree
		public Assignment getTreeAssignment_1_2() { return cTreeAssignment_1_2; }
		
		//Tree
		public RuleCall getTreeTreeParserRuleCall_1_2_0() { return cTreeTreeParserRuleCall_1_2_0; }
		
		//empty?='empty'
		public Assignment getEmptyAssignment_1_3() { return cEmptyAssignment_1_3; }
		
		//'empty'
		public Keyword getEmptyEmptyKeyword_1_3_0() { return cEmptyEmptyKeyword_1_3_0; }
		
		//argvalue=ARGVALUE
		public Assignment getArgvalueAssignment_1_4() { return cArgvalueAssignment_1_4; }
		
		//ARGVALUE
		public RuleCall getArgvalueARGVALUETerminalRuleCall_1_4_0() { return cArgvalueARGVALUETerminalRuleCall_1_4_0; }
		
		//literal=Literal ('as' cast=DATA_TYPE)?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_1_5_0() { return cLiteralAssignment_1_5_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_5_0_0() { return cLiteralLiteralParserRuleCall_1_5_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_5_1() { return cGroup_1_5_1; }
		
		//'as'
		public Keyword getAsKeyword_1_5_1_0() { return cAsKeyword_1_5_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_5_1_1() { return cCastAssignment_1_5_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_5_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_5_1_1_0; }
		
		//urn=UrnId
		public Assignment getUrnAssignment_1_6() { return cUrnAssignment_1_6; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_1_6_0() { return cUrnUrnIdParserRuleCall_1_6_0; }
		
		//id=PathName ('as' cast=DATA_TYPE)?
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//id=PathName
		public Assignment getIdAssignment_1_7_0() { return cIdAssignment_1_7_0; }
		
		//PathName
		public RuleCall getIdPathNameParserRuleCall_1_7_0_0() { return cIdPathNameParserRuleCall_1_7_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_7_1() { return cGroup_1_7_1; }
		
		//'as'
		public Keyword getAsKeyword_1_7_1_0() { return cAsKeyword_1_7_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_7_1_1() { return cCastAssignment_1_7_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_7_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_7_1_1_0; }
		
		//list=List
		public Assignment getListAssignment_1_8() { return cListAssignment_1_8; }
		
		//List
		public RuleCall getListListParserRuleCall_1_8_0() { return cListListParserRuleCall_1_8_0; }
		
		//map=Map
		public Assignment getMapAssignment_1_9() { return cMapAssignment_1_9; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_1_9_0() { return cMapMapParserRuleCall_1_9_0; }
		
		//constant=UPPERCASE_ID
		public Assignment getConstantAssignment_1_10() { return cConstantAssignment_1_10; }
		
		//UPPERCASE_ID
		public RuleCall getConstantUPPERCASE_IDTerminalRuleCall_1_10_0() { return cConstantUPPERCASE_IDTerminalRuleCall_1_10_0; }
		
		//observable=Observable
		public Assignment getObservableAssignment_1_11() { return cObservableAssignment_1_11; }
		
		//Observable
		public RuleCall getObservableObservableParserRuleCall_1_11_0() { return cObservableObservableParserRuleCall_1_11_0; }
		
		//expression=EXPR ('as' cast=DATA_TYPE)?
		public Group getGroup_1_12() { return cGroup_1_12; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_1_12_0() { return cExpressionAssignment_1_12_0; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_1_12_0_0() { return cExpressionEXPRTerminalRuleCall_1_12_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_12_1() { return cGroup_1_12_1; }
		
		//'as'
		public Keyword getAsKeyword_1_12_1_0() { return cAsKeyword_1_12_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_12_1_1() { return cCastAssignment_1_12_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_12_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_12_1_1_0; }
		
		//table=LookupTable
		public Assignment getTableAssignment_1_13() { return cTableAssignment_1_13; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_1_13_0() { return cTableLookupTableParserRuleCall_1_13_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_1_14() { return cQuantityAssignment_1_14; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_1_14_0() { return cQuantityQuantityParserRuleCall_1_14_0; }
		
		//component?='new' behavior=PathName ('(' (parameters=ParameterList)? ')')?
		public Group getGroup_1_15() { return cGroup_1_15; }
		
		//component?='new'
		public Assignment getComponentAssignment_1_15_0() { return cComponentAssignment_1_15_0; }
		
		//'new'
		public Keyword getComponentNewKeyword_1_15_0_0() { return cComponentNewKeyword_1_15_0_0; }
		
		//behavior=PathName
		public Assignment getBehaviorAssignment_1_15_1() { return cBehaviorAssignment_1_15_1; }
		
		//PathName
		public RuleCall getBehaviorPathNameParserRuleCall_1_15_1_0() { return cBehaviorPathNameParserRuleCall_1_15_1_0; }
		
		//('(' (parameters=ParameterList)? ')')?
		public Group getGroup_1_15_2() { return cGroup_1_15_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_15_2_0() { return cLeftParenthesisKeyword_1_15_2_0; }
		
		//(parameters=ParameterList)?
		public Assignment getParametersAssignment_1_15_2_1() { return cParametersAssignment_1_15_2_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_15_2_1_0() { return cParametersParameterListParserRuleCall_1_15_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_15_2_2() { return cRightParenthesisKeyword_1_15_2_2; }
		
		//('?' then=ValueWithConstructor ':' else=ValueWithConstructor)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2_0() { return cQuestionMarkKeyword_2_0; }
		
		//then=ValueWithConstructor
		public Assignment getThenAssignment_2_1() { return cThenAssignment_2_1; }
		
		//ValueWithConstructor
		public RuleCall getThenValueWithConstructorParserRuleCall_2_1_0() { return cThenValueWithConstructorParserRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//else=ValueWithConstructor
		public Assignment getElseAssignment_2_3() { return cElseAssignment_2_3; }
		
		//ValueWithConstructor
		public RuleCall getElseValueWithConstructorParserRuleCall_2_3_0() { return cElseValueWithConstructorParserRuleCall_2_3_0; }
	}
	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPathQuotablePathNameParserRuleCall_0_0_0 = (RuleCall)cPathAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cClassidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassidCAMELCASE_IDTerminalRuleCall_1_0 = (RuleCall)cClassidAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Constructor:
		//    (path=QuotablePathName '.')? classid=CAMELCASE_ID ('(' (parameters=ParameterList)? ')')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(path=QuotablePathName '.')? classid=CAMELCASE_ID ('(' (parameters=ParameterList)? ')')?
		public Group getGroup() { return cGroup; }
		
		//(path=QuotablePathName '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//path=QuotablePathName
		public Assignment getPathAssignment_0_0() { return cPathAssignment_0_0; }
		
		//QuotablePathName
		public RuleCall getPathQuotablePathNameParserRuleCall_0_0_0() { return cPathQuotablePathNameParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//classid=CAMELCASE_ID
		public Assignment getClassidAssignment_1() { return cClassidAssignment_1; }
		
		//CAMELCASE_ID
		public RuleCall getClassidCAMELCASE_IDTerminalRuleCall_1_0() { return cClassidCAMELCASE_IDTerminalRuleCall_1_0; }
		
		//('(' (parameters=ParameterList)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameters=ParameterList)?
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_1_0() { return cParametersParameterListParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ValueWithMetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ValueWithMetadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeferredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDeferredGraveAccentKeyword_0_0 = (Keyword)cDeferredAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTreeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTreeTreeParserRuleCall_1_0_0 = (RuleCall)cTreeAssignment_1_0.eContents().get(0);
		private final Assignment cArgvalueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cArgvalueARGVALUETerminalRuleCall_1_1_0 = (RuleCall)cArgvalueAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cLiteralAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_1_2_0_0 = (RuleCall)cLiteralAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cAsKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cCastAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_2_1_1_0 = (RuleCall)cCastAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cUrnAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cUrnUrnIdParserRuleCall_1_3_0 = (RuleCall)cUrnAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cConstantAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cConstantUPPERCASE_IDTerminalRuleCall_1_4_0_0 = (RuleCall)cConstantAssignment_1_4_0.eContents().get(0);
		private final Group cGroup_1_4_1 = (Group)cGroup_1_4.eContents().get(1);
		private final Keyword cAsKeyword_1_4_1_0 = (Keyword)cGroup_1_4_1.eContents().get(0);
		private final Assignment cCastAssignment_1_4_1_1 = (Assignment)cGroup_1_4_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_4_1_1_0 = (RuleCall)cCastAssignment_1_4_1_1.eContents().get(0);
		private final Assignment cIdAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cIdPathNameParserRuleCall_1_5_0 = (RuleCall)cIdAssignment_1_5.eContents().get(0);
		private final Assignment cListAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cListListParserRuleCall_1_6_0 = (RuleCall)cListAssignment_1_6.eContents().get(0);
		private final Assignment cMapAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cMapMapParserRuleCall_1_7_0 = (RuleCall)cMapAssignment_1_7.eContents().get(0);
		private final Assignment cObservableAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cObservableObservableParserRuleCall_1_8_0 = (RuleCall)cObservableAssignment_1_8.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cAlternatives_1.eContents().get(9);
		private final Assignment cExpressionAssignment_1_9_0 = (Assignment)cGroup_1_9.eContents().get(0);
		private final RuleCall cExpressionEXPRTerminalRuleCall_1_9_0_0 = (RuleCall)cExpressionAssignment_1_9_0.eContents().get(0);
		private final Group cGroup_1_9_1 = (Group)cGroup_1_9.eContents().get(1);
		private final Keyword cAsKeyword_1_9_1_0 = (Keyword)cGroup_1_9_1.eContents().get(0);
		private final Assignment cCastAssignment_1_9_1_1 = (Assignment)cGroup_1_9_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_9_1_1_0 = (RuleCall)cCastAssignment_1_9_1_1.eContents().get(0);
		private final Assignment cTableAssignment_1_10 = (Assignment)cAlternatives_1.eContents().get(10);
		private final RuleCall cTableLookupTableParserRuleCall_1_10_0 = (RuleCall)cTableAssignment_1_10.eContents().get(0);
		private final Assignment cQuantityAssignment_1_11 = (Assignment)cAlternatives_1.eContents().get(11);
		private final RuleCall cQuantityQuantityParserRuleCall_1_11_0 = (RuleCall)cQuantityAssignment_1_11.eContents().get(0);
		private final Assignment cMetadataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetadataMetadataParserRuleCall_2_0 = (RuleCall)cMetadataAssignment_2.eContents().get(0);
		
		//ValueWithMetadata returns Value:
		//    (deferred?='`')? (tree=Tree |
		//     argvalue=ARGVALUE |
		//     literal=Literal ('as' cast=DATA_TYPE)? |
		//     urn=UrnId |
		//     constant=UPPERCASE_ID ('as' cast=DATA_TYPE)? |
		//     id=PathName |
		//     list=List |
		//     map=Map |
		//     observable=Observable |
		//     expression=EXPR ('as' cast=DATA_TYPE)? |
		//     table=LookupTable |
		//     quantity=Quantity)
		//     (metadata=Metadata)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(deferred?='`')? (tree=Tree |
		// argvalue=ARGVALUE |
		// literal=Literal ('as' cast=DATA_TYPE)? |
		// urn=UrnId |
		// constant=UPPERCASE_ID ('as' cast=DATA_TYPE)? |
		// id=PathName |
		// list=List |
		// map=Map |
		// observable=Observable |
		// expression=EXPR ('as' cast=DATA_TYPE)? |
		// table=LookupTable |
		// quantity=Quantity)
		// (metadata=Metadata)?
		public Group getGroup() { return cGroup; }
		
		//(deferred?='`')?
		public Assignment getDeferredAssignment_0() { return cDeferredAssignment_0; }
		
		//'`'
		public Keyword getDeferredGraveAccentKeyword_0_0() { return cDeferredGraveAccentKeyword_0_0; }
		
		//(tree=Tree |
		//    argvalue=ARGVALUE |
		//    literal=Literal ('as' cast=DATA_TYPE)? |
		//    urn=UrnId |
		//    constant=UPPERCASE_ID ('as' cast=DATA_TYPE)? |
		//    id=PathName |
		//    list=List |
		//    map=Map |
		//    observable=Observable |
		//    expression=EXPR ('as' cast=DATA_TYPE)? |
		//    table=LookupTable |
		//    quantity=Quantity)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//tree=Tree
		public Assignment getTreeAssignment_1_0() { return cTreeAssignment_1_0; }
		
		//Tree
		public RuleCall getTreeTreeParserRuleCall_1_0_0() { return cTreeTreeParserRuleCall_1_0_0; }
		
		//argvalue=ARGVALUE
		public Assignment getArgvalueAssignment_1_1() { return cArgvalueAssignment_1_1; }
		
		//ARGVALUE
		public RuleCall getArgvalueARGVALUETerminalRuleCall_1_1_0() { return cArgvalueARGVALUETerminalRuleCall_1_1_0; }
		
		//literal=Literal ('as' cast=DATA_TYPE)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_1_2_0() { return cLiteralAssignment_1_2_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_2_0_0() { return cLiteralLiteralParserRuleCall_1_2_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//'as'
		public Keyword getAsKeyword_1_2_1_0() { return cAsKeyword_1_2_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_2_1_1() { return cCastAssignment_1_2_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_2_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_2_1_1_0; }
		
		//urn=UrnId
		public Assignment getUrnAssignment_1_3() { return cUrnAssignment_1_3; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_1_3_0() { return cUrnUrnIdParserRuleCall_1_3_0; }
		
		//constant=UPPERCASE_ID ('as' cast=DATA_TYPE)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//constant=UPPERCASE_ID
		public Assignment getConstantAssignment_1_4_0() { return cConstantAssignment_1_4_0; }
		
		//UPPERCASE_ID
		public RuleCall getConstantUPPERCASE_IDTerminalRuleCall_1_4_0_0() { return cConstantUPPERCASE_IDTerminalRuleCall_1_4_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }
		
		//'as'
		public Keyword getAsKeyword_1_4_1_0() { return cAsKeyword_1_4_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_4_1_1() { return cCastAssignment_1_4_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_4_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_4_1_1_0; }
		
		//id=PathName
		public Assignment getIdAssignment_1_5() { return cIdAssignment_1_5; }
		
		//PathName
		public RuleCall getIdPathNameParserRuleCall_1_5_0() { return cIdPathNameParserRuleCall_1_5_0; }
		
		//list=List
		public Assignment getListAssignment_1_6() { return cListAssignment_1_6; }
		
		//List
		public RuleCall getListListParserRuleCall_1_6_0() { return cListListParserRuleCall_1_6_0; }
		
		//map=Map
		public Assignment getMapAssignment_1_7() { return cMapAssignment_1_7; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_1_7_0() { return cMapMapParserRuleCall_1_7_0; }
		
		//observable=Observable
		public Assignment getObservableAssignment_1_8() { return cObservableAssignment_1_8; }
		
		//Observable
		public RuleCall getObservableObservableParserRuleCall_1_8_0() { return cObservableObservableParserRuleCall_1_8_0; }
		
		//expression=EXPR ('as' cast=DATA_TYPE)?
		public Group getGroup_1_9() { return cGroup_1_9; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_1_9_0() { return cExpressionAssignment_1_9_0; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_1_9_0_0() { return cExpressionEXPRTerminalRuleCall_1_9_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_9_1() { return cGroup_1_9_1; }
		
		//'as'
		public Keyword getAsKeyword_1_9_1_0() { return cAsKeyword_1_9_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_9_1_1() { return cCastAssignment_1_9_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_9_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_9_1_1_0; }
		
		//table=LookupTable
		public Assignment getTableAssignment_1_10() { return cTableAssignment_1_10; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_1_10_0() { return cTableLookupTableParserRuleCall_1_10_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_1_11() { return cQuantityAssignment_1_11; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_1_11_0() { return cQuantityQuantityParserRuleCall_1_11_0; }
		
		//(metadata=Metadata)?
		public Assignment getMetadataAssignment_2() { return cMetadataAssignment_2; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_2_0() { return cMetadataMetadataParserRuleCall_2_0; }
	}
	public class ValueWithMetadataWithoutTreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ValueWithMetadataWithoutTree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeferredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDeferredGraveAccentKeyword_0_0 = (Keyword)cDeferredAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cArgvalueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cArgvalueARGVALUETerminalRuleCall_1_0_0 = (RuleCall)cArgvalueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cLiteralAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_1_1_0_0 = (RuleCall)cLiteralAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cAsKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cCastAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_1_1_1_0 = (RuleCall)cCastAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cIdAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cIdPathNameParserRuleCall_1_2_0_0 = (RuleCall)cIdAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cAsKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cCastAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_2_1_1_0 = (RuleCall)cCastAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cUrnAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cUrnUrnIdParserRuleCall_1_3_0 = (RuleCall)cUrnAssignment_1_3.eContents().get(0);
		private final Assignment cListAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cListListParserRuleCall_1_4_0 = (RuleCall)cListAssignment_1_4.eContents().get(0);
		private final Assignment cMapAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cMapMapParserRuleCall_1_5_0 = (RuleCall)cMapAssignment_1_5.eContents().get(0);
		private final Assignment cObservableAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cObservableObservableParserRuleCall_1_6_0 = (RuleCall)cObservableAssignment_1_6.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Assignment cExpressionAssignment_1_7_0 = (Assignment)cGroup_1_7.eContents().get(0);
		private final RuleCall cExpressionEXPRTerminalRuleCall_1_7_0_0 = (RuleCall)cExpressionAssignment_1_7_0.eContents().get(0);
		private final Group cGroup_1_7_1 = (Group)cGroup_1_7.eContents().get(1);
		private final Keyword cAsKeyword_1_7_1_0 = (Keyword)cGroup_1_7_1.eContents().get(0);
		private final Assignment cCastAssignment_1_7_1_1 = (Assignment)cGroup_1_7_1.eContents().get(1);
		private final RuleCall cCastDATA_TYPEParserRuleCall_1_7_1_1_0 = (RuleCall)cCastAssignment_1_7_1_1.eContents().get(0);
		private final Assignment cTableAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cTableLookupTableParserRuleCall_1_8_0 = (RuleCall)cTableAssignment_1_8.eContents().get(0);
		private final Assignment cQuantityAssignment_1_9 = (Assignment)cAlternatives_1.eContents().get(9);
		private final RuleCall cQuantityQuantityParserRuleCall_1_9_0 = (RuleCall)cQuantityAssignment_1_9.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cThenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cThenValueParserRuleCall_2_1_0 = (RuleCall)cThenAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cElseAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cElseValueParserRuleCall_2_3_0 = (RuleCall)cElseAssignment_2_3.eContents().get(0);
		private final Assignment cMetadataAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetadataMetadataParserRuleCall_3_0 = (RuleCall)cMetadataAssignment_3.eContents().get(0);
		
		////ValueWithoutTree returns Value:
		////    argvalue=ARGVALUE |
		////    literal=Literal |
		////    id=PathName |
		////    urn=UrnId |
		////    list=List |
		////    map=Map |
		////    observable=Observable |
		////    expression=EXPR |
		////    table=LookupTable |
		////    quantity=Quantity
		////    ;
		////
		//ValueWithMetadataWithoutTree returns Value:
		//    (deferred?='`')? ((argvalue=ARGVALUE |
		//    literal=Literal ('as' cast=DATA_TYPE)? |
		//    id=PathName ('as' cast=DATA_TYPE)? |
		//    urn=UrnId |
		//    list=List |
		//    map=Map |
		//    observable=Observable |
		//    expression=EXPR ('as' cast=DATA_TYPE)? |
		//    table=LookupTable |
		//    quantity=Quantity)) ('?' then=Value ':' else=Value)?
		//    (metadata=Metadata)?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(deferred?='`')? ((argvalue=ARGVALUE |
		//literal=Literal ('as' cast=DATA_TYPE)? |
		//id=PathName ('as' cast=DATA_TYPE)? |
		//urn=UrnId |
		//list=List |
		//map=Map |
		//observable=Observable |
		//expression=EXPR ('as' cast=DATA_TYPE)? |
		//table=LookupTable |
		//quantity=Quantity)) ('?' then=Value ':' else=Value)?
		//(metadata=Metadata)?
		public Group getGroup() { return cGroup; }
		
		//(deferred?='`')?
		public Assignment getDeferredAssignment_0() { return cDeferredAssignment_0; }
		
		//'`'
		public Keyword getDeferredGraveAccentKeyword_0_0() { return cDeferredGraveAccentKeyword_0_0; }
		
		//((argvalue=ARGVALUE |
		//   literal=Literal ('as' cast=DATA_TYPE)? |
		//   id=PathName ('as' cast=DATA_TYPE)? |
		//   urn=UrnId |
		//   list=List |
		//   map=Map |
		//   observable=Observable |
		//   expression=EXPR ('as' cast=DATA_TYPE)? |
		//   table=LookupTable |
		//   quantity=Quantity))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//argvalue=ARGVALUE
		public Assignment getArgvalueAssignment_1_0() { return cArgvalueAssignment_1_0; }
		
		//ARGVALUE
		public RuleCall getArgvalueARGVALUETerminalRuleCall_1_0_0() { return cArgvalueARGVALUETerminalRuleCall_1_0_0; }
		
		//literal=Literal ('as' cast=DATA_TYPE)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_1_1_0() { return cLiteralAssignment_1_1_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_1_0_0() { return cLiteralLiteralParserRuleCall_1_1_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'as'
		public Keyword getAsKeyword_1_1_1_0() { return cAsKeyword_1_1_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_1_1_1() { return cCastAssignment_1_1_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_1_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_1_1_1_0; }
		
		//id=PathName ('as' cast=DATA_TYPE)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//id=PathName
		public Assignment getIdAssignment_1_2_0() { return cIdAssignment_1_2_0; }
		
		//PathName
		public RuleCall getIdPathNameParserRuleCall_1_2_0_0() { return cIdPathNameParserRuleCall_1_2_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//'as'
		public Keyword getAsKeyword_1_2_1_0() { return cAsKeyword_1_2_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_2_1_1() { return cCastAssignment_1_2_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_2_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_2_1_1_0; }
		
		//urn=UrnId
		public Assignment getUrnAssignment_1_3() { return cUrnAssignment_1_3; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_1_3_0() { return cUrnUrnIdParserRuleCall_1_3_0; }
		
		//list=List
		public Assignment getListAssignment_1_4() { return cListAssignment_1_4; }
		
		//List
		public RuleCall getListListParserRuleCall_1_4_0() { return cListListParserRuleCall_1_4_0; }
		
		//map=Map
		public Assignment getMapAssignment_1_5() { return cMapAssignment_1_5; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_1_5_0() { return cMapMapParserRuleCall_1_5_0; }
		
		//observable=Observable
		public Assignment getObservableAssignment_1_6() { return cObservableAssignment_1_6; }
		
		//Observable
		public RuleCall getObservableObservableParserRuleCall_1_6_0() { return cObservableObservableParserRuleCall_1_6_0; }
		
		//expression=EXPR ('as' cast=DATA_TYPE)?
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_1_7_0() { return cExpressionAssignment_1_7_0; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_1_7_0_0() { return cExpressionEXPRTerminalRuleCall_1_7_0_0; }
		
		//('as' cast=DATA_TYPE)?
		public Group getGroup_1_7_1() { return cGroup_1_7_1; }
		
		//'as'
		public Keyword getAsKeyword_1_7_1_0() { return cAsKeyword_1_7_1_0; }
		
		//cast=DATA_TYPE
		public Assignment getCastAssignment_1_7_1_1() { return cCastAssignment_1_7_1_1; }
		
		//DATA_TYPE
		public RuleCall getCastDATA_TYPEParserRuleCall_1_7_1_1_0() { return cCastDATA_TYPEParserRuleCall_1_7_1_1_0; }
		
		//table=LookupTable
		public Assignment getTableAssignment_1_8() { return cTableAssignment_1_8; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_1_8_0() { return cTableLookupTableParserRuleCall_1_8_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_1_9() { return cQuantityAssignment_1_9; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_1_9_0() { return cQuantityQuantityParserRuleCall_1_9_0; }
		
		//('?' then=Value ':' else=Value)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_2_0() { return cQuestionMarkKeyword_2_0; }
		
		//then=Value
		public Assignment getThenAssignment_2_1() { return cThenAssignment_2_1; }
		
		//Value
		public RuleCall getThenValueParserRuleCall_2_1_0() { return cThenValueParserRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//else=Value
		public Assignment getElseAssignment_2_3() { return cElseAssignment_2_3; }
		
		//Value
		public RuleCall getElseValueParserRuleCall_2_3_0() { return cElseValueParserRuleCall_2_3_0; }
		
		//(metadata=Metadata)?
		public Assignment getMetadataAssignment_3() { return cMetadataAssignment_3; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_3_0() { return cMetadataMetadataParserRuleCall_3_0; }
	}
	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Match");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBodyAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_0_2_0 = (RuleCall)cBodyAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAnnotationAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnnotationANNOTATION_IDTerminalRuleCall_1_0_0 = (RuleCall)cAnnotationAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAsKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFormalNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFormalNameLOWERCASE_IDTerminalRuleCall_1_1_1_0 = (RuleCall)cFormalNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cBodyAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cBodyStatementListParserRuleCall_1_3_0 = (RuleCall)cBodyAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cConstantAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cConstantUPPERCASE_IDTerminalRuleCall_2_0_0 = (RuleCall)cConstantAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBodyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_2_2_0 = (RuleCall)cBodyAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cBooleanAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cBooleanAlternatives_3_0_0 = (Alternatives)cBooleanAssignment_3_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_3_0_0_0 = (Keyword)cBooleanAlternatives_3_0_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_3_0_0_1 = (Keyword)cBooleanAlternatives_3_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cBodyAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_3_2_0 = (RuleCall)cBodyAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cTypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTypeCAMELCASE_IDTerminalRuleCall_4_0_0 = (RuleCall)cTypeAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cAsKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cFormalNameAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cFormalNameLOWERCASE_IDTerminalRuleCall_4_1_1_0 = (RuleCall)cFormalNameAssignment_4_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cBodyAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cBodyStatementListParserRuleCall_4_3_0 = (RuleCall)cBodyAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cRegexpAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cRegexpREGEXPTerminalRuleCall_5_0_0 = (RuleCall)cRegexpAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cAsKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cFormalNameAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cFormalNameLOWERCASE_IDTerminalRuleCall_5_1_1_0 = (RuleCall)cFormalNameAssignment_5_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cBodyAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cBodyStatementListParserRuleCall_5_3_0 = (RuleCall)cBodyAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cObservableAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cObservableObservableParserRuleCall_6_0_0 = (RuleCall)cObservableAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cAsKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cFormalNameAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cFormalNameLOWERCASE_IDTerminalRuleCall_6_1_1_0 = (RuleCall)cFormalNameAssignment_6_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cBodyAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cBodyStatementListParserRuleCall_6_3_0 = (RuleCall)cBodyAssignment_6_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cLiteralAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_7_0_0 = (RuleCall)cLiteralAssignment_7_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cBodyAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_7_2_0 = (RuleCall)cBodyAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cListAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cListListParserRuleCall_8_0_0 = (RuleCall)cListAssignment_8_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cBodyAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_8_2_0 = (RuleCall)cBodyAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cInKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cSetAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_9_1_0 = (RuleCall)cSetAssignment_9_1.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cAsKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cFormalNameAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cFormalNameLOWERCASE_IDTerminalRuleCall_9_2_1_0 = (RuleCall)cFormalNameAssignment_9_2_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cBodyAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final RuleCall cBodyStatementListParserRuleCall_9_4_0 = (RuleCall)cBodyAssignment_9_4.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cQuantityAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cQuantityQuantityParserRuleCall_10_0_0 = (RuleCall)cQuantityAssignment_10_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cBodyAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_10_2_0 = (RuleCall)cBodyAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cExprAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cExprEXPRTerminalRuleCall_11_0_0 = (RuleCall)cExprAssignment_11_0.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Keyword cAsKeyword_11_1_0 = (Keyword)cGroup_11_1.eContents().get(0);
		private final Assignment cFormalNameAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final RuleCall cFormalNameLOWERCASE_IDTerminalRuleCall_11_1_1_0 = (RuleCall)cFormalNameAssignment_11_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cBodyAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cBodyStatementListParserRuleCall_11_3_0 = (RuleCall)cBodyAssignment_11_3.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cNodataAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Keyword cNodataUnknownKeyword_12_0_0 = (Keyword)cNodataAssignment_12_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cBodyAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_12_2_0 = (RuleCall)cBodyAssignment_12_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Assignment cStarAssignment_13_0 = (Assignment)cGroup_13.eContents().get(0);
		private final Keyword cStarAsteriskKeyword_13_0_0 = (Keyword)cStarAssignment_13_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cBodyAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_13_2_0 = (RuleCall)cBodyAssignment_13_2.eContents().get(0);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Assignment cAnythingAssignment_14_0 = (Assignment)cGroup_14.eContents().get(0);
		private final Keyword cAnythingNumberSignKeyword_14_0_0 = (Keyword)cAnythingAssignment_14_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cBodyAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_14_2_0 = (RuleCall)cBodyAssignment_14_2.eContents().get(0);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Assignment cEmptyAssignment_15_0 = (Assignment)cGroup_15.eContents().get(0);
		private final Keyword cEmptyEmptyKeyword_15_0_0 = (Keyword)cEmptyAssignment_15_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Assignment cBodyAssignment_15_2 = (Assignment)cGroup_15.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_15_2_0 = (RuleCall)cBodyAssignment_15_2.eContents().get(0);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Assignment cExceptionAssignment_16_0 = (Assignment)cGroup_16.eContents().get(0);
		private final Keyword cExceptionExceptionKeyword_16_0_0 = (Keyword)cExceptionAssignment_16_0.eContents().get(0);
		private final Group cGroup_16_1 = (Group)cGroup_16.eContents().get(1);
		private final Keyword cAsKeyword_16_1_0 = (Keyword)cGroup_16_1.eContents().get(0);
		private final Assignment cFormalNameAssignment_16_1_1 = (Assignment)cGroup_16_1.eContents().get(1);
		private final RuleCall cFormalNameLOWERCASE_IDTerminalRuleCall_16_1_1_0 = (RuleCall)cFormalNameAssignment_16_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cBodyAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final RuleCall cBodyStatementListParserRuleCall_16_3_0 = (RuleCall)cBodyAssignment_16_3.eContents().get(0);
		
		//Match:
		//    id=LOWERCASE_ID '->' body=StatementList  |
		//    annotation=ANNOTATION_ID ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//    constant=UPPERCASE_ID '->' body=StatementList  |
		//    boolean=('true'|'false') '->' body=StatementList  |
		//    type=CAMELCASE_ID ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//    regexp=REGEXP ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//    observable=Observable ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//    literal=Literal '->' body=StatementList |
		//    list=List '->' body=StatementList |
		//    'in' set=List ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//    quantity=Quantity '->' body=StatementList |
		//    expr=EXPR ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//    nodata='unknown' '->' body=StatementList |
		//    star?='*' '->' body=StatementList |
		//    anything?='#''->' body=StatementList |
		//    empty?='empty' '->' body=StatementList |
		//    exception?='exception' ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=LOWERCASE_ID '->' body=StatementList  |
		//annotation=ANNOTATION_ID ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//constant=UPPERCASE_ID '->' body=StatementList  |
		//boolean=('true'|'false') '->' body=StatementList  |
		//type=CAMELCASE_ID ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//regexp=REGEXP ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//observable=Observable ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//literal=Literal '->' body=StatementList |
		//list=List '->' body=StatementList |
		//'in' set=List ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//quantity=Quantity '->' body=StatementList |
		//expr=EXPR ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
		//nodata='unknown' '->' body=StatementList |
		//star?='*' '->' body=StatementList |
		//anything?='#''->' body=StatementList |
		//empty?='empty' '->' body=StatementList |
		//exception?='exception' ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=LOWERCASE_ID '->' body=StatementList
		public Group getGroup_0() { return cGroup_0; }
		
		//id=LOWERCASE_ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_0_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_0_2() { return cBodyAssignment_0_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_0_2_0() { return cBodyStatementListParserRuleCall_0_2_0; }
		
		//annotation=ANNOTATION_ID ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
		public Group getGroup_1() { return cGroup_1; }
		
		//annotation=ANNOTATION_ID
		public Assignment getAnnotationAssignment_1_0() { return cAnnotationAssignment_1_0; }
		
		//ANNOTATION_ID
		public RuleCall getAnnotationANNOTATION_IDTerminalRuleCall_1_0_0() { return cAnnotationANNOTATION_IDTerminalRuleCall_1_0_0; }
		
		//('as' formalName=LOWERCASE_ID)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'as'
		public Keyword getAsKeyword_1_1_0() { return cAsKeyword_1_1_0; }
		
		//formalName=LOWERCASE_ID
		public Assignment getFormalNameAssignment_1_1_1() { return cFormalNameAssignment_1_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getFormalNameLOWERCASE_IDTerminalRuleCall_1_1_1_0() { return cFormalNameLOWERCASE_IDTerminalRuleCall_1_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_2; }
		
		//body=StatementList
		public Assignment getBodyAssignment_1_3() { return cBodyAssignment_1_3; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_1_3_0() { return cBodyStatementListParserRuleCall_1_3_0; }
		
		//constant=UPPERCASE_ID '->' body=StatementList
		public Group getGroup_2() { return cGroup_2; }
		
		//constant=UPPERCASE_ID
		public Assignment getConstantAssignment_2_0() { return cConstantAssignment_2_0; }
		
		//UPPERCASE_ID
		public RuleCall getConstantUPPERCASE_IDTerminalRuleCall_2_0_0() { return cConstantUPPERCASE_IDTerminalRuleCall_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_2_2() { return cBodyAssignment_2_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_2_2_0() { return cBodyStatementListParserRuleCall_2_2_0; }
		
		//boolean=('true'|'false') '->' body=StatementList
		public Group getGroup_3() { return cGroup_3; }
		
		//boolean=('true'|'false')
		public Assignment getBooleanAssignment_3_0() { return cBooleanAssignment_3_0; }
		
		//('true'|'false')
		public Alternatives getBooleanAlternatives_3_0_0() { return cBooleanAlternatives_3_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_3_0_0_0() { return cBooleanTrueKeyword_3_0_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_3_0_0_1() { return cBooleanFalseKeyword_3_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_1() { return cHyphenMinusGreaterThanSignKeyword_3_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_3_2() { return cBodyAssignment_3_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_3_2_0() { return cBodyStatementListParserRuleCall_3_2_0; }
		
		//type=CAMELCASE_ID ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
		public Group getGroup_4() { return cGroup_4; }
		
		//type=CAMELCASE_ID
		public Assignment getTypeAssignment_4_0() { return cTypeAssignment_4_0; }
		
		//CAMELCASE_ID
		public RuleCall getTypeCAMELCASE_IDTerminalRuleCall_4_0_0() { return cTypeCAMELCASE_IDTerminalRuleCall_4_0_0; }
		
		//('as' formalName=LOWERCASE_ID)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'as'
		public Keyword getAsKeyword_4_1_0() { return cAsKeyword_4_1_0; }
		
		//formalName=LOWERCASE_ID
		public Assignment getFormalNameAssignment_4_1_1() { return cFormalNameAssignment_4_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getFormalNameLOWERCASE_IDTerminalRuleCall_4_1_1_0() { return cFormalNameLOWERCASE_IDTerminalRuleCall_4_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_2() { return cHyphenMinusGreaterThanSignKeyword_4_2; }
		
		//body=StatementList
		public Assignment getBodyAssignment_4_3() { return cBodyAssignment_4_3; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_4_3_0() { return cBodyStatementListParserRuleCall_4_3_0; }
		
		//regexp=REGEXP ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
		public Group getGroup_5() { return cGroup_5; }
		
		//regexp=REGEXP
		public Assignment getRegexpAssignment_5_0() { return cRegexpAssignment_5_0; }
		
		//REGEXP
		public RuleCall getRegexpREGEXPTerminalRuleCall_5_0_0() { return cRegexpREGEXPTerminalRuleCall_5_0_0; }
		
		//('as' formalName=LOWERCASE_ID)?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'as'
		public Keyword getAsKeyword_5_1_0() { return cAsKeyword_5_1_0; }
		
		//formalName=LOWERCASE_ID
		public Assignment getFormalNameAssignment_5_1_1() { return cFormalNameAssignment_5_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getFormalNameLOWERCASE_IDTerminalRuleCall_5_1_1_0() { return cFormalNameLOWERCASE_IDTerminalRuleCall_5_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_2() { return cHyphenMinusGreaterThanSignKeyword_5_2; }
		
		//body=StatementList
		public Assignment getBodyAssignment_5_3() { return cBodyAssignment_5_3; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_5_3_0() { return cBodyStatementListParserRuleCall_5_3_0; }
		
		//observable=Observable ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
		public Group getGroup_6() { return cGroup_6; }
		
		//observable=Observable
		public Assignment getObservableAssignment_6_0() { return cObservableAssignment_6_0; }
		
		//Observable
		public RuleCall getObservableObservableParserRuleCall_6_0_0() { return cObservableObservableParserRuleCall_6_0_0; }
		
		//('as' formalName=LOWERCASE_ID)?
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'as'
		public Keyword getAsKeyword_6_1_0() { return cAsKeyword_6_1_0; }
		
		//formalName=LOWERCASE_ID
		public Assignment getFormalNameAssignment_6_1_1() { return cFormalNameAssignment_6_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getFormalNameLOWERCASE_IDTerminalRuleCall_6_1_1_0() { return cFormalNameLOWERCASE_IDTerminalRuleCall_6_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6_2() { return cHyphenMinusGreaterThanSignKeyword_6_2; }
		
		//body=StatementList
		public Assignment getBodyAssignment_6_3() { return cBodyAssignment_6_3; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_6_3_0() { return cBodyStatementListParserRuleCall_6_3_0; }
		
		//literal=Literal '->' body=StatementList
		public Group getGroup_7() { return cGroup_7; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_7_0() { return cLiteralAssignment_7_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_7_0_0() { return cLiteralLiteralParserRuleCall_7_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7_1() { return cHyphenMinusGreaterThanSignKeyword_7_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_7_2() { return cBodyAssignment_7_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_7_2_0() { return cBodyStatementListParserRuleCall_7_2_0; }
		
		//list=List '->' body=StatementList
		public Group getGroup_8() { return cGroup_8; }
		
		//list=List
		public Assignment getListAssignment_8_0() { return cListAssignment_8_0; }
		
		//List
		public RuleCall getListListParserRuleCall_8_0_0() { return cListListParserRuleCall_8_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_8_1() { return cHyphenMinusGreaterThanSignKeyword_8_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_8_2() { return cBodyAssignment_8_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_8_2_0() { return cBodyStatementListParserRuleCall_8_2_0; }
		
		//'in' set=List ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
		public Group getGroup_9() { return cGroup_9; }
		
		//'in'
		public Keyword getInKeyword_9_0() { return cInKeyword_9_0; }
		
		//set=List
		public Assignment getSetAssignment_9_1() { return cSetAssignment_9_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_9_1_0() { return cSetListParserRuleCall_9_1_0; }
		
		//('as' formalName=LOWERCASE_ID)?
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//'as'
		public Keyword getAsKeyword_9_2_0() { return cAsKeyword_9_2_0; }
		
		//formalName=LOWERCASE_ID
		public Assignment getFormalNameAssignment_9_2_1() { return cFormalNameAssignment_9_2_1; }
		
		//LOWERCASE_ID
		public RuleCall getFormalNameLOWERCASE_IDTerminalRuleCall_9_2_1_0() { return cFormalNameLOWERCASE_IDTerminalRuleCall_9_2_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_9_3() { return cHyphenMinusGreaterThanSignKeyword_9_3; }
		
		//body=StatementList
		public Assignment getBodyAssignment_9_4() { return cBodyAssignment_9_4; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_9_4_0() { return cBodyStatementListParserRuleCall_9_4_0; }
		
		//quantity=Quantity '->' body=StatementList
		public Group getGroup_10() { return cGroup_10; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_10_0() { return cQuantityAssignment_10_0; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_10_0_0() { return cQuantityQuantityParserRuleCall_10_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_10_1() { return cHyphenMinusGreaterThanSignKeyword_10_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_10_2() { return cBodyAssignment_10_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_10_2_0() { return cBodyStatementListParserRuleCall_10_2_0; }
		
		//expr=EXPR ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
		public Group getGroup_11() { return cGroup_11; }
		
		//expr=EXPR
		public Assignment getExprAssignment_11_0() { return cExprAssignment_11_0; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_11_0_0() { return cExprEXPRTerminalRuleCall_11_0_0; }
		
		//('as' formalName=LOWERCASE_ID)?
		public Group getGroup_11_1() { return cGroup_11_1; }
		
		//'as'
		public Keyword getAsKeyword_11_1_0() { return cAsKeyword_11_1_0; }
		
		//formalName=LOWERCASE_ID
		public Assignment getFormalNameAssignment_11_1_1() { return cFormalNameAssignment_11_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getFormalNameLOWERCASE_IDTerminalRuleCall_11_1_1_0() { return cFormalNameLOWERCASE_IDTerminalRuleCall_11_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_11_2() { return cHyphenMinusGreaterThanSignKeyword_11_2; }
		
		//body=StatementList
		public Assignment getBodyAssignment_11_3() { return cBodyAssignment_11_3; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_11_3_0() { return cBodyStatementListParserRuleCall_11_3_0; }
		
		//nodata='unknown' '->' body=StatementList
		public Group getGroup_12() { return cGroup_12; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_12_0() { return cNodataAssignment_12_0; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_12_0_0() { return cNodataUnknownKeyword_12_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_12_1() { return cHyphenMinusGreaterThanSignKeyword_12_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_12_2() { return cBodyAssignment_12_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_12_2_0() { return cBodyStatementListParserRuleCall_12_2_0; }
		
		//star?='*' '->' body=StatementList
		public Group getGroup_13() { return cGroup_13; }
		
		//star?='*'
		public Assignment getStarAssignment_13_0() { return cStarAssignment_13_0; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_13_0_0() { return cStarAsteriskKeyword_13_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_13_1() { return cHyphenMinusGreaterThanSignKeyword_13_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_13_2() { return cBodyAssignment_13_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_13_2_0() { return cBodyStatementListParserRuleCall_13_2_0; }
		
		//anything?='#''->' body=StatementList
		public Group getGroup_14() { return cGroup_14; }
		
		//anything?='#'
		public Assignment getAnythingAssignment_14_0() { return cAnythingAssignment_14_0; }
		
		//'#'
		public Keyword getAnythingNumberSignKeyword_14_0_0() { return cAnythingNumberSignKeyword_14_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_14_1() { return cHyphenMinusGreaterThanSignKeyword_14_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_14_2() { return cBodyAssignment_14_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_14_2_0() { return cBodyStatementListParserRuleCall_14_2_0; }
		
		//empty?='empty' '->' body=StatementList
		public Group getGroup_15() { return cGroup_15; }
		
		//empty?='empty'
		public Assignment getEmptyAssignment_15_0() { return cEmptyAssignment_15_0; }
		
		//'empty'
		public Keyword getEmptyEmptyKeyword_15_0_0() { return cEmptyEmptyKeyword_15_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_15_1() { return cHyphenMinusGreaterThanSignKeyword_15_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_15_2() { return cBodyAssignment_15_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_15_2_0() { return cBodyStatementListParserRuleCall_15_2_0; }
		
		//exception?='exception' ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
		public Group getGroup_16() { return cGroup_16; }
		
		//exception?='exception'
		public Assignment getExceptionAssignment_16_0() { return cExceptionAssignment_16_0; }
		
		//'exception'
		public Keyword getExceptionExceptionKeyword_16_0_0() { return cExceptionExceptionKeyword_16_0_0; }
		
		//('as' formalName=LOWERCASE_ID)?
		public Group getGroup_16_1() { return cGroup_16_1; }
		
		//'as'
		public Keyword getAsKeyword_16_1_0() { return cAsKeyword_16_1_0; }
		
		//formalName=LOWERCASE_ID
		public Assignment getFormalNameAssignment_16_1_1() { return cFormalNameAssignment_16_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getFormalNameLOWERCASE_IDTerminalRuleCall_16_1_1_0() { return cFormalNameLOWERCASE_IDTerminalRuleCall_16_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_16_2() { return cHyphenMinusGreaterThanSignKeyword_16_2; }
		
		//body=StatementList
		public Assignment getBodyAssignment_16_3() { return cBodyAssignment_16_3; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_16_3_0() { return cBodyStatementListParserRuleCall_16_3_0; }
	}
	public class UrnIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UrnId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrnKlabKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPathNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPathNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cPathNameParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final RuleCall cPathParserRuleCall_7_0 = (RuleCall)cAlternatives_7.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_7_1 = (RuleCall)cAlternatives_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cVersionNumberParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cNumberSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Alternatives cAlternatives_9_1 = (Alternatives)cGroup_9.eContents().get(1);
		private final RuleCall cPathParserRuleCall_9_1_0 = (RuleCall)cAlternatives_9_1.eContents().get(0);
		private final RuleCall cUrnKvpParserRuleCall_9_1_1 = (RuleCall)cAlternatives_9_1.eContents().get(1);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cAmpersandKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Alternatives cAlternatives_9_2_1 = (Alternatives)cGroup_9_2.eContents().get(1);
		private final RuleCall cPathParserRuleCall_9_2_1_0 = (RuleCall)cAlternatives_9_2_1.eContents().get(0);
		private final RuleCall cUrnKvpParserRuleCall_9_2_1_1 = (RuleCall)cAlternatives_9_2_1.eContents().get(1);
		
		///**
		// * URN is 4 sections: node (or 'klab' for internal resources), catalog (or adapter for internal resources), namespace and
		// * resource ID. Admits a version number and a fragment (with only lowercase_id chars in it). It is
		// * legal, but not required, to start with the default prefix urn:klab:. The 4th path element (the ID) may be
		// * integer.
		// */
		//UrnId:
		//    ('urn:klab:')? PathName ':'  PathName ':' PathName ':' (Path|INT) (':' VersionNumber)? ('#' (Path|UrnKvp) ('&' (Path|UrnKvp))*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('urn:klab:')? PathName ':'  PathName ':' PathName ':' (Path|INT) (':' VersionNumber)? ('#' (Path|UrnKvp) ('&' (Path|UrnKvp))*)?
		public Group getGroup() { return cGroup; }
		
		//('urn:klab:')?
		public Keyword getUrnKlabKeyword_0() { return cUrnKlabKeyword_0; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_1() { return cPathNameParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_3() { return cPathNameParserRuleCall_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_5() { return cPathNameParserRuleCall_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//(Path|INT)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//Path
		public RuleCall getPathParserRuleCall_7_0() { return cPathParserRuleCall_7_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_7_1() { return cINTTerminalRuleCall_7_1; }
		
		//(':' VersionNumber)?
		public Group getGroup_8() { return cGroup_8; }
		
		//':'
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }
		
		//VersionNumber
		public RuleCall getVersionNumberParserRuleCall_8_1() { return cVersionNumberParserRuleCall_8_1; }
		
		//('#' (Path|UrnKvp) ('&' (Path|UrnKvp))*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'#'
		public Keyword getNumberSignKeyword_9_0() { return cNumberSignKeyword_9_0; }
		
		//(Path|UrnKvp)
		public Alternatives getAlternatives_9_1() { return cAlternatives_9_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_9_1_0() { return cPathParserRuleCall_9_1_0; }
		
		//UrnKvp
		public RuleCall getUrnKvpParserRuleCall_9_1_1() { return cUrnKvpParserRuleCall_9_1_1; }
		
		//('&' (Path|UrnKvp))*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_9_2_0() { return cAmpersandKeyword_9_2_0; }
		
		//(Path|UrnKvp)
		public Alternatives getAlternatives_9_2_1() { return cAlternatives_9_2_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_9_2_1_0() { return cPathParserRuleCall_9_2_1_0; }
		
		//UrnKvp
		public RuleCall getUrnKvpParserRuleCall_9_2_1_1() { return cUrnKvpParserRuleCall_9_2_1_1; }
	}
	public class UrnKvpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UrnKvp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cPathParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//UrnKvp:
		//    PathName '=' (Path|INT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PathName '=' (Path|INT)
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(Path|INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//Path
		public RuleCall getPathParserRuleCall_2_0() { return cPathParserRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentsListElementParserRuleCall_2_0 = (RuleCall)cContentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//List:
		//    {List} '(' contents+=ListElement* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{List} '(' contents+=ListElement* ')'
		public Group getGroup() { return cGroup; }
		
		//{List}
		public Action getListAction_0() { return cListAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//contents+=ListElement*
		public Assignment getContentsAssignment_2() { return cContentsAssignment_2; }
		
		//ListElement
		public RuleCall getContentsListElementParserRuleCall_2_0() { return cContentsListElementParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ListElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ListElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueValueWithMetadataParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTagTAGTerminalRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//ListElement:
		//    value=ValueWithMetadata |
		//    tag=TAG
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ValueWithMetadata |
		//tag=TAG
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=ValueWithMetadata
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ValueWithMetadata
		public RuleCall getValueValueWithMetadataParserRuleCall_0_0() { return cValueValueWithMetadataParserRuleCall_0_0; }
		
		//tag=TAG
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//TAG
		public RuleCall getTagTAGTerminalRuleCall_1_0() { return cTagTAGTerminalRuleCall_1_0; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntriesMapEntryParserRuleCall_2_0_0 = (RuleCall)cEntriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntriesMapEntryParserRuleCall_2_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Map:
		//    {Map} '#{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Map} '#{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Map}
		public Action getMapAction_0() { return cMapAction_0; }
		
		//'#{'
		public Keyword getNumberSignLeftCurlyBracketKeyword_1() { return cNumberSignLeftCurlyBracketKeyword_1; }
		
		//(entries+=MapEntry (=> (',') entries+=MapEntry)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entries+=MapEntry
		public Assignment getEntriesAssignment_2_0() { return cEntriesAssignment_2_0; }
		
		//MapEntry
		public RuleCall getEntriesMapEntryParserRuleCall_2_0_0() { return cEntriesMapEntryParserRuleCall_2_0_0; }
		
		//(=> (',') entries+=MapEntry)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//=> (',')
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_1_0_0() { return cCommaKeyword_2_1_0_0; }
		
		//entries+=MapEntry
		public Assignment getEntriesAssignment_2_1_1() { return cEntriesAssignment_2_1_1; }
		
		//MapEntry
		public RuleCall getEntriesMapEntryParserRuleCall_2_1_1_0() { return cEntriesMapEntryParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Tree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRootAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRootValueWithMetadataWithoutTreeParserRuleCall_0_0 = (RuleCall)cRootAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cValueValueWithMetadataWithoutTreeParserRuleCall_1_1_0_0 = (RuleCall)cValueAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cGroup_1_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1_0_0 = (Keyword)cGroup_1_1_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1_0_1 = (Assignment)cGroup_1_1_1_0.eContents().get(1);
		private final RuleCall cValueTreeParserRuleCall_1_1_1_0_1_0 = (RuleCall)cValueAssignment_1_1_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_0_2 = (Keyword)cGroup_1_1_1_0.eContents().get(2);
		
		//Tree:
		//    root=ValueWithMetadataWithoutTree (=> '<-' (value+=ValueWithMetadataWithoutTree | => ('(' value+=Tree ')')))+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//root=ValueWithMetadataWithoutTree (=> '<-' (value+=ValueWithMetadataWithoutTree | => ('(' value+=Tree ')')))+
		public Group getGroup() { return cGroup; }
		
		//root=ValueWithMetadataWithoutTree
		public Assignment getRootAssignment_0() { return cRootAssignment_0; }
		
		//ValueWithMetadataWithoutTree
		public RuleCall getRootValueWithMetadataWithoutTreeParserRuleCall_0_0() { return cRootValueWithMetadataWithoutTreeParserRuleCall_0_0; }
		
		//(=> '<-' (value+=ValueWithMetadataWithoutTree | => ('(' value+=Tree ')')))+
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1_0() { return cLessThanSignHyphenMinusKeyword_1_0; }
		
		//(value+=ValueWithMetadataWithoutTree | => ('(' value+=Tree ')'))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//value+=ValueWithMetadataWithoutTree
		public Assignment getValueAssignment_1_1_0() { return cValueAssignment_1_1_0; }
		
		//ValueWithMetadataWithoutTree
		public RuleCall getValueValueWithMetadataWithoutTreeParserRuleCall_1_1_0_0() { return cValueValueWithMetadataWithoutTreeParserRuleCall_1_1_0_0; }
		
		//=> ('(' value+=Tree ')')
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'(' value+=Tree ')'
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_1_0_0() { return cLeftParenthesisKeyword_1_1_1_0_0; }
		
		//value+=Tree
		public Assignment getValueAssignment_1_1_1_0_1() { return cValueAssignment_1_1_1_0_1; }
		
		//Tree
		public RuleCall getValueTreeParserRuleCall_1_1_1_0_1_0() { return cValueTreeParserRuleCall_1_1_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_1_0_2() { return cRightParenthesisKeyword_1_1_1_0_2; }
	}
	public class MapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.MapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassifierClassifierParserRuleCall_0_0 = (RuleCall)cClassifierAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueWithMetadataParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MapEntry:
		//    classifier=Classifier ':' value=ValueWithMetadata
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//classifier=Classifier ':' value=ValueWithMetadata
		public Group getGroup() { return cGroup; }
		
		//classifier=Classifier
		public Assignment getClassifierAssignment_0() { return cClassifierAssignment_0; }
		
		//Classifier
		public RuleCall getClassifierClassifierParserRuleCall_0_0() { return cClassifierClassifierParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ValueWithMetadata
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ValueWithMetadata
		public RuleCall getValueValueWithMetadataParserRuleCall_2_0() { return cValueValueWithMetadataParserRuleCall_2_0; }
	}
	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Classifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInt0Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_1_0_0 = (RuleCall)cInt0Assignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftLimitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_1_1_0_0 = (Keyword)cLeftLimitAssignment_1_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInt1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_1_3_0 = (RuleCall)cInt1Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cRightLimitAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_1_4_0_0 = (Keyword)cRightLimitAssignment_1_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumNumberParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_3_1_0 = (RuleCall)cSetAssignment_3_1.eContents().get(0);
		private final Assignment cStringAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Assignment cObservableAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cObservableObservableParserRuleCall_5_0 = (RuleCall)cObservableAssignment_5.eContents().get(0);
		private final Assignment cIdAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Alternatives cIdAlternatives_6_0 = (Alternatives)cIdAssignment_6.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_6_0_0 = (RuleCall)cIdAlternatives_6_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_ID_DASHTerminalRuleCall_6_0_1 = (RuleCall)cIdAlternatives_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cOpAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_7_0_0 = (RuleCall)cOpAssignment_7_0.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		private final Assignment cNodataAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cNodataUnknownKeyword_8_0 = (Keyword)cNodataAssignment_8.eContents().get(0);
		private final Assignment cMapAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cMapMapParserRuleCall_9_0 = (RuleCall)cMapAssignment_9.eContents().get(0);
		private final Assignment cStarAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cStarAsteriskKeyword_10_0 = (Keyword)cStarAssignment_10.eContents().get(0);
		
		//Classifier:
		//    (boolean='true' | boolean='false') |
		//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//    num=Number |
		//    'in' set=List |
		//    string=STRING |
		//    observable=Observable |
		//    id = (LOWERCASE_ID | LOWERCASE_ID_DASH) |
		//    op=REL_OPERATOR expression=Number |
		//    nodata='unknown' |
		//    map=Map |
		//    star?='*';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') |
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//num=Number |
		//'in' set=List |
		//string=STRING |
		//observable=Observable |
		//id = (LOWERCASE_ID | LOWERCASE_ID_DASH) |
		//op=REL_OPERATOR expression=Number |
		//nodata='unknown' |
		//map=Map |
		//star?='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_1() { return cGroup_1; }
		
		//int0=Number
		public Assignment getInt0Assignment_1_0() { return cInt0Assignment_1_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_1_0_0() { return cInt0NumberParserRuleCall_1_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_1_1_0() { return cLeftLimitAssignment_1_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_1_1_0_0() { return cLeftLimitInclusiveKeyword_1_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_1_1() { return cExclusiveKeyword_1_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_1_3() { return cInt1Assignment_1_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_1_3_0() { return cInt1NumberParserRuleCall_1_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_1_4_0() { return cRightLimitAssignment_1_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_1_4_0_0() { return cRightLimitInclusiveKeyword_1_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_4_1() { return cExclusiveKeyword_1_4_1; }
		
		//num=Number
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_2_0() { return cNumNumberParserRuleCall_2_0; }
		
		//'in' set=List
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//set=List
		public Assignment getSetAssignment_3_1() { return cSetAssignment_3_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_3_1_0() { return cSetListParserRuleCall_3_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0() { return cStringSTRINGTerminalRuleCall_4_0; }
		
		//observable=Observable
		public Assignment getObservableAssignment_5() { return cObservableAssignment_5; }
		
		//Observable
		public RuleCall getObservableObservableParserRuleCall_5_0() { return cObservableObservableParserRuleCall_5_0; }
		
		//id = (LOWERCASE_ID | LOWERCASE_ID_DASH)
		public Assignment getIdAssignment_6() { return cIdAssignment_6; }
		
		//(LOWERCASE_ID | LOWERCASE_ID_DASH)
		public Alternatives getIdAlternatives_6_0() { return cIdAlternatives_6_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_6_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_6_0_0; }
		
		//LOWERCASE_ID_DASH
		public RuleCall getIdLOWERCASE_ID_DASHTerminalRuleCall_6_0_1() { return cIdLOWERCASE_ID_DASHTerminalRuleCall_6_0_1; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_7() { return cGroup_7; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_7_0() { return cOpAssignment_7_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_7_0_0() { return cOpREL_OPERATORParserRuleCall_7_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_7_1_0() { return cExpressionNumberParserRuleCall_7_1_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_8() { return cNodataAssignment_8; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_8_0() { return cNodataUnknownKeyword_8_0; }
		
		//map=Map
		public Assignment getMapAssignment_9() { return cMapAssignment_9; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_9_0() { return cMapMapParserRuleCall_9_0; }
		
		//star?='*'
		public Assignment getStarAssignment_10() { return cStarAssignment_10; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_10_0() { return cStarAsteriskKeyword_10_0; }
	}
	public class ObservableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Observable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObservableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObservableObservableSemanticsParserRuleCall_1_0 = (RuleCall)cObservableAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Observable:
		//    '{' observable=ObservableSemantics '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' observable=ObservableSemantics '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//observable=ObservableSemantics
		public Assignment getObservableAssignment_1() { return cObservableAssignment_1; }
		
		//ObservableSemantics
		public RuleCall getObservableObservableSemanticsParserRuleCall_1_0() { return cObservableObservableSemanticsParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class LookupTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.LookupTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLookupTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTableTableParserRuleCall_2_0 = (RuleCall)cTableAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Lookup table literal. May be overkill.
		//LookupTable: {LookupTable}
		//    '{{' table=Table? '}}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LookupTable}
		//   '{{' table=Table? '}}'
		public Group getGroup() { return cGroup; }
		
		//{LookupTable}
		public Action getLookupTableAction_0() { return cLookupTableAction_0; }
		
		//'{{'
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketLeftCurlyBracketKeyword_1; }
		
		//table=Table?
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_2_0() { return cTableTableParserRuleCall_2_0; }
		
		//'}}'
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_3() { return cRightCurlyBracketRightCurlyBracketKeyword_3; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cHeadersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cHeadersHeaderRowParserRuleCall_0_0_0 = (RuleCall)cHeadersAssignment_0_0.eContents().get(0);
		private final RuleCall cSEPARATORTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cRowsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_1_0 = (RuleCall)cRowsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRowsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_2_1_0 = (RuleCall)cRowsAssignment_2_1.eContents().get(0);
		
		//Table:
		//    (headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*
		public Group getGroup() { return cGroup; }
		
		//(headers=HeaderRow SEPARATOR)?
		public Group getGroup_0() { return cGroup_0; }
		
		//headers=HeaderRow
		public Assignment getHeadersAssignment_0_0() { return cHeadersAssignment_0_0; }
		
		//HeaderRow
		public RuleCall getHeadersHeaderRowParserRuleCall_0_0_0() { return cHeadersHeaderRowParserRuleCall_0_0_0; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_0_1() { return cSEPARATORTerminalRuleCall_0_1; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_1() { return cRowsAssignment_1; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_1_0() { return cRowsTableRowParserRuleCall_1_0; }
		
		//(',' rows+=TableRow)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_2_1() { return cRowsAssignment_2_1; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_2_1_0() { return cRowsTableRowParserRuleCall_2_1_0; }
	}
	public class HeaderRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.HeaderRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cElementsAlternatives_0_0 = (Alternatives)cElementsAssignment_0.eContents().get(0);
		private final RuleCall cElementsLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cElementsAlternatives_0_0.eContents().get(0);
		private final Alternatives cElementsAlternatives_0_0_1 = (Alternatives)cElementsAlternatives_0_0.eContents().get(1);
		private final RuleCall cElementsSTRINGTerminalRuleCall_0_0_1_0 = (RuleCall)cElementsAlternatives_0_0_1.eContents().get(0);
		private final RuleCall cElementsLOCALIZED_STRING_REFERENCETerminalRuleCall_0_0_1_1 = (RuleCall)cElementsAlternatives_0_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cElementsAlternatives_1_1_0 = (Alternatives)cElementsAssignment_1_1.eContents().get(0);
		private final RuleCall cElementsLOWERCASE_IDTerminalRuleCall_1_1_0_0 = (RuleCall)cElementsAlternatives_1_1_0.eContents().get(0);
		private final Alternatives cElementsAlternatives_1_1_0_1 = (Alternatives)cElementsAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cElementsSTRINGTerminalRuleCall_1_1_0_1_0 = (RuleCall)cElementsAlternatives_1_1_0_1.eContents().get(0);
		private final RuleCall cElementsLOCALIZED_STRING_REFERENCETerminalRuleCall_1_1_0_1_1 = (RuleCall)cElementsAlternatives_1_1_0_1.eContents().get(1);
		
		//HeaderRow:
		//    elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE)) ('|' elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE)))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE)) ('|' elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE)))*
		public Group getGroup() { return cGroup; }
		
		//elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE))
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE))
		public Alternatives getElementsAlternatives_0_0() { return cElementsAlternatives_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getElementsLOWERCASE_IDTerminalRuleCall_0_0_0() { return cElementsLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//(STRING|LOCALIZED_STRING_REFERENCE)
		public Alternatives getElementsAlternatives_0_0_1() { return cElementsAlternatives_0_0_1; }
		
		//STRING
		public RuleCall getElementsSTRINGTerminalRuleCall_0_0_1_0() { return cElementsSTRINGTerminalRuleCall_0_0_1_0; }
		
		//LOCALIZED_STRING_REFERENCE
		public RuleCall getElementsLOCALIZED_STRING_REFERENCETerminalRuleCall_0_0_1_1() { return cElementsLOCALIZED_STRING_REFERENCETerminalRuleCall_0_0_1_1; }
		
		//('|' elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE)))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE))
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE))
		public Alternatives getElementsAlternatives_1_1_0() { return cElementsAlternatives_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getElementsLOWERCASE_IDTerminalRuleCall_1_1_0_0() { return cElementsLOWERCASE_IDTerminalRuleCall_1_1_0_0; }
		
		//(STRING|LOCALIZED_STRING_REFERENCE)
		public Alternatives getElementsAlternatives_1_1_0_1() { return cElementsAlternatives_1_1_0_1; }
		
		//STRING
		public RuleCall getElementsSTRINGTerminalRuleCall_1_1_0_1_0() { return cElementsSTRINGTerminalRuleCall_1_1_0_1_0; }
		
		//LOCALIZED_STRING_REFERENCE
		public RuleCall getElementsLOCALIZED_STRING_REFERENCETerminalRuleCall_1_1_0_1_1() { return cElementsLOCALIZED_STRING_REFERENCETerminalRuleCall_1_1_0_1_1; }
	}
	public class TableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.TableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsTableClassifierParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsTableClassifierParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//TableRow:
		//    elements+=TableClassifier ('|' elements+=TableClassifier)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=TableClassifier ('|' elements+=TableClassifier)*
		public Group getGroup() { return cGroup; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_0_0() { return cElementsTableClassifierParserRuleCall_0_0; }
		
		//('|' elements+=TableClassifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_1_1_0() { return cElementsTableClassifierParserRuleCall_1_1_0; }
	}
	public class TableClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.TableClassifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumNumberParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cObservableAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cObservableObservableParserRuleCall_3_0 = (RuleCall)cObservableAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_4_0_0 = (RuleCall)cOpAssignment_4_0.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cInt0Assignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_5_0_0 = (RuleCall)cInt0Assignment_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cLeftLimitAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_5_1_0_0 = (Keyword)cLeftLimitAssignment_5_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_5_1_1 = (Keyword)cAlternatives_5_1.eContents().get(1);
		private final Keyword cToKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cInt1Assignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_5_3_0 = (RuleCall)cInt1Assignment_5_3.eContents().get(0);
		private final Alternatives cAlternatives_5_4 = (Alternatives)cGroup_5.eContents().get(4);
		private final Assignment cRightLimitAssignment_5_4_0 = (Assignment)cAlternatives_5_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_5_4_0_0 = (Keyword)cRightLimitAssignment_5_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_5_4_1 = (Keyword)cAlternatives_5_4.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cInKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSetAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_6_1_0 = (RuleCall)cSetAssignment_6_1.eContents().get(0);
		private final Assignment cQuantityAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cQuantityQuantityParserRuleCall_7_0 = (RuleCall)cQuantityAssignment_7.eContents().get(0);
		private final Assignment cDateAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cDateDateParserRuleCall_8_0 = (RuleCall)cDateAssignment_8.eContents().get(0);
		private final Assignment cExprAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cExprEXPRTerminalRuleCall_9_0 = (RuleCall)cExprAssignment_9.eContents().get(0);
		private final Assignment cNodataAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cNodataUnknownKeyword_10_0 = (Keyword)cNodataAssignment_10.eContents().get(0);
		private final Assignment cStarAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cStarAsteriskKeyword_11_0 = (Keyword)cStarAssignment_11.eContents().get(0);
		private final Assignment cAnythingAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cAnythingNumberSignKeyword_12_0 = (Keyword)cAnythingAssignment_12.eContents().get(0);
		
		//TableClassifier:
		//    (boolean='true' | boolean='false') |
		//    num=Number |
		//    string=STRING |
		//    observable=Observable |
		//    op=REL_OPERATOR expression=Number |
		//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//    'in' set=List |
		//    quantity=Quantity |
		//    date=Date |
		//    expr=EXPR |
		//    nodata='unknown' |
		//    star?='*' |
		//    anything?='#';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') |
		//num=Number |
		//string=STRING |
		//observable=Observable |
		//op=REL_OPERATOR expression=Number |
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
		//'in' set=List |
		//quantity=Quantity |
		//date=Date |
		//expr=EXPR |
		//nodata='unknown' |
		//star?='*' |
		//anything?='#'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//num=Number
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_1_0() { return cNumNumberParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//observable=Observable
		public Assignment getObservableAssignment_3() { return cObservableAssignment_3; }
		
		//Observable
		public RuleCall getObservableObservableParserRuleCall_3_0() { return cObservableObservableParserRuleCall_3_0; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_4() { return cGroup_4; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_4_0() { return cOpAssignment_4_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_4_0_0() { return cOpREL_OPERATORParserRuleCall_4_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_4_1_0() { return cExpressionNumberParserRuleCall_4_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_5() { return cGroup_5; }
		
		//int0=Number
		public Assignment getInt0Assignment_5_0() { return cInt0Assignment_5_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_5_0_0() { return cInt0NumberParserRuleCall_5_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_5_1_0() { return cLeftLimitAssignment_5_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_5_1_0_0() { return cLeftLimitInclusiveKeyword_5_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_5_1_1() { return cExclusiveKeyword_5_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_5_2() { return cToKeyword_5_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_5_3() { return cInt1Assignment_5_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_5_3_0() { return cInt1NumberParserRuleCall_5_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_5_4() { return cAlternatives_5_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_5_4_0() { return cRightLimitAssignment_5_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_5_4_0_0() { return cRightLimitInclusiveKeyword_5_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_5_4_1() { return cExclusiveKeyword_5_4_1; }
		
		//'in' set=List
		public Group getGroup_6() { return cGroup_6; }
		
		//'in'
		public Keyword getInKeyword_6_0() { return cInKeyword_6_0; }
		
		//set=List
		public Assignment getSetAssignment_6_1() { return cSetAssignment_6_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_6_1_0() { return cSetListParserRuleCall_6_1_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_7() { return cQuantityAssignment_7; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_7_0() { return cQuantityQuantityParserRuleCall_7_0; }
		
		//date=Date
		public Assignment getDateAssignment_8() { return cDateAssignment_8; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_8_0() { return cDateDateParserRuleCall_8_0; }
		
		//expr=EXPR
		public Assignment getExprAssignment_9() { return cExprAssignment_9; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_9_0() { return cExprEXPRTerminalRuleCall_9_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_10() { return cNodataAssignment_10; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_10_0() { return cNodataUnknownKeyword_10_0; }
		
		//star?='*'
		public Assignment getStarAssignment_11() { return cStarAssignment_11; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_11_0() { return cStarAsteriskKeyword_11_0; }
		
		//anything?='#'
		public Assignment getAnythingAssignment_12() { return cAnythingAssignment_12; }
		
		//'#'
		public Keyword getAnythingNumberSignKeyword_12_0() { return cAnythingNumberSignKeyword_12_0; }
	}
	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueNumberParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOverAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cOverSolidusKeyword_1_0_0 = (Keyword)cOverAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cUnitAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_2_0_0 = (RuleCall)cUnitAssignment_2_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_2_1_0 = (RuleCall)cCurrencyAssignment_2_1.eContents().get(0);
		
		//Quantity:
		//    value=Number (over?='/' | '.') (unit=Unit | currency=Currency)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Number (over?='/' | '.') (unit=Unit | currency=Currency)
		public Group getGroup() { return cGroup; }
		
		//value=Number
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0_0() { return cValueNumberParserRuleCall_0_0; }
		
		//(over?='/' | '.')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//over?='/'
		public Assignment getOverAssignment_1_0() { return cOverAssignment_1_0; }
		
		//'/'
		public Keyword getOverSolidusKeyword_1_0_0() { return cOverSolidusKeyword_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//(unit=Unit | currency=Currency)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_0() { return cUnitAssignment_2_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_2_0_0() { return cUnitUnitParserRuleCall_2_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_2_1() { return cCurrencyAssignment_2_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_2_1_0() { return cCurrencyCurrencyParserRuleCall_2_1_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameANNOTATION_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Annotation:
		//    name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ANNOTATION_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ANNOTATION_ID
		public RuleCall getNameANNOTATION_IDTerminalRuleCall_0_0() { return cNameANNOTATION_IDTerminalRuleCall_0_0; }
		
		//('(' parameters=ParameterList? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_1_0() { return cParametersParameterListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFromAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_1_0_0 = (RuleCall)cFromAssignment_1_0.eContents().get(0);
		private final Keyword cToKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cToAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_1_2_0 = (RuleCall)cToAssignment_1_2.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cStringAlternatives_2_0 = (Alternatives)cStringAssignment_2.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cStringAlternatives_2_0.eContents().get(0);
		private final RuleCall cStringLOCALIZED_STRING_REFERENCETerminalRuleCall_2_0_1 = (RuleCall)cStringAlternatives_2_0.eContents().get(1);
		private final Assignment cDateAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDateDateParserRuleCall_3_0 = (RuleCall)cDateAssignment_3.eContents().get(0);
		private final Assignment cBooleanAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Alternatives cBooleanAlternatives_4_0 = (Alternatives)cBooleanAssignment_4.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_4_0_0 = (Keyword)cBooleanAlternatives_4_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_4_0_1 = (Keyword)cBooleanAlternatives_4_0.eContents().get(1);
		
		//Literal:
		//    number=Number | from=Number 'to' to=Number | string=(STRING|LOCALIZED_STRING_REFERENCE) | date=Date | boolean=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//number=Number | from=Number 'to' to=Number | string=(STRING|LOCALIZED_STRING_REFERENCE) | date=Date | boolean=('true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }
		
		//from=Number 'to' to=Number
		public Group getGroup_1() { return cGroup_1; }
		
		//from=Number
		public Assignment getFromAssignment_1_0() { return cFromAssignment_1_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_1_0_0() { return cFromNumberParserRuleCall_1_0_0; }
		
		//'to'
		public Keyword getToKeyword_1_1() { return cToKeyword_1_1; }
		
		//to=Number
		public Assignment getToAssignment_1_2() { return cToAssignment_1_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_1_2_0() { return cToNumberParserRuleCall_1_2_0; }
		
		//string=(STRING|LOCALIZED_STRING_REFERENCE)
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//(STRING|LOCALIZED_STRING_REFERENCE)
		public Alternatives getStringAlternatives_2_0() { return cStringAlternatives_2_0; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0_0() { return cStringSTRINGTerminalRuleCall_2_0_0; }
		
		//LOCALIZED_STRING_REFERENCE
		public RuleCall getStringLOCALIZED_STRING_REFERENCETerminalRuleCall_2_0_1() { return cStringLOCALIZED_STRING_REFERENCETerminalRuleCall_2_0_1; }
		
		//date=Date
		public Assignment getDateAssignment_3() { return cDateAssignment_3; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_3_0() { return cDateDateParserRuleCall_3_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_4() { return cBooleanAssignment_4; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_4_0() { return cBooleanAlternatives_4_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_4_0_0() { return cBooleanTrueKeyword_4_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_4_0_1() { return cBooleanFalseKeyword_4_0_1; }
	}
	public class DATA_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.DATA_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTextKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cConceptKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//DATA_TYPE:
		//    'int' |
		//    'number' |
		//    'text' |
		//    'boolean' |
		//    'concept'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' |
		//'number' |
		//'text' |
		//'boolean' |
		//'concept'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'number'
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
		
		//'text'
		public Keyword getTextKeyword_2() { return cTextKeyword_2; }
		
		//'boolean'
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }
		
		//'concept'
		public Keyword getConceptKeyword_4() { return cConceptKeyword_4; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPairsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPairsKeyValuePairParserRuleCall_0_0 = (RuleCall)cPairsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cPairsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPairsKeyValuePairParserRuleCall_1_1_0 = (RuleCall)cPairsAssignment_1_1.eContents().get(0);
		
		////LiteralWithExpr:
		////    number=Number | from=Number 'to' to=Number | string=(STRING|LOCALIZED_STRING_REFERENCE) | date=Date | expression=EXPR | boolean=('true' | 'false');
		//ParameterList:
		//    pairs+=KeyValuePair (=> (',')? pairs+=KeyValuePair)*;
		@Override public ParserRule getRule() { return rule; }
		
		//pairs+=KeyValuePair (=> (',')? pairs+=KeyValuePair)*
		public Group getGroup() { return cGroup; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_0() { return cPairsAssignment_0; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_0_0() { return cPairsKeyValuePairParserRuleCall_0_0; }
		
		//(=> (',')? pairs+=KeyValuePair)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> (',')?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_1_1() { return cPairsAssignment_1_1; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_1_1_0() { return cPairsKeyValuePairParserRuleCall_1_1_0; }
	}
	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.KeyValuePair");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTagAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTagTAGTerminalRuleCall_0_0 = (RuleCall)cTagAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_1_0_0_0 = (RuleCall)cNameAssignment_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cInteractiveAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cInteractiveQuestionMarkEqualsSignKeyword_1_0_1_0_0 = (Keyword)cInteractiveAssignment_1_0_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueValueWithConstructorParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Assignment cKeyAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cKeyKEYTerminalRuleCall_2_0 = (RuleCall)cKeyAssignment_2.eContents().get(0);
		
		//KeyValuePair:
		//    tag=TAG |
		//    (name=(LOWERCASE_ID) (interactive?='?=' | '='))? value=ValueWithConstructor |
		//    key=KEY
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tag=TAG |
		//(name=(LOWERCASE_ID) (interactive?='?=' | '='))? value=ValueWithConstructor |
		//key=KEY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tag=TAG
		public Assignment getTagAssignment_0() { return cTagAssignment_0; }
		
		//TAG
		public RuleCall getTagTAGTerminalRuleCall_0_0() { return cTagTAGTerminalRuleCall_0_0; }
		
		//(name=(LOWERCASE_ID) (interactive?='?=' | '='))? value=ValueWithConstructor
		public Group getGroup_1() { return cGroup_1; }
		
		//(name=(LOWERCASE_ID) (interactive?='?=' | '='))?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//name=(LOWERCASE_ID)
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }
		
		//(LOWERCASE_ID)
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_1_0_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_1_0_0_0; }
		
		//(interactive?='?=' | '=')
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//interactive?='?='
		public Assignment getInteractiveAssignment_1_0_1_0() { return cInteractiveAssignment_1_0_1_0; }
		
		//'?='
		public Keyword getInteractiveQuestionMarkEqualsSignKeyword_1_0_1_0_0() { return cInteractiveQuestionMarkEqualsSignKeyword_1_0_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1_1() { return cEqualsSignKeyword_1_0_1_1; }
		
		//value=ValueWithConstructor
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//ValueWithConstructor
		public RuleCall getValueValueWithConstructorParserRuleCall_1_1_0() { return cValueValueWithConstructorParserRuleCall_1_1_0; }
		
		//key=KEY
		public Assignment getKeyAssignment_2() { return cKeyAssignment_2; }
		
		//KEY
		public RuleCall getKeyKEYTerminalRuleCall_2_0() { return cKeyKEYTerminalRuleCall_2_0; }
	}
	public class UnitElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UnitElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cIdAlternatives_0_0 = (Alternatives)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cIdAlternatives_0_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_0_0_1 = (RuleCall)cIdAlternatives_0_0.eContents().get(1);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_0_0_2 = (RuleCall)cIdAlternatives_0_0.eContents().get(2);
		private final RuleCall cIdBACKCASE_IDTerminalRuleCall_0_0_3 = (RuleCall)cIdAlternatives_0_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_1_1_0 = (RuleCall)cUnitAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//UnitElement:
		//    id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID) |
		//    '(' unit=Unit ')';
		@Override public ParserRule getRule() { return rule; }
		
		//id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID) |
		//'(' unit=Unit ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID)
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID)
		public Alternatives getIdAlternatives_0_0() { return cIdAlternatives_0_0; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_0_0_0() { return cIdCAMELCASE_IDTerminalRuleCall_0_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_0_0_1() { return cIdLOWERCASE_IDTerminalRuleCall_0_0_1; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_0_0_2() { return cIdUPPERCASE_IDTerminalRuleCall_0_0_2; }
		
		//BACKCASE_ID
		public RuleCall getIdBACKCASE_IDTerminalRuleCall_0_0_3() { return cIdBACKCASE_IDTerminalRuleCall_0_0_3; }
		
		//'(' unit=Unit ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_1_1() { return cUnitAssignment_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_1_0() { return cUnitUnitParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootUnitElementParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cConnectorsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cConnectorsUnitOpEnumRuleCall_2_0_0_0 = (RuleCall)cConnectorsAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cUnitsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cUnitsUnitElementParserRuleCall_2_1_0_0 = (RuleCall)cUnitsAssignment_2_1_0.eContents().get(0);
		
		//Unit:
		//    {Unit} (root=UnitElement)? (=> (connectors+=UnitOp) => (units+=UnitElement))*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unit} (root=UnitElement)? (=> (connectors+=UnitOp) => (units+=UnitElement))*
		public Group getGroup() { return cGroup; }
		
		//{Unit}
		public Action getUnitAction_0() { return cUnitAction_0; }
		
		//(root=UnitElement)?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//UnitElement
		public RuleCall getRootUnitElementParserRuleCall_1_0() { return cRootUnitElementParserRuleCall_1_0; }
		
		//(=> (connectors+=UnitOp) => (units+=UnitElement))*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> (connectors+=UnitOp)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//connectors+=UnitOp
		public Assignment getConnectorsAssignment_2_0_0() { return cConnectorsAssignment_2_0_0; }
		
		//UnitOp
		public RuleCall getConnectorsUnitOpEnumRuleCall_2_0_0_0() { return cConnectorsUnitOpEnumRuleCall_2_0_0_0; }
		
		//=> (units+=UnitElement)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//units+=UnitElement
		public Assignment getUnitsAssignment_2_1_0() { return cUnitsAssignment_2_1_0; }
		
		//UnitElement
		public RuleCall getUnitsUnitElementParserRuleCall_2_1_0_0() { return cUnitsUnitElementParserRuleCall_2_1_0_0; }
	}
	public class CurrencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Currency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cYearAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cYearINTTerminalRuleCall_1_1_0 = (RuleCall)cYearAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitsUnitElementParserRuleCall_2_1_0 = (RuleCall)cUnitsAssignment_2_1.eContents().get(0);
		
		//Currency:
		//    id=UPPERCASE_ID ('@' year=INT) (=> '/' (units+=UnitElement))*;
		@Override public ParserRule getRule() { return rule; }
		
		//id=UPPERCASE_ID ('@' year=INT) (=> '/' (units+=UnitElement))*
		public Group getGroup() { return cGroup; }
		
		//id=UPPERCASE_ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_0_0() { return cIdUPPERCASE_IDTerminalRuleCall_0_0; }
		
		//('@' year=INT)
		public Group getGroup_1() { return cGroup_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }
		
		//year=INT
		public Assignment getYearAssignment_1_1() { return cYearAssignment_1_1; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_1_1_0() { return cYearINTTerminalRuleCall_1_1_0; }
		
		//(=> '/' (units+=UnitElement))*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> '/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//(units+=UnitElement)
		public Assignment getUnitsAssignment_2_1() { return cUnitsAssignment_2_1; }
		
		//UnitElement
		public RuleCall getUnitsUnitElementParserRuleCall_2_1_0() { return cUnitsUnitElementParserRuleCall_2_1_0; }
	}
	public class REL_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.REL_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cGtGreaterThanSignKeyword_0_0 = (Keyword)cGtAssignment_0.eContents().get(0);
		private final Assignment cLtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLtLessThanSignKeyword_1_0 = (Keyword)cLtAssignment_1.eContents().get(0);
		private final Assignment cEqAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cEqEqualsSignKeyword_2_0 = (Keyword)cEqAssignment_2.eContents().get(0);
		private final Assignment cNeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNeExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNeAssignment_3.eContents().get(0);
		private final Assignment cLeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cLeLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLeAssignment_4.eContents().get(0);
		private final Assignment cGeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cGeGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGeAssignment_5.eContents().get(0);
		
		//REL_OPERATOR:
		//    (gt?='>' |
		//    lt?='<' |
		//    eq?='=' |
		//    ne?='!=' |
		//    le?='<=' |
		//    ge?='>=');
		@Override public ParserRule getRule() { return rule; }
		
		//(gt?='>' |
		//lt?='<' |
		//eq?='=' |
		//ne?='!=' |
		//le?='<=' |
		//ge?='>=')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//gt?='>'
		public Assignment getGtAssignment_0() { return cGtAssignment_0; }
		
		//'>'
		public Keyword getGtGreaterThanSignKeyword_0_0() { return cGtGreaterThanSignKeyword_0_0; }
		
		//lt?='<'
		public Assignment getLtAssignment_1() { return cLtAssignment_1; }
		
		//'<'
		public Keyword getLtLessThanSignKeyword_1_0() { return cLtLessThanSignKeyword_1_0; }
		
		//eq?='='
		public Assignment getEqAssignment_2() { return cEqAssignment_2; }
		
		//'='
		public Keyword getEqEqualsSignKeyword_2_0() { return cEqEqualsSignKeyword_2_0; }
		
		//ne?='!='
		public Assignment getNeAssignment_3() { return cNeAssignment_3; }
		
		//'!='
		public Keyword getNeExclamationMarkEqualsSignKeyword_3_0() { return cNeExclamationMarkEqualsSignKeyword_3_0; }
		
		//le?='<='
		public Assignment getLeAssignment_4() { return cLeAssignment_4; }
		
		//'<='
		public Keyword getLeLessThanSignEqualsSignKeyword_4_0() { return cLeLessThanSignEqualsSignKeyword_4_0; }
		
		//ge?='>='
		public Assignment getGeAssignment_5() { return cGeAssignment_5; }
		
		//'>='
		public Keyword getGeGreaterThanSignEqualsSignKeyword_5_0() { return cGeGreaterThanSignEqualsSignKeyword_5_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cNegativeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_0_1_0 = (Keyword)cNegativeAssignment_0_1.eContents().get(0);
		private final Assignment cRealAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRealINTTerminalRuleCall_1_0 = (RuleCall)cRealAssignment_1.eContents().get(0);
		private final Assignment cLongAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cLongLKeyword_2_0 = (Keyword)cLongAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cDecimalAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Keyword cDecimalFullStopKeyword_3_0_0_0 = (Keyword)cDecimalAssignment_3_0_0.eContents().get(0);
		private final Assignment cDecimalPartAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDecimalPartINTTerminalRuleCall_3_0_1_0 = (RuleCall)cDecimalPartAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cExponentialAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final Alternatives cExponentialAlternatives_4_0_0_0 = (Alternatives)cExponentialAssignment_4_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_4_0_0_0_0 = (Keyword)cExponentialAlternatives_4_0_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_4_0_0_0_1 = (Keyword)cExponentialAlternatives_4_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_4_0_1_0 = (Keyword)cAlternatives_4_0_1.eContents().get(0);
		private final Assignment cExpNegativeAssignment_4_0_1_1 = (Assignment)cAlternatives_4_0_1.eContents().get(1);
		private final Keyword cExpNegativeHyphenMinusKeyword_4_0_1_1_0 = (Keyword)cExpNegativeAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cExpAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cExpINTTerminalRuleCall_4_0_2_0 = (RuleCall)cExpAssignment_4_0_2.eContents().get(0);
		
		//Number:
		//    ('+' | negative?='-')? => real=INT (=> long?='l')? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | negative?='-')? => real=INT (=> long?='l')? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?
		public Group getGroup() { return cGroup; }
		
		//('+' | negative?='-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//negative?='-'
		public Assignment getNegativeAssignment_0_1() { return cNegativeAssignment_0_1; }
		
		//'-'
		public Keyword getNegativeHyphenMinusKeyword_0_1_0() { return cNegativeHyphenMinusKeyword_0_1_0; }
		
		//=> real=INT
		public Assignment getRealAssignment_1() { return cRealAssignment_1; }
		
		//INT
		public RuleCall getRealINTTerminalRuleCall_1_0() { return cRealINTTerminalRuleCall_1_0; }
		
		//(=> long?='l')?
		public Assignment getLongAssignment_2() { return cLongAssignment_2; }
		
		//'l'
		public Keyword getLongLKeyword_2_0() { return cLongLKeyword_2_0; }
		
		//=> (decimal?='.' decimalPart=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//decimal?='.' decimalPart=INT
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//decimal?='.'
		public Assignment getDecimalAssignment_3_0_0() { return cDecimalAssignment_3_0_0; }
		
		//'.'
		public Keyword getDecimalFullStopKeyword_3_0_0_0() { return cDecimalFullStopKeyword_3_0_0_0; }
		
		//decimalPart=INT
		public Assignment getDecimalPartAssignment_3_0_1() { return cDecimalPartAssignment_3_0_1; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_3_0_1_0() { return cDecimalPartINTTerminalRuleCall_3_0_1_0; }
		
		//=> (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//exponential?=('e' | 'E')
		public Assignment getExponentialAssignment_4_0_0() { return cExponentialAssignment_4_0_0; }
		
		//('e' | 'E')
		public Alternatives getExponentialAlternatives_4_0_0_0() { return cExponentialAlternatives_4_0_0_0; }
		
		//'e'
		public Keyword getExponentialEKeyword_4_0_0_0_0() { return cExponentialEKeyword_4_0_0_0_0; }
		
		//'E'
		public Keyword getExponentialEKeyword_4_0_0_0_1() { return cExponentialEKeyword_4_0_0_0_1; }
		
		//('+' | expNegative?='-')?
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_4_0_1_0() { return cPlusSignKeyword_4_0_1_0; }
		
		//expNegative?='-'
		public Assignment getExpNegativeAssignment_4_0_1_1() { return cExpNegativeAssignment_4_0_1_1; }
		
		//'-'
		public Keyword getExpNegativeHyphenMinusKeyword_4_0_1_1_0() { return cExpNegativeHyphenMinusKeyword_4_0_1_1_0; }
		
		//exp=INT
		public Assignment getExpAssignment_4_0_2() { return cExpAssignment_4_0_2; }
		
		//INT
		public RuleCall getExpINTTerminalRuleCall_4_0_2_0() { return cExpINTTerminalRuleCall_4_0_2_0; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cYearAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cYearINTTerminalRuleCall_0_0 = (RuleCall)cYearAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cADKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCEKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cBcAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cBcBCKeyword_1_2_0 = (Keyword)cBcAssignment_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMonthINTTerminalRuleCall_3_0 = (RuleCall)cMonthAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDayINTTerminalRuleCall_5_0 = (RuleCall)cDayAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cHourAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cHourINTTerminalRuleCall_6_0_0 = (RuleCall)cHourAssignment_6_0.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMinAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_6_2_0 = (RuleCall)cMinAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cColonKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cSecAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cSecINTTerminalRuleCall_6_3_1_0 = (RuleCall)cSecAssignment_6_3_1.eContents().get(0);
		private final Group cGroup_6_3_2 = (Group)cGroup_6_3.eContents().get(2);
		private final Keyword cFullStopKeyword_6_3_2_0 = (Keyword)cGroup_6_3_2.eContents().get(0);
		private final Assignment cMsAssignment_6_3_2_1 = (Assignment)cGroup_6_3_2.eContents().get(1);
		private final RuleCall cMsINTTerminalRuleCall_6_3_2_1_0 = (RuleCall)cMsAssignment_6_3_2_1.eContents().get(0);
		
		//Date:
		//    year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
		public Group getGroup() { return cGroup; }
		
		//year=INT
		public Assignment getYearAssignment_0() { return cYearAssignment_0; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_0_0() { return cYearINTTerminalRuleCall_0_0; }
		
		//('AD' | 'CE' | bc?='BC')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'AD'
		public Keyword getADKeyword_1_0() { return cADKeyword_1_0; }
		
		//'CE'
		public Keyword getCEKeyword_1_1() { return cCEKeyword_1_1; }
		
		//bc?='BC'
		public Assignment getBcAssignment_1_2() { return cBcAssignment_1_2; }
		
		//'BC'
		public Keyword getBcBCKeyword_1_2_0() { return cBcBCKeyword_1_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//month=INT
		public Assignment getMonthAssignment_3() { return cMonthAssignment_3; }
		
		//INT
		public RuleCall getMonthINTTerminalRuleCall_3_0() { return cMonthINTTerminalRuleCall_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }
		
		//day=INT
		public Assignment getDayAssignment_5() { return cDayAssignment_5; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_5_0() { return cDayINTTerminalRuleCall_5_0; }
		
		//(hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//hour=INT
		public Assignment getHourAssignment_6_0() { return cHourAssignment_6_0; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_6_0_0() { return cHourINTTerminalRuleCall_6_0_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//min=INT
		public Assignment getMinAssignment_6_2() { return cMinAssignment_6_2; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_6_2_0() { return cMinINTTerminalRuleCall_6_2_0; }
		
		//(':' sec=INT ('.' ms=INT)?)?
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//':'
		public Keyword getColonKeyword_6_3_0() { return cColonKeyword_6_3_0; }
		
		//sec=INT
		public Assignment getSecAssignment_6_3_1() { return cSecAssignment_6_3_1; }
		
		//INT
		public RuleCall getSecINTTerminalRuleCall_6_3_1_0() { return cSecINTTerminalRuleCall_6_3_1_0; }
		
		//('.' ms=INT)?
		public Group getGroup_6_3_2() { return cGroup_6_3_2; }
		
		//'.'
		public Keyword getFullStopKeyword_6_3_2_0() { return cFullStopKeyword_6_3_2_0; }
		
		//ms=INT
		public Assignment getMsAssignment_6_3_2_1() { return cMsAssignment_6_3_2_1; }
		
		//INT
		public RuleCall getMsINTTerminalRuleCall_6_3_2_1_0() { return cMsINTTerminalRuleCall_6_3_2_1_0; }
	}
	public class PathNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.PathName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PathName:
		//    LOWERCASE_ID ('.' LOWERCASE_ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LOWERCASE_ID ('.' LOWERCASE_ID)*
		public Group getGroup() { return cGroup; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0() { return cLOWERCASE_IDTerminalRuleCall_0; }
		
		//('.' LOWERCASE_ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1; }
	}
	public class QuotablePathNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.QuotablePathName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cQUOTED_LOWERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cQUOTED_LOWERCASE_IDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//QuotablePathName:
		//    (LOWERCASE_ID|QUOTED_LOWERCASE_ID) ('.' (LOWERCASE_ID|QUOTED_LOWERCASE_ID))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(LOWERCASE_ID|QUOTED_LOWERCASE_ID) ('.' (LOWERCASE_ID|QUOTED_LOWERCASE_ID))*
		public Group getGroup() { return cGroup; }
		
		//(LOWERCASE_ID|QUOTED_LOWERCASE_ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_0() { return cLOWERCASE_IDTerminalRuleCall_0_0; }
		
		//QUOTED_LOWERCASE_ID
		public RuleCall getQUOTED_LOWERCASE_IDTerminalRuleCall_0_1() { return cQUOTED_LOWERCASE_IDTerminalRuleCall_0_1; }
		
		//('.' (LOWERCASE_ID|QUOTED_LOWERCASE_ID))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(LOWERCASE_ID|QUOTED_LOWERCASE_ID)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1_0() { return cLOWERCASE_IDTerminalRuleCall_1_1_0; }
		
		//QUOTED_LOWERCASE_ID
		public RuleCall getQUOTED_LOWERCASE_IDTerminalRuleCall_1_1_1() { return cQUOTED_LOWERCASE_IDTerminalRuleCall_1_1_1; }
	}
	public class ArgPathNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ArgPathName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cARGVALUETerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ArgPathName:
		//    (ARGVALUE | LOWERCASE_ID) ('.' LOWERCASE_ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ARGVALUE | LOWERCASE_ID) ('.' LOWERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//(ARGVALUE | LOWERCASE_ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ARGVALUE
		public RuleCall getARGVALUETerminalRuleCall_0_0() { return cARGVALUETerminalRuleCall_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_1() { return cLOWERCASE_IDTerminalRuleCall_0_1; }
		
		//('.' LOWERCASE_ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//Path:
		//    (LOWERCASE_ID|UPPERCASE_ID) (('.' | '/') (LOWERCASE_ID|UPPERCASE_ID))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(LOWERCASE_ID|UPPERCASE_ID) (('.' | '/') (LOWERCASE_ID|UPPERCASE_ID))*
		public Group getGroup() { return cGroup; }
		
		//(LOWERCASE_ID|UPPERCASE_ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_0() { return cLOWERCASE_IDTerminalRuleCall_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_0_1() { return cUPPERCASE_IDTerminalRuleCall_0_1; }
		
		//(('.' | '/') (LOWERCASE_ID|UPPERCASE_ID))*
		public Group getGroup_1() { return cGroup_1; }
		
		//('.' | '/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }
		
		//(LOWERCASE_ID|UPPERCASE_ID)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1_0() { return cLOWERCASE_IDTerminalRuleCall_1_1_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_1_1_1() { return cUPPERCASE_IDTerminalRuleCall_1_1_1; }
	}
	public class ObservableSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ObservableSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cUnorderedGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cInKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Assignment cUnitAssignment_1_0_0_1_0 = (Assignment)cAlternatives_1_0_0_1.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_1_0_0_1_0_0 = (RuleCall)cUnitAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_1_0_0_1_1 = (Assignment)cAlternatives_1_0_0_1.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_1_0_0_1_1_0 = (RuleCall)cCurrencyAssignment_1_0_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPerKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cUnitAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_1_0_1_1_0 = (RuleCall)cUnitAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Assignment cValueOperatorsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_1_1_0_0 = (RuleCall)cValueOperatorsAssignment_1_1_0.eContents().get(0);
		private final Assignment cValueOperatorsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueOperatorsValueOperatorParserRuleCall_1_1_1_0 = (RuleCall)cValueOperatorsAssignment_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cUnorderedGroup_1.eContents().get(2);
		private final Assignment cOptionalAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_1_2_0_0 = (Keyword)cOptionalAssignment_1_2_0.eContents().get(0);
		private final Keyword cRequiredKeyword_1_2_1 = (Keyword)cAlternatives_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cUnorderedGroup_1.eContents().get(3);
		private final Assignment cFromAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_1_3_0_0 = (RuleCall)cFromAssignment_1_3_0.eContents().get(0);
		private final Keyword cToKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cToAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_1_3_2_0 = (RuleCall)cToAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cUnorderedGroup_1.eContents().get(4);
		private final Keyword cNamedKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cNameAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final Alternatives cNameAlternatives_1_4_1_0 = (Alternatives)cNameAssignment_1_4_1.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_1_4_1_0_0 = (RuleCall)cNameAlternatives_1_4_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_4_1_0_1 = (RuleCall)cNameAlternatives_1_4_1_0.eContents().get(1);
		
		///*
		// * Observable semantics rules from k.IM. Syntax peers for concepts are exclusively to allow syntax highlighting
		// * and validation of observables through the imported k.IM validator (as behaviors are read after model files).
		// * Concepts can only be referenced in full notation for obvious reasons.
		// * ------------------------------------------------------------------------------------------------------------
		// */
		//ObservableSemantics:
		//    declaration=ConceptDeclaration
		//    (
		//        (
		//            ('in' (unit=Unit | currency=Currency)) |
		//            ('per' unit=Unit)
		//        )? &
		//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//        (optional?='optional' | 'required')? &
		//        (from=Number 'to' to=Number)? &
		//        ('named' name=(LOWERCASE_ID|STRING))?
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=ConceptDeclaration
		//(
		//    (
		//        ('in' (unit=Unit | currency=Currency)) |
		//        ('per' unit=Unit)
		//    )? &
		//    (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//    (optional?='optional' | 'required')? &
		//    (from=Number 'to' to=Number)? &
		//    ('named' name=(LOWERCASE_ID|STRING))?
		//)
		public Group getGroup() { return cGroup; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_0_0() { return cDeclarationConceptDeclarationParserRuleCall_0_0; }
		
		//(
		//    (
		//        ('in' (unit=Unit | currency=Currency)) |
		//        ('per' unit=Unit)
		//    )? &
		//    (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		//    (optional?='optional' | 'required')? &
		//    (from=Number 'to' to=Number)? &
		//    ('named' name=(LOWERCASE_ID|STRING))?
		//)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//(
		//    ('in' (unit=Unit | currency=Currency)) |
		//    ('per' unit=Unit)
		//)?
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//('in' (unit=Unit | currency=Currency))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'in'
		public Keyword getInKeyword_1_0_0_0() { return cInKeyword_1_0_0_0; }
		
		//(unit=Unit | currency=Currency)
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }
		
		//unit=Unit
		public Assignment getUnitAssignment_1_0_0_1_0() { return cUnitAssignment_1_0_0_1_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_0_0_1_0_0() { return cUnitUnitParserRuleCall_1_0_0_1_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_1_0_0_1_1() { return cCurrencyAssignment_1_0_0_1_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_1_0_0_1_1_0() { return cCurrencyCurrencyParserRuleCall_1_0_0_1_1_0; }
		
		//('per' unit=Unit)
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'per'
		public Keyword getPerKeyword_1_0_1_0() { return cPerKeyword_1_0_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_1_0_1_1() { return cUnitAssignment_1_0_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_0_1_1_0() { return cUnitUnitParserRuleCall_1_0_1_1_0; }
		
		//(valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//valueOperators+=ValueOperator
		public Assignment getValueOperatorsAssignment_1_1_0() { return cValueOperatorsAssignment_1_1_0; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_1_1_0_0() { return cValueOperatorsValueOperatorParserRuleCall_1_1_0_0; }
		
		//(valueOperators+=ValueOperator)*
		public Assignment getValueOperatorsAssignment_1_1_1() { return cValueOperatorsAssignment_1_1_1; }
		
		//ValueOperator
		public RuleCall getValueOperatorsValueOperatorParserRuleCall_1_1_1_0() { return cValueOperatorsValueOperatorParserRuleCall_1_1_1_0; }
		
		//(optional?='optional' | 'required')?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//optional?='optional'
		public Assignment getOptionalAssignment_1_2_0() { return cOptionalAssignment_1_2_0; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_1_2_0_0() { return cOptionalOptionalKeyword_1_2_0_0; }
		
		//'required'
		public Keyword getRequiredKeyword_1_2_1() { return cRequiredKeyword_1_2_1; }
		
		//(from=Number 'to' to=Number)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//from=Number
		public Assignment getFromAssignment_1_3_0() { return cFromAssignment_1_3_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_1_3_0_0() { return cFromNumberParserRuleCall_1_3_0_0; }
		
		//'to'
		public Keyword getToKeyword_1_3_1() { return cToKeyword_1_3_1; }
		
		//to=Number
		public Assignment getToAssignment_1_3_2() { return cToAssignment_1_3_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_1_3_2_0() { return cToNumberParserRuleCall_1_3_2_0; }
		
		//('named' name=(LOWERCASE_ID|STRING))?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'named'
		public Keyword getNamedKeyword_1_4_0() { return cNamedKeyword_1_4_0; }
		
		//name=(LOWERCASE_ID|STRING)
		public Assignment getNameAssignment_1_4_1() { return cNameAssignment_1_4_1; }
		
		//(LOWERCASE_ID|STRING)
		public Alternatives getNameAlternatives_1_4_1_0() { return cNameAlternatives_1_4_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_1_4_1_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_1_4_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_4_1_0_1() { return cNameSTRINGTerminalRuleCall_1_4_1_0_1; }
	}
	public class ValueOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ValueOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cModifierAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cModifierVALUE_OPERATORParserRuleCall_0_0_0_0 = (RuleCall)cModifierAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Assignment cDownToAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final Keyword cDownToDownKeyword_0_0_1_0_0 = (Keyword)cDownToAssignment_0_0_1_0.eContents().get(0);
		private final Keyword cToKeyword_0_0_1_1 = (Keyword)cGroup_0_0_1.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cComparisonValueAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cComparisonValueNumberParserRuleCall_0_1_0_0 = (RuleCall)cComparisonValueAssignment_0_1_0.eContents().get(0);
		private final Assignment cComparisonQuantityAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cComparisonQuantityQuantityParserRuleCall_0_1_1_0 = (RuleCall)cComparisonQuantityAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cAlternatives_0_1.eContents().get(2);
		private final Assignment cComparisonConceptAssignment_0_1_2_0 = (Assignment)cGroup_0_1_2.eContents().get(0);
		private final RuleCall cComparisonConceptConceptDeclarationParserRuleCall_0_1_2_0_0 = (RuleCall)cComparisonConceptAssignment_0_1_2_0.eContents().get(0);
		private final Group cGroup_0_1_2_1 = (Group)cGroup_0_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_2_1_0 = (Keyword)cGroup_0_1_2_1.eContents().get(0);
		private final Assignment cComparisonConceptAssignment_0_1_2_1_1 = (Assignment)cGroup_0_1_2_1.eContents().get(1);
		private final RuleCall cComparisonConceptConceptDeclarationParserRuleCall_0_1_2_1_1_0 = (RuleCall)cComparisonConceptAssignment_0_1_2_1_1.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cAlternatives_0_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_0_1_3_0 = (Keyword)cGroup_0_1_3.eContents().get(0);
		private final Assignment cComparisonObservableAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cComparisonObservableObservableSemanticsParserRuleCall_0_1_3_1_0 = (RuleCall)cComparisonObservableAssignment_0_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3_2 = (Keyword)cGroup_0_1_3.eContents().get(2);
		private final Assignment cTotalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTotalTotalKeyword_1_0 = (Keyword)cTotalAssignment_1.eContents().get(0);
		private final Assignment cAveragedAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cAveragedAveragedKeyword_2_0 = (Keyword)cAveragedAssignment_2.eContents().get(0);
		private final Assignment cSummedAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cSummedSummedKeyword_3_0 = (Keyword)cSummedAssignment_3.eContents().get(0);
		
		//ValueOperator:
		//    (modifier=VALUE_OPERATOR | downTo='down' 'to')
		//        (comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration (',' comparisonConcept+=ConceptDeclaration)* | ('(' comparisonObservable=ObservableSemantics ')')) |
		//    total='total' |
		//    averaged='averaged' |
		//    summed='summed'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(modifier=VALUE_OPERATOR | downTo='down' 'to')
		//    (comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration (',' comparisonConcept+=ConceptDeclaration)* | ('(' comparisonObservable=ObservableSemantics ')')) |
		//total='total' |
		//averaged='averaged' |
		//summed='summed'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(modifier=VALUE_OPERATOR | downTo='down' 'to')
		//    (comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration (',' comparisonConcept+=ConceptDeclaration)* | ('(' comparisonObservable=ObservableSemantics ')'))
		public Group getGroup_0() { return cGroup_0; }
		
		//(modifier=VALUE_OPERATOR | downTo='down' 'to')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//modifier=VALUE_OPERATOR
		public Assignment getModifierAssignment_0_0_0() { return cModifierAssignment_0_0_0; }
		
		//VALUE_OPERATOR
		public RuleCall getModifierVALUE_OPERATORParserRuleCall_0_0_0_0() { return cModifierVALUE_OPERATORParserRuleCall_0_0_0_0; }
		
		//downTo='down' 'to'
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//downTo='down'
		public Assignment getDownToAssignment_0_0_1_0() { return cDownToAssignment_0_0_1_0; }
		
		//'down'
		public Keyword getDownToDownKeyword_0_0_1_0_0() { return cDownToDownKeyword_0_0_1_0_0; }
		
		//'to'
		public Keyword getToKeyword_0_0_1_1() { return cToKeyword_0_0_1_1; }
		
		//(comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration (',' comparisonConcept+=ConceptDeclaration)* | ('(' comparisonObservable=ObservableSemantics ')'))
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//comparisonValue=Number
		public Assignment getComparisonValueAssignment_0_1_0() { return cComparisonValueAssignment_0_1_0; }
		
		//Number
		public RuleCall getComparisonValueNumberParserRuleCall_0_1_0_0() { return cComparisonValueNumberParserRuleCall_0_1_0_0; }
		
		//comparisonQuantity=Quantity
		public Assignment getComparisonQuantityAssignment_0_1_1() { return cComparisonQuantityAssignment_0_1_1; }
		
		//Quantity
		public RuleCall getComparisonQuantityQuantityParserRuleCall_0_1_1_0() { return cComparisonQuantityQuantityParserRuleCall_0_1_1_0; }
		
		//comparisonConcept+=ConceptDeclaration (',' comparisonConcept+=ConceptDeclaration)*
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//comparisonConcept+=ConceptDeclaration
		public Assignment getComparisonConceptAssignment_0_1_2_0() { return cComparisonConceptAssignment_0_1_2_0; }
		
		//ConceptDeclaration
		public RuleCall getComparisonConceptConceptDeclarationParserRuleCall_0_1_2_0_0() { return cComparisonConceptConceptDeclarationParserRuleCall_0_1_2_0_0; }
		
		//(',' comparisonConcept+=ConceptDeclaration)*
		public Group getGroup_0_1_2_1() { return cGroup_0_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_2_1_0() { return cCommaKeyword_0_1_2_1_0; }
		
		//comparisonConcept+=ConceptDeclaration
		public Assignment getComparisonConceptAssignment_0_1_2_1_1() { return cComparisonConceptAssignment_0_1_2_1_1; }
		
		//ConceptDeclaration
		public RuleCall getComparisonConceptConceptDeclarationParserRuleCall_0_1_2_1_1_0() { return cComparisonConceptConceptDeclarationParserRuleCall_0_1_2_1_1_0; }
		
		//('(' comparisonObservable=ObservableSemantics ')')
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_3_0() { return cLeftParenthesisKeyword_0_1_3_0; }
		
		//comparisonObservable=ObservableSemantics
		public Assignment getComparisonObservableAssignment_0_1_3_1() { return cComparisonObservableAssignment_0_1_3_1; }
		
		//ObservableSemantics
		public RuleCall getComparisonObservableObservableSemanticsParserRuleCall_0_1_3_1_0() { return cComparisonObservableObservableSemanticsParserRuleCall_0_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_3_2() { return cRightParenthesisKeyword_0_1_3_2; }
		
		//total='total'
		public Assignment getTotalAssignment_1() { return cTotalAssignment_1; }
		
		//'total'
		public Keyword getTotalTotalKeyword_1_0() { return cTotalTotalKeyword_1_0; }
		
		//averaged='averaged'
		public Assignment getAveragedAssignment_2() { return cAveragedAssignment_2; }
		
		//'averaged'
		public Keyword getAveragedAveragedKeyword_2_0() { return cAveragedAveragedKeyword_2_0; }
		
		//summed='summed'
		public Assignment getSummedAssignment_3() { return cSummedAssignment_3; }
		
		//'summed'
		public Keyword getSummedSummedKeyword_3_0() { return cSummedSummedKeyword_3_0; }
	}
	public class ConceptDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ConceptDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMainConceptParserRuleCall_0_0 = (RuleCall)cMainAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cOfKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cDistributedOfInherencyAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final Keyword cDistributedOfInherencyEachKeyword_1_0_1_0_0 = (Keyword)cDistributedOfInherencyAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cInherencyAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cInherencySimpleConceptDeclarationParserRuleCall_1_0_1_1_0 = (RuleCall)cInherencyAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cForKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cDistributedForInherencyAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final Keyword cDistributedForInherencyEachKeyword_1_1_1_0_0 = (Keyword)cDistributedForInherencyAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cMotivationAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cMotivationSimpleConceptDeclarationParserRuleCall_1_1_1_1_0 = (RuleCall)cMotivationAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cWithKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cCompresentAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cCompresentSimpleConceptDeclarationParserRuleCall_1_2_1_0 = (RuleCall)cCompresentAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cUnorderedGroup_1.eContents().get(3);
		private final Keyword cCausedKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cByKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cCausantAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cCausantSimpleConceptDeclarationParserRuleCall_1_3_2_0 = (RuleCall)cCausantAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cUnorderedGroup_1.eContents().get(4);
		private final Keyword cAdjacentKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Keyword cToKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cAdjacentAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cAdjacentSimpleConceptDeclarationParserRuleCall_1_4_2_0 = (RuleCall)cAdjacentAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cUnorderedGroup_1.eContents().get(5);
		private final Keyword cContainedKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Keyword cInKeyword_1_5_1 = (Keyword)cGroup_1_5.eContents().get(1);
		private final Assignment cContainerAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cContainerSimpleConceptDeclarationParserRuleCall_1_5_2_0 = (RuleCall)cContainerAssignment_1_5_2.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cUnorderedGroup_1.eContents().get(6);
		private final Keyword cContainingKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cContainedAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cContainedSimpleConceptDeclarationParserRuleCall_1_6_1_0 = (RuleCall)cContainedAssignment_1_6_1.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cUnorderedGroup_1.eContents().get(7);
		private final Keyword cCausingKeyword_1_7_0 = (Keyword)cGroup_1_7.eContents().get(0);
		private final Assignment cCausedAssignment_1_7_1 = (Assignment)cGroup_1_7.eContents().get(1);
		private final RuleCall cCausedSimpleConceptDeclarationParserRuleCall_1_7_1_0 = (RuleCall)cCausedAssignment_1_7_1.eContents().get(0);
		private final Group cGroup_1_8 = (Group)cUnorderedGroup_1.eContents().get(8);
		private final Keyword cDuringKeyword_1_8_0 = (Keyword)cGroup_1_8.eContents().get(0);
		private final Group cGroup_1_8_1 = (Group)cGroup_1_8.eContents().get(1);
		private final Assignment cDistributedTemporalInherencyAssignment_1_8_1_0 = (Assignment)cGroup_1_8_1.eContents().get(0);
		private final Keyword cDistributedTemporalInherencyEachKeyword_1_8_1_0_0 = (Keyword)cDistributedTemporalInherencyAssignment_1_8_1_0.eContents().get(0);
		private final Assignment cDuringAssignment_1_8_1_1 = (Assignment)cGroup_1_8_1.eContents().get(1);
		private final RuleCall cDuringSimpleConceptDeclarationParserRuleCall_1_8_1_1_0 = (RuleCall)cDuringAssignment_1_8_1_1.eContents().get(0);
		private final Group cGroup_1_9 = (Group)cUnorderedGroup_1.eContents().get(9);
		private final Keyword cWithinKeyword_1_9_0 = (Keyword)cGroup_1_9.eContents().get(0);
		private final Group cGroup_1_9_1 = (Group)cGroup_1_9.eContents().get(1);
		private final Assignment cDistributedWithinInherencyAssignment_1_9_1_0 = (Assignment)cGroup_1_9_1.eContents().get(0);
		private final Keyword cDistributedWithinInherencyEachKeyword_1_9_1_0_0 = (Keyword)cDistributedWithinInherencyAssignment_1_9_1_0.eContents().get(0);
		private final Assignment cContextAssignment_1_9_1_1 = (Assignment)cGroup_1_9_1.eContents().get(1);
		private final RuleCall cContextSimpleConceptDeclarationParserRuleCall_1_9_1_1_0 = (RuleCall)cContextAssignment_1_9_1_1.eContents().get(0);
		private final Group cGroup_1_10 = (Group)cUnorderedGroup_1.eContents().get(10);
		private final Keyword cLinkingKeyword_1_10_0 = (Keyword)cGroup_1_10.eContents().get(0);
		private final Assignment cRelationshipSourceAssignment_1_10_1 = (Assignment)cGroup_1_10.eContents().get(1);
		private final RuleCall cRelationshipSourceSimpleConceptDeclarationParserRuleCall_1_10_1_0 = (RuleCall)cRelationshipSourceAssignment_1_10_1.eContents().get(0);
		private final Keyword cToKeyword_1_10_2 = (Keyword)cGroup_1_10.eContents().get(2);
		private final Assignment cRelationshipTargetAssignment_1_10_3 = (Assignment)cGroup_1_10.eContents().get(3);
		private final RuleCall cRelationshipTargetSimpleConceptDeclarationParserRuleCall_1_10_3_0 = (RuleCall)cRelationshipTargetAssignment_1_10_3.eContents().get(0);
		
		//ConceptDeclaration:
		//    main+=Concept+
		//        // binary semantic operators; also 'as', 'by' and 'follows' handled in other rules
		//        (
		//            // primary inherency (when secondary is given using 'within')
		//            ('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))? &
		//            // purpose (achievement event created from target)
		//            ('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))? &
		//            // compresence (subject, process, event, presence or partitioned quality)
		//            ('with' compresent=SimpleConceptDeclaration)? &
		//            // cause towards self - causant can be anything (?)
		//            ('caused' 'by' causant=SimpleConceptDeclaration)? &
		//            // spatial adjacency (see 'follows' operator for temporal adjacency in events) - subject, event or relationship
		//            ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? &
		//            // being contained - subject
		//            ('contained' 'in' container=SimpleConceptDeclaration)? &
		//            // containing - subject
		//            ('containing' contained=SimpleConceptDeclaration)? &
		//            // cause towards event (?)
		//            ('causing'   caused=SimpleConceptDeclaration)? &
		//            // concomitant with event (?)
		//            ('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))? &
		//            // context or secondary inherency
		//            ('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))? &
		//            // for relationships: specialize source and target types
		//            ('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
		//        )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//main+=Concept+
		//    // binary semantic operators; also 'as', 'by' and 'follows' handled in other rules
		//    (
		//        // primary inherency (when secondary is given using 'within')
		//        ('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))? &
		//        // purpose (achievement event created from target)
		//        ('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))? &
		//        // compresence (subject, process, event, presence or partitioned quality)
		//        ('with' compresent=SimpleConceptDeclaration)? &
		//        // cause towards self - causant can be anything (?)
		//        ('caused' 'by' causant=SimpleConceptDeclaration)? &
		//        // spatial adjacency (see 'follows' operator for temporal adjacency in events) - subject, event or relationship
		//        ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? &
		//        // being contained - subject
		//        ('contained' 'in' container=SimpleConceptDeclaration)? &
		//        // containing - subject
		//        ('containing' contained=SimpleConceptDeclaration)? &
		//        // cause towards event (?)
		//        ('causing'   caused=SimpleConceptDeclaration)? &
		//        // concomitant with event (?)
		//        ('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))? &
		//        // context or secondary inherency
		//        ('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))? &
		//        // for relationships: specialize source and target types
		//        ('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
		//    )?
		public Group getGroup() { return cGroup; }
		
		//main+=Concept+
		public Assignment getMainAssignment_0() { return cMainAssignment_0; }
		
		//Concept
		public RuleCall getMainConceptParserRuleCall_0_0() { return cMainConceptParserRuleCall_0_0; }
		
		//// binary semantic operators; also 'as', 'by' and 'follows' handled in other rules
		//(
		//    // primary inherency (when secondary is given using 'within')
		//    ('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))? &
		//    // purpose (achievement event created from target)
		//    ('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))? &
		//    // compresence (subject, process, event, presence or partitioned quality)
		//    ('with' compresent=SimpleConceptDeclaration)? &
		//    // cause towards self - causant can be anything (?)
		//    ('caused' 'by' causant=SimpleConceptDeclaration)? &
		//    // spatial adjacency (see 'follows' operator for temporal adjacency in events) - subject, event or relationship
		//    ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? &
		//    // being contained - subject
		//    ('contained' 'in' container=SimpleConceptDeclaration)? &
		//    // containing - subject
		//    ('containing' contained=SimpleConceptDeclaration)? &
		//    // cause towards event (?)
		//    ('causing'   caused=SimpleConceptDeclaration)? &
		//    // concomitant with event (?)
		//    ('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))? &
		//    // context or secondary inherency
		//    ('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))? &
		//    // for relationships: specialize source and target types
		//    ('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
		//)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//// primary inherency (when secondary is given using 'within')
		//('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'of'
		public Keyword getOfKeyword_1_0_0() { return cOfKeyword_1_0_0; }
		
		//((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration)
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//(distributedOfInherency?='each')?
		public Assignment getDistributedOfInherencyAssignment_1_0_1_0() { return cDistributedOfInherencyAssignment_1_0_1_0; }
		
		//'each'
		public Keyword getDistributedOfInherencyEachKeyword_1_0_1_0_0() { return cDistributedOfInherencyEachKeyword_1_0_1_0_0; }
		
		//inherency=SimpleConceptDeclaration
		public Assignment getInherencyAssignment_1_0_1_1() { return cInherencyAssignment_1_0_1_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getInherencySimpleConceptDeclarationParserRuleCall_1_0_1_1_0() { return cInherencySimpleConceptDeclarationParserRuleCall_1_0_1_1_0; }
		
		//// purpose (achievement event created from target)
		//('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'for'
		public Keyword getForKeyword_1_1_0() { return cForKeyword_1_1_0; }
		
		//((distributedForInherency?='each')? motivation=SimpleConceptDeclaration)
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//(distributedForInherency?='each')?
		public Assignment getDistributedForInherencyAssignment_1_1_1_0() { return cDistributedForInherencyAssignment_1_1_1_0; }
		
		//'each'
		public Keyword getDistributedForInherencyEachKeyword_1_1_1_0_0() { return cDistributedForInherencyEachKeyword_1_1_1_0_0; }
		
		//motivation=SimpleConceptDeclaration
		public Assignment getMotivationAssignment_1_1_1_1() { return cMotivationAssignment_1_1_1_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getMotivationSimpleConceptDeclarationParserRuleCall_1_1_1_1_0() { return cMotivationSimpleConceptDeclarationParserRuleCall_1_1_1_1_0; }
		
		//// compresence (subject, process, event, presence or partitioned quality)
		//('with' compresent=SimpleConceptDeclaration)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'with'
		public Keyword getWithKeyword_1_2_0() { return cWithKeyword_1_2_0; }
		
		//compresent=SimpleConceptDeclaration
		public Assignment getCompresentAssignment_1_2_1() { return cCompresentAssignment_1_2_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getCompresentSimpleConceptDeclarationParserRuleCall_1_2_1_0() { return cCompresentSimpleConceptDeclarationParserRuleCall_1_2_1_0; }
		
		//// cause towards self - causant can be anything (?)
		//('caused' 'by' causant=SimpleConceptDeclaration)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'caused'
		public Keyword getCausedKeyword_1_3_0() { return cCausedKeyword_1_3_0; }
		
		//'by'
		public Keyword getByKeyword_1_3_1() { return cByKeyword_1_3_1; }
		
		//causant=SimpleConceptDeclaration
		public Assignment getCausantAssignment_1_3_2() { return cCausantAssignment_1_3_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getCausantSimpleConceptDeclarationParserRuleCall_1_3_2_0() { return cCausantSimpleConceptDeclarationParserRuleCall_1_3_2_0; }
		
		//// spatial adjacency (see 'follows' operator for temporal adjacency in events) - subject, event or relationship
		//('adjacent' 'to' adjacent=SimpleConceptDeclaration)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'adjacent'
		public Keyword getAdjacentKeyword_1_4_0() { return cAdjacentKeyword_1_4_0; }
		
		//'to'
		public Keyword getToKeyword_1_4_1() { return cToKeyword_1_4_1; }
		
		//adjacent=SimpleConceptDeclaration
		public Assignment getAdjacentAssignment_1_4_2() { return cAdjacentAssignment_1_4_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getAdjacentSimpleConceptDeclarationParserRuleCall_1_4_2_0() { return cAdjacentSimpleConceptDeclarationParserRuleCall_1_4_2_0; }
		
		//// being contained - subject
		//('contained' 'in' container=SimpleConceptDeclaration)?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'contained'
		public Keyword getContainedKeyword_1_5_0() { return cContainedKeyword_1_5_0; }
		
		//'in'
		public Keyword getInKeyword_1_5_1() { return cInKeyword_1_5_1; }
		
		//container=SimpleConceptDeclaration
		public Assignment getContainerAssignment_1_5_2() { return cContainerAssignment_1_5_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getContainerSimpleConceptDeclarationParserRuleCall_1_5_2_0() { return cContainerSimpleConceptDeclarationParserRuleCall_1_5_2_0; }
		
		//// containing - subject
		//('containing' contained=SimpleConceptDeclaration)?
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//'containing'
		public Keyword getContainingKeyword_1_6_0() { return cContainingKeyword_1_6_0; }
		
		//contained=SimpleConceptDeclaration
		public Assignment getContainedAssignment_1_6_1() { return cContainedAssignment_1_6_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getContainedSimpleConceptDeclarationParserRuleCall_1_6_1_0() { return cContainedSimpleConceptDeclarationParserRuleCall_1_6_1_0; }
		
		//// cause towards event (?)
		//('causing'   caused=SimpleConceptDeclaration)?
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//'causing'
		public Keyword getCausingKeyword_1_7_0() { return cCausingKeyword_1_7_0; }
		
		//caused=SimpleConceptDeclaration
		public Assignment getCausedAssignment_1_7_1() { return cCausedAssignment_1_7_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getCausedSimpleConceptDeclarationParserRuleCall_1_7_1_0() { return cCausedSimpleConceptDeclarationParserRuleCall_1_7_1_0; }
		
		//// concomitant with event (?)
		//('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))?
		public Group getGroup_1_8() { return cGroup_1_8; }
		
		//'during'
		public Keyword getDuringKeyword_1_8_0() { return cDuringKeyword_1_8_0; }
		
		//((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration)
		public Group getGroup_1_8_1() { return cGroup_1_8_1; }
		
		//(distributedTemporalInherency?='each')?
		public Assignment getDistributedTemporalInherencyAssignment_1_8_1_0() { return cDistributedTemporalInherencyAssignment_1_8_1_0; }
		
		//'each'
		public Keyword getDistributedTemporalInherencyEachKeyword_1_8_1_0_0() { return cDistributedTemporalInherencyEachKeyword_1_8_1_0_0; }
		
		//during=SimpleConceptDeclaration
		public Assignment getDuringAssignment_1_8_1_1() { return cDuringAssignment_1_8_1_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getDuringSimpleConceptDeclarationParserRuleCall_1_8_1_1_0() { return cDuringSimpleConceptDeclarationParserRuleCall_1_8_1_1_0; }
		
		//// context or secondary inherency
		//('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))?
		public Group getGroup_1_9() { return cGroup_1_9; }
		
		//'within'
		public Keyword getWithinKeyword_1_9_0() { return cWithinKeyword_1_9_0; }
		
		//((distributedWithinInherency?='each')? context=SimpleConceptDeclaration)
		public Group getGroup_1_9_1() { return cGroup_1_9_1; }
		
		//(distributedWithinInherency?='each')?
		public Assignment getDistributedWithinInherencyAssignment_1_9_1_0() { return cDistributedWithinInherencyAssignment_1_9_1_0; }
		
		//'each'
		public Keyword getDistributedWithinInherencyEachKeyword_1_9_1_0_0() { return cDistributedWithinInherencyEachKeyword_1_9_1_0_0; }
		
		//context=SimpleConceptDeclaration
		public Assignment getContextAssignment_1_9_1_1() { return cContextAssignment_1_9_1_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getContextSimpleConceptDeclarationParserRuleCall_1_9_1_1_0() { return cContextSimpleConceptDeclarationParserRuleCall_1_9_1_1_0; }
		
		//// for relationships: specialize source and target types
		//('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
		public Group getGroup_1_10() { return cGroup_1_10; }
		
		//'linking'
		public Keyword getLinkingKeyword_1_10_0() { return cLinkingKeyword_1_10_0; }
		
		//relationshipSource=SimpleConceptDeclaration
		public Assignment getRelationshipSourceAssignment_1_10_1() { return cRelationshipSourceAssignment_1_10_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getRelationshipSourceSimpleConceptDeclarationParserRuleCall_1_10_1_0() { return cRelationshipSourceSimpleConceptDeclarationParserRuleCall_1_10_1_0; }
		
		//'to'
		public Keyword getToKeyword_1_10_2() { return cToKeyword_1_10_2; }
		
		//relationshipTarget=SimpleConceptDeclaration
		public Assignment getRelationshipTargetAssignment_1_10_3() { return cRelationshipTargetAssignment_1_10_3; }
		
		//SimpleConceptDeclaration
		public RuleCall getRelationshipTargetSimpleConceptDeclarationParserRuleCall_1_10_3_0() { return cRelationshipTargetSimpleConceptDeclarationParserRuleCall_1_10_3_0; }
	}
	public class VALUE_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.VALUE_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cWhereKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cWithoutKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cExclamationMarkEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPlusKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cMinusKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cTimesKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cOverKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cByKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//VALUE_OPERATOR:
		//    '>'  |
		//    '>=' |
		//    '<='|
		//    '<'|
		//    'where'|
		//    '=='|
		//    '='|
		//    'without'|
		//    '!='|
		//    'plus'|
		//    'minus'|
		//    'times'|
		//    'over' |
		//    'by'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'>'  |
		//'>=' |
		//'<='|
		//'<'|
		//'where'|
		//'=='|
		//'='|
		//'without'|
		//'!='|
		//'plus'|
		//'minus'|
		//'times'|
		//'over' |
		//'by'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
		
		//'where'
		public Keyword getWhereKeyword_4() { return cWhereKeyword_4; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_5() { return cEqualsSignEqualsSignKeyword_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//'without'
		public Keyword getWithoutKeyword_7() { return cWithoutKeyword_7; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_8() { return cExclamationMarkEqualsSignKeyword_8; }
		
		//'plus'
		public Keyword getPlusKeyword_9() { return cPlusKeyword_9; }
		
		//'minus'
		public Keyword getMinusKeyword_10() { return cMinusKeyword_10; }
		
		//'times'
		public Keyword getTimesKeyword_11() { return cTimesKeyword_11; }
		
		//'over'
		public Keyword getOverKeyword_12() { return cOverKeyword_12; }
		
		//'by'
		public Keyword getByKeyword_13() { return cByKeyword_13; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNegatedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cNegatedAlternatives_0_0_0 = (Alternatives)cNegatedAssignment_0_0.eContents().get(0);
		private final Keyword cNegatedNotKeyword_0_0_0_0 = (Keyword)cNegatedAlternatives_0_0_0.eContents().get(0);
		private final Keyword cNegatedNoKeyword_0_0_0_1 = (Keyword)cNegatedAlternatives_0_0_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameNamespaceIdParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cAuthConceptAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final Keyword cAuthConceptIdentifiedKeyword_0_2_0_0 = (Keyword)cAuthConceptAssignment_0_2_0.eContents().get(0);
		private final Keyword cAsKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Alternatives cAlternatives_0_2_2 = (Alternatives)cGroup_0_2.eContents().get(2);
		private final Assignment cStringIdentifierAssignment_0_2_2_0 = (Assignment)cAlternatives_0_2_2.eContents().get(0);
		private final Alternatives cStringIdentifierAlternatives_0_2_2_0_0 = (Alternatives)cStringIdentifierAssignment_0_2_2_0.eContents().get(0);
		private final RuleCall cStringIdentifierIDTerminalRuleCall_0_2_2_0_0_0 = (RuleCall)cStringIdentifierAlternatives_0_2_2_0_0.eContents().get(0);
		private final RuleCall cStringIdentifierSTRINGTerminalRuleCall_0_2_2_0_0_1 = (RuleCall)cStringIdentifierAlternatives_0_2_2_0_0.eContents().get(1);
		private final RuleCall cStringIdentifierUPPERCASE_IDTerminalRuleCall_0_2_2_0_0_2 = (RuleCall)cStringIdentifierAlternatives_0_2_2_0_0.eContents().get(2);
		private final RuleCall cStringIdentifierCAMELCASE_IDTerminalRuleCall_0_2_2_0_0_3 = (RuleCall)cStringIdentifierAlternatives_0_2_2_0_0.eContents().get(3);
		private final Assignment cIntIdentifierAssignment_0_2_2_1 = (Assignment)cAlternatives_0_2_2.eContents().get(1);
		private final RuleCall cIntIdentifierINTTerminalRuleCall_0_2_2_1_0 = (RuleCall)cIntIdentifierAssignment_0_2_2_1.eContents().get(0);
		private final Keyword cByKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Assignment cAuthorityAssignment_0_2_4 = (Assignment)cGroup_0_2.eContents().get(4);
		private final Alternatives cAuthorityAlternatives_0_2_4_0 = (Alternatives)cAuthorityAssignment_0_2_4.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_IDTerminalRuleCall_0_2_4_0_0 = (RuleCall)cAuthorityAlternatives_0_2_4_0.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_PATHTerminalRuleCall_0_2_4_0_1 = (RuleCall)cAuthorityAlternatives_0_2_4_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPresenceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cPresencePresenceKeyword_1_0_0 = (Keyword)cPresenceAssignment_1_0.eContents().get(0);
		private final Keyword cOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConceptAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_1_2_0 = (RuleCall)cConceptAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cCountAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cCountCountKeyword_2_0_0 = (Keyword)cCountAssignment_2_0.eContents().get(0);
		private final Keyword cOfKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConceptAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_2_2_0 = (RuleCall)cConceptAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cDistanceAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDistanceDistanceKeyword_3_0_0 = (Keyword)cDistanceAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cToKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cFromKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Assignment cConceptAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_3_2_0 = (RuleCall)cConceptAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cProbabilityAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cProbabilityProbabilityKeyword_4_0_0 = (Keyword)cProbabilityAssignment_4_0.eContents().get(0);
		private final Keyword cOfKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConceptAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_4_2_0 = (RuleCall)cConceptAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cAssessmentAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cAssessmentAssessmentKeyword_5_0_0 = (Keyword)cAssessmentAssignment_5_0.eContents().get(0);
		private final Keyword cOfKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConceptAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_5_2_0 = (RuleCall)cConceptAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Alternatives cAlternatives_6_0 = (Alternatives)cGroup_6.eContents().get(0);
		private final Group cGroup_6_0_0 = (Group)cAlternatives_6_0.eContents().get(0);
		private final Keyword cChangeKeyword_6_0_0_0 = (Keyword)cGroup_6_0_0.eContents().get(0);
		private final Alternatives cAlternatives_6_0_0_1 = (Alternatives)cGroup_6_0_0.eContents().get(1);
		private final Assignment cChangeAssignment_6_0_0_1_0 = (Assignment)cAlternatives_6_0_0_1.eContents().get(0);
		private final Keyword cChangeInKeyword_6_0_0_1_0_0 = (Keyword)cChangeAssignment_6_0_0_1_0.eContents().get(0);
		private final Group cGroup_6_0_0_1_1 = (Group)cAlternatives_6_0_0_1.eContents().get(1);
		private final Assignment cRateAssignment_6_0_0_1_1_0 = (Assignment)cGroup_6_0_0_1_1.eContents().get(0);
		private final Keyword cRateRateKeyword_6_0_0_1_1_0_0 = (Keyword)cRateAssignment_6_0_0_1_1_0.eContents().get(0);
		private final Keyword cOfKeyword_6_0_0_1_1_1 = (Keyword)cGroup_6_0_0_1_1.eContents().get(1);
		private final Assignment cChangeAssignment_6_0_1 = (Assignment)cAlternatives_6_0.eContents().get(1);
		private final Keyword cChangeChangedKeyword_6_0_1_0 = (Keyword)cChangeAssignment_6_0_1.eContents().get(0);
		private final Assignment cConceptAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_6_1_0 = (RuleCall)cConceptAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cUncertaintyAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cUncertaintyUncertaintyKeyword_7_0_0 = (Keyword)cUncertaintyAssignment_7_0.eContents().get(0);
		private final Keyword cOfKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cConceptAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_7_2_0 = (RuleCall)cConceptAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cMagnitudeAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cMagnitudeMagnitudeKeyword_8_0_0 = (Keyword)cMagnitudeAssignment_8_0.eContents().get(0);
		private final Keyword cOfKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cConceptAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_8_2_0 = (RuleCall)cConceptAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cLevelAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cLevelLevelKeyword_9_0_0 = (Keyword)cLevelAssignment_9_0.eContents().get(0);
		private final Keyword cOfKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cConceptAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_9_2_0 = (RuleCall)cConceptAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cTypeAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cTypeTypeKeyword_10_0_0 = (Keyword)cTypeAssignment_10_0.eContents().get(0);
		private final Keyword cOfKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cConceptAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_10_2_0 = (RuleCall)cConceptAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cObservabilityAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cObservabilityObservabilityKeyword_11_0_0 = (Keyword)cObservabilityAssignment_11_0.eContents().get(0);
		private final Keyword cOfKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cConceptAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_11_2_0 = (RuleCall)cConceptAssignment_11_2.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cProportionAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Keyword cProportionProportionKeyword_12_0_0 = (Keyword)cProportionAssignment_12_0.eContents().get(0);
		private final Keyword cOfKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cConceptAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_12_2_0 = (RuleCall)cConceptAssignment_12_2.eContents().get(0);
		private final Group cGroup_12_3 = (Group)cGroup_12.eContents().get(3);
		private final Keyword cInKeyword_12_3_0 = (Keyword)cGroup_12_3.eContents().get(0);
		private final Assignment cOtherAssignment_12_3_1 = (Assignment)cGroup_12_3.eContents().get(1);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_12_3_1_0 = (RuleCall)cOtherAssignment_12_3_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Assignment cPercentageAssignment_13_0 = (Assignment)cGroup_13.eContents().get(0);
		private final Keyword cPercentagePercentageKeyword_13_0_0 = (Keyword)cPercentageAssignment_13_0.eContents().get(0);
		private final Keyword cOfKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cConceptAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_13_2_0 = (RuleCall)cConceptAssignment_13_2.eContents().get(0);
		private final Group cGroup_13_3 = (Group)cGroup_13.eContents().get(3);
		private final Keyword cInKeyword_13_3_0 = (Keyword)cGroup_13_3.eContents().get(0);
		private final Assignment cOtherAssignment_13_3_1 = (Assignment)cGroup_13_3.eContents().get(1);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_13_3_1_0 = (RuleCall)cOtherAssignment_13_3_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Assignment cRatioAssignment_14_0 = (Assignment)cGroup_14.eContents().get(0);
		private final Keyword cRatioRatioKeyword_14_0_0 = (Keyword)cRatioAssignment_14_0.eContents().get(0);
		private final Keyword cOfKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cConceptAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_14_2_0 = (RuleCall)cConceptAssignment_14_2.eContents().get(0);
		private final Keyword cToKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Assignment cOtherAssignment_14_4 = (Assignment)cGroup_14.eContents().get(4);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_14_4_0 = (RuleCall)cOtherAssignment_14_4.eContents().get(0);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Assignment cMonetaryAssignment_15_0 = (Assignment)cGroup_15.eContents().get(0);
		private final Keyword cMonetaryMonetaryKeyword_15_0_0 = (Keyword)cMonetaryAssignment_15_0.eContents().get(0);
		private final Assignment cValueAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final Keyword cValueValueKeyword_15_1_0 = (Keyword)cValueAssignment_15_1.eContents().get(0);
		private final Keyword cOfKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cConceptAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_15_3_0 = (RuleCall)cConceptAssignment_15_3.eContents().get(0);
		private final Group cGroup_15_4 = (Group)cGroup_15.eContents().get(4);
		private final Keyword cOverKeyword_15_4_0 = (Keyword)cGroup_15_4.eContents().get(0);
		private final Assignment cOtherAssignment_15_4_1 = (Assignment)cGroup_15_4.eContents().get(1);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_15_4_1_0 = (RuleCall)cOtherAssignment_15_4_1.eContents().get(0);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Assignment cOccurrenceAssignment_16_0 = (Assignment)cGroup_16.eContents().get(0);
		private final Keyword cOccurrenceOccurrenceKeyword_16_0_0 = (Keyword)cOccurrenceAssignment_16_0.eContents().get(0);
		private final Keyword cOfKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Assignment cConceptAssignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_16_2_0 = (RuleCall)cConceptAssignment_16_2.eContents().get(0);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Assignment cAuthConceptAssignment_17_0 = (Assignment)cGroup_17.eContents().get(0);
		private final Keyword cAuthConceptIdentityKeyword_17_0_0 = (Keyword)cAuthConceptAssignment_17_0.eContents().get(0);
		private final Alternatives cAlternatives_17_1 = (Alternatives)cGroup_17.eContents().get(1);
		private final Assignment cStringIdentifierAssignment_17_1_0 = (Assignment)cAlternatives_17_1.eContents().get(0);
		private final Alternatives cStringIdentifierAlternatives_17_1_0_0 = (Alternatives)cStringIdentifierAssignment_17_1_0.eContents().get(0);
		private final RuleCall cStringIdentifierIDTerminalRuleCall_17_1_0_0_0 = (RuleCall)cStringIdentifierAlternatives_17_1_0_0.eContents().get(0);
		private final RuleCall cStringIdentifierSTRINGTerminalRuleCall_17_1_0_0_1 = (RuleCall)cStringIdentifierAlternatives_17_1_0_0.eContents().get(1);
		private final RuleCall cStringIdentifierUPPERCASE_IDTerminalRuleCall_17_1_0_0_2 = (RuleCall)cStringIdentifierAlternatives_17_1_0_0.eContents().get(2);
		private final RuleCall cStringIdentifierCAMELCASE_IDTerminalRuleCall_17_1_0_0_3 = (RuleCall)cStringIdentifierAlternatives_17_1_0_0.eContents().get(3);
		private final Assignment cIntIdentifierAssignment_17_1_1 = (Assignment)cAlternatives_17_1.eContents().get(1);
		private final RuleCall cIntIdentifierINTTerminalRuleCall_17_1_1_0 = (RuleCall)cIntIdentifierAssignment_17_1_1.eContents().get(0);
		private final Keyword cByKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		private final Assignment cAuthorityAssignment_17_3 = (Assignment)cGroup_17.eContents().get(3);
		private final Alternatives cAuthorityAlternatives_17_3_0 = (Alternatives)cAuthorityAssignment_17_3.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_IDTerminalRuleCall_17_3_0_0 = (RuleCall)cAuthorityAlternatives_17_3_0.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_PATHTerminalRuleCall_17_3_0_1 = (RuleCall)cAuthorityAlternatives_17_3_0.eContents().get(1);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Keyword cLeftParenthesisKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final Assignment cDeclarationAssignment_18_1 = (Assignment)cGroup_18.eContents().get(1);
		private final RuleCall cDeclarationExpressionParserRuleCall_18_1_0 = (RuleCall)cDeclarationAssignment_18_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_18_2 = (Keyword)cGroup_18.eContents().get(2);
		
		//Concept:
		//    (negated?=('not'|'no'))? name=NamespaceId
		//        // if the following is there, the name becomes an alias for the authority concept
		//        (authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))? |
		//    // unary operators
		//    presence?='presence' 'of' concept=SimpleConceptDeclaration |
		//    count?='count' 'of' concept=SimpleConceptDeclaration |
		//    distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration |
		//    probability?='probability' 'of' concept=SimpleConceptDeclaration |
		//    assessment?='assessment' 'of' concept=SimpleConceptDeclaration |
		//    ('change' (change?='in' | rate?='rate' 'of') | change?='changed') concept=SimpleConceptDeclaration |
		//    uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration |
		//    magnitude?='magnitude' 'of' concept=SimpleConceptDeclaration |
		//    level?='level' 'of' concept=SimpleConceptDeclaration |
		//    type?='type' 'of' concept=SimpleConceptDeclaration |
		//    observability?='observability' 'of' concept=SimpleConceptDeclaration |
		//    proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
		//    percentage?='percentage' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
		//    ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration |
		//    (monetary?='monetary')? value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? |
		//    occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration |
		//    // this form specifies an authority concept with no alias (the authority may provide a default label)
		//    authConcept?='identity' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH) |
		//    '(' declaration=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(negated?=('not'|'no'))? name=NamespaceId
		//    // if the following is there, the name becomes an alias for the authority concept
		//    (authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))? |
		//// unary operators
		//presence?='presence' 'of' concept=SimpleConceptDeclaration |
		//count?='count' 'of' concept=SimpleConceptDeclaration |
		//distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration |
		//probability?='probability' 'of' concept=SimpleConceptDeclaration |
		//assessment?='assessment' 'of' concept=SimpleConceptDeclaration |
		//('change' (change?='in' | rate?='rate' 'of') | change?='changed') concept=SimpleConceptDeclaration |
		//uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration |
		//magnitude?='magnitude' 'of' concept=SimpleConceptDeclaration |
		//level?='level' 'of' concept=SimpleConceptDeclaration |
		//type?='type' 'of' concept=SimpleConceptDeclaration |
		//observability?='observability' 'of' concept=SimpleConceptDeclaration |
		//proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
		//percentage?='percentage' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
		//ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration |
		//(monetary?='monetary')? value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? |
		//occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration |
		//// this form specifies an authority concept with no alias (the authority may provide a default label)
		//authConcept?='identity' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH) |
		//'(' declaration=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(negated?=('not'|'no'))? name=NamespaceId
		//    // if the following is there, the name becomes an alias for the authority concept
		//    (authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?
		public Group getGroup_0() { return cGroup_0; }
		
		//(negated?=('not'|'no'))?
		public Assignment getNegatedAssignment_0_0() { return cNegatedAssignment_0_0; }
		
		//('not'|'no')
		public Alternatives getNegatedAlternatives_0_0_0() { return cNegatedAlternatives_0_0_0; }
		
		//'not'
		public Keyword getNegatedNotKeyword_0_0_0_0() { return cNegatedNotKeyword_0_0_0_0; }
		
		//'no'
		public Keyword getNegatedNoKeyword_0_0_0_1() { return cNegatedNoKeyword_0_0_0_1; }
		
		//name=NamespaceId
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//NamespaceId
		public RuleCall getNameNamespaceIdParserRuleCall_0_1_0() { return cNameNamespaceIdParserRuleCall_0_1_0; }
		
		//// if the following is there, the name becomes an alias for the authority concept
		//(authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//authConcept?='identified'
		public Assignment getAuthConceptAssignment_0_2_0() { return cAuthConceptAssignment_0_2_0; }
		
		//'identified'
		public Keyword getAuthConceptIdentifiedKeyword_0_2_0_0() { return cAuthConceptIdentifiedKeyword_0_2_0_0; }
		
		//'as'
		public Keyword getAsKeyword_0_2_1() { return cAsKeyword_0_2_1; }
		
		//(stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT)
		public Alternatives getAlternatives_0_2_2() { return cAlternatives_0_2_2; }
		
		//stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID)
		public Assignment getStringIdentifierAssignment_0_2_2_0() { return cStringIdentifierAssignment_0_2_2_0; }
		
		//(ID|STRING|UPPERCASE_ID|CAMELCASE_ID)
		public Alternatives getStringIdentifierAlternatives_0_2_2_0_0() { return cStringIdentifierAlternatives_0_2_2_0_0; }
		
		//ID
		public RuleCall getStringIdentifierIDTerminalRuleCall_0_2_2_0_0_0() { return cStringIdentifierIDTerminalRuleCall_0_2_2_0_0_0; }
		
		//STRING
		public RuleCall getStringIdentifierSTRINGTerminalRuleCall_0_2_2_0_0_1() { return cStringIdentifierSTRINGTerminalRuleCall_0_2_2_0_0_1; }
		
		//UPPERCASE_ID
		public RuleCall getStringIdentifierUPPERCASE_IDTerminalRuleCall_0_2_2_0_0_2() { return cStringIdentifierUPPERCASE_IDTerminalRuleCall_0_2_2_0_0_2; }
		
		//CAMELCASE_ID
		public RuleCall getStringIdentifierCAMELCASE_IDTerminalRuleCall_0_2_2_0_0_3() { return cStringIdentifierCAMELCASE_IDTerminalRuleCall_0_2_2_0_0_3; }
		
		//intIdentifier=INT
		public Assignment getIntIdentifierAssignment_0_2_2_1() { return cIntIdentifierAssignment_0_2_2_1; }
		
		//INT
		public RuleCall getIntIdentifierINTTerminalRuleCall_0_2_2_1_0() { return cIntIdentifierINTTerminalRuleCall_0_2_2_1_0; }
		
		//'by'
		public Keyword getByKeyword_0_2_3() { return cByKeyword_0_2_3; }
		
		//authority=(UPPERCASE_ID|UPPERCASE_PATH)
		public Assignment getAuthorityAssignment_0_2_4() { return cAuthorityAssignment_0_2_4; }
		
		//(UPPERCASE_ID|UPPERCASE_PATH)
		public Alternatives getAuthorityAlternatives_0_2_4_0() { return cAuthorityAlternatives_0_2_4_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthorityUPPERCASE_IDTerminalRuleCall_0_2_4_0_0() { return cAuthorityUPPERCASE_IDTerminalRuleCall_0_2_4_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthorityUPPERCASE_PATHTerminalRuleCall_0_2_4_0_1() { return cAuthorityUPPERCASE_PATHTerminalRuleCall_0_2_4_0_1; }
		
		//// unary operators
		//presence?='presence' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_1() { return cGroup_1; }
		
		//// unary operators
		//presence?='presence'
		public Assignment getPresenceAssignment_1_0() { return cPresenceAssignment_1_0; }
		
		//'presence'
		public Keyword getPresencePresenceKeyword_1_0_0() { return cPresencePresenceKeyword_1_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1_1() { return cOfKeyword_1_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_1_2() { return cConceptAssignment_1_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_1_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_1_2_0; }
		
		//count?='count' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_2() { return cGroup_2; }
		
		//count?='count'
		public Assignment getCountAssignment_2_0() { return cCountAssignment_2_0; }
		
		//'count'
		public Keyword getCountCountKeyword_2_0_0() { return cCountCountKeyword_2_0_0; }
		
		//'of'
		public Keyword getOfKeyword_2_1() { return cOfKeyword_2_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_2_2() { return cConceptAssignment_2_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_2_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_2_2_0; }
		
		//distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration
		public Group getGroup_3() { return cGroup_3; }
		
		//distance?='distance'
		public Assignment getDistanceAssignment_3_0() { return cDistanceAssignment_3_0; }
		
		//'distance'
		public Keyword getDistanceDistanceKeyword_3_0_0() { return cDistanceDistanceKeyword_3_0_0; }
		
		//('to' | 'from')
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'to'
		public Keyword getToKeyword_3_1_0() { return cToKeyword_3_1_0; }
		
		//'from'
		public Keyword getFromKeyword_3_1_1() { return cFromKeyword_3_1_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_3_2() { return cConceptAssignment_3_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_3_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_3_2_0; }
		
		//probability?='probability' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_4() { return cGroup_4; }
		
		//probability?='probability'
		public Assignment getProbabilityAssignment_4_0() { return cProbabilityAssignment_4_0; }
		
		//'probability'
		public Keyword getProbabilityProbabilityKeyword_4_0_0() { return cProbabilityProbabilityKeyword_4_0_0; }
		
		//'of'
		public Keyword getOfKeyword_4_1() { return cOfKeyword_4_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_4_2() { return cConceptAssignment_4_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_4_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_4_2_0; }
		
		//assessment?='assessment' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_5() { return cGroup_5; }
		
		//assessment?='assessment'
		public Assignment getAssessmentAssignment_5_0() { return cAssessmentAssignment_5_0; }
		
		//'assessment'
		public Keyword getAssessmentAssessmentKeyword_5_0_0() { return cAssessmentAssessmentKeyword_5_0_0; }
		
		//'of'
		public Keyword getOfKeyword_5_1() { return cOfKeyword_5_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_5_2() { return cConceptAssignment_5_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_5_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_5_2_0; }
		
		//('change' (change?='in' | rate?='rate' 'of') | change?='changed') concept=SimpleConceptDeclaration
		public Group getGroup_6() { return cGroup_6; }
		
		//('change' (change?='in' | rate?='rate' 'of') | change?='changed')
		public Alternatives getAlternatives_6_0() { return cAlternatives_6_0; }
		
		//'change' (change?='in' | rate?='rate' 'of')
		public Group getGroup_6_0_0() { return cGroup_6_0_0; }
		
		//'change'
		public Keyword getChangeKeyword_6_0_0_0() { return cChangeKeyword_6_0_0_0; }
		
		//(change?='in' | rate?='rate' 'of')
		public Alternatives getAlternatives_6_0_0_1() { return cAlternatives_6_0_0_1; }
		
		//change?='in'
		public Assignment getChangeAssignment_6_0_0_1_0() { return cChangeAssignment_6_0_0_1_0; }
		
		//'in'
		public Keyword getChangeInKeyword_6_0_0_1_0_0() { return cChangeInKeyword_6_0_0_1_0_0; }
		
		//rate?='rate' 'of'
		public Group getGroup_6_0_0_1_1() { return cGroup_6_0_0_1_1; }
		
		//rate?='rate'
		public Assignment getRateAssignment_6_0_0_1_1_0() { return cRateAssignment_6_0_0_1_1_0; }
		
		//'rate'
		public Keyword getRateRateKeyword_6_0_0_1_1_0_0() { return cRateRateKeyword_6_0_0_1_1_0_0; }
		
		//'of'
		public Keyword getOfKeyword_6_0_0_1_1_1() { return cOfKeyword_6_0_0_1_1_1; }
		
		//change?='changed'
		public Assignment getChangeAssignment_6_0_1() { return cChangeAssignment_6_0_1; }
		
		//'changed'
		public Keyword getChangeChangedKeyword_6_0_1_0() { return cChangeChangedKeyword_6_0_1_0; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_6_1() { return cConceptAssignment_6_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_6_1_0() { return cConceptSimpleConceptDeclarationParserRuleCall_6_1_0; }
		
		//uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_7() { return cGroup_7; }
		
		//uncertainty?='uncertainty'
		public Assignment getUncertaintyAssignment_7_0() { return cUncertaintyAssignment_7_0; }
		
		//'uncertainty'
		public Keyword getUncertaintyUncertaintyKeyword_7_0_0() { return cUncertaintyUncertaintyKeyword_7_0_0; }
		
		//'of'
		public Keyword getOfKeyword_7_1() { return cOfKeyword_7_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_7_2() { return cConceptAssignment_7_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_7_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_7_2_0; }
		
		//magnitude?='magnitude' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_8() { return cGroup_8; }
		
		//magnitude?='magnitude'
		public Assignment getMagnitudeAssignment_8_0() { return cMagnitudeAssignment_8_0; }
		
		//'magnitude'
		public Keyword getMagnitudeMagnitudeKeyword_8_0_0() { return cMagnitudeMagnitudeKeyword_8_0_0; }
		
		//'of'
		public Keyword getOfKeyword_8_1() { return cOfKeyword_8_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_8_2() { return cConceptAssignment_8_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_8_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_8_2_0; }
		
		//level?='level' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_9() { return cGroup_9; }
		
		//level?='level'
		public Assignment getLevelAssignment_9_0() { return cLevelAssignment_9_0; }
		
		//'level'
		public Keyword getLevelLevelKeyword_9_0_0() { return cLevelLevelKeyword_9_0_0; }
		
		//'of'
		public Keyword getOfKeyword_9_1() { return cOfKeyword_9_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_9_2() { return cConceptAssignment_9_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_9_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_9_2_0; }
		
		//type?='type' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_10() { return cGroup_10; }
		
		//type?='type'
		public Assignment getTypeAssignment_10_0() { return cTypeAssignment_10_0; }
		
		//'type'
		public Keyword getTypeTypeKeyword_10_0_0() { return cTypeTypeKeyword_10_0_0; }
		
		//'of'
		public Keyword getOfKeyword_10_1() { return cOfKeyword_10_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_10_2() { return cConceptAssignment_10_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_10_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_10_2_0; }
		
		//observability?='observability' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_11() { return cGroup_11; }
		
		//observability?='observability'
		public Assignment getObservabilityAssignment_11_0() { return cObservabilityAssignment_11_0; }
		
		//'observability'
		public Keyword getObservabilityObservabilityKeyword_11_0_0() { return cObservabilityObservabilityKeyword_11_0_0; }
		
		//'of'
		public Keyword getOfKeyword_11_1() { return cOfKeyword_11_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_11_2() { return cConceptAssignment_11_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_11_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_11_2_0; }
		
		//proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)?
		public Group getGroup_12() { return cGroup_12; }
		
		//proportion?='proportion'
		public Assignment getProportionAssignment_12_0() { return cProportionAssignment_12_0; }
		
		//'proportion'
		public Keyword getProportionProportionKeyword_12_0_0() { return cProportionProportionKeyword_12_0_0; }
		
		//'of'
		public Keyword getOfKeyword_12_1() { return cOfKeyword_12_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_12_2() { return cConceptAssignment_12_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_12_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_12_2_0; }
		
		//(=> 'in' other=SimpleConceptDeclaration)?
		public Group getGroup_12_3() { return cGroup_12_3; }
		
		//=> 'in'
		public Keyword getInKeyword_12_3_0() { return cInKeyword_12_3_0; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_12_3_1() { return cOtherAssignment_12_3_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_12_3_1_0() { return cOtherSimpleConceptDeclarationParserRuleCall_12_3_1_0; }
		
		//percentage?='percentage' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)?
		public Group getGroup_13() { return cGroup_13; }
		
		//percentage?='percentage'
		public Assignment getPercentageAssignment_13_0() { return cPercentageAssignment_13_0; }
		
		//'percentage'
		public Keyword getPercentagePercentageKeyword_13_0_0() { return cPercentagePercentageKeyword_13_0_0; }
		
		//'of'
		public Keyword getOfKeyword_13_1() { return cOfKeyword_13_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_13_2() { return cConceptAssignment_13_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_13_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_13_2_0; }
		
		//(=> 'in' other=SimpleConceptDeclaration)?
		public Group getGroup_13_3() { return cGroup_13_3; }
		
		//=> 'in'
		public Keyword getInKeyword_13_3_0() { return cInKeyword_13_3_0; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_13_3_1() { return cOtherAssignment_13_3_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_13_3_1_0() { return cOtherSimpleConceptDeclarationParserRuleCall_13_3_1_0; }
		
		//ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration
		public Group getGroup_14() { return cGroup_14; }
		
		//ratio?='ratio'
		public Assignment getRatioAssignment_14_0() { return cRatioAssignment_14_0; }
		
		//'ratio'
		public Keyword getRatioRatioKeyword_14_0_0() { return cRatioRatioKeyword_14_0_0; }
		
		//'of'
		public Keyword getOfKeyword_14_1() { return cOfKeyword_14_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_14_2() { return cConceptAssignment_14_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_14_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_14_2_0; }
		
		//=> 'to'
		public Keyword getToKeyword_14_3() { return cToKeyword_14_3; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_14_4() { return cOtherAssignment_14_4; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_14_4_0() { return cOtherSimpleConceptDeclarationParserRuleCall_14_4_0; }
		
		//(monetary?='monetary')? value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)?
		public Group getGroup_15() { return cGroup_15; }
		
		//(monetary?='monetary')?
		public Assignment getMonetaryAssignment_15_0() { return cMonetaryAssignment_15_0; }
		
		//'monetary'
		public Keyword getMonetaryMonetaryKeyword_15_0_0() { return cMonetaryMonetaryKeyword_15_0_0; }
		
		//value?='value'
		public Assignment getValueAssignment_15_1() { return cValueAssignment_15_1; }
		
		//'value'
		public Keyword getValueValueKeyword_15_1_0() { return cValueValueKeyword_15_1_0; }
		
		//'of'
		public Keyword getOfKeyword_15_2() { return cOfKeyword_15_2; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_15_3() { return cConceptAssignment_15_3; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_15_3_0() { return cConceptSimpleConceptDeclarationParserRuleCall_15_3_0; }
		
		//(=> 'over' other=SimpleConceptDeclaration)?
		public Group getGroup_15_4() { return cGroup_15_4; }
		
		//=> 'over'
		public Keyword getOverKeyword_15_4_0() { return cOverKeyword_15_4_0; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_15_4_1() { return cOtherAssignment_15_4_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_15_4_1_0() { return cOtherSimpleConceptDeclarationParserRuleCall_15_4_1_0; }
		
		//occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_16() { return cGroup_16; }
		
		//occurrence?='occurrence'
		public Assignment getOccurrenceAssignment_16_0() { return cOccurrenceAssignment_16_0; }
		
		//'occurrence'
		public Keyword getOccurrenceOccurrenceKeyword_16_0_0() { return cOccurrenceOccurrenceKeyword_16_0_0; }
		
		//'of'
		public Keyword getOfKeyword_16_1() { return cOfKeyword_16_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_16_2() { return cConceptAssignment_16_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_16_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_16_2_0; }
		
		//// this form specifies an authority concept with no alias (the authority may provide a default label)
		//authConcept?='identity' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH)
		public Group getGroup_17() { return cGroup_17; }
		
		//// this form specifies an authority concept with no alias (the authority may provide a default label)
		//authConcept?='identity'
		public Assignment getAuthConceptAssignment_17_0() { return cAuthConceptAssignment_17_0; }
		
		//'identity'
		public Keyword getAuthConceptIdentityKeyword_17_0_0() { return cAuthConceptIdentityKeyword_17_0_0; }
		
		//(stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT)
		public Alternatives getAlternatives_17_1() { return cAlternatives_17_1; }
		
		//stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID)
		public Assignment getStringIdentifierAssignment_17_1_0() { return cStringIdentifierAssignment_17_1_0; }
		
		//(ID|STRING|UPPERCASE_ID|CAMELCASE_ID)
		public Alternatives getStringIdentifierAlternatives_17_1_0_0() { return cStringIdentifierAlternatives_17_1_0_0; }
		
		//ID
		public RuleCall getStringIdentifierIDTerminalRuleCall_17_1_0_0_0() { return cStringIdentifierIDTerminalRuleCall_17_1_0_0_0; }
		
		//STRING
		public RuleCall getStringIdentifierSTRINGTerminalRuleCall_17_1_0_0_1() { return cStringIdentifierSTRINGTerminalRuleCall_17_1_0_0_1; }
		
		//UPPERCASE_ID
		public RuleCall getStringIdentifierUPPERCASE_IDTerminalRuleCall_17_1_0_0_2() { return cStringIdentifierUPPERCASE_IDTerminalRuleCall_17_1_0_0_2; }
		
		//CAMELCASE_ID
		public RuleCall getStringIdentifierCAMELCASE_IDTerminalRuleCall_17_1_0_0_3() { return cStringIdentifierCAMELCASE_IDTerminalRuleCall_17_1_0_0_3; }
		
		//intIdentifier=INT
		public Assignment getIntIdentifierAssignment_17_1_1() { return cIntIdentifierAssignment_17_1_1; }
		
		//INT
		public RuleCall getIntIdentifierINTTerminalRuleCall_17_1_1_0() { return cIntIdentifierINTTerminalRuleCall_17_1_1_0; }
		
		//'by'
		public Keyword getByKeyword_17_2() { return cByKeyword_17_2; }
		
		//authority=(UPPERCASE_ID|UPPERCASE_PATH)
		public Assignment getAuthorityAssignment_17_3() { return cAuthorityAssignment_17_3; }
		
		//(UPPERCASE_ID|UPPERCASE_PATH)
		public Alternatives getAuthorityAlternatives_17_3_0() { return cAuthorityAlternatives_17_3_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthorityUPPERCASE_IDTerminalRuleCall_17_3_0_0() { return cAuthorityUPPERCASE_IDTerminalRuleCall_17_3_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthorityUPPERCASE_PATHTerminalRuleCall_17_3_0_1() { return cAuthorityUPPERCASE_PATHTerminalRuleCall_17_3_0_1; }
		
		//'(' declaration=Expression ')'
		public Group getGroup_18() { return cGroup_18; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_18_0() { return cLeftParenthesisKeyword_18_0; }
		
		//declaration=Expression
		public Assignment getDeclarationAssignment_18_1() { return cDeclarationAssignment_18_1; }
		
		//Expression
		public RuleCall getDeclarationExpressionParserRuleCall_18_1_0() { return cDeclarationExpressionParserRuleCall_18_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_18_2() { return cRightParenthesisKeyword_18_2; }
	}
	public class NamespaceIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.NamespaceId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQuotablePathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// backtick allows quoting namespaces that have the same names as keywords. If the keyword is inside the namespace,
		//// use a string.
		//NamespaceId:
		//    QuotablePathName ':' CAMELCASE_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//QuotablePathName ':' CAMELCASE_ID
		public Group getGroup() { return cGroup; }
		
		//QuotablePathName
		public RuleCall getQuotablePathNameParserRuleCall_0() { return cQuotablePathNameParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_2() { return cCAMELCASE_IDTerminalRuleCall_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Expression");
		private final RuleCall cTermParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns ConceptDeclaration:
		//    Term
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Term
		public RuleCall getTermParserRuleCall() { return cTermParserRuleCall; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorsOrKeyword_1_0_0 = (Keyword)cOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsFactorParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//Term returns ConceptDeclaration:
		//    Factor (operators+='or' operands+=Factor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (operators+='or' operands+=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(operators+='or' operands+=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operators+='or'
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//'or'
		public Keyword getOperatorsOrKeyword_1_0_0() { return cOperatorsOrKeyword_1_0_0; }
		
		//operands+=Factor
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//Factor
		public RuleCall getOperandsFactorParserRuleCall_1_1_0() { return cOperandsFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConceptDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0 = (Alternatives)cOperatorsAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorsAndKeyword_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorsFollowsKeyword_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(1);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsTermParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//Factor returns ConceptDeclaration:
		//    // semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
		//    ConceptDeclaration (operators+=('and'|'follows') operands+=Term)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
		//ConceptDeclaration (operators+=('and'|'follows') operands+=Term)*
		public Group getGroup() { return cGroup; }
		
		//// semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
		//ConceptDeclaration
		public RuleCall getConceptDeclarationParserRuleCall_0() { return cConceptDeclarationParserRuleCall_0; }
		
		//(operators+=('and'|'follows') operands+=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operators+=('and'|'follows')
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//('and'|'follows')
		public Alternatives getOperatorsAlternatives_1_0_0() { return cOperatorsAlternatives_1_0_0; }
		
		//'and'
		public Keyword getOperatorsAndKeyword_1_0_0_0() { return cOperatorsAndKeyword_1_0_0_0; }
		
		//'follows'
		public Keyword getOperatorsFollowsKeyword_1_0_0_1() { return cOperatorsFollowsKeyword_1_0_0_1; }
		
		//operands+=Term
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//Term
		public RuleCall getOperandsTermParserRuleCall_1_1_0() { return cOperandsTermParserRuleCall_1_1_0; }
	}
	public class SimpleConceptDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.SimpleConceptDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cMainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainConceptParserRuleCall_1_0 = (RuleCall)cMainAssignment_1.eContents().get(0);
		
		///*
		// * Declaration without inherency and context, used in Concept to ensure that
		// * the 'within' and 'of' remain outer-level unless parenthesesized.
		// */
		//SimpleConceptDeclaration returns ConceptDeclaration:
		//    (name=STRING)? main+=Concept+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=STRING)? main+=Concept+
		public Group getGroup() { return cGroup; }
		
		//(name=STRING)?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//main+=Concept+
		public Assignment getMainAssignment_1() { return cMainAssignment_1; }
		
		//Concept
		public RuleCall getMainConceptParserRuleCall_1_0() { return cMainConceptParserRuleCall_1_0; }
	}
	public class VersionNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.VersionNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//VersionNumber:
		//    INT ('.' INT ('.' INT)?)? ('-')? ((LOWERCASE_ID|UPPERCASE_ID))?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT ('.' INT)?)? ('-')? ((LOWERCASE_ID|UPPERCASE_ID))?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT ('.' INT)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//('.' INT)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2_1() { return cINTTerminalRuleCall_1_2_1; }
		
		//('-')?
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//((LOWERCASE_ID|UPPERCASE_ID))?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_3_0() { return cLOWERCASE_IDTerminalRuleCall_3_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_3_1() { return cUPPERCASE_IDTerminalRuleCall_3_1; }
	}
	
	public class UnitOpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UnitOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOVEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOVERSolidusKeyword_0_0 = (Keyword)cOVEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCARETEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCARETCircumflexAccentKeyword_1_0 = (Keyword)cCARETEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTAREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTARAsteriskKeyword_2_0 = (Keyword)cSTAREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnitOp:
		//    OVER='/' | CARET='^' | STAR='*';
		public EnumRule getRule() { return rule; }
		
		//OVER='/' | CARET='^' | STAR='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OVER='/'
		public EnumLiteralDeclaration getOVEREnumLiteralDeclaration_0() { return cOVEREnumLiteralDeclaration_0; }
		
		//'/'
		public Keyword getOVERSolidusKeyword_0_0() { return cOVERSolidusKeyword_0_0; }
		
		//CARET='^'
		public EnumLiteralDeclaration getCARETEnumLiteralDeclaration_1() { return cCARETEnumLiteralDeclaration_1; }
		
		//'^'
		public Keyword getCARETCircumflexAccentKeyword_1_0() { return cCARETCircumflexAccentKeyword_1_0; }
		
		//STAR='*'
		public EnumLiteralDeclaration getSTAREnumLiteralDeclaration_2() { return cSTAREnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getSTARAsteriskKeyword_2_0() { return cSTARAsteriskKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final PreambleElements pPreamble;
	private final TYPEElements pTYPE;
	private final DefinitionElements pDefinition;
	private final ArgumentDeclarationElements pArgumentDeclaration;
	private final MessageBodyElements pMessageBody;
	private final ActorInstantiationElements pActorInstantiation;
	private final MessageCallElements pMessageCall;
	private final StatementGroupElements pStatementGroup;
	private final MetadataElements pMetadata;
	private final MetadataPairElements pMetadataPair;
	private final StatementListElements pStatementList;
	private final StatementElements pStatement;
	private final MethodCallElements pMethodCall;
	private final ParenthesizedMethodCallElements pParenthesizedMethodCall;
	private final MethodCallWithActionsElements pMethodCallWithActions;
	private final AssertStatementElements pAssertStatement;
	private final FailStatementElements pFailStatement;
	private final AssertionElements pAssertion;
	private final NextStatementElements pNextStatement;
	private final AssignmentElements pAssignment;
	private final IfStatementElements pIfStatement;
	private final ElseIfStatementBodyElements pElseIfStatementBody;
	private final StatementBodyElements pStatementBody;
	private final WhileStatementElements pWhileStatement;
	private final DoStatementElements pDoStatement;
	private final ForStatementElements pForStatement;
	private final ActionsElements pActions;
	private final ValueElements pValue;
	private final ValueWithConstructorElements pValueWithConstructor;
	private final ConstructorElements pConstructor;
	private final ValueWithMetadataElements pValueWithMetadata;
	private final ValueWithMetadataWithoutTreeElements pValueWithMetadataWithoutTree;
	private final MatchElements pMatch;
	private final UrnIdElements pUrnId;
	private final UrnKvpElements pUrnKvp;
	private final ListElements pList;
	private final ListElementElements pListElement;
	private final MapElements pMap;
	private final TreeElements pTree;
	private final MapEntryElements pMapEntry;
	private final ClassifierElements pClassifier;
	private final ObservableElements pObservable;
	private final LookupTableElements pLookupTable;
	private final TableElements pTable;
	private final HeaderRowElements pHeaderRow;
	private final TableRowElements pTableRow;
	private final TableClassifierElements pTableClassifier;
	private final QuantityElements pQuantity;
	private final AnnotationElements pAnnotation;
	private final LiteralElements pLiteral;
	private final DATA_TYPEElements pDATA_TYPE;
	private final ParameterListElements pParameterList;
	private final KeyValuePairElements pKeyValuePair;
	private final UnitOpElements eUnitOp;
	private final UnitElementElements pUnitElement;
	private final UnitElements pUnit;
	private final CurrencyElements pCurrency;
	private final REL_OPERATORElements pREL_OPERATOR;
	private final NumberElements pNumber;
	private final DateElements pDate;
	private final PathNameElements pPathName;
	private final QuotablePathNameElements pQuotablePathName;
	private final ArgPathNameElements pArgPathName;
	private final PathElements pPath;
	private final ObservableSemanticsElements pObservableSemantics;
	private final ValueOperatorElements pValueOperator;
	private final ConceptDeclarationElements pConceptDeclaration;
	private final VALUE_OPERATORElements pVALUE_OPERATOR;
	private final ConceptElements pConcept;
	private final NamespaceIdElements pNamespaceId;
	private final ExpressionElements pExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final SimpleConceptDeclarationElements pSimpleConceptDeclaration;
	private final TerminalRule tKEY;
	private final TerminalRule tTAG;
	private final TerminalRule tLOCALIZED_STRING_REFERENCE;
	private final TerminalRule tUPPERCASE_ID;
	private final TerminalRule tUPPERCASE_PATH;
	private final TerminalRule tCAMELCASE_ID;
	private final VersionNumberElements pVersionNumber;
	private final TerminalRule tLOWERCASE_ID;
	private final TerminalRule tLOCALE;
	private final TerminalRule tBACKCASE_ID;
	private final TerminalRule tQUOTED_LOWERCASE_ID;
	private final TerminalRule tLOWERCASE_ID_DASH;
	private final TerminalRule tARGVALUE;
	private final TerminalRule tEXPR;
	private final TerminalRule tEMBEDDEDTEXT;
	private final TerminalRule tREGEXP;
	private final TerminalRule tSEPARATOR;
	private final TerminalRule tANNOTATION_ID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KactorsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPreamble = new PreambleElements();
		this.pTYPE = new TYPEElements();
		this.pDefinition = new DefinitionElements();
		this.pArgumentDeclaration = new ArgumentDeclarationElements();
		this.pMessageBody = new MessageBodyElements();
		this.pActorInstantiation = new ActorInstantiationElements();
		this.pMessageCall = new MessageCallElements();
		this.pStatementGroup = new StatementGroupElements();
		this.pMetadata = new MetadataElements();
		this.pMetadataPair = new MetadataPairElements();
		this.pStatementList = new StatementListElements();
		this.pStatement = new StatementElements();
		this.pMethodCall = new MethodCallElements();
		this.pParenthesizedMethodCall = new ParenthesizedMethodCallElements();
		this.pMethodCallWithActions = new MethodCallWithActionsElements();
		this.pAssertStatement = new AssertStatementElements();
		this.pFailStatement = new FailStatementElements();
		this.pAssertion = new AssertionElements();
		this.pNextStatement = new NextStatementElements();
		this.pAssignment = new AssignmentElements();
		this.pIfStatement = new IfStatementElements();
		this.pElseIfStatementBody = new ElseIfStatementBodyElements();
		this.pStatementBody = new StatementBodyElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pDoStatement = new DoStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pActions = new ActionsElements();
		this.pValue = new ValueElements();
		this.pValueWithConstructor = new ValueWithConstructorElements();
		this.pConstructor = new ConstructorElements();
		this.pValueWithMetadata = new ValueWithMetadataElements();
		this.pValueWithMetadataWithoutTree = new ValueWithMetadataWithoutTreeElements();
		this.pMatch = new MatchElements();
		this.pUrnId = new UrnIdElements();
		this.pUrnKvp = new UrnKvpElements();
		this.pList = new ListElements();
		this.pListElement = new ListElementElements();
		this.pMap = new MapElements();
		this.pTree = new TreeElements();
		this.pMapEntry = new MapEntryElements();
		this.pClassifier = new ClassifierElements();
		this.pObservable = new ObservableElements();
		this.pLookupTable = new LookupTableElements();
		this.pTable = new TableElements();
		this.pHeaderRow = new HeaderRowElements();
		this.pTableRow = new TableRowElements();
		this.pTableClassifier = new TableClassifierElements();
		this.pQuantity = new QuantityElements();
		this.pAnnotation = new AnnotationElements();
		this.pLiteral = new LiteralElements();
		this.pDATA_TYPE = new DATA_TYPEElements();
		this.pParameterList = new ParameterListElements();
		this.pKeyValuePair = new KeyValuePairElements();
		this.eUnitOp = new UnitOpElements();
		this.pUnitElement = new UnitElementElements();
		this.pUnit = new UnitElements();
		this.pCurrency = new CurrencyElements();
		this.pREL_OPERATOR = new REL_OPERATORElements();
		this.pNumber = new NumberElements();
		this.pDate = new DateElements();
		this.pPathName = new PathNameElements();
		this.pQuotablePathName = new QuotablePathNameElements();
		this.pArgPathName = new ArgPathNameElements();
		this.pPath = new PathElements();
		this.pObservableSemantics = new ObservableSemanticsElements();
		this.pValueOperator = new ValueOperatorElements();
		this.pConceptDeclaration = new ConceptDeclarationElements();
		this.pVALUE_OPERATOR = new VALUE_OPERATORElements();
		this.pConcept = new ConceptElements();
		this.pNamespaceId = new NamespaceIdElements();
		this.pExpression = new ExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pSimpleConceptDeclaration = new SimpleConceptDeclarationElements();
		this.tKEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.KEY");
		this.tTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.TAG");
		this.tLOCALIZED_STRING_REFERENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.LOCALIZED_STRING_REFERENCE");
		this.tUPPERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UPPERCASE_ID");
		this.tUPPERCASE_PATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UPPERCASE_PATH");
		this.tCAMELCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.CAMELCASE_ID");
		this.pVersionNumber = new VersionNumberElements();
		this.tLOWERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.LOWERCASE_ID");
		this.tLOCALE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.LOCALE");
		this.tBACKCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.BACKCASE_ID");
		this.tQUOTED_LOWERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.QUOTED_LOWERCASE_ID");
		this.tLOWERCASE_ID_DASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.LOWERCASE_ID_DASH");
		this.tARGVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ARGVALUE");
		this.tEXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.EXPR");
		this.tEMBEDDEDTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.EMBEDDEDTEXT");
		this.tREGEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.REGEXP");
		this.tSEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.SEPARATOR");
		this.tANNOTATION_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ANNOTATION_ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.integratedmodelling.kactors.Kactors".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model: {Model}
	//    (preamble=Preamble)?
	//    definitions+=Definition*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Preamble: {Preamble}
	//    // name, if there, must be first. Can be an actor (which may select an observable),
	//    // or a message library that may be imported by other actors, as long as the type
	//    // is compatible or not given. An app is an actor that represents a
	//    // session, a user represents the user and gets any messages we don't recognize. Apps
	//    // can be called jobs (for automation w/o a view) or testcases (same for testing, in which case they will
	//    // identify test actions with @test and execute them with assertions enabled).
	//    (
	//        (
	//            ((public?='public')? (mobile?='mobile' |  desktop?='desktop' | web?='web')? app?='app') |
	//            // scripts and test cases run in synchronous mode
	//            test?='testcase' |
	//            script?='script' |
	//            // ? syn with script? remove?
	//            task?='task' |
	//            component?='component' |
	//            user?='user' |
	//            library?=('trait'|'library') |
	//            behavior?=('behavior'|'behaviour')
	//        ) name=PathName
	//    )?
	//    label=(STRING|LOCALIZED_STRING_REFERENCE)?
	//    (
	//        ('import' imports+=PathName (',' imports+=PathName)*)? &
	//        ('worldview' worldview=PathName)? &
	//        ('observable' (observable=Observable | observables=List))? &
	//        ('description' description=(STRING|LOCALIZED_STRING_REFERENCE))? &
	//        ('permissions' permissions=(STRING|LOCALIZED_STRING_REFERENCE))? &
	//        ('author' authors+=(STRING|LOCALIZED_STRING_REFERENCE))* &
	//        ('style' (style=PathName ('with' inlineStyle=Map)? | inlineStyle=Map)?)? &
	//        ('logo' logo=(Path|(STRING|LOCALIZED_STRING_REFERENCE)))? &
	//        ('version' version=VersionNumber)? &
	//        ('versionstring' versionString=STRING)? &
	//        ('locale' (locale=LOCALE | locales=List))? &
	//        ('output' output=STRING)? &
	//        ('created' created=Date (createcomment=STRING)?)? &
	//        ('modified' modified=Date (modcomment=STRING)?)?
	//    )
	//;
	public PreambleElements getPreambleAccess() {
		return pPreamble;
	}
	
	public ParserRule getPreambleRule() {
		return getPreambleAccess().getRule();
	}
	
	//TYPE:
	//    'int' |
	//    'concept' |
	//    'list' |
	//    'map' |
	//    'number' |
	//    'text' |
	//    'boolean'
	//;
	public TYPEElements getTYPEAccess() {
		return pTYPE;
	}
	
	public ParserRule getTYPERule() {
		return getTYPEAccess().getRule();
	}
	
	///*
	// *  Action defines an action in the behavior;
	// *  Actor is an action that creates a "peer" actor, which remains alive until stopped
	// *  and whose "main" is the action body (equivalent to importing another behavior and creating
	// *  the actor using new(behavior);
	// *  Component is an actor that has a view, i.e. can be considered a "widget" with view and
	// *  reactive behavior.
	// *
	// */
	//Definition:
	//    annotations+=Annotation*
	//     ('action' | function?='function') name=LOWERCASE_ID (arguments=ArgumentDeclaration)? ':' body=MessageBody;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//ArgumentDeclaration: {ArgumentDeclaration}
	//    '(' (ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)? ')'
	//;
	public ArgumentDeclarationElements getArgumentDeclarationAccess() {
		return pArgumentDeclaration;
	}
	
	public ParserRule getArgumentDeclarationRule() {
		return getArgumentDeclarationAccess().getRule();
	}
	
	///**
	// * Message body is as many statements of groups we want, ends at the next message or EOF.
	// */
	//MessageBody: {MessageBody} lists+=StatementList*;
	public MessageBodyElements getMessageBodyAccess() {
		return pMessageBody;
	}
	
	public ParserRule getMessageBodyRule() {
		return getMessageBodyAccess().getRule();
	}
	
	//ActorInstantiation:
	//    'create' behavior=PathName ('(' (parameters=ParameterList)? ')')? (':' actions=Actions)? metadata=Metadata?
	//;
	public ActorInstantiationElements getActorInstantiationAccess() {
		return pActorInstantiation;
	}
	
	public ParserRule getActorInstantiationRule() {
		return getActorInstantiationAccess().getRule();
	}
	
	//MessageCall:
	//    (methodCalls+=MethodCall '.')* (name=ArgPathName ('(' (parameters=ParameterList)? ')')? |  group=StatementGroup) (':' actions=Actions)?
	//;
	public MessageCallElements getMessageCallAccess() {
		return pMessageCall;
	}
	
	public ParserRule getMessageCallRule() {
		return getMessageCallAccess().getRule();
	}
	
	//StatementGroup: {StatementGroup} '(' body=MessageBody? ')' metadata=Metadata? (':' actions=Actions)?
	//;
	public StatementGroupElements getStatementGroupAccess() {
		return pStatementGroup;
	}
	
	public ParserRule getStatementGroupRule() {
		return getStatementGroupAccess().getRule();
	}
	
	//Metadata:
	//    pairs+=MetadataPair+
	//;
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}
	
	//MetadataPair:
	//    key=KEY (value=Literal)?
	//;
	public MetadataPairElements getMetadataPairAccess() {
		return pMetadataPair;
	}
	
	public ParserRule getMetadataPairRule() {
		return getMetadataPairAccess().getRule();
	}
	
	////MetadataWithExpr returns Metadata:
	////    pairs+=MetadataPairWithExpr+
	////;
	////
	////MetadataPairWithExpr returns MetadataPair:
	////    key=KEY (value=LiteralWithExpr)?
	////;
	//StatementList:
	//    first=Statement next+=NextStatement*
	//;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//Statement:
	//    (assignment=Assignment |
	//     group=StatementGroup |
	//     instantiation=ActorInstantiation |
	//     verb=MessageCall |
	//     text=EMBEDDEDTEXT (metadata=Metadata)? |
	//     if=IfStatement |
	//     while=WhileStatement |
	//     assert=AssertStatement |
	//     fail=FailStatement |
	//     do=DoStatement |
	//     break?='break' |
	//     for=ForStatement |
	//     // this means "fire this" or "return this"
	//     value=ValueWithMetadata)
	//     // all statement may be tagged for reference
	//     (tag=TAG)?
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//MethodCall returns MessageCall:
	//    name=ArgPathName ('(' (parameters=ParameterList)? ')')?
	//;
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}
	
	//ParenthesizedMethodCall returns MessageCall:
	//    name=ArgPathName => '(' (parameters=ParameterList)? ')'
	//;
	public ParenthesizedMethodCallElements getParenthesizedMethodCallAccess() {
		return pParenthesizedMethodCall;
	}
	
	public ParserRule getParenthesizedMethodCallRule() {
		return getParenthesizedMethodCallAccess().getRule();
	}
	
	//MethodCallWithActions returns MessageCall:
	//    name=ArgPathName ('(' (parameters=ParameterList)? ')')? (':' actions=Actions)?
	//;
	public MethodCallWithActionsElements getMethodCallWithActionsAccess() {
		return pMethodCallWithActions;
	}
	
	public ParserRule getMethodCallWithActionsRule() {
		return getMethodCallWithActionsAccess().getRule();
	}
	
	//AssertStatement:
	//    'assert' ('(' (parameters=ParameterList)? ')')?
	//        assertions+=Assertion (',' assertions+=Assertion)*;
	public AssertStatementElements getAssertStatementAccess() {
		return pAssertStatement;
	}
	
	public ParserRule getAssertStatementRule() {
		return getAssertStatementAccess().getRule();
	}
	
	///*
	// * 'suca' is a direct response to 'pass' in python. It will make a test fail and exit, or just
	// * log failure and exit in non-test actions. Failure in init or main means the actor is dead.
	// */
	//FailStatement: {FailStatement}
	//    ('fail'|'suca') (=> reason=STRING)?
	//;
	public FailStatementElements getFailStatementAccess() {
		return pFailStatement;
	}
	
	public ParserRule getFailStatementRule() {
		return getFailStatementAccess().getRule();
	}
	
	//Assertion:
	//        (expression=EXPR |
	//        (methodCalls+=MethodCall '.')* methodCalls+=MethodCallWithActions)
	//        ('is' (ok='ok' | value=Value))?
	//        (=> metadata=Metadata)?
	//;
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}
	
	//NextStatement returns Statement:
	//    ',' (
	//        assignment=Assignment |
	//        verb=MessageCall |
	//        group=StatementGroup |
	//        text=EMBEDDEDTEXT |
	//        if=IfStatement |
	//        while=WhileStatement |
	//        do=DoStatement |
	//        assert=AssertStatement |
	//        fail=FailStatement |
	//        break?='break' |
	//        for=ForStatement |
	//        // this means "fire this"
	//        value=ValueWithMetadata
	//    )
	//    // all statement may be tagged for reference
	//    (tag=TAG)?
	//;
	public NextStatementElements getNextStatementAccess() {
		return pNextStatement;
	}
	
	public ParserRule getNextStatementRule() {
		return getNextStatementAccess().getRule();
	}
	
	//Assignment:
	//    (global?='set'|local?='def') (recipient=LOWERCASE_ID '.')? variable=LOWERCASE_ID value=ValueWithConstructor |
	//    // block-specific
	//    variable=LOWERCASE_ID '=' value=ValueWithConstructor
	//;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//IfStatement:
	//    'if' (literal=Literal | expression=EXPR | variable=LOWERCASE_ID)
	//        body=StatementBody
	//        ('else' 'if' elseIfBody+=ElseIfStatementBody)*
	//        ('else' elseCall=StatementBody)?
	//;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ElseIfStatementBody:
	//    (literal=Literal | expression=EXPR | variable=LOWERCASE_ID) body=StatementBody
	//;
	public ElseIfStatementBodyElements getElseIfStatementBodyAccess() {
		return pElseIfStatementBody;
	}
	
	public ParserRule getElseIfStatementBodyRule() {
		return getElseIfStatementBodyAccess().getRule();
	}
	
	///**
	// * Body of a statement is either a single message call (or fired value) or a set thereof in a group.
	// * */
	//StatementBody: verb=MessageCall | value=Value | group=StatementGroup;
	public StatementBodyElements getStatementBodyAccess() {
		return pStatementBody;
	}
	
	public ParserRule getStatementBodyRule() {
		return getStatementBodyAccess().getRule();
	}
	
	//WhileStatement:
	//    'while' expression=EXPR body=StatementBody
	//;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//DoStatement:
	//    'do' body=StatementBody 'while' expression=EXPR
	//;
	public DoStatementElements getDoStatementAccess() {
		return pDoStatement;
	}
	
	public ParserRule getDoStatementRule() {
		return getDoStatementAccess().getRule();
	}
	
	//ForStatement:
	//    'for' (id=LOWERCASE_ID 'in')? value=Value body=StatementBody
	//;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//// a sequence of actions after a verb is sequential only if comma-separated. No match mean
	//// "upon successful firing" (i.e. firing not null, false or error).
	//// Don't switch the order or firing statements will take over the matches and not parse
	//Actions:
	//    match=Match |
	//    '(' matches+=Match (matches+=Match)* ')' |
	//    statement=Statement |
	//    '(' statements=StatementList ')'
	//;
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//Value:
	//    (deferred?='`')? (tree=Tree |
	//    empty?='empty' |
	//    argvalue=ARGVALUE |
	//    urn=UrnId |
	//    literal=Literal ('as' cast=DATA_TYPE)? |
	//    id=PathName ('as' cast=DATA_TYPE)?  |
	//    list=List |
	//    map=Map |
	//    constant=UPPERCASE_ID |
	//    observable=Observable |
	//    expression=EXPR ('as' cast=DATA_TYPE)? |
	//    table=LookupTable |
	//    quantity=Quantity) ('?' then=Value ':' else=Value)?
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//ValueWithConstructor returns Value:
	//    (deferred?='`')? (constructor=Constructor |
	//    (methodCalls+=ParenthesizedMethodCall '.')* methodCalls+=ParenthesizedMethodCall |
	//    tree=Tree |
	//    empty?='empty' |
	//    argvalue=ARGVALUE |
	//    literal=Literal ('as' cast=DATA_TYPE)? |
	//    urn=UrnId |
	//    id=PathName ('as' cast=DATA_TYPE)? |
	//    list=List |
	//    map=Map |
	//    constant=UPPERCASE_ID |
	//    observable=Observable |
	//    expression=EXPR ('as' cast=DATA_TYPE)? |
	//    table=LookupTable |
	//    quantity=Quantity  |
	//    component?='new' behavior=PathName ('(' (parameters=ParameterList)? ')')? )
	//     ('?' then=ValueWithConstructor ':' else=ValueWithConstructor)?
	//    ;
	public ValueWithConstructorElements getValueWithConstructorAccess() {
		return pValueWithConstructor;
	}
	
	public ParserRule getValueWithConstructorRule() {
		return getValueWithConstructorAccess().getRule();
	}
	
	//Constructor:
	//    (path=QuotablePathName '.')? classid=CAMELCASE_ID ('(' (parameters=ParameterList)? ')')?
	//;
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}
	
	//ValueWithMetadata returns Value:
	//    (deferred?='`')? (tree=Tree |
	//     argvalue=ARGVALUE |
	//     literal=Literal ('as' cast=DATA_TYPE)? |
	//     urn=UrnId |
	//     constant=UPPERCASE_ID ('as' cast=DATA_TYPE)? |
	//     id=PathName |
	//     list=List |
	//     map=Map |
	//     observable=Observable |
	//     expression=EXPR ('as' cast=DATA_TYPE)? |
	//     table=LookupTable |
	//     quantity=Quantity)
	//     (metadata=Metadata)?
	//    ;
	public ValueWithMetadataElements getValueWithMetadataAccess() {
		return pValueWithMetadata;
	}
	
	public ParserRule getValueWithMetadataRule() {
		return getValueWithMetadataAccess().getRule();
	}
	
	////ValueWithoutTree returns Value:
	////    argvalue=ARGVALUE |
	////    literal=Literal |
	////    id=PathName |
	////    urn=UrnId |
	////    list=List |
	////    map=Map |
	////    observable=Observable |
	////    expression=EXPR |
	////    table=LookupTable |
	////    quantity=Quantity
	////    ;
	////
	//ValueWithMetadataWithoutTree returns Value:
	//    (deferred?='`')? ((argvalue=ARGVALUE |
	//    literal=Literal ('as' cast=DATA_TYPE)? |
	//    id=PathName ('as' cast=DATA_TYPE)? |
	//    urn=UrnId |
	//    list=List |
	//    map=Map |
	//    observable=Observable |
	//    expression=EXPR ('as' cast=DATA_TYPE)? |
	//    table=LookupTable |
	//    quantity=Quantity)) ('?' then=Value ':' else=Value)?
	//    (metadata=Metadata)?
	//    ;
	public ValueWithMetadataWithoutTreeElements getValueWithMetadataWithoutTreeAccess() {
		return pValueWithMetadataWithoutTree;
	}
	
	public ParserRule getValueWithMetadataWithoutTreeRule() {
		return getValueWithMetadataWithoutTreeAccess().getRule();
	}
	
	//Match:
	//    id=LOWERCASE_ID '->' body=StatementList  |
	//    annotation=ANNOTATION_ID ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	//    constant=UPPERCASE_ID '->' body=StatementList  |
	//    boolean=('true'|'false') '->' body=StatementList  |
	//    type=CAMELCASE_ID ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	//    regexp=REGEXP ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	//    observable=Observable ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	//    literal=Literal '->' body=StatementList |
	//    list=List '->' body=StatementList |
	//    'in' set=List ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	//    quantity=Quantity '->' body=StatementList |
	//    expr=EXPR ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	//    nodata='unknown' '->' body=StatementList |
	//    star?='*' '->' body=StatementList |
	//    anything?='#''->' body=StatementList |
	//    empty?='empty' '->' body=StatementList |
	//    exception?='exception' ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
	//;
	public MatchElements getMatchAccess() {
		return pMatch;
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}
	
	///**
	// * URN is 4 sections: node (or 'klab' for internal resources), catalog (or adapter for internal resources), namespace and
	// * resource ID. Admits a version number and a fragment (with only lowercase_id chars in it). It is
	// * legal, but not required, to start with the default prefix urn:klab:. The 4th path element (the ID) may be
	// * integer.
	// */
	//UrnId:
	//    ('urn:klab:')? PathName ':'  PathName ':' PathName ':' (Path|INT) (':' VersionNumber)? ('#' (Path|UrnKvp) ('&' (Path|UrnKvp))*)?;
	public UrnIdElements getUrnIdAccess() {
		return pUrnId;
	}
	
	public ParserRule getUrnIdRule() {
		return getUrnIdAccess().getRule();
	}
	
	//UrnKvp:
	//    PathName '=' (Path|INT)
	//;
	public UrnKvpElements getUrnKvpAccess() {
		return pUrnKvp;
	}
	
	public ParserRule getUrnKvpRule() {
		return getUrnKvpAccess().getRule();
	}
	
	//List:
	//    {List} '(' contents+=ListElement* ')';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//ListElement:
	//    value=ValueWithMetadata |
	//    tag=TAG
	//;
	public ListElementElements getListElementAccess() {
		return pListElement;
	}
	
	public ParserRule getListElementRule() {
		return getListElementAccess().getRule();
	}
	
	//Map:
	//    {Map} '#{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}'
	//;
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	//Tree:
	//    root=ValueWithMetadataWithoutTree (=> '<-' (value+=ValueWithMetadataWithoutTree | => ('(' value+=Tree ')')))+
	//;
	public TreeElements getTreeAccess() {
		return pTree;
	}
	
	public ParserRule getTreeRule() {
		return getTreeAccess().getRule();
	}
	
	//MapEntry:
	//    classifier=Classifier ':' value=ValueWithMetadata
	//;
	public MapEntryElements getMapEntryAccess() {
		return pMapEntry;
	}
	
	public ParserRule getMapEntryRule() {
		return getMapEntryAccess().getRule();
	}
	
	//Classifier:
	//    (boolean='true' | boolean='false') |
	//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	//    num=Number |
	//    'in' set=List |
	//    string=STRING |
	//    observable=Observable |
	//    id = (LOWERCASE_ID | LOWERCASE_ID_DASH) |
	//    op=REL_OPERATOR expression=Number |
	//    nodata='unknown' |
	//    map=Map |
	//    star?='*';
	public ClassifierElements getClassifierAccess() {
		return pClassifier;
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}
	
	//Observable:
	//    '{' observable=ObservableSemantics '}'
	//;
	public ObservableElements getObservableAccess() {
		return pObservable;
	}
	
	public ParserRule getObservableRule() {
		return getObservableAccess().getRule();
	}
	
	//// Lookup table literal. May be overkill.
	//LookupTable: {LookupTable}
	//    '{{' table=Table? '}}'
	//;
	public LookupTableElements getLookupTableAccess() {
		return pLookupTable;
	}
	
	public ParserRule getLookupTableRule() {
		return getLookupTableAccess().getRule();
	}
	
	//Table:
	//    (headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//HeaderRow:
	//    elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE)) ('|' elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE)))*
	//;
	public HeaderRowElements getHeaderRowAccess() {
		return pHeaderRow;
	}
	
	public ParserRule getHeaderRowRule() {
		return getHeaderRowAccess().getRule();
	}
	
	//TableRow:
	//    elements+=TableClassifier ('|' elements+=TableClassifier)*
	//;
	public TableRowElements getTableRowAccess() {
		return pTableRow;
	}
	
	public ParserRule getTableRowRule() {
		return getTableRowAccess().getRule();
	}
	
	//TableClassifier:
	//    (boolean='true' | boolean='false') |
	//    num=Number |
	//    string=STRING |
	//    observable=Observable |
	//    op=REL_OPERATOR expression=Number |
	//    int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	//    'in' set=List |
	//    quantity=Quantity |
	//    date=Date |
	//    expr=EXPR |
	//    nodata='unknown' |
	//    star?='*' |
	//    anything?='#';
	public TableClassifierElements getTableClassifierAccess() {
		return pTableClassifier;
	}
	
	public ParserRule getTableClassifierRule() {
		return getTableClassifierAccess().getRule();
	}
	
	//Quantity:
	//    value=Number (over?='/' | '.') (unit=Unit | currency=Currency)
	//;
	public QuantityElements getQuantityAccess() {
		return pQuantity;
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}
	
	//Annotation:
	//    name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//Literal:
	//    number=Number | from=Number 'to' to=Number | string=(STRING|LOCALIZED_STRING_REFERENCE) | date=Date | boolean=('true' | 'false');
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//DATA_TYPE:
	//    'int' |
	//    'number' |
	//    'text' |
	//    'boolean' |
	//    'concept'
	//;
	public DATA_TYPEElements getDATA_TYPEAccess() {
		return pDATA_TYPE;
	}
	
	public ParserRule getDATA_TYPERule() {
		return getDATA_TYPEAccess().getRule();
	}
	
	////LiteralWithExpr:
	////    number=Number | from=Number 'to' to=Number | string=(STRING|LOCALIZED_STRING_REFERENCE) | date=Date | expression=EXPR | boolean=('true' | 'false');
	//ParameterList:
	//    pairs+=KeyValuePair (=> (',')? pairs+=KeyValuePair)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//KeyValuePair:
	//    tag=TAG |
	//    (name=(LOWERCASE_ID) (interactive?='?=' | '='))? value=ValueWithConstructor |
	//    key=KEY
	//;
	public KeyValuePairElements getKeyValuePairAccess() {
		return pKeyValuePair;
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	//enum UnitOp:
	//    OVER='/' | CARET='^' | STAR='*';
	public UnitOpElements getUnitOpAccess() {
		return eUnitOp;
	}
	
	public EnumRule getUnitOpRule() {
		return getUnitOpAccess().getRule();
	}
	
	//UnitElement:
	//    id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID) |
	//    '(' unit=Unit ')';
	public UnitElementElements getUnitElementAccess() {
		return pUnitElement;
	}
	
	public ParserRule getUnitElementRule() {
		return getUnitElementAccess().getRule();
	}
	
	//Unit:
	//    {Unit} (root=UnitElement)? (=> (connectors+=UnitOp) => (units+=UnitElement))*;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Currency:
	//    id=UPPERCASE_ID ('@' year=INT) (=> '/' (units+=UnitElement))*;
	public CurrencyElements getCurrencyAccess() {
		return pCurrency;
	}
	
	public ParserRule getCurrencyRule() {
		return getCurrencyAccess().getRule();
	}
	
	//REL_OPERATOR:
	//    (gt?='>' |
	//    lt?='<' |
	//    eq?='=' |
	//    ne?='!=' |
	//    le?='<=' |
	//    ge?='>=');
	public REL_OPERATORElements getREL_OPERATORAccess() {
		return pREL_OPERATOR;
	}
	
	public ParserRule getREL_OPERATORRule() {
		return getREL_OPERATORAccess().getRule();
	}
	
	//Number:
	//    ('+' | negative?='-')? => real=INT (=> long?='l')? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Date:
	//    year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
	//;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//PathName:
	//    LOWERCASE_ID ('.' LOWERCASE_ID)*
	//;
	public PathNameElements getPathNameAccess() {
		return pPathName;
	}
	
	public ParserRule getPathNameRule() {
		return getPathNameAccess().getRule();
	}
	
	//QuotablePathName:
	//    (LOWERCASE_ID|QUOTED_LOWERCASE_ID) ('.' (LOWERCASE_ID|QUOTED_LOWERCASE_ID))*
	//;
	public QuotablePathNameElements getQuotablePathNameAccess() {
		return pQuotablePathName;
	}
	
	public ParserRule getQuotablePathNameRule() {
		return getQuotablePathNameAccess().getRule();
	}
	
	//ArgPathName:
	//    (ARGVALUE | LOWERCASE_ID) ('.' LOWERCASE_ID)?
	//;
	public ArgPathNameElements getArgPathNameAccess() {
		return pArgPathName;
	}
	
	public ParserRule getArgPathNameRule() {
		return getArgPathNameAccess().getRule();
	}
	
	//Path:
	//    (LOWERCASE_ID|UPPERCASE_ID) (('.' | '/') (LOWERCASE_ID|UPPERCASE_ID))*
	//;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	///*
	// * Observable semantics rules from k.IM. Syntax peers for concepts are exclusively to allow syntax highlighting
	// * and validation of observables through the imported k.IM validator (as behaviors are read after model files).
	// * Concepts can only be referenced in full notation for obvious reasons.
	// * ------------------------------------------------------------------------------------------------------------
	// */
	//ObservableSemantics:
	//    declaration=ConceptDeclaration
	//    (
	//        (
	//            ('in' (unit=Unit | currency=Currency)) |
	//            ('per' unit=Unit)
	//        )? &
	//        (valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
	//        (optional?='optional' | 'required')? &
	//        (from=Number 'to' to=Number)? &
	//        ('named' name=(LOWERCASE_ID|STRING))?
	//    );
	public ObservableSemanticsElements getObservableSemanticsAccess() {
		return pObservableSemantics;
	}
	
	public ParserRule getObservableSemanticsRule() {
		return getObservableSemanticsAccess().getRule();
	}
	
	//ValueOperator:
	//    (modifier=VALUE_OPERATOR | downTo='down' 'to')
	//        (comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration (',' comparisonConcept+=ConceptDeclaration)* | ('(' comparisonObservable=ObservableSemantics ')')) |
	//    total='total' |
	//    averaged='averaged' |
	//    summed='summed'
	//;
	public ValueOperatorElements getValueOperatorAccess() {
		return pValueOperator;
	}
	
	public ParserRule getValueOperatorRule() {
		return getValueOperatorAccess().getRule();
	}
	
	//ConceptDeclaration:
	//    main+=Concept+
	//        // binary semantic operators; also 'as', 'by' and 'follows' handled in other rules
	//        (
	//            // primary inherency (when secondary is given using 'within')
	//            ('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))? &
	//            // purpose (achievement event created from target)
	//            ('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))? &
	//            // compresence (subject, process, event, presence or partitioned quality)
	//            ('with' compresent=SimpleConceptDeclaration)? &
	//            // cause towards self - causant can be anything (?)
	//            ('caused' 'by' causant=SimpleConceptDeclaration)? &
	//            // spatial adjacency (see 'follows' operator for temporal adjacency in events) - subject, event or relationship
	//            ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? &
	//            // being contained - subject
	//            ('contained' 'in' container=SimpleConceptDeclaration)? &
	//            // containing - subject
	//            ('containing' contained=SimpleConceptDeclaration)? &
	//            // cause towards event (?)
	//            ('causing'   caused=SimpleConceptDeclaration)? &
	//            // concomitant with event (?)
	//            ('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))? &
	//            // context or secondary inherency
	//            ('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))? &
	//            // for relationships: specialize source and target types
	//            ('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
	//        )?
	//;
	public ConceptDeclarationElements getConceptDeclarationAccess() {
		return pConceptDeclaration;
	}
	
	public ParserRule getConceptDeclarationRule() {
		return getConceptDeclarationAccess().getRule();
	}
	
	//VALUE_OPERATOR:
	//    '>'  |
	//    '>=' |
	//    '<='|
	//    '<'|
	//    'where'|
	//    '=='|
	//    '='|
	//    'without'|
	//    '!='|
	//    'plus'|
	//    'minus'|
	//    'times'|
	//    'over' |
	//    'by'
	//;
	public VALUE_OPERATORElements getVALUE_OPERATORAccess() {
		return pVALUE_OPERATOR;
	}
	
	public ParserRule getVALUE_OPERATORRule() {
		return getVALUE_OPERATORAccess().getRule();
	}
	
	//Concept:
	//    (negated?=('not'|'no'))? name=NamespaceId
	//        // if the following is there, the name becomes an alias for the authority concept
	//        (authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))? |
	//    // unary operators
	//    presence?='presence' 'of' concept=SimpleConceptDeclaration |
	//    count?='count' 'of' concept=SimpleConceptDeclaration |
	//    distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration |
	//    probability?='probability' 'of' concept=SimpleConceptDeclaration |
	//    assessment?='assessment' 'of' concept=SimpleConceptDeclaration |
	//    ('change' (change?='in' | rate?='rate' 'of') | change?='changed') concept=SimpleConceptDeclaration |
	//    uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration |
	//    magnitude?='magnitude' 'of' concept=SimpleConceptDeclaration |
	//    level?='level' 'of' concept=SimpleConceptDeclaration |
	//    type?='type' 'of' concept=SimpleConceptDeclaration |
	//    observability?='observability' 'of' concept=SimpleConceptDeclaration |
	//    proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
	//    percentage?='percentage' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
	//    ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration |
	//    (monetary?='monetary')? value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? |
	//    occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration |
	//    // this form specifies an authority concept with no alias (the authority may provide a default label)
	//    authConcept?='identity' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH) |
	//    '(' declaration=Expression ')';
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//// backtick allows quoting namespaces that have the same names as keywords. If the keyword is inside the namespace,
	//// use a string.
	//NamespaceId:
	//    QuotablePathName ':' CAMELCASE_ID;
	public NamespaceIdElements getNamespaceIdAccess() {
		return pNamespaceId;
	}
	
	public ParserRule getNamespaceIdRule() {
		return getNamespaceIdAccess().getRule();
	}
	
	//Expression returns ConceptDeclaration:
	//    Term
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Term returns ConceptDeclaration:
	//    Factor (operators+='or' operands+=Factor)*
	//;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor returns ConceptDeclaration:
	//    // semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
	//    ConceptDeclaration (operators+=('and'|'follows') operands+=Term)*
	//;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	///*
	// * Declaration without inherency and context, used in Concept to ensure that
	// * the 'within' and 'of' remain outer-level unless parenthesesized.
	// */
	//SimpleConceptDeclaration returns ConceptDeclaration:
	//    (name=STRING)? main+=Concept+
	//;
	public SimpleConceptDeclarationElements getSimpleConceptDeclarationAccess() {
		return pSimpleConceptDeclaration;
	}
	
	public ParserRule getSimpleConceptDeclarationRule() {
		return getSimpleConceptDeclarationAccess().getRule();
	}
	
	///**
	// * ----- end concept stuff from k.IM grammar
	// */
	//terminal KEY:
	//    (':'|'!')('a'..'z') ('a'..'z' | '0'..'9'| '_')*;
	public TerminalRule getKEYRule() {
		return tKEY;
	}
	
	//terminal TAG:
	//    ('#')('a'..'z') ('a'..'z' | '0'..'9'| '_')*;
	public TerminalRule getTAGRule() {
		return tTAG;
	}
	
	//terminal LOCALIZED_STRING_REFERENCE:
	//    ('#')('A'..'Z') ('A'..'Z' | '0'..'9'| '_')*;
	public TerminalRule getLOCALIZED_STRING_REFERENCERule() {
		return tLOCALIZED_STRING_REFERENCE;
	}
	
	//terminal UPPERCASE_ID:
	//    ('A'..'Z') ('A'..'Z' | '_')*;
	public TerminalRule getUPPERCASE_IDRule() {
		return tUPPERCASE_ID;
	}
	
	//terminal UPPERCASE_PATH:
	//    UPPERCASE_ID ('.' UPPERCASE_ID)*;
	public TerminalRule getUPPERCASE_PATHRule() {
		return tUPPERCASE_PATH;
	}
	
	//terminal CAMELCASE_ID:
	//    ('A'..'Z') ('A'..'z'|'0'..'9')*;
	public TerminalRule getCAMELCASE_IDRule() {
		return tCAMELCASE_ID;
	}
	
	//VersionNumber:
	//    INT ('.' INT ('.' INT)?)? ('-')? ((LOWERCASE_ID|UPPERCASE_ID))?;
	public VersionNumberElements getVersionNumberAccess() {
		return pVersionNumber;
	}
	
	public ParserRule getVersionNumberRule() {
		return getVersionNumberAccess().getRule();
	}
	
	//terminal LOWERCASE_ID:
	//    ('a'..'z') ('a'..'z' | '0'..'9'| '_')*;
	public TerminalRule getLOWERCASE_IDRule() {
		return tLOWERCASE_ID;
	}
	
	//terminal LOCALE:
	//    ('a'..'z')('a'..'z')('-' ('A'..'Z')('A'..'Z'))*;
	public TerminalRule getLOCALERule() {
		return tLOCALE;
	}
	
	//terminal BACKCASE_ID:
	//    ('a'..'z') ('A'..'z'|'0'..'9')*;
	public TerminalRule getBACKCASE_IDRule() {
		return tBACKCASE_ID;
	}
	
	//terminal QUOTED_LOWERCASE_ID:
	//    ('`')('a'..'z')('a'..'z' | '0'..'9'| '_')*;
	public TerminalRule getQUOTED_LOWERCASE_IDRule() {
		return tQUOTED_LOWERCASE_ID;
	}
	
	//terminal LOWERCASE_ID_DASH:
	//    ('a'..'z') ('a'..'z' | '0'..'9'| '_' | '-')*;
	public TerminalRule getLOWERCASE_ID_DASHRule() {
		return tLOWERCASE_ID_DASH;
	}
	
	//terminal ARGVALUE:
	//    '$' ('$' | ('0'..'9')*);
	public TerminalRule getARGVALUERule() {
		return tARGVALUE;
	}
	
	//terminal EXPR:
	//    '[' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | ']' | '\\') | !('\\' | ']'))* ']';
	public TerminalRule getEXPRRule() {
		return tEXPR;
	}
	
	//terminal EMBEDDEDTEXT:
	//    '%%%'(' ')?('-')*('\r'|'\n') -> '%%%'(' ')?('-')*;
	public TerminalRule getEMBEDDEDTEXTRule() {
		return tEMBEDDEDTEXT;
	}
	
	//terminal REGEXP:
	//    '%' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '%' | '\\') | !('\\' | '%'))* '%';
	public TerminalRule getREGEXPRule() {
		return tREGEXP;
	}
	
	////terminal OBSERVABLE:
	////    '{' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '\\') | !('\\' | '}'))* '}';
	//terminal SEPARATOR:
	//    '---' ('-')*;
	public TerminalRule getSEPARATORRule() {
		return tSEPARATOR;
	}
	
	//terminal ANNOTATION_ID:
	//    '@' LOWERCASE_ID;
	public TerminalRule getANNOTATION_IDRule() {
		return tANNOTATION_ID;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
