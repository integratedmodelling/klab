/*
 * generated by Xtext 2.33.0
 */
package org.integratedmodelling.kactors.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.integratedmodelling.kactors.services.KactorsGrammarAccess;

@SuppressWarnings("all")
public class KactorsSyntacticSequencer extends AbstractSyntacticSequencer {

	protected KactorsGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ActorInstantiation___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	protected AbstractElementAlias match_AssertStatement___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	protected AbstractElementAlias match_Classifier_ExclusiveKeyword_1_1_1_q;
	protected AbstractElementAlias match_Classifier_ExclusiveKeyword_1_4_1_q;
	protected AbstractElementAlias match_Concept_FromKeyword_3_1_1_or_ToKeyword_3_1_0;
	protected AbstractElementAlias match_Constructor___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_Date___ADKeyword_1_0_or_CEKeyword_1_1__q;
	protected AbstractElementAlias match_FailStatement_FailKeyword_1_0_or_SucaKeyword_1_1;
	protected AbstractElementAlias match_MessageCall___LeftParenthesisKeyword_1_0_1_0_RightParenthesisKeyword_1_0_1_2__q;
	protected AbstractElementAlias match_MethodCallWithActions___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	protected AbstractElementAlias match_MethodCall___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	protected AbstractElementAlias match_Number_PlusSignKeyword_0_0_q;
	protected AbstractElementAlias match_Number_PlusSignKeyword_4_0_1_0_q;
	protected AbstractElementAlias match_ObservableSemantics_RequiredKeyword_1_2_1_a;
	protected AbstractElementAlias match_ParameterList_CommaKeyword_1_0_0_q;
	protected AbstractElementAlias match_Preamble_StyleKeyword_3_6_0_a;
	protected AbstractElementAlias match_Preamble_StyleKeyword_3_6_0_p;
	protected AbstractElementAlias match_TableClassifier_ExclusiveKeyword_5_1_1_q;
	protected AbstractElementAlias match_TableClassifier_ExclusiveKeyword_5_4_1_q;
	protected AbstractElementAlias match_ValueWithConstructor___LeftParenthesisKeyword_1_15_2_0_RightParenthesisKeyword_1_15_2_2__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (KactorsGrammarAccess) access;
		match_ActorInstantiation___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getActorInstantiationAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getActorInstantiationAccess().getRightParenthesisKeyword_2_2()));
		match_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_1_2()));
		match_AssertStatement___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAssertStatementAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAssertStatementAccess().getRightParenthesisKeyword_1_2()));
		match_Classifier_ExclusiveKeyword_1_1_1_q = new TokenAlias(false, true, grammarAccess.getClassifierAccess().getExclusiveKeyword_1_1_1());
		match_Classifier_ExclusiveKeyword_1_4_1_q = new TokenAlias(false, true, grammarAccess.getClassifierAccess().getExclusiveKeyword_1_4_1());
		match_Concept_FromKeyword_3_1_1_or_ToKeyword_3_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConceptAccess().getFromKeyword_3_1_1()), new TokenAlias(false, false, grammarAccess.getConceptAccess().getToKeyword_3_1_0()));
		match_Constructor___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConstructorAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getConstructorAccess().getRightParenthesisKeyword_2_2()));
		match_Date___ADKeyword_1_0_or_CEKeyword_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getDateAccess().getADKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getDateAccess().getCEKeyword_1_1()));
		match_FailStatement_FailKeyword_1_0_or_SucaKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFailStatementAccess().getFailKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getFailStatementAccess().getSucaKeyword_1_1()));
		match_MessageCall___LeftParenthesisKeyword_1_0_1_0_RightParenthesisKeyword_1_0_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMessageCallAccess().getLeftParenthesisKeyword_1_0_1_0()), new TokenAlias(false, false, grammarAccess.getMessageCallAccess().getRightParenthesisKeyword_1_0_1_2()));
		match_MethodCallWithActions___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMethodCallWithActionsAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getMethodCallWithActionsAccess().getRightParenthesisKeyword_1_2()));
		match_MethodCall___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_1_2()));
		match_Number_PlusSignKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getNumberAccess().getPlusSignKeyword_0_0());
		match_Number_PlusSignKeyword_4_0_1_0_q = new TokenAlias(false, true, grammarAccess.getNumberAccess().getPlusSignKeyword_4_0_1_0());
		match_ObservableSemantics_RequiredKeyword_1_2_1_a = new TokenAlias(true, true, grammarAccess.getObservableSemanticsAccess().getRequiredKeyword_1_2_1());
		match_ParameterList_CommaKeyword_1_0_0_q = new TokenAlias(false, true, grammarAccess.getParameterListAccess().getCommaKeyword_1_0_0());
		match_Preamble_StyleKeyword_3_6_0_a = new TokenAlias(true, true, grammarAccess.getPreambleAccess().getStyleKeyword_3_6_0());
		match_Preamble_StyleKeyword_3_6_0_p = new TokenAlias(true, false, grammarAccess.getPreambleAccess().getStyleKeyword_3_6_0());
		match_TableClassifier_ExclusiveKeyword_5_1_1_q = new TokenAlias(false, true, grammarAccess.getTableClassifierAccess().getExclusiveKeyword_5_1_1());
		match_TableClassifier_ExclusiveKeyword_5_4_1_q = new TokenAlias(false, true, grammarAccess.getTableClassifierAccess().getExclusiveKeyword_5_4_1());
		match_ValueWithConstructor___LeftParenthesisKeyword_1_15_2_0_RightParenthesisKeyword_1_15_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getValueWithConstructorAccess().getLeftParenthesisKeyword_1_15_2_0()), new TokenAlias(false, false, grammarAccess.getValueWithConstructorAccess().getRightParenthesisKeyword_1_15_2_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getSEPARATORRule())
			return getSEPARATORToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal SEPARATOR:
	 * 	'---' ('-')*;
	 */
	protected String getSEPARATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "---";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ActorInstantiation___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_ActorInstantiation___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AssertStatement___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_AssertStatement___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Classifier_ExclusiveKeyword_1_1_1_q.equals(syntax))
				emit_Classifier_ExclusiveKeyword_1_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Classifier_ExclusiveKeyword_1_4_1_q.equals(syntax))
				emit_Classifier_ExclusiveKeyword_1_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Concept_FromKeyword_3_1_1_or_ToKeyword_3_1_0.equals(syntax))
				emit_Concept_FromKeyword_3_1_1_or_ToKeyword_3_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Constructor___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_Constructor___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Date___ADKeyword_1_0_or_CEKeyword_1_1__q.equals(syntax))
				emit_Date___ADKeyword_1_0_or_CEKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FailStatement_FailKeyword_1_0_or_SucaKeyword_1_1.equals(syntax))
				emit_FailStatement_FailKeyword_1_0_or_SucaKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MessageCall___LeftParenthesisKeyword_1_0_1_0_RightParenthesisKeyword_1_0_1_2__q.equals(syntax))
				emit_MessageCall___LeftParenthesisKeyword_1_0_1_0_RightParenthesisKeyword_1_0_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MethodCallWithActions___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_MethodCallWithActions___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MethodCall___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_MethodCall___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Number_PlusSignKeyword_0_0_q.equals(syntax))
				emit_Number_PlusSignKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Number_PlusSignKeyword_4_0_1_0_q.equals(syntax))
				emit_Number_PlusSignKeyword_4_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObservableSemantics_RequiredKeyword_1_2_1_a.equals(syntax))
				emit_ObservableSemantics_RequiredKeyword_1_2_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParameterList_CommaKeyword_1_0_0_q.equals(syntax))
				emit_ParameterList_CommaKeyword_1_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Preamble_StyleKeyword_3_6_0_a.equals(syntax))
				emit_Preamble_StyleKeyword_3_6_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Preamble_StyleKeyword_3_6_0_p.equals(syntax))
				emit_Preamble_StyleKeyword_3_6_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TableClassifier_ExclusiveKeyword_5_1_1_q.equals(syntax))
				emit_TableClassifier_ExclusiveKeyword_5_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TableClassifier_ExclusiveKeyword_5_4_1_q.equals(syntax))
				emit_TableClassifier_ExclusiveKeyword_5_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ValueWithConstructor___LeftParenthesisKeyword_1_15_2_0_RightParenthesisKeyword_1_15_2_2__q.equals(syntax))
				emit_ValueWithConstructor___LeftParenthesisKeyword_1_15_2_0_RightParenthesisKeyword_1_15_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     behavior=PathName (ambiguity) ':' actions=Actions
	 *     behavior=PathName (ambiguity) (rule end)
	 *     behavior=PathName (ambiguity) metadata=Metadata
	 
	 * </pre>
	 */
	protected void emit_ActorInstantiation___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ANNOTATION_ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'assert' (ambiguity) assertions+=Assertion
	 
	 * </pre>
	 */
	protected void emit_AssertStatement___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'exclusive'?
	 *
	 * This ambiguous syntax occurs at:
	 *     int0=Number (ambiguity) 'to' int1=Number
	 
	 * </pre>
	 */
	protected void emit_Classifier_ExclusiveKeyword_1_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'exclusive'?
	 *
	 * This ambiguous syntax occurs at:
	 *     int1=Number (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Classifier_ExclusiveKeyword_1_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'to' | 'from'
	 *
	 * This ambiguous syntax occurs at:
	 *     distance?='distance' (ambiguity) concept=SimpleConceptDeclaration
	 
	 * </pre>
	 */
	protected void emit_Concept_FromKeyword_3_1_1_or_ToKeyword_3_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     classid=CAMELCASE_ID (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Constructor___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('AD' | 'CE')?
	 *
	 * This ambiguous syntax occurs at:
	 *     year=INT (ambiguity) '-' month=INT
	 
	 * </pre>
	 */
	protected void emit_Date___ADKeyword_1_0_or_CEKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'fail' | 'suca'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) reason=STRING
	 
	 * </pre>
	 */
	protected void emit_FailStatement_FailKeyword_1_0_or_SucaKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ArgPathName (ambiguity) ':' actions=Actions
	 *     name=ArgPathName (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_MessageCall___LeftParenthesisKeyword_1_0_1_0_RightParenthesisKeyword_1_0_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ArgPathName (ambiguity) ':' actions=Actions
	 *     name=ArgPathName (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_MethodCallWithActions___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ArgPathName (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_MethodCall___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) real=INT
	 
	 * </pre>
	 */
	protected void emit_Number_PlusSignKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     exponential?='E' (ambiguity) exp=INT
	 *     exponential?='e' (ambiguity) exp=INT
	 
	 * </pre>
	 */
	protected void emit_Number_PlusSignKeyword_4_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'required'*
	 *
	 * This ambiguous syntax occurs at:
	 *     currency=Currency (ambiguity) 'in' currency=Currency
	 *     currency=Currency (ambiguity) 'in' unit=Unit
	 *     currency=Currency (ambiguity) 'named' name=LOWERCASE_ID
	 *     currency=Currency (ambiguity) 'named' name=STRING
	 *     currency=Currency (ambiguity) 'per' unit=Unit
	 *     currency=Currency (ambiguity) (rule end)
	 *     currency=Currency (ambiguity) from=Number
	 *     currency=Currency (ambiguity) optional?='optional'
	 *     currency=Currency (ambiguity) valueOperators+=ValueOperator
	 *     declaration=ConceptDeclaration (ambiguity) 'in' currency=Currency
	 *     declaration=ConceptDeclaration (ambiguity) 'in' unit=Unit
	 *     declaration=ConceptDeclaration (ambiguity) 'named' name=LOWERCASE_ID
	 *     declaration=ConceptDeclaration (ambiguity) 'named' name=STRING
	 *     declaration=ConceptDeclaration (ambiguity) 'per' unit=Unit
	 *     declaration=ConceptDeclaration (ambiguity) (rule end)
	 *     declaration=ConceptDeclaration (ambiguity) from=Number
	 *     declaration=ConceptDeclaration (ambiguity) optional?='optional'
	 *     declaration=ConceptDeclaration (ambiguity) valueOperators+=ValueOperator
	 *     name=LOWERCASE_ID (ambiguity) 'in' currency=Currency
	 *     name=LOWERCASE_ID (ambiguity) 'in' unit=Unit
	 *     name=LOWERCASE_ID (ambiguity) 'named' name=LOWERCASE_ID
	 *     name=LOWERCASE_ID (ambiguity) 'named' name=STRING
	 *     name=LOWERCASE_ID (ambiguity) 'per' unit=Unit
	 *     name=LOWERCASE_ID (ambiguity) (rule end)
	 *     name=LOWERCASE_ID (ambiguity) from=Number
	 *     name=LOWERCASE_ID (ambiguity) optional?='optional'
	 *     name=LOWERCASE_ID (ambiguity) valueOperators+=ValueOperator
	 *     name=STRING (ambiguity) 'in' currency=Currency
	 *     name=STRING (ambiguity) 'in' unit=Unit
	 *     name=STRING (ambiguity) 'named' name=LOWERCASE_ID
	 *     name=STRING (ambiguity) 'named' name=STRING
	 *     name=STRING (ambiguity) 'per' unit=Unit
	 *     name=STRING (ambiguity) (rule end)
	 *     name=STRING (ambiguity) from=Number
	 *     name=STRING (ambiguity) optional?='optional'
	 *     name=STRING (ambiguity) valueOperators+=ValueOperator
	 *     optional?='optional' (ambiguity) 'in' currency=Currency
	 *     optional?='optional' (ambiguity) 'in' unit=Unit
	 *     optional?='optional' (ambiguity) 'named' name=LOWERCASE_ID
	 *     optional?='optional' (ambiguity) 'named' name=STRING
	 *     optional?='optional' (ambiguity) 'per' unit=Unit
	 *     optional?='optional' (ambiguity) (rule end)
	 *     optional?='optional' (ambiguity) from=Number
	 *     optional?='optional' (ambiguity) optional?='optional'
	 *     optional?='optional' (ambiguity) valueOperators+=ValueOperator
	 *     to=Number (ambiguity) 'in' currency=Currency
	 *     to=Number (ambiguity) 'in' unit=Unit
	 *     to=Number (ambiguity) 'named' name=LOWERCASE_ID
	 *     to=Number (ambiguity) 'named' name=STRING
	 *     to=Number (ambiguity) 'per' unit=Unit
	 *     to=Number (ambiguity) (rule end)
	 *     to=Number (ambiguity) from=Number
	 *     to=Number (ambiguity) optional?='optional'
	 *     to=Number (ambiguity) valueOperators+=ValueOperator
	 *     unit=Unit (ambiguity) 'in' currency=Currency
	 *     unit=Unit (ambiguity) 'in' unit=Unit
	 *     unit=Unit (ambiguity) 'named' name=LOWERCASE_ID
	 *     unit=Unit (ambiguity) 'named' name=STRING
	 *     unit=Unit (ambiguity) 'per' unit=Unit
	 *     unit=Unit (ambiguity) (rule end)
	 *     unit=Unit (ambiguity) from=Number
	 *     unit=Unit (ambiguity) optional?='optional'
	 *     unit=Unit (ambiguity) valueOperators+=ValueOperator
	 *     valueOperators+=ValueOperator (ambiguity) 'in' currency=Currency
	 *     valueOperators+=ValueOperator (ambiguity) 'in' unit=Unit
	 *     valueOperators+=ValueOperator (ambiguity) 'named' name=LOWERCASE_ID
	 *     valueOperators+=ValueOperator (ambiguity) 'named' name=STRING
	 *     valueOperators+=ValueOperator (ambiguity) 'per' unit=Unit
	 *     valueOperators+=ValueOperator (ambiguity) (rule end)
	 *     valueOperators+=ValueOperator (ambiguity) from=Number
	 *     valueOperators+=ValueOperator (ambiguity) optional?='optional'
	 *     valueOperators+=ValueOperator (ambiguity) valueOperators+=ValueOperator
	 
	 * </pre>
	 */
	protected void emit_ObservableSemantics_RequiredKeyword_1_2_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     pairs+=KeyValuePair (ambiguity) pairs+=KeyValuePair
	 
	 * </pre>
	 */
	protected void emit_ParameterList_CommaKeyword_1_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'style'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     (rule start) (ambiguity) 'author' authors+=STRING
	 *     (rule start) (ambiguity) 'created' created=Date
	 *     (rule start) (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     (rule start) (ambiguity) 'description' description=STRING
	 *     (rule start) (ambiguity) 'import' imports+=PathName
	 *     (rule start) (ambiguity) 'locale' locale=LOCALE
	 *     (rule start) (ambiguity) 'locale' locales=List
	 *     (rule start) (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     (rule start) (ambiguity) 'logo' logo=Path
	 *     (rule start) (ambiguity) 'logo' logo=STRING
	 *     (rule start) (ambiguity) 'modified' modified=Date
	 *     (rule start) (ambiguity) 'observable' observable=Observable
	 *     (rule start) (ambiguity) 'observable' observables=List
	 *     (rule start) (ambiguity) 'output' output=STRING
	 *     (rule start) (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     (rule start) (ambiguity) 'permissions' permissions=STRING
	 *     (rule start) (ambiguity) 'version' version=VersionNumber
	 *     (rule start) (ambiguity) 'versionstring' versionString=STRING
	 *     (rule start) (ambiguity) 'worldview' worldview=PathName
	 *     (rule start) (ambiguity) (rule start)
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'author' authors+=STRING
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'created' created=Date
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'description' description=STRING
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'import' imports+=PathName
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'locale' locale=LOCALE
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'locale' locales=List
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=Path
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=STRING
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'modified' modified=Date
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'observable' observable=Observable
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'observable' observables=List
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'output' output=STRING
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'permissions' permissions=STRING
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'version' version=VersionNumber
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'versionstring' versionString=STRING
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) 'worldview' worldview=PathName
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) (rule end)
	 *     authors+=STRING (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     authors+=STRING (ambiguity) 'author' authors+=STRING
	 *     authors+=STRING (ambiguity) 'created' created=Date
	 *     authors+=STRING (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     authors+=STRING (ambiguity) 'description' description=STRING
	 *     authors+=STRING (ambiguity) 'import' imports+=PathName
	 *     authors+=STRING (ambiguity) 'locale' locale=LOCALE
	 *     authors+=STRING (ambiguity) 'locale' locales=List
	 *     authors+=STRING (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     authors+=STRING (ambiguity) 'logo' logo=Path
	 *     authors+=STRING (ambiguity) 'logo' logo=STRING
	 *     authors+=STRING (ambiguity) 'modified' modified=Date
	 *     authors+=STRING (ambiguity) 'observable' observable=Observable
	 *     authors+=STRING (ambiguity) 'observable' observables=List
	 *     authors+=STRING (ambiguity) 'output' output=STRING
	 *     authors+=STRING (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     authors+=STRING (ambiguity) 'permissions' permissions=STRING
	 *     authors+=STRING (ambiguity) 'version' version=VersionNumber
	 *     authors+=STRING (ambiguity) 'versionstring' versionString=STRING
	 *     authors+=STRING (ambiguity) 'worldview' worldview=PathName
	 *     authors+=STRING (ambiguity) (rule end)
	 *     createcomment=STRING (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     createcomment=STRING (ambiguity) 'author' authors+=STRING
	 *     createcomment=STRING (ambiguity) 'created' created=Date
	 *     createcomment=STRING (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     createcomment=STRING (ambiguity) 'description' description=STRING
	 *     createcomment=STRING (ambiguity) 'import' imports+=PathName
	 *     createcomment=STRING (ambiguity) 'locale' locale=LOCALE
	 *     createcomment=STRING (ambiguity) 'locale' locales=List
	 *     createcomment=STRING (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     createcomment=STRING (ambiguity) 'logo' logo=Path
	 *     createcomment=STRING (ambiguity) 'logo' logo=STRING
	 *     createcomment=STRING (ambiguity) 'modified' modified=Date
	 *     createcomment=STRING (ambiguity) 'observable' observable=Observable
	 *     createcomment=STRING (ambiguity) 'observable' observables=List
	 *     createcomment=STRING (ambiguity) 'output' output=STRING
	 *     createcomment=STRING (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     createcomment=STRING (ambiguity) 'permissions' permissions=STRING
	 *     createcomment=STRING (ambiguity) 'version' version=VersionNumber
	 *     createcomment=STRING (ambiguity) 'versionstring' versionString=STRING
	 *     createcomment=STRING (ambiguity) 'worldview' worldview=PathName
	 *     createcomment=STRING (ambiguity) (rule end)
	 *     created=Date (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     created=Date (ambiguity) 'author' authors+=STRING
	 *     created=Date (ambiguity) 'created' created=Date
	 *     created=Date (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     created=Date (ambiguity) 'description' description=STRING
	 *     created=Date (ambiguity) 'import' imports+=PathName
	 *     created=Date (ambiguity) 'locale' locale=LOCALE
	 *     created=Date (ambiguity) 'locale' locales=List
	 *     created=Date (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     created=Date (ambiguity) 'logo' logo=Path
	 *     created=Date (ambiguity) 'logo' logo=STRING
	 *     created=Date (ambiguity) 'modified' modified=Date
	 *     created=Date (ambiguity) 'observable' observable=Observable
	 *     created=Date (ambiguity) 'observable' observables=List
	 *     created=Date (ambiguity) 'output' output=STRING
	 *     created=Date (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     created=Date (ambiguity) 'permissions' permissions=STRING
	 *     created=Date (ambiguity) 'version' version=VersionNumber
	 *     created=Date (ambiguity) 'versionstring' versionString=STRING
	 *     created=Date (ambiguity) 'worldview' worldview=PathName
	 *     created=Date (ambiguity) (rule end)
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'author' authors+=STRING
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'created' created=Date
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'description' description=STRING
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'import' imports+=PathName
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'locale' locale=LOCALE
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'locale' locales=List
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=Path
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=STRING
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'modified' modified=Date
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'observable' observable=Observable
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'observable' observables=List
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'output' output=STRING
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'permissions' permissions=STRING
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'version' version=VersionNumber
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'versionstring' versionString=STRING
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) 'worldview' worldview=PathName
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) (rule end)
	 *     description=STRING (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     description=STRING (ambiguity) 'author' authors+=STRING
	 *     description=STRING (ambiguity) 'created' created=Date
	 *     description=STRING (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     description=STRING (ambiguity) 'description' description=STRING
	 *     description=STRING (ambiguity) 'import' imports+=PathName
	 *     description=STRING (ambiguity) 'locale' locale=LOCALE
	 *     description=STRING (ambiguity) 'locale' locales=List
	 *     description=STRING (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     description=STRING (ambiguity) 'logo' logo=Path
	 *     description=STRING (ambiguity) 'logo' logo=STRING
	 *     description=STRING (ambiguity) 'modified' modified=Date
	 *     description=STRING (ambiguity) 'observable' observable=Observable
	 *     description=STRING (ambiguity) 'observable' observables=List
	 *     description=STRING (ambiguity) 'output' output=STRING
	 *     description=STRING (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     description=STRING (ambiguity) 'permissions' permissions=STRING
	 *     description=STRING (ambiguity) 'version' version=VersionNumber
	 *     description=STRING (ambiguity) 'versionstring' versionString=STRING
	 *     description=STRING (ambiguity) 'worldview' worldview=PathName
	 *     description=STRING (ambiguity) (rule end)
	 *     imports+=PathName (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     imports+=PathName (ambiguity) 'author' authors+=STRING
	 *     imports+=PathName (ambiguity) 'created' created=Date
	 *     imports+=PathName (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     imports+=PathName (ambiguity) 'description' description=STRING
	 *     imports+=PathName (ambiguity) 'import' imports+=PathName
	 *     imports+=PathName (ambiguity) 'locale' locale=LOCALE
	 *     imports+=PathName (ambiguity) 'locale' locales=List
	 *     imports+=PathName (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     imports+=PathName (ambiguity) 'logo' logo=Path
	 *     imports+=PathName (ambiguity) 'logo' logo=STRING
	 *     imports+=PathName (ambiguity) 'modified' modified=Date
	 *     imports+=PathName (ambiguity) 'observable' observable=Observable
	 *     imports+=PathName (ambiguity) 'observable' observables=List
	 *     imports+=PathName (ambiguity) 'output' output=STRING
	 *     imports+=PathName (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     imports+=PathName (ambiguity) 'permissions' permissions=STRING
	 *     imports+=PathName (ambiguity) 'version' version=VersionNumber
	 *     imports+=PathName (ambiguity) 'versionstring' versionString=STRING
	 *     imports+=PathName (ambiguity) 'worldview' worldview=PathName
	 *     imports+=PathName (ambiguity) (rule end)
	 *     inlineStyle=Map (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     inlineStyle=Map (ambiguity) 'author' authors+=STRING
	 *     inlineStyle=Map (ambiguity) 'created' created=Date
	 *     inlineStyle=Map (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     inlineStyle=Map (ambiguity) 'description' description=STRING
	 *     inlineStyle=Map (ambiguity) 'import' imports+=PathName
	 *     inlineStyle=Map (ambiguity) 'locale' locale=LOCALE
	 *     inlineStyle=Map (ambiguity) 'locale' locales=List
	 *     inlineStyle=Map (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     inlineStyle=Map (ambiguity) 'logo' logo=Path
	 *     inlineStyle=Map (ambiguity) 'logo' logo=STRING
	 *     inlineStyle=Map (ambiguity) 'modified' modified=Date
	 *     inlineStyle=Map (ambiguity) 'observable' observable=Observable
	 *     inlineStyle=Map (ambiguity) 'observable' observables=List
	 *     inlineStyle=Map (ambiguity) 'output' output=STRING
	 *     inlineStyle=Map (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     inlineStyle=Map (ambiguity) 'permissions' permissions=STRING
	 *     inlineStyle=Map (ambiguity) 'version' version=VersionNumber
	 *     inlineStyle=Map (ambiguity) 'versionstring' versionString=STRING
	 *     inlineStyle=Map (ambiguity) 'worldview' worldview=PathName
	 *     inlineStyle=Map (ambiguity) (rule end)
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'author' authors+=STRING
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'created' created=Date
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'description' description=STRING
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'import' imports+=PathName
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'locale' locale=LOCALE
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'locale' locales=List
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=Path
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=STRING
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'modified' modified=Date
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'observable' observable=Observable
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'observable' observables=List
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'output' output=STRING
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'permissions' permissions=STRING
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'version' version=VersionNumber
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'versionstring' versionString=STRING
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) 'worldview' worldview=PathName
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) (rule end)
	 *     label=STRING (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     label=STRING (ambiguity) 'author' authors+=STRING
	 *     label=STRING (ambiguity) 'created' created=Date
	 *     label=STRING (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     label=STRING (ambiguity) 'description' description=STRING
	 *     label=STRING (ambiguity) 'import' imports+=PathName
	 *     label=STRING (ambiguity) 'locale' locale=LOCALE
	 *     label=STRING (ambiguity) 'locale' locales=List
	 *     label=STRING (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     label=STRING (ambiguity) 'logo' logo=Path
	 *     label=STRING (ambiguity) 'logo' logo=STRING
	 *     label=STRING (ambiguity) 'modified' modified=Date
	 *     label=STRING (ambiguity) 'observable' observable=Observable
	 *     label=STRING (ambiguity) 'observable' observables=List
	 *     label=STRING (ambiguity) 'output' output=STRING
	 *     label=STRING (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     label=STRING (ambiguity) 'permissions' permissions=STRING
	 *     label=STRING (ambiguity) 'version' version=VersionNumber
	 *     label=STRING (ambiguity) 'versionstring' versionString=STRING
	 *     label=STRING (ambiguity) 'worldview' worldview=PathName
	 *     label=STRING (ambiguity) (rule end)
	 *     locale=LOCALE (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     locale=LOCALE (ambiguity) 'author' authors+=STRING
	 *     locale=LOCALE (ambiguity) 'created' created=Date
	 *     locale=LOCALE (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     locale=LOCALE (ambiguity) 'description' description=STRING
	 *     locale=LOCALE (ambiguity) 'import' imports+=PathName
	 *     locale=LOCALE (ambiguity) 'locale' locale=LOCALE
	 *     locale=LOCALE (ambiguity) 'locale' locales=List
	 *     locale=LOCALE (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     locale=LOCALE (ambiguity) 'logo' logo=Path
	 *     locale=LOCALE (ambiguity) 'logo' logo=STRING
	 *     locale=LOCALE (ambiguity) 'modified' modified=Date
	 *     locale=LOCALE (ambiguity) 'observable' observable=Observable
	 *     locale=LOCALE (ambiguity) 'observable' observables=List
	 *     locale=LOCALE (ambiguity) 'output' output=STRING
	 *     locale=LOCALE (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     locale=LOCALE (ambiguity) 'permissions' permissions=STRING
	 *     locale=LOCALE (ambiguity) 'version' version=VersionNumber
	 *     locale=LOCALE (ambiguity) 'versionstring' versionString=STRING
	 *     locale=LOCALE (ambiguity) 'worldview' worldview=PathName
	 *     locale=LOCALE (ambiguity) (rule end)
	 *     locales=List (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     locales=List (ambiguity) 'author' authors+=STRING
	 *     locales=List (ambiguity) 'created' created=Date
	 *     locales=List (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     locales=List (ambiguity) 'description' description=STRING
	 *     locales=List (ambiguity) 'import' imports+=PathName
	 *     locales=List (ambiguity) 'locale' locale=LOCALE
	 *     locales=List (ambiguity) 'locale' locales=List
	 *     locales=List (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     locales=List (ambiguity) 'logo' logo=Path
	 *     locales=List (ambiguity) 'logo' logo=STRING
	 *     locales=List (ambiguity) 'modified' modified=Date
	 *     locales=List (ambiguity) 'observable' observable=Observable
	 *     locales=List (ambiguity) 'observable' observables=List
	 *     locales=List (ambiguity) 'output' output=STRING
	 *     locales=List (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     locales=List (ambiguity) 'permissions' permissions=STRING
	 *     locales=List (ambiguity) 'version' version=VersionNumber
	 *     locales=List (ambiguity) 'versionstring' versionString=STRING
	 *     locales=List (ambiguity) 'worldview' worldview=PathName
	 *     locales=List (ambiguity) (rule end)
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'author' authors+=STRING
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'created' created=Date
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'description' description=STRING
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'import' imports+=PathName
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'locale' locale=LOCALE
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'locale' locales=List
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=Path
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=STRING
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'modified' modified=Date
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'observable' observable=Observable
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'observable' observables=List
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'output' output=STRING
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'permissions' permissions=STRING
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'version' version=VersionNumber
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'versionstring' versionString=STRING
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) 'worldview' worldview=PathName
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) (rule end)
	 *     logo=Path (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     logo=Path (ambiguity) 'author' authors+=STRING
	 *     logo=Path (ambiguity) 'created' created=Date
	 *     logo=Path (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     logo=Path (ambiguity) 'description' description=STRING
	 *     logo=Path (ambiguity) 'import' imports+=PathName
	 *     logo=Path (ambiguity) 'locale' locale=LOCALE
	 *     logo=Path (ambiguity) 'locale' locales=List
	 *     logo=Path (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     logo=Path (ambiguity) 'logo' logo=Path
	 *     logo=Path (ambiguity) 'logo' logo=STRING
	 *     logo=Path (ambiguity) 'modified' modified=Date
	 *     logo=Path (ambiguity) 'observable' observable=Observable
	 *     logo=Path (ambiguity) 'observable' observables=List
	 *     logo=Path (ambiguity) 'output' output=STRING
	 *     logo=Path (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     logo=Path (ambiguity) 'permissions' permissions=STRING
	 *     logo=Path (ambiguity) 'version' version=VersionNumber
	 *     logo=Path (ambiguity) 'versionstring' versionString=STRING
	 *     logo=Path (ambiguity) 'worldview' worldview=PathName
	 *     logo=Path (ambiguity) (rule end)
	 *     logo=STRING (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     logo=STRING (ambiguity) 'author' authors+=STRING
	 *     logo=STRING (ambiguity) 'created' created=Date
	 *     logo=STRING (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     logo=STRING (ambiguity) 'description' description=STRING
	 *     logo=STRING (ambiguity) 'import' imports+=PathName
	 *     logo=STRING (ambiguity) 'locale' locale=LOCALE
	 *     logo=STRING (ambiguity) 'locale' locales=List
	 *     logo=STRING (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     logo=STRING (ambiguity) 'logo' logo=Path
	 *     logo=STRING (ambiguity) 'logo' logo=STRING
	 *     logo=STRING (ambiguity) 'modified' modified=Date
	 *     logo=STRING (ambiguity) 'observable' observable=Observable
	 *     logo=STRING (ambiguity) 'observable' observables=List
	 *     logo=STRING (ambiguity) 'output' output=STRING
	 *     logo=STRING (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     logo=STRING (ambiguity) 'permissions' permissions=STRING
	 *     logo=STRING (ambiguity) 'version' version=VersionNumber
	 *     logo=STRING (ambiguity) 'versionstring' versionString=STRING
	 *     logo=STRING (ambiguity) 'worldview' worldview=PathName
	 *     logo=STRING (ambiguity) (rule end)
	 *     modcomment=STRING (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     modcomment=STRING (ambiguity) 'author' authors+=STRING
	 *     modcomment=STRING (ambiguity) 'created' created=Date
	 *     modcomment=STRING (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     modcomment=STRING (ambiguity) 'description' description=STRING
	 *     modcomment=STRING (ambiguity) 'import' imports+=PathName
	 *     modcomment=STRING (ambiguity) 'locale' locale=LOCALE
	 *     modcomment=STRING (ambiguity) 'locale' locales=List
	 *     modcomment=STRING (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     modcomment=STRING (ambiguity) 'logo' logo=Path
	 *     modcomment=STRING (ambiguity) 'logo' logo=STRING
	 *     modcomment=STRING (ambiguity) 'modified' modified=Date
	 *     modcomment=STRING (ambiguity) 'observable' observable=Observable
	 *     modcomment=STRING (ambiguity) 'observable' observables=List
	 *     modcomment=STRING (ambiguity) 'output' output=STRING
	 *     modcomment=STRING (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     modcomment=STRING (ambiguity) 'permissions' permissions=STRING
	 *     modcomment=STRING (ambiguity) 'version' version=VersionNumber
	 *     modcomment=STRING (ambiguity) 'versionstring' versionString=STRING
	 *     modcomment=STRING (ambiguity) 'worldview' worldview=PathName
	 *     modcomment=STRING (ambiguity) (rule end)
	 *     modified=Date (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     modified=Date (ambiguity) 'author' authors+=STRING
	 *     modified=Date (ambiguity) 'created' created=Date
	 *     modified=Date (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     modified=Date (ambiguity) 'description' description=STRING
	 *     modified=Date (ambiguity) 'import' imports+=PathName
	 *     modified=Date (ambiguity) 'locale' locale=LOCALE
	 *     modified=Date (ambiguity) 'locale' locales=List
	 *     modified=Date (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     modified=Date (ambiguity) 'logo' logo=Path
	 *     modified=Date (ambiguity) 'logo' logo=STRING
	 *     modified=Date (ambiguity) 'modified' modified=Date
	 *     modified=Date (ambiguity) 'observable' observable=Observable
	 *     modified=Date (ambiguity) 'observable' observables=List
	 *     modified=Date (ambiguity) 'output' output=STRING
	 *     modified=Date (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     modified=Date (ambiguity) 'permissions' permissions=STRING
	 *     modified=Date (ambiguity) 'version' version=VersionNumber
	 *     modified=Date (ambiguity) 'versionstring' versionString=STRING
	 *     modified=Date (ambiguity) 'worldview' worldview=PathName
	 *     modified=Date (ambiguity) (rule end)
	 *     name=PathName (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     name=PathName (ambiguity) 'author' authors+=STRING
	 *     name=PathName (ambiguity) 'created' created=Date
	 *     name=PathName (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     name=PathName (ambiguity) 'description' description=STRING
	 *     name=PathName (ambiguity) 'import' imports+=PathName
	 *     name=PathName (ambiguity) 'locale' locale=LOCALE
	 *     name=PathName (ambiguity) 'locale' locales=List
	 *     name=PathName (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     name=PathName (ambiguity) 'logo' logo=Path
	 *     name=PathName (ambiguity) 'logo' logo=STRING
	 *     name=PathName (ambiguity) 'modified' modified=Date
	 *     name=PathName (ambiguity) 'observable' observable=Observable
	 *     name=PathName (ambiguity) 'observable' observables=List
	 *     name=PathName (ambiguity) 'output' output=STRING
	 *     name=PathName (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     name=PathName (ambiguity) 'permissions' permissions=STRING
	 *     name=PathName (ambiguity) 'version' version=VersionNumber
	 *     name=PathName (ambiguity) 'versionstring' versionString=STRING
	 *     name=PathName (ambiguity) 'worldview' worldview=PathName
	 *     name=PathName (ambiguity) (rule end)
	 *     observable=Observable (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     observable=Observable (ambiguity) 'author' authors+=STRING
	 *     observable=Observable (ambiguity) 'created' created=Date
	 *     observable=Observable (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     observable=Observable (ambiguity) 'description' description=STRING
	 *     observable=Observable (ambiguity) 'import' imports+=PathName
	 *     observable=Observable (ambiguity) 'locale' locale=LOCALE
	 *     observable=Observable (ambiguity) 'locale' locales=List
	 *     observable=Observable (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     observable=Observable (ambiguity) 'logo' logo=Path
	 *     observable=Observable (ambiguity) 'logo' logo=STRING
	 *     observable=Observable (ambiguity) 'modified' modified=Date
	 *     observable=Observable (ambiguity) 'observable' observable=Observable
	 *     observable=Observable (ambiguity) 'observable' observables=List
	 *     observable=Observable (ambiguity) 'output' output=STRING
	 *     observable=Observable (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     observable=Observable (ambiguity) 'permissions' permissions=STRING
	 *     observable=Observable (ambiguity) 'version' version=VersionNumber
	 *     observable=Observable (ambiguity) 'versionstring' versionString=STRING
	 *     observable=Observable (ambiguity) 'worldview' worldview=PathName
	 *     observable=Observable (ambiguity) (rule end)
	 *     observables=List (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     observables=List (ambiguity) 'author' authors+=STRING
	 *     observables=List (ambiguity) 'created' created=Date
	 *     observables=List (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     observables=List (ambiguity) 'description' description=STRING
	 *     observables=List (ambiguity) 'import' imports+=PathName
	 *     observables=List (ambiguity) 'locale' locale=LOCALE
	 *     observables=List (ambiguity) 'locale' locales=List
	 *     observables=List (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     observables=List (ambiguity) 'logo' logo=Path
	 *     observables=List (ambiguity) 'logo' logo=STRING
	 *     observables=List (ambiguity) 'modified' modified=Date
	 *     observables=List (ambiguity) 'observable' observable=Observable
	 *     observables=List (ambiguity) 'observable' observables=List
	 *     observables=List (ambiguity) 'output' output=STRING
	 *     observables=List (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     observables=List (ambiguity) 'permissions' permissions=STRING
	 *     observables=List (ambiguity) 'version' version=VersionNumber
	 *     observables=List (ambiguity) 'versionstring' versionString=STRING
	 *     observables=List (ambiguity) 'worldview' worldview=PathName
	 *     observables=List (ambiguity) (rule end)
	 *     output=STRING (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     output=STRING (ambiguity) 'author' authors+=STRING
	 *     output=STRING (ambiguity) 'created' created=Date
	 *     output=STRING (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     output=STRING (ambiguity) 'description' description=STRING
	 *     output=STRING (ambiguity) 'import' imports+=PathName
	 *     output=STRING (ambiguity) 'locale' locale=LOCALE
	 *     output=STRING (ambiguity) 'locale' locales=List
	 *     output=STRING (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     output=STRING (ambiguity) 'logo' logo=Path
	 *     output=STRING (ambiguity) 'logo' logo=STRING
	 *     output=STRING (ambiguity) 'modified' modified=Date
	 *     output=STRING (ambiguity) 'observable' observable=Observable
	 *     output=STRING (ambiguity) 'observable' observables=List
	 *     output=STRING (ambiguity) 'output' output=STRING
	 *     output=STRING (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     output=STRING (ambiguity) 'permissions' permissions=STRING
	 *     output=STRING (ambiguity) 'version' version=VersionNumber
	 *     output=STRING (ambiguity) 'versionstring' versionString=STRING
	 *     output=STRING (ambiguity) 'worldview' worldview=PathName
	 *     output=STRING (ambiguity) (rule end)
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'author' authors+=STRING
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'created' created=Date
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'description' description=STRING
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'import' imports+=PathName
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'locale' locale=LOCALE
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'locale' locales=List
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=Path
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'logo' logo=STRING
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'modified' modified=Date
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'observable' observable=Observable
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'observable' observables=List
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'output' output=STRING
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'permissions' permissions=STRING
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'version' version=VersionNumber
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'versionstring' versionString=STRING
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) 'worldview' worldview=PathName
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) (rule end)
	 *     permissions=STRING (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     permissions=STRING (ambiguity) 'author' authors+=STRING
	 *     permissions=STRING (ambiguity) 'created' created=Date
	 *     permissions=STRING (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     permissions=STRING (ambiguity) 'description' description=STRING
	 *     permissions=STRING (ambiguity) 'import' imports+=PathName
	 *     permissions=STRING (ambiguity) 'locale' locale=LOCALE
	 *     permissions=STRING (ambiguity) 'locale' locales=List
	 *     permissions=STRING (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     permissions=STRING (ambiguity) 'logo' logo=Path
	 *     permissions=STRING (ambiguity) 'logo' logo=STRING
	 *     permissions=STRING (ambiguity) 'modified' modified=Date
	 *     permissions=STRING (ambiguity) 'observable' observable=Observable
	 *     permissions=STRING (ambiguity) 'observable' observables=List
	 *     permissions=STRING (ambiguity) 'output' output=STRING
	 *     permissions=STRING (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     permissions=STRING (ambiguity) 'permissions' permissions=STRING
	 *     permissions=STRING (ambiguity) 'version' version=VersionNumber
	 *     permissions=STRING (ambiguity) 'versionstring' versionString=STRING
	 *     permissions=STRING (ambiguity) 'worldview' worldview=PathName
	 *     permissions=STRING (ambiguity) (rule end)
	 *     style=PathName (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     style=PathName (ambiguity) 'author' authors+=STRING
	 *     style=PathName (ambiguity) 'created' created=Date
	 *     style=PathName (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     style=PathName (ambiguity) 'description' description=STRING
	 *     style=PathName (ambiguity) 'import' imports+=PathName
	 *     style=PathName (ambiguity) 'locale' locale=LOCALE
	 *     style=PathName (ambiguity) 'locale' locales=List
	 *     style=PathName (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     style=PathName (ambiguity) 'logo' logo=Path
	 *     style=PathName (ambiguity) 'logo' logo=STRING
	 *     style=PathName (ambiguity) 'modified' modified=Date
	 *     style=PathName (ambiguity) 'observable' observable=Observable
	 *     style=PathName (ambiguity) 'observable' observables=List
	 *     style=PathName (ambiguity) 'output' output=STRING
	 *     style=PathName (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     style=PathName (ambiguity) 'permissions' permissions=STRING
	 *     style=PathName (ambiguity) 'version' version=VersionNumber
	 *     style=PathName (ambiguity) 'versionstring' versionString=STRING
	 *     style=PathName (ambiguity) 'worldview' worldview=PathName
	 *     style=PathName (ambiguity) (rule end)
	 *     version=VersionNumber (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     version=VersionNumber (ambiguity) 'author' authors+=STRING
	 *     version=VersionNumber (ambiguity) 'created' created=Date
	 *     version=VersionNumber (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     version=VersionNumber (ambiguity) 'description' description=STRING
	 *     version=VersionNumber (ambiguity) 'import' imports+=PathName
	 *     version=VersionNumber (ambiguity) 'locale' locale=LOCALE
	 *     version=VersionNumber (ambiguity) 'locale' locales=List
	 *     version=VersionNumber (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     version=VersionNumber (ambiguity) 'logo' logo=Path
	 *     version=VersionNumber (ambiguity) 'logo' logo=STRING
	 *     version=VersionNumber (ambiguity) 'modified' modified=Date
	 *     version=VersionNumber (ambiguity) 'observable' observable=Observable
	 *     version=VersionNumber (ambiguity) 'observable' observables=List
	 *     version=VersionNumber (ambiguity) 'output' output=STRING
	 *     version=VersionNumber (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     version=VersionNumber (ambiguity) 'permissions' permissions=STRING
	 *     version=VersionNumber (ambiguity) 'version' version=VersionNumber
	 *     version=VersionNumber (ambiguity) 'versionstring' versionString=STRING
	 *     version=VersionNumber (ambiguity) 'worldview' worldview=PathName
	 *     version=VersionNumber (ambiguity) (rule end)
	 *     versionString=STRING (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     versionString=STRING (ambiguity) 'author' authors+=STRING
	 *     versionString=STRING (ambiguity) 'created' created=Date
	 *     versionString=STRING (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     versionString=STRING (ambiguity) 'description' description=STRING
	 *     versionString=STRING (ambiguity) 'import' imports+=PathName
	 *     versionString=STRING (ambiguity) 'locale' locale=LOCALE
	 *     versionString=STRING (ambiguity) 'locale' locales=List
	 *     versionString=STRING (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     versionString=STRING (ambiguity) 'logo' logo=Path
	 *     versionString=STRING (ambiguity) 'logo' logo=STRING
	 *     versionString=STRING (ambiguity) 'modified' modified=Date
	 *     versionString=STRING (ambiguity) 'observable' observable=Observable
	 *     versionString=STRING (ambiguity) 'observable' observables=List
	 *     versionString=STRING (ambiguity) 'output' output=STRING
	 *     versionString=STRING (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     versionString=STRING (ambiguity) 'permissions' permissions=STRING
	 *     versionString=STRING (ambiguity) 'version' version=VersionNumber
	 *     versionString=STRING (ambiguity) 'versionstring' versionString=STRING
	 *     versionString=STRING (ambiguity) 'worldview' worldview=PathName
	 *     versionString=STRING (ambiguity) (rule end)
	 *     worldview=PathName (ambiguity) 'author' authors+=LOCALIZED_STRING_REFERENCE
	 *     worldview=PathName (ambiguity) 'author' authors+=STRING
	 *     worldview=PathName (ambiguity) 'created' created=Date
	 *     worldview=PathName (ambiguity) 'description' description=LOCALIZED_STRING_REFERENCE
	 *     worldview=PathName (ambiguity) 'description' description=STRING
	 *     worldview=PathName (ambiguity) 'import' imports+=PathName
	 *     worldview=PathName (ambiguity) 'locale' locale=LOCALE
	 *     worldview=PathName (ambiguity) 'locale' locales=List
	 *     worldview=PathName (ambiguity) 'logo' logo=LOCALIZED_STRING_REFERENCE
	 *     worldview=PathName (ambiguity) 'logo' logo=Path
	 *     worldview=PathName (ambiguity) 'logo' logo=STRING
	 *     worldview=PathName (ambiguity) 'modified' modified=Date
	 *     worldview=PathName (ambiguity) 'observable' observable=Observable
	 *     worldview=PathName (ambiguity) 'observable' observables=List
	 *     worldview=PathName (ambiguity) 'output' output=STRING
	 *     worldview=PathName (ambiguity) 'permissions' permissions=LOCALIZED_STRING_REFERENCE
	 *     worldview=PathName (ambiguity) 'permissions' permissions=STRING
	 *     worldview=PathName (ambiguity) 'version' version=VersionNumber
	 *     worldview=PathName (ambiguity) 'versionstring' versionString=STRING
	 *     worldview=PathName (ambiguity) 'worldview' worldview=PathName
	 *     worldview=PathName (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Preamble_StyleKeyword_3_6_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'style'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) inlineStyle=Map
	 *     (rule start) (ambiguity) style=PathName
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) inlineStyle=Map
	 *     authors+=LOCALIZED_STRING_REFERENCE (ambiguity) style=PathName
	 *     authors+=STRING (ambiguity) inlineStyle=Map
	 *     authors+=STRING (ambiguity) style=PathName
	 *     createcomment=STRING (ambiguity) inlineStyle=Map
	 *     createcomment=STRING (ambiguity) style=PathName
	 *     created=Date (ambiguity) inlineStyle=Map
	 *     created=Date (ambiguity) style=PathName
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) inlineStyle=Map
	 *     description=LOCALIZED_STRING_REFERENCE (ambiguity) style=PathName
	 *     description=STRING (ambiguity) inlineStyle=Map
	 *     description=STRING (ambiguity) style=PathName
	 *     imports+=PathName (ambiguity) inlineStyle=Map
	 *     imports+=PathName (ambiguity) style=PathName
	 *     inlineStyle=Map (ambiguity) inlineStyle=Map
	 *     inlineStyle=Map (ambiguity) style=PathName
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) inlineStyle=Map
	 *     label=LOCALIZED_STRING_REFERENCE (ambiguity) style=PathName
	 *     label=STRING (ambiguity) inlineStyle=Map
	 *     label=STRING (ambiguity) style=PathName
	 *     locale=LOCALE (ambiguity) inlineStyle=Map
	 *     locale=LOCALE (ambiguity) style=PathName
	 *     locales=List (ambiguity) inlineStyle=Map
	 *     locales=List (ambiguity) style=PathName
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) inlineStyle=Map
	 *     logo=LOCALIZED_STRING_REFERENCE (ambiguity) style=PathName
	 *     logo=Path (ambiguity) inlineStyle=Map
	 *     logo=Path (ambiguity) style=PathName
	 *     logo=STRING (ambiguity) inlineStyle=Map
	 *     logo=STRING (ambiguity) style=PathName
	 *     modcomment=STRING (ambiguity) inlineStyle=Map
	 *     modcomment=STRING (ambiguity) style=PathName
	 *     modified=Date (ambiguity) inlineStyle=Map
	 *     modified=Date (ambiguity) style=PathName
	 *     name=PathName (ambiguity) inlineStyle=Map
	 *     name=PathName (ambiguity) style=PathName
	 *     observable=Observable (ambiguity) inlineStyle=Map
	 *     observable=Observable (ambiguity) style=PathName
	 *     observables=List (ambiguity) inlineStyle=Map
	 *     observables=List (ambiguity) style=PathName
	 *     output=STRING (ambiguity) inlineStyle=Map
	 *     output=STRING (ambiguity) style=PathName
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) inlineStyle=Map
	 *     permissions=LOCALIZED_STRING_REFERENCE (ambiguity) style=PathName
	 *     permissions=STRING (ambiguity) inlineStyle=Map
	 *     permissions=STRING (ambiguity) style=PathName
	 *     style=PathName (ambiguity) inlineStyle=Map
	 *     style=PathName (ambiguity) style=PathName
	 *     version=VersionNumber (ambiguity) inlineStyle=Map
	 *     version=VersionNumber (ambiguity) style=PathName
	 *     versionString=STRING (ambiguity) inlineStyle=Map
	 *     versionString=STRING (ambiguity) style=PathName
	 *     worldview=PathName (ambiguity) inlineStyle=Map
	 *     worldview=PathName (ambiguity) style=PathName
	 
	 * </pre>
	 */
	protected void emit_Preamble_StyleKeyword_3_6_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'exclusive'?
	 *
	 * This ambiguous syntax occurs at:
	 *     int0=Number (ambiguity) 'to' int1=Number
	 
	 * </pre>
	 */
	protected void emit_TableClassifier_ExclusiveKeyword_5_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'exclusive'?
	 *
	 * This ambiguous syntax occurs at:
	 *     int1=Number (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_TableClassifier_ExclusiveKeyword_5_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     behavior=PathName (ambiguity) '?' then=ValueWithConstructor
	 *     behavior=PathName (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ValueWithConstructor___LeftParenthesisKeyword_1_15_2_0_RightParenthesisKeyword_1_15_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
