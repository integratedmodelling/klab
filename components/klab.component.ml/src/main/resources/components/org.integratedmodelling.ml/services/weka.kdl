/**
 * Interface contextualizers for Weka functions.
 */
@klab 0.10.0
@version 0.10.0
@namespace im.weka

abstract value classifier {		
	
	import observation @archetype
		"The archetype for learning. Can be a sampled distributed quality or a direct observation, which must have the
		 predictor state values."

	import value @predictor
		"Tags the predictors qualities used in building the training set, either at sampled values of the archetype or
		 as qualities in each archetype observation."
	
	optional text resource 
		"ID of the local resource containing the trained model. Ignored if the model is not a 'learn' model, 
		 overwritten without warning if the resource exists already. If a resource name is not
		 passed and the model is a learner, a new resource with a default name is generated at each run. Use a 
		 dot-separated lowercase path."
		
	optional text instances 
		"Output ARFF file to export the training set. If a relative path, it will be saved in the default export directory."

	optional text rawinstances 
		"Output ARFF file to export the raw (undiscretized) training set. If a relative path, it will be saved in the default 
		export directory."
	
	optional text 'geometry' 
		"Force the geometry of the learned resource to the passed value. Pass 'coverage' to set it to the coverage of the learning
 		 dataflow, or a geometry definition for a specific geometry. The default is the geometry of the learning context."

	optional number sample
		"A 0-1 proportion of states to sample states to use for training when both the archetype and the predictors are 
		 distributed qualities at initialization. When used, there is no need for a separate archetype model."
		 
	optional boolean expression select
		"A selector that can be used in conjunction with sample to further narrow down the states used for training."
			
	optional number seed
		"Seed for cross-validation or percentage split."
		label "s"
		default 1
		
	optional number splitpercentage
		"Percentage for the train/test set split, e.g., 0.66."
		label "split-percentage"
		default 0.66
		
	optional boolean preserveorder
		"Preserves the order in the percentage split. Default false."
		label "preserve-order"
		default false 
		
	optional number folds
		"Number of folds for cross-validation. Default 10."
		 label "x" 
		 default 10
		 
	optional boolean debug
		"Output debug information to the console."
		label "output-debug-info"
		default false
}

// DO NOT CHANGE THE ORDER OF THE OPTIONS!
export value bayesnet extends classifier
	"Bayesian network learning using configurable search and estimation algorithms. Bridges to the Weka BayesNet classifier. When used with a 
	 standard model, it will learn a BN and use it to predict the output. With a 'learn' model it will also produce the learned model artifact 
	 and a computing resource for it (or others) to use. The resource will allow export as BIF and other BN formats. Defines variables for 
	 reporting (TBD) of classifier evaluation. Use the @archetype and @predictor annotations to tag observations used in learning and inference."
	label 'WEKA BayesNet'
{		
	optional boolean noadtree 
		"Do not use an AD-tree to increase speed on counts."
		label "D"
		default false
		
	optional number batchsize 
		"The preferred number of instances to process if batch prediction is being performed."
		label "batch-size"
		default 100 

	optional value search
		"Search algorithm and its parameters. The default is a K2 algorithm with 3 maximum parents per node, equivalent to
		 calling weka.bayes.k2(maxparents=3)."
		label "Q"
		
	optional value estimator
		"Parameter estimator algorithm with its parameters. The default estimator is the Weka SimpleEstimator, equivalent to
		 calling weka.bayes.simpleestimator()."
		label "E"

	class org.integratedmodelling.ml.contextualizers.BayesNetResolver
}

export value randomforest extends classifier
	""
	label 'WEKA RandomForests'
{		
	class org.integratedmodelling.ml.contextualizers.RandomForestResolver
}

export value knn extends classifier
	""
	label 'WEKA K-Nearest Neighbor'
{		
    
    optional number k
        "Number of nearest neighbours (k) used in classification." 
         label "K"
        default 1
    optional value search
	    "Search algorithm and its parameters. The default is a LinearNNSearch. equivalent to "
		label "A"
		
	class org.integratedmodelling.ml.contextualizers.KnnResolver
}

export value logistic extends classifier
	""
	label 'Multinomial Logistic Regression'
{		
    
    optional number r
        "Set the ridge in the log-likelihood." 
         label "R"
        
    optional number maxiter
	    "Set the maximum number of iterations (default -1, until convergence). "
		label "M"
		default -1
		
	class org.integratedmodelling.ml.contextualizers.LogisticRegressionResolver
}

export value simplelogistic extends classifier
	""
	label 'Simple Logistic Regression'
{		
    
		
	class org.integratedmodelling.ml.contextualizers.SimpleLogisticResolver
}

export value linearregression extends classifier
	""
	label 'Linear Regression'
{		
	class org.integratedmodelling.ml.contextualizers.LinearRegressionResolver
}