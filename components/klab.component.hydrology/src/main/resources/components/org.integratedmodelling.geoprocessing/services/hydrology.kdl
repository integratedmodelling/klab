/**
 * Interface contextualizers for the morphometry functionalities in JGrasstools / Horton machine.
 */
@klab 0.10.0
@version 0.10.0
@namespace im.hydrology

export number fillsinks
	"Fills any hydrological sink in a DEM observation, producing a hydrologically corrected DEM."
	label 'Fill hydrological sinks'
{
	import number elevation
		"The DEM to correct"

	geometry S2

	class org.integratedmodelling.geoprocessing.hydrology.HydrologicallyCorrectedElevationResolver
}

export number leastcostflowdirections
     "Import a DEM (no need to fill sinks) and produce flow directions and total contributing area. Flow directions
     are computed as D8 (values from 1 to 8, i.e. the exponents to be applied to 2 in the standard 
	 D8 scheme) unless angles are requested."
	 label 'Least cost flow directions'
{
	import number elevation
		"A DEM"
		
	optional boolean angles
		"If true, angles are computed as output instead of integer flow direction codes per D8 conventions."
		default false
	
	optional boolean dotca
		"If true, the number of contributing cells is returned instead of the flow directions D8 map. To 
		 output the actual upstream area, also use the areas=true parameter."
		default false

	optional boolean areas
		"If true and dotca is also true, output the actual upstream area instead of the number of upstream
		 cells."
	   default false

	geometry S2

	class org.integratedmodelling.geoprocessing.hydrology.LeastCostFlowDirectionsResolver
}

export number flowdirections
	
	"Import a hydrologically corrected DEM and produce flow directions using configurable methods. Flow directions
     are computed as D8 (values from 1 to 8, i.e. the exponents to be applied to 2 in the standard 
	 D8 scheme) unless angles are requested."
	 
	 label 'Flow directions'
{
	import number hydrologically_corrected_elevation
		"A hydrologically corrected DEM with no areas where water can pool"
		
	optional boolean angles
		"If true, angles are computed as output instead of integer flow direction codes per D8 conventions."
		default false

    optional parameter number minelev
        "The minimum elevation processed by the algorithm."
        default 0.0

	geometry S2

	class org.integratedmodelling.geoprocessing.hydrology.FlowDirectionsResolver
}

export number flowaccumulation
	"Import a hydrologically corrected DEM and produce the total upstream area of each
	 raster cell."
	 label 'Contributing area'
{
	import number flow_directions_d8
		"The D8 numeric code for flow direction"

	optional boolean cells
		"If true, number of contributing cells is output instead of actual contributing area."
		default false
		
	geometry S2

	class org.integratedmodelling.geoprocessing.hydrology.ContributingAreaResolver
}

export value accumulateflow

	"Perform arbitrary calculation on each cell's neighborhood in the order established by
	 the flow directions, with access to values upstream and in the neighborhood of each 
	 raster cell through a 'cell' variable that provides access to neighborhood inspection 
	 capabilities."
	 
	 label 'Accumulate upstream flow'
{
	import number flow_directions_d8
		"The D8 numeric code for flow direction"
		
	import object stream_outlet
		"Stream outlets. Only the location of the outlets will be used; if the outlet spatial
		 extent is not a point, the centroid cell will be used."

	value expression evaluate
		"An expression that returns the value in each cell. The 'cell' variable contains
		 a proxy to the cell that can produce the neighborhood, the upstream portion of the 
		 neighborhood, arbitrary neighbors in each direction, and (when the cell is from the
		 neighborhood) the opposite relative to the focal cell. Each cell knows the values of
		 all the dependencies in its location. All these values are extracted using cell.xxx
		 where xxx is: neighbo[u]rhood, upstream, downstream (producing a list of cells); n, s, e, 
		 w, ne, se, nw, se (producing one cell or null if at the edges); or the name of each
		 quality dependency (producing the value of that dependency at the cell). The expression
		 'xxx.self' where xxx is one of the cells returned by 'cell.upstream' produces the value 
		 of the target state at each upstream location. That is the only context where using 
		 'self' makes any sense, as it will not have been computed unless the cell is from the
		 upstream neighborhood."
		 
	value expression distribute
		"An expression that is evaluated in the opposite order as 'evaluate', starting at the 
		 outlet(s) and moving upstream. All parameters are the same as 'evaluate' except that
		 'current' is the value of the output at the previously computed downstream cell, evaluated 
		 before the expression is called, and repeated equal in case the focal cell is not the 
		 only upstream cell (its value is null at the outlet). The variable 'cell' can be interrogated 
		 using 'cell.outlet' to check if the
		 current cell is an outlet. The 'cell.downstream' and 'cell.upstream' are also defined as
		 before; remember that the upstream values of the output haven't been computed yet. If 
		 'distribute' is paired with 'evaluate', a flow accumulation step will follow all the 
		 'distribute' evaluations."

	geometry S2

	class org.integratedmodelling.geoprocessing.hydrology.AccumulateFlowResolver
}

export boolean streamnetwork
	"Extracts the stream network as a raster indicating presence of a stream, using a cutoff threshold
	 on the percentage of drainage cells."
	 label 'Extract stream network'
{
	import number upstream_cell_count
		"An observation of the number of cells draining into each cell"

	optional parameter number 'tca.threshold'
		"The percent of the total basin drainage that makes a cell part of a stream. A default is chosen
		 adaptively; defaults are unlikely to work in delta areas or any other difficult context."
		default 0.0

	geometry S2

	class org.integratedmodelling.geoprocessing.hydrology.StreamNetworkResolver
}

export object tracestreams
	"Extracts the stream network as a set of lines indicating presence of a stream, using a cutoff threshold
	 on the percentage of drainage cells."
	 label 'Extract stream lines'
{
	import number upstream_cell_count
		"An observation of the number of cells draining into each cell"

	import object stream_outlet
		"The stream outlets to start from"

	import number flow_directions_d8
		"The D8 numeric code for flow direction"

	optional parameter number 'tca.threshold'
		"The percent of the total basin drainage that makes a cell part of a stream. A default is chosen
		 adaptively; defaults are unlikely to work in delta areas or any other difficult context."
		default 0.0

	geometry #s1

	class org.integratedmodelling.geoprocessing.hydrology.StreamInstantiator
}

export object extractoutlets
	"Extracts one or more outlets from a DEM based on flow directions and total contributing area 
	 in order of decreasing drainage area. Number of outlets and a threshold of minimum
	 drainage coverage can be used to only extract the outlets of the major basin(s)."
	 label 'Extract outlets'
{
	import number flow_directions_d8
		"The D8 numeric code for flow direction"
		
	import number upstream_cell_count
		"An observation of the number of cells draining into each cell"

	optional parameter number threshold
		"The minimum percent of basin drainage reuired for an outlet to be created. Default is 0.05."
		default 0.05

	optional parameter number extract
		"Number of outlets to create. Outlets are created in order of decreasing drainage
		 area down to the drainage threshold.  Default is -1, i.e. all outlets down to the
		 minimum drainage threshold will be extracted."
		default -1
		
	geometry #s0

	class org.integratedmodelling.geoprocessing.hydrology.StreamOutletInstantiator
}

export object delineatewatersheds
	"Extracts one or more watersheds based on stream outlet locations."
{
	import object stream_outlet
		"Stream outlets. Only the location of the outlets will be used; if the outlet spatial
		 extent is not a point, the centroid cell will be used."

	import number flow_directions_d8
		"The D8 numeric code for flow direction"
		
	import number upstream_cell_count
		"An observation of the number of cells draining into each cell"

	optional parameter boolean whole
		"If whole = true, only entire watersheds will be extracted, rejecting those whose basin
		 crosses the context's outline. Default is false. A warning is emitted in any case."
		default false
		
	geometry #s0
	
	class org.integratedmodelling.geoprocessing.hydrology.WatershedInstantiator
}

void watershed
	"Resolves a watershed by finding the stream outlet and tracing flows to it."
{
	import number flow_direction
		"The heading of the outgoing horizontal water flow."

	export object stream_outlet
		"The stream outlet. If applied to a proper watershed shape and with a suitable
		 resolution, only one outlet should be found."
		
	geometry *
	
	class org.integratedmodelling.geoprocessing.hydrology.WatershedResolver
}

/*
 * TODO all the parameters are from the superclass: use the extension mechanism to write these
 * once in an abstract prototype where the superclass comes from.
 */
export object findwatersheds
	"Extracts the most appropriately scaled watershed polygon(s) based on the HydroBASINS product, to be further
	 defined, if needed, by an appropriate resolver. Enables extraction of the actual polygons or their bounding
	 boxes, with optional alignment to the master grid and buffering."
{
	optional parameter boolean whole
		"If true, cover the context completely: either by choosing a larger watershed
	     or by adding even small proportion coverage. Default false, choice dependent on
	     minimum coverage."
		default false

	optional parameter boolean boundingbox
		"If true, produce only the bounding box instead of the outline of each watershed."
		default false
		
	optional parameter boolean align
		"If true, align the bounding box of the shape to the grid in the context, if any."
		default false

	optional enum strategy
		"If COVER, take as many smaller watersheds as it takes to compute the requested coverage. If EXPAND,
		 use the smallest larger object(s), even if they are much larger than the context. Default COVER."
		values COVER, EXPAND
		
	optional number mincoverage
		"The minimum proportion of area needed for a watershed to be included in the result compared with the
		 area of the original context. Default is 0.45. Ineffective if whole = true or strategy = expand."
		 
	optional number maxobjects
		"The maximum number of objects to produce. If this is passed, watersheds will be chosen based on the
		 percentage of coverage of the context."	
		 
	optional number buffer
		"Add a buffer of the passed number of cells around the bounding box. Implies align=true and is only
		 effective if boundingbox=true. Intended to provide space around the watershed shape for proper 
		 watershed extraction."	 
		 
	optional number granularity
		"Modify the spatial granularity of the objects selected by moving to a different level than the one
		 defined by the scale. Passing 0 has no effect; an integer will move the scale up or down (if negative)
		 by the passed number of levels."	 
		
	geometry #s0
	
	class org.integratedmodelling.geoprocessing.hydrology.WatershedPolygonInstantiator
}

export process runoff
	"Computes runoff water volume from precipitation in the time unit, using the curve number method."
{

	import number curve_number
		"An observation of the curve number for the region."

	import number precipitation_volume
		"An observation of the precipitation volume for the region in the unit of time."

	import object stream_outlet
		"Stream outlets. Only the location of the outlets will be used; if the outlet's spatial
		 extent is not a point, the centroid cell will be used."

	import number flow_directions_d8
		"The D8 numeric code for flow direction"

	optional export number runoff_water_volume
		"Runoff water volume produced by precipitation"
		
	geometry T1S2
		
	class org.integratedmodelling.geoprocessing.hydrology.RunoffResolver
}

export process weather
	"Extracts and interpolates observations from weather stations from the k.LAB weather service to build
	 interpolated surfaces of temporal observation data."
	 label 'Weather station interpolator'
{
	import number elevation
		"An observation of the elevation for the region."
		
	optional export number precipitation
		"Precipitation volume"

	optional export number tmin
		"Minimum temperature"

	optional export number tmax
		"Maximum temperature"

	optional export number snowfall
		"Snowfall volume"

	optional export number snowdepth
		"Snow depth"

	optional export number evapotranspiration
		"Potential evapotranspiration"
		
	optional export number relhumidity
		"Relative humidity"
		
	optional export number cloudcover
		"Cloud cover"
		
	geometry T1S2
		
	class org.integratedmodelling.geoprocessing.weather.WeatherResolver
}

export process baseflowcalc
	"Calculates the baseflow."
	label 'Calculate Baseflow Water Volume'
{
	import number net_infiltrated_water_volume
		"The available infiltrated water volume of in each cell of the basin."
		unit mm

	import number infiltrated_water_volume
		"The infiltrated water volume of in each cell of the basin."
		unit mm
		
	import boolean presence_of_stream
		"The marker of stream network presence." 
		
	import number flow_directions_d8
		"The D8 numeric code for flow direction."
		
	export number base_flow_water_volume
		"The baseflow water volume produced in each cell of the basin."
		unit mm
		
	geometry T1S2

	class org.integratedmodelling.geoprocessing.hydrology.BaseFlowWaterVolumeResolver
}

export process infiltratedcalc
	"Calculates the infiltrated volume."
	label 'Calculate Infiltrated Water Volume'
{

	optional number alpha
		"Fraction of upslope annual available recharge that is available in month m (default is 1/12)."
		default 1.0
	
	optional number beta
		"Fraction of the upslope subsidy that is available for downslope evapotranspiration."
		default 1.0

	optional number gamma
		"Fraction of pixel recharge that is available to downslope pixels."
		default 1.0
		
	import number potential_evapotranspired_water_volume
		"The potential evapotranspiration water volume of in each cell of the basin."
		unit mm

	import number rainfall_volume
		"The liquid precipitation volume."
		unit mm
		
	import number runoff_water_volume
		"The water volume produced in each cell of the basin." 
		unit mm
		
	import boolean presence_of_stream
		"The marker of stream network presence." 
		
	import number flow_directions_d8
		"The D8 numeric code for flow direction."

	export number net_infiltrated_water_volume
		"The available infiltrated water volume produced in each cell of the basin."
		unit mm
		
	export number infiltrated_water_volume
		"The infiltrated water volume produced in each cell of the basin."
		unit mm
		
	geometry T1S2

	class org.integratedmodelling.geoprocessing.hydrology.InfiltratedWaterVolumeResolver
}

export process petcalc
	"Calculates the potential evapotranspired volume."
	label 'Calculate Potential Evapotranspired Water Volume'
{
	import number crop_coefficient
		"The Crop Coefficient."
	
	import number maximum_temperature
		"The maximum temperature in the current calculation step."
		unit Celsius
	
	import number minimum_temperature
		"The minimum temperature in the current calculation step."
		unit Celsius
		
	import number atmospheric_temperature
		"The average temperature in the current calculation step."
		unit Celsius
		
	import number solar_radiation
		"The solar radiation."
		unit MJ/(m^2*day)
		
	import number rainfall_volume
		"The liquid precipitation volume."
		unit mm

	export number potential_evapotranspired_water_volume
		"The potential evapotranspiration water volume produced in each cell of the basin."
		unit mm
		
	geometry T1S2

	class org.integratedmodelling.geoprocessing.hydrology.PotentialEvapotranspiredWaterVolumeResolver
}

export process scsrunoffcalc
	"Calculates the scs runoff volume."
	label 'Calculate SCS Runoff Volume'
{
		
	import number rainfall_volume
		"The liquid precipitation volume."
		unit mm
		
	import number number_of_storm_events
		"TODO"
	
	import number curve_number
		"The Curve Number of the SCS method."

	import boolean presence_of_stream
		"The marker of stream network presence."

	export number runoff_water_volume
		"The water volume produced in each cell of the basin."
		unit mm
		
	geometry T1S2

	class org.integratedmodelling.geoprocessing.hydrology.ScsRunoffResolver
}