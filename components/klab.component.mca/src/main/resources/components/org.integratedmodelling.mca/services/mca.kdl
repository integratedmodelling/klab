/**
 * Interface contextualizers for MCA functions.
 */
@klab 0.10.0
@version 0.10.0
@namespace im.mca

export number concordance
	"Run a concordance analysis to compute the concordance of a set of criteria variables with corresponding values from
	 observers in the context. Can turn quantitative distributed observations into alternatives for spatial and/or temporal 
	 MCA assessment. Uses the annotations @cost and @benefit to define the criteria."
	 label 'MCA concordance'
{
	import number @cost
		"Tags the qualities used to provide cost criteria, where a higher value means a less desirable outcome."

	import number @benefit
		"Tags the qualities used to provide benefit criteria, where a higher value means a more desirable outcome."

	optional number levels
		"The number of levels to discretize distributed continuous variables. Default is 5."
		default 5
		
	class org.integratedmodelling.mca.services.ConcordanceResolver
}

// TODO constraints for attributes according to method
filter object ranking
	"Run a concordance analysis to rank the set of alternatives produced by a resource or a contextualizer. Acts as a filter
	 that computes the concordance ranking and sorts the output set by decreasing concordance. The score will be added to the
	 metadata and, if provided, to an output tagged with the @concordance annotation. Uses the annotations @cost and @benefit 
	 to define the criteria."
	 label 'MCA ranking'
{
	import number @cost
		"Tags the qualities used to provide cost criteria, where a higher value means a less desirable outcome."

	import number @benefit
		"Tags the qualities used to provide benefit criteria, where a higher value means a more desirable outcome."

	optional import object artifact 
		"The artifact to filter"
	
	optional text method 
		"The MCA method used to rank alternatives. One of Topsis|Electre{1|1s|1v|2|3|4|Tri|TriMe}. Only Electre3/4 can run
		 without additional parameters. Default is Electre3. NOTE: currently forcing Evamix, others still unimplemented."
		 
	optional boolean normalize
		"If true, the scores will be normalized so that their range is 0-1. Default is true."
		default true

	class org.integratedmodelling.mca.services.RankingInstantiator
}

export number owa
	"Calculates the Ordered Weighted Average of a set of observations in the scope. Takes the observables' relevance weights
	and the observer's risk profile as input parameters. The ordinal weights are determined according to the observer's risk profile. Currently
	the function is built for a specific case-study of coastal zones' vulnerability. To be generalized."
	label 'Ordered Weighted Average'
{
			
	import number @criterion
	
	optional parameter map weights
		"Map of relevance weights for each observation."
		
	optional parameter boolean interpolate_weights
		"Whether or not to perform WOWA by interpolating the cumulative sum of the ordinal weights. If true, the list of ordinal weights
		 should be provided as a parameter. Default is false."
		default false	
		
	optional parameter value risk_profile
		"The observer's risk profile. Can be a list specifying all the ordinal weights or a single number. If a single number is provided, every real 
		number is accepted. Negative numbers represent risk aversion, 0 risk neutrality and positive numbers risk tolerance. Default is 0."
		default = 0.0		

	class org.integratedmodelling.owa.OWAResolver
}
