grammar org.integratedmodelling.kdl.Kdl with org.eclipse.xtext.common.Terminals

generate kdl "http://www.integratedmodelling.org/kdl/Kdl"

/*
 * The root model is the body of the dataflow for the context observation
 */
Model:
	(('@dataflow' name=(Path|UrnId))? &
	 ('@var' variables+=Parameter)* &
	 ('@val' constants+=Parameter)* &
	 ('@author' authors+=STRING)* &
	 ('@version' version=VersionNumber)? &
	 ('@klab' klabVersion=VersionNumber)? &
	 ('@worldview' worldview=LOWERCASE_ID)? &
	 ('@geometry' geometry=Geometry)? &
	 ('@endpoint' endpoint=STRING)? &
	 ('@namespace' package=(PathName|STRING))? &
	 ('@coverage' scale+=Function (',' scale+=Function)*)? &
	 ('@context' contextUrn=Urn)?) 
	defines+=Define*
	actors+=ActorDefinition*;

terminal ANNOTATION_ID:
	'@' LOWERCASE_ID;
	
Annotation:
	name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
	
ActorDefinition:
	
	/*
	 * const means that the a parameter denotes a resource that is immutable within the prototype. Used to build
	 * the provenance diagram, normally on parameters that must be URNs or literals.
	 */
	(const?='const')? 
	/*
	 * short special-case form to denote a specific annotation ID as a tag and type for imports or exports
	 */
	(exported?='export' | imported?='import') type=ACTOR annotationTag=ANNOTATION_ID 
	 	(docstring=STRING)? ('label' label=STRING)?
	|
	/*
	 * This is the form that specifies actuators
	 */
	(annotations += Annotation*
	// abstract only allowed at root level; only exists to be extended
	(abstract?='abstract')? (const?='const')? (final?='final')? (optional?='optional')? 
	(
		(exported?='export' | filter?='filter' | (imported?='import') (multiple?='multiple' | arity=INT (minimum?='+')?)?)
	)? 
	(parameter?='parameter')?
	type=ACTOR 
		// expressions must return the type; they are evaluated in the context and the artifacts named in them are imports
		(expression?='expression')? 
		// resolvers named '*' must be void and in the scope of an instantiator; they are meant to resolve 
		// instantiated objects within their scale of reference .
		name=(LOWERCASE_ID|LOWERCASE_DASHID|STRING|'*') 
		// extends only allowed at root level; must extend another upstream in same file
		('extends' extended=(LOWERCASE_ID|LOWERCASE_DASHID|STRING))?
		('for' targets+=TARGET (',' targets+=TARGET)*)? (docstring=STRING)? ('label' label=STRING)?
	('{' body=DataflowBody '}')?
	(
		(	
			('minimum' rangeMin=Number) |		
			('maximum' rangeMax=Number) |		
			('range' rangeMin=Number 'to' rangeMax=Number)
		) |
		('values' enumValues+=(STRING|UPPERCASE_ID|LOWERCASE_ID|CAMELCASE_ID) (',' enumValues+=(STRING|UPPERCASE_ID|LOWERCASE_ID|CAMELCASE_ID))*)		
	)?
	(('default' default=Value)? &
	('unit' unit=Unit)?)
	('as' localName=LOWERCASE_ID)?
	('over' coverage+=Function (',' coverage+=Function)*)? )
;
	
DataflowBody:
	{DataflowBody}
	(dataflows+=ActorDefinition*) 
	(
		('geometry' geometry=Geometry)? &
		(computations=Computation)? &
		('metadata' metadata=Metadata)?
		('class' javaClass=(JavaClass|STRING))?
	);

Computation:
	'compute' functions+=Function (',' functions+=Function)*;

Geometry:
	'*' | SHAPE (',' SHAPE)*;

Parameter:
	name=LOWERCASE_ID value=Value (docstring=STRING)?;

enum UnitOp:
	OVER='/' | CARET='^' | STAR='*';

UnitElement:
	id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID|BACKCASE_ID) |
	'(' unit=Unit ')';

Unit:
	{Unit} (root=UnitElement)? (=> (connectors+=UnitOp) (units+=UnitElement))*;

Currency:
	id=UPPERCASE_ID ('@' year=INT) (=> '/' (units+=UnitElement))*;

ACTOR:
	// countable, so always a dataflow for direct object instantiation. Resolvers for single objects are inside the instantiation
	// actuator and void
	'object' | 'event' |
	// any observation, for declarations only
	'observation' |
	// any acceptable quality type, for declarations only
	'value' |
	// process and event are the two endurants, for which contextualizers are only run at transitions
	'process' |
	// all the next are in quality scope; number type is handled internally
	'number' | 'concept' | 'boolean' | 'text' | 'list' | 'table' | 'map' |
	// specialized functions that produce extents
	'extent' | 'spatialextent' | 'temporalextent' |
	// only contracts for annotations
	'annotation' |
	// enum parameter, for prototypes only
	'enum' |
	// range parameter, for prototypes only
	'range' |
	// only for command prototypes
	'void' |
	// partial contextualizers for their parents
	'partition' |
	// introduces a dataflow to resolve individual instances
	'resolve';
	
TARGET:
	'models' | 'concepts' | 'observers' | 'definitions' | 'dependencies';

ClassifierRHS:
	(boolean='true' | boolean='false') | 
	int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? | 
	num=Number | 
	'in' set=List |
	string=STRING |  
	map=Map |
	'(' toResolve+=STRING (=> ',' toResolve+=STRING)* ')' | 
	op=REL_OPERATOR expression=Number |
	nodata='unknown' | 
	star?='*'; 
	
List:
	{List} '(' contents+=Value* ')';
Literal:
	number=Number | from=Number 'to' to=Number | string=STRING | boolean=('true' | 'false');
LiteralOrIdOrComma returns Literal:
	from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=(ID|LOWERCASE_ID|UPPERCASE_ID) | comma?=',';
LiteralOrID returns Literal:
	number=Number | string=STRING | boolean=('true' | 'false') | id=ID;
Metadata:
	{Metadata} '{' (ids+=(LOWERCASE_ID | PropertyId) values+=(LiteralOrID | Metadata | List))* '}';
ParameterList:
	values+=Value (',' values+=Value)* | pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*;
Value:
	literal=LiteralOrIdOrComma |
	function=Function | 
	urn=Urn | 
	list=List |
	map=Map | 
	expression=EXPR |
	table=LookupTable | 
	enumId=UPPERCASE_ID;
	
Define:
	'define' (class=LOWERCASE_ID)? name=LOWERCASE_ID '=' value=Value ';'
;	
	
Urn:
// String used when there are strange chars or keywords in the URN.
	name=(UrnId | STRING | LocalFilePath);

	/**
 * URN is 4 sections and admits a version number and a fragment (with only lowercase_id chars in it). It is
 * legal, but not required, to start with the default prefix urn:klab:
 */
UrnId:
	('urn:klab:')? PathName ':' PathName ':' PathName ':' Path (':' VersionNumber)? ('#' LOWERCASE_ID)?;

Map:
	{Map} '{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}'
;

MapEntry:
	classifier=ClassifierRHS ':' value=Value
;


// Lookup table literal
LookupTable: {LookupTable}
	'{{' table=Table? '}}'
;

Table:
	rows+=TableRow (',' rows+=TableRow)*;

TableRow:
	elements+=TableClassifier ('|' elements+=TableClassifier)*
;

TableClassifier returns ClassifierRHS:
	(boolean='true' | boolean='false') | 
	int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	num=Number | 
	'in' set=List | 
	string=STRING | 
	op=REL_OPERATOR expression=Number | 
	expr=EXPR |
	nodata='unknown' |
	star?='*' |
	anything?='#';

terminal EXPR:
	'[' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | ']' | '\\') | !('\\' | ']'))* ']';
	

	/**
 * Local file paths become locally based URNs and can be used wherever URNs are accepted. Their interpretation depends
 * on whether there is an encoder for their file extension.
 */
LocalFilePath:
	(CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID) ('/' (CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID))* ('.'
	LOWERCASE_ID)? ('#' LOWERCASE_ID)?;
KeyValuePair:
	name=(LOWERCASE_ID|LOWERCASE_DASHID) (interactive?='=?' | '=') value=Value;
Function:
	((mediated=LOWERCASE_ID '>>') | (variable=LOWERCASE_ID '<-'))? 
	((name=PathName '(' (parameters=ParameterList)? ')') | urn=Urn | value=Literal | expression=EXPR) ('>>' target=LOWERCASE_ID)?
	|
	'(' chain+=Function (',' chain+=Function)* ')' /* ('as' variable=LOWERCASE_ID)? */;

REL_OPERATOR:
	(gt?='>' |
	lt?='<' |
	eq?='=' |
	ne?='!=' |
	le?='<=' |
	ge?='>=');

Number:
	('+' | negative?='-')? => real=INT => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' |
	expNegative?='-')? exp=INT)?;
terminal LOWERCASE_ID:
	('a'..'z') ('a'..'z' | '0'..'9' | '_')*;
terminal LOWERCASE_DASHID:
	('a'..'z') ('a'..'z' | '0'..'9' | '-')*;
terminal SHAPE:
	('#') | ('#')? (('A'..'z') ('.' | ('0'..'3')))+;
PathName:
	LOWERCASE_ID ('.' LOWERCASE_ID)*;
Path:
	LOWERCASE_ID (('.' | '/') LOWERCASE_ID)*;
JavaClass:
	PathName '.' CAMELCASE_ID;
terminal UPPERCASE_ID:
	('A'..'Z') ('A'..'Z')*;
terminal UPPERCASE_PATH:
	UPPERCASE_ID ('.' UPPERCASE_ID)*;
terminal CAMELCASE_ID:
	('A'..'Z') ('A'..'z' | '0'..'9')*;
terminal BACKCASE_ID:
	('a'..'z') ('A'..'z'|'0'..'9')*;
NamespaceId:
	PathName ':' CAMELCASE_ID;
PropertyId:
	PathName ':' (LOWERCASE_ID | LOWERCASE_DASHID);
VersionNumber:
	INT ('.' INT ('.' INT)?)? ('-')? ((LOWERCASE_ID | UPPERCASE_ID))?;


