/**
 * generated by Xtext 2.33.0
 */
package org.integratedmodelling.kdl.kdl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kdl.kdl.KdlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Number</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.NumberImpl#isNegative <em>Negative</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.NumberImpl#getReal <em>Real</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.NumberImpl#isDecimal <em>Decimal</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.NumberImpl#getDecimalPart <em>Decimal Part</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.NumberImpl#isExponential <em>Exponential</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.NumberImpl#isExpNegative <em>Exp Negative</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.NumberImpl#getExp <em>Exp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NumberImpl extends MinimalEObjectImpl.Container implements org.integratedmodelling.kdl.kdl.Number
{
  /**
   * The default value of the '{@link #isNegative() <em>Negative</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegative()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegative() <em>Negative</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegative()
   * @generated
   * @ordered
   */
  protected boolean negative = NEGATIVE_EDEFAULT;

  /**
   * The default value of the '{@link #getReal() <em>Real</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReal()
   * @generated
   * @ordered
   */
  protected static final int REAL_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getReal() <em>Real</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReal()
   * @generated
   * @ordered
   */
  protected int real = REAL_EDEFAULT;

  /**
   * The default value of the '{@link #isDecimal() <em>Decimal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDecimal()
   * @generated
   * @ordered
   */
  protected static final boolean DECIMAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDecimal() <em>Decimal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDecimal()
   * @generated
   * @ordered
   */
  protected boolean decimal = DECIMAL_EDEFAULT;

  /**
   * The default value of the '{@link #getDecimalPart() <em>Decimal Part</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecimalPart()
   * @generated
   * @ordered
   */
  protected static final int DECIMAL_PART_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDecimalPart() <em>Decimal Part</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecimalPart()
   * @generated
   * @ordered
   */
  protected int decimalPart = DECIMAL_PART_EDEFAULT;

  /**
   * The default value of the '{@link #isExponential() <em>Exponential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExponential()
   * @generated
   * @ordered
   */
  protected static final boolean EXPONENTIAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isExponential() <em>Exponential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExponential()
   * @generated
   * @ordered
   */
  protected boolean exponential = EXPONENTIAL_EDEFAULT;

  /**
   * The default value of the '{@link #isExpNegative() <em>Exp Negative</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExpNegative()
   * @generated
   * @ordered
   */
  protected static final boolean EXP_NEGATIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isExpNegative() <em>Exp Negative</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExpNegative()
   * @generated
   * @ordered
   */
  protected boolean expNegative = EXP_NEGATIVE_EDEFAULT;

  /**
   * The default value of the '{@link #getExp() <em>Exp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected static final int EXP_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected int exp = EXP_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NumberImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KdlPackage.Literals.NUMBER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNegative()
  {
    return negative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNegative(boolean newNegative)
  {
    boolean oldNegative = negative;
    negative = newNegative;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.NUMBER__NEGATIVE, oldNegative, negative));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getReal()
  {
    return real;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReal(int newReal)
  {
    int oldReal = real;
    real = newReal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.NUMBER__REAL, oldReal, real));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDecimal()
  {
    return decimal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecimal(boolean newDecimal)
  {
    boolean oldDecimal = decimal;
    decimal = newDecimal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.NUMBER__DECIMAL, oldDecimal, decimal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getDecimalPart()
  {
    return decimalPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecimalPart(int newDecimalPart)
  {
    int oldDecimalPart = decimalPart;
    decimalPart = newDecimalPart;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.NUMBER__DECIMAL_PART, oldDecimalPart, decimalPart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isExponential()
  {
    return exponential;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExponential(boolean newExponential)
  {
    boolean oldExponential = exponential;
    exponential = newExponential;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.NUMBER__EXPONENTIAL, oldExponential, exponential));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isExpNegative()
  {
    return expNegative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpNegative(boolean newExpNegative)
  {
    boolean oldExpNegative = expNegative;
    expNegative = newExpNegative;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.NUMBER__EXP_NEGATIVE, oldExpNegative, expNegative));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExp(int newExp)
  {
    int oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.NUMBER__EXP, oldExp, exp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KdlPackage.NUMBER__NEGATIVE:
        return isNegative();
      case KdlPackage.NUMBER__REAL:
        return getReal();
      case KdlPackage.NUMBER__DECIMAL:
        return isDecimal();
      case KdlPackage.NUMBER__DECIMAL_PART:
        return getDecimalPart();
      case KdlPackage.NUMBER__EXPONENTIAL:
        return isExponential();
      case KdlPackage.NUMBER__EXP_NEGATIVE:
        return isExpNegative();
      case KdlPackage.NUMBER__EXP:
        return getExp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KdlPackage.NUMBER__NEGATIVE:
        setNegative((Boolean)newValue);
        return;
      case KdlPackage.NUMBER__REAL:
        setReal((Integer)newValue);
        return;
      case KdlPackage.NUMBER__DECIMAL:
        setDecimal((Boolean)newValue);
        return;
      case KdlPackage.NUMBER__DECIMAL_PART:
        setDecimalPart((Integer)newValue);
        return;
      case KdlPackage.NUMBER__EXPONENTIAL:
        setExponential((Boolean)newValue);
        return;
      case KdlPackage.NUMBER__EXP_NEGATIVE:
        setExpNegative((Boolean)newValue);
        return;
      case KdlPackage.NUMBER__EXP:
        setExp((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KdlPackage.NUMBER__NEGATIVE:
        setNegative(NEGATIVE_EDEFAULT);
        return;
      case KdlPackage.NUMBER__REAL:
        setReal(REAL_EDEFAULT);
        return;
      case KdlPackage.NUMBER__DECIMAL:
        setDecimal(DECIMAL_EDEFAULT);
        return;
      case KdlPackage.NUMBER__DECIMAL_PART:
        setDecimalPart(DECIMAL_PART_EDEFAULT);
        return;
      case KdlPackage.NUMBER__EXPONENTIAL:
        setExponential(EXPONENTIAL_EDEFAULT);
        return;
      case KdlPackage.NUMBER__EXP_NEGATIVE:
        setExpNegative(EXP_NEGATIVE_EDEFAULT);
        return;
      case KdlPackage.NUMBER__EXP:
        setExp(EXP_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KdlPackage.NUMBER__NEGATIVE:
        return negative != NEGATIVE_EDEFAULT;
      case KdlPackage.NUMBER__REAL:
        return real != REAL_EDEFAULT;
      case KdlPackage.NUMBER__DECIMAL:
        return decimal != DECIMAL_EDEFAULT;
      case KdlPackage.NUMBER__DECIMAL_PART:
        return decimalPart != DECIMAL_PART_EDEFAULT;
      case KdlPackage.NUMBER__EXPONENTIAL:
        return exponential != EXPONENTIAL_EDEFAULT;
      case KdlPackage.NUMBER__EXP_NEGATIVE:
        return expNegative != EXP_NEGATIVE_EDEFAULT;
      case KdlPackage.NUMBER__EXP:
        return exp != EXP_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (negative: ");
    result.append(negative);
    result.append(", real: ");
    result.append(real);
    result.append(", decimal: ");
    result.append(decimal);
    result.append(", decimalPart: ");
    result.append(decimalPart);
    result.append(", exponential: ");
    result.append(exponential);
    result.append(", expNegative: ");
    result.append(expNegative);
    result.append(", exp: ");
    result.append(exp);
    result.append(')');
    return result.toString();
  }

} //NumberImpl
