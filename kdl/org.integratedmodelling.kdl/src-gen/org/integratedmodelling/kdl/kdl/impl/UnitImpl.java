/**
 * generated by Xtext 2.27.0
 */
package org.integratedmodelling.kdl.kdl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kdl.kdl.KdlPackage;
import org.integratedmodelling.kdl.kdl.Unit;
import org.integratedmodelling.kdl.kdl.UnitElement;
import org.integratedmodelling.kdl.kdl.UnitOp;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Unit</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.UnitImpl#getRoot <em>Root</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.UnitImpl#getConnectors <em>Connectors</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.UnitImpl#getUnits <em>Units</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UnitImpl extends MinimalEObjectImpl.Container implements Unit
{
  /**
   * The cached value of the '{@link #getRoot() <em>Root</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoot()
   * @generated
   * @ordered
   */
  protected UnitElement root;

  /**
   * The cached value of the '{@link #getConnectors() <em>Connectors</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnectors()
   * @generated
   * @ordered
   */
  protected EList<UnitOp> connectors;

  /**
   * The cached value of the '{@link #getUnits() <em>Units</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnits()
   * @generated
   * @ordered
   */
  protected EList<UnitElement> units;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UnitImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KdlPackage.Literals.UNIT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitElement getRoot()
  {
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRoot(UnitElement newRoot, NotificationChain msgs)
  {
    UnitElement oldRoot = root;
    root = newRoot;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdlPackage.UNIT__ROOT, oldRoot, newRoot);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoot(UnitElement newRoot)
  {
    if (newRoot != root)
    {
      NotificationChain msgs = null;
      if (root != null)
        msgs = ((InternalEObject)root).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdlPackage.UNIT__ROOT, null, msgs);
      if (newRoot != null)
        msgs = ((InternalEObject)newRoot).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdlPackage.UNIT__ROOT, null, msgs);
      msgs = basicSetRoot(newRoot, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.UNIT__ROOT, newRoot, newRoot));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UnitOp> getConnectors()
  {
    if (connectors == null)
    {
      connectors = new EDataTypeEList<UnitOp>(UnitOp.class, this, KdlPackage.UNIT__CONNECTORS);
    }
    return connectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UnitElement> getUnits()
  {
    if (units == null)
    {
      units = new EObjectContainmentEList<UnitElement>(UnitElement.class, this, KdlPackage.UNIT__UNITS);
    }
    return units;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KdlPackage.UNIT__ROOT:
        return basicSetRoot(null, msgs);
      case KdlPackage.UNIT__UNITS:
        return ((InternalEList<?>)getUnits()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KdlPackage.UNIT__ROOT:
        return getRoot();
      case KdlPackage.UNIT__CONNECTORS:
        return getConnectors();
      case KdlPackage.UNIT__UNITS:
        return getUnits();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KdlPackage.UNIT__ROOT:
        setRoot((UnitElement)newValue);
        return;
      case KdlPackage.UNIT__CONNECTORS:
        getConnectors().clear();
        getConnectors().addAll((Collection<? extends UnitOp>)newValue);
        return;
      case KdlPackage.UNIT__UNITS:
        getUnits().clear();
        getUnits().addAll((Collection<? extends UnitElement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KdlPackage.UNIT__ROOT:
        setRoot((UnitElement)null);
        return;
      case KdlPackage.UNIT__CONNECTORS:
        getConnectors().clear();
        return;
      case KdlPackage.UNIT__UNITS:
        getUnits().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KdlPackage.UNIT__ROOT:
        return root != null;
      case KdlPackage.UNIT__CONNECTORS:
        return connectors != null && !connectors.isEmpty();
      case KdlPackage.UNIT__UNITS:
        return units != null && !units.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (connectors: ");
    result.append(connectors);
    result.append(')');
    return result.toString();
  }

} //UnitImpl
