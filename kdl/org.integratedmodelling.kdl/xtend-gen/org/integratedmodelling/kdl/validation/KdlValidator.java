/**
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kdl.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.integratedmodelling.kdl.kdl.ActorDefinition;
import org.integratedmodelling.kdl.kdl.DataflowBody;
import org.integratedmodelling.kdl.kdl.KdlPackage;
import org.integratedmodelling.kdl.kdl.Model;

/**
 * Only basic validation for now.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class KdlValidator extends AbstractKdlValidator {
  @Check
  public Object checkDataflowBody(final DataflowBody body) {
    return null;
  }

  @Check
  public void checkActorDefinition(final ActorDefinition actor) {
    if (((actor.getTargets().size() > 0) && (!Objects.equal(actor.getType(), "annotation")))) {
      this.error("Only annotations can specify their targets", actor, KdlPackage.Literals.ACTOR_DEFINITION__TARGETS);
    }
    if (((actor.isParameter() && actor.isOptional()) && (actor.getDefault() == null))) {
      this.error("Optional parameters must specify a default value", actor, 
        KdlPackage.Literals.ACTOR_DEFINITION__OPTIONAL);
    }
    if (((actor.isAbstract() || (actor.getExtended() != null)) && (!(actor.eContainer() instanceof Model)))) {
      EAttribute _xifexpression = null;
      boolean _isAbstract = actor.isAbstract();
      if (_isAbstract) {
        _xifexpression = KdlPackage.Literals.ACTOR_DEFINITION__ABSTRACT;
      } else {
        _xifexpression = KdlPackage.Literals.ACTOR_DEFINITION__EXTENDED;
      }
      this.error("abstract actors and extensions are only allowed at top level", actor, _xifexpression);
    }
    if ((actor.isFilter() && (!(actor.eContainer() instanceof Model)))) {
      EAttribute _xifexpression_1 = null;
      boolean _isAbstract_1 = actor.isAbstract();
      if (_isAbstract_1) {
        _xifexpression_1 = KdlPackage.Literals.ACTOR_DEFINITION__ABSTRACT;
      } else {
        _xifexpression_1 = KdlPackage.Literals.ACTOR_DEFINITION__EXTENDED;
      }
      this.error("processing actors and extensions are only allowed at top level", actor, _xifexpression_1);
    }
    if ((((actor.getType() != null) && (actor.getType() == "enum")) && actor.getEnumValues().isEmpty())) {
      this.error("Enum parameters must specify all enum values with \'values\'", actor, 
        KdlPackage.Literals.ACTOR_DEFINITION__TYPE);
    } else {
      if ((((actor.getDefault() != null) && (!actor.getEnumValues().isEmpty())) && (actor.getDefault().getEnumId() != null))) {
        boolean _contains = actor.getEnumValues().contains(actor.getDefault().getEnumId());
        boolean _not = (!_contains);
        if (_not) {
          this.error("The default value is not one of the allowed enum values", actor, 
            KdlPackage.Literals.ACTOR_DEFINITION__DEFAULT);
        }
      } else {
        if ((((actor.getDefault() != null) && (actor.getDefault().getEnumId() != null)) && actor.getEnumValues().isEmpty())) {
          this.error("Using an identifier as default is only allowed in enum typed parameters", actor, 
            KdlPackage.Literals.ACTOR_DEFINITION__DEFAULT);
        }
      }
    }
    if ((actor.isFilter() && (!Objects.equal(actor.getType(), "extent")))) {
      boolean ok = false;
      if ((((actor.getBody() != null) && (actor.getBody().getDataflows() != null)) && (actor.getBody().getDataflows().size() > 0))) {
        EList<ActorDefinition> _dataflows = actor.getBody().getDataflows();
        for (final ActorDefinition child : _dataflows) {
          boolean _isImported = child.isImported();
          if (_isImported) {
            ok = true;
          }
        }
      }
      if ((!ok)) {
        this.error("Actors declared as filters must import at least one artifact", actor, 
          KdlPackage.Literals.ACTOR_DEFINITION__DEFAULT);
      }
    }
  }

  public Model getDataflow(final EObject o) {
    EObject ob = o;
    while (((ob != null) && (!(ob.eContainer() instanceof Model)))) {
      ob = ob.eContainer();
    }
    Model _xifexpression = null;
    EObject _eContainer = ob.eContainer();
    if ((_eContainer instanceof Model)) {
      EObject _eContainer_1 = ob.eContainer();
      _xifexpression = ((Model) _eContainer_1);
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
}
